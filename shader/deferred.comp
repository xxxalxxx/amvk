#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_shader_image_load_store : enable

#define WORK_GROUP_SIZE 16
#define MAX_LIGHTS 1024

// for 255 range multiply by more, since numbers like 0.999 will already be converted to 254 
// avoid negative byte since 7 = 0111 in binary

#define TO_FLOAT(x) (float(x) / 0x7fffffff)
#define TO_UINT(x) uint(x * 0x7fffffff)

#define UNPACK_NORMAL_Z(n) sqrt(abs(1.0 - n.x * n.x - n.y * n.y))

#define LINEARIZE_DEPTH(proj, depth) (proj[3][2] / (proj[2][3] * depth - proj[2][2]))
#define LINEARIZE_DEPTH_RH(proj, depth) (proj[3][2] / (-depth - proj[2][2]))

#define PROJ_DEPTH(proj, vz) (proj[2][2] / proj[2][3] + proj[2][3] * proj[3][2] / vz)
#define PROJ_DEPTH_RH(proj, vz) (-proj[2][2] - proj[3][2] / vz)

#define UNPROJ_X_RH(proj, x, vz) (-(vz) * (x) / proj[0][0])
#define UNPROJ_Y_RH(proj, y, vz) (-(vz) * (y) / proj[1][1])
#define UNPROJ_XY_RH(proj, x, y, vz) (-vz * vec2((x) / proj[0][0], (y) / proj[1][1]))
#define UNPROJ_XYZ_RH(proj, ndc, vz) vec3(-vz * ndc.x / proj[0][0], -vz * ndc.y / proj[1][1], vz)

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
	float pad;
};

layout (binding = 0, rgba8) uniform image2D outImage;
layout (binding = 1, rgba16f) uniform readonly image2D imageNormal;
layout (binding = 2, r32f) uniform readonly image2D imageDepth;
layout (binding = 3, rgba8) uniform readonly image2D imageAlbedo;

layout(binding = 4) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
	vec2 textureDimens;
	uint lightCount;
} ubo;

layout (std430, binding = 5) buffer BufferObject {
    PointLight pointLights[];
};


layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visiblePointLightIndices[MAX_LIGHTS];
shared uint visiblePointLightCount;

void main() {

	if (gl_LocalInvocationIndex == 0) {
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visiblePointLightCount = 0;
	}

	memoryBarrierShared();
	barrier();
	
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

	vec3 normal = imageLoad(imageNormal, pixelPos).xyz;

	float depth = imageLoad(imageDepth, pixelPos).r;
    uint depthInt = TO_UINT(depth);

	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);

	memoryBarrierShared();
	barrier();

	float minDepth = TO_FLOAT(minDepthInt);
	float maxDepth = TO_FLOAT(maxDepthInt);

	float linearMinDepth = LINEARIZE_DEPTH_RH(ubo.proj, minDepth);
	float linearMaxDepth = LINEARIZE_DEPTH_RH(ubo.proj, maxDepth); 

	// D = -dot(n, p)
	vec2 tileDimens = ubo.textureDimens / WORK_GROUP_SIZE; 
	// total tiles = tileScale * 2
	vec2 tileScale = ubo.textureDimens / float(2 * WORK_GROUP_SIZE);
	vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

	vec4 c1 = vec4(-ubo.proj[0][0] * tileScale.x, 0.0, tileBias.x, 0.0);
	vec4 c2 = vec4(0.0, -ubo.proj[1][1] * tileScale.y, tileBias.y, 0.0);
	vec4 c4 = vec4(0.0, 0.0, -1.0, 0.0);

	// sides
	vec4 frustumPlanes[6];
	frustumPlanes[0] = c1 + c4; // left
	frustumPlanes[1] = c4 - c1; // right
	frustumPlanes[2] = c2 + c4; // top
	frustumPlanes[3] = c4 - c2; // bottom
	frustumPlanes[5] = vec4(0.0, 0.0, 1.0, -linearMaxDepth);  // far
	frustumPlanes[4] = vec4(0.0, 0.0, -1.0, -linearMinDepth); // near

	frustumPlanes[0] /= length(frustumPlanes[0].xyz);
	frustumPlanes[1] /= length(frustumPlanes[1].xyz);
	frustumPlanes[2] /= length(frustumPlanes[2].xyz);
	frustumPlanes[3] /= length(frustumPlanes[3].xyz);

	uint threadCount = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	uint passCount = (ubo.lightCount + threadCount - 1) / threadCount;
	uint lastLight = ubo.lightCount - 1;

	for (uint passIt = 0; passIt < passCount; ++passIt) {
		uint lightIndex = passIt * threadCount + gl_LocalInvocationIndex;
		lightIndex = min(lightIndex, lastLight);	
		vec4 lightPos = ubo.view * vec4(pointLights[lightIndex].position, 1.0);
		float radius = pointLights[lightIndex].radius;
		
		bool inFrustum = true;
		for (uint i = 0; i < 6; ++i) {
			float d = dot(frustumPlanes[i], lightPos);
			inFrustum = inFrustum && (d >= -radius);
		}

		if (inFrustum) {
			uint offset = atomicAdd(visiblePointLightCount, 1);
			visiblePointLightIndices[offset] = lightIndex;
		}
	}

	memoryBarrierShared();
	barrier();

	vec2 ndc = 2.0 * vec2(pixelPos) / ubo.textureDimens - 1.0;
	float vz = LINEARIZE_DEPTH_RH(ubo.proj, depth);
	vec3 posVS = UNPROJ_XYZ_RH(ubo.proj, ndc, vz);

	vec4 albedoColor = imageLoad(imageAlbedo, pixelPos);
	vec3 color = albedoColor.rgb * 0.2;

//    bool rightHalf = pixelPos.y > ubo.textureDimens.y / 2;
	
	for (uint lightIt = 0; lightIt < visiblePointLightCount; ++lightIt) {

		uint lightIndex = visiblePointLightIndices[lightIt];
		float lightRadius = pointLights[lightIndex].radius;
		vec3 lightColor = pointLights[lightIndex].color;

		vec4 lightPos = ubo.view * vec4(pointLights[lightIndex].position, 1.0);
		// Vector to light
		vec3 L = lightPos.xyz - posVS;
		// Distance from light to fragment position
		float dist = length(L);
		L = normalize(L);
		// Viewer to fragment
		vec3 V = -normalize(posVS);
		// Attenuation
		float atten = lightRadius / (dist * dist + 1.0);
		float borderAtten = lightRadius / (lightRadius * lightRadius + 1.0);
		float scaleAtten = lightRadius / (lightRadius - borderAtten);
		atten = max(0.0, scaleAtten * (atten - borderAtten));

		// Diffuse part
		float NdotL = max(0.0, dot(normal, L));
		vec3 diff = lightColor * albedoColor.rgb * NdotL * atten;
		color += 0.8 * diff;
	}
	
	vec4 result = vec4(color, 1.0); 
	imageStore(outImage, pixelPos, result);
}

