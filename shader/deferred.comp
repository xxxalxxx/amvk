#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_shader_image_load_store : enable

#define WORK_GROUP_SIZE 32
#define MAX_LIGHTS 256
// for 255 range multiply by more, since numbers like 0.999 will already be converted to 254 
// avoid negative byte since 7 = 0111 in binary
#define TO_FLOAT(x) (float(x) / 0x7fffffff)
#define TO_UINT(x) uint(x * 0x7fffffff)

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};

layout (binding = 0, rgba8) uniform image2D outImage;
layout (binding = 1, rgba16f) uniform readonly image2D imageNormalDepth;
layout (binding = 2, rgba16f) uniform readonly image2D imagePositionWS;
layout (binding = 3, rgba8) uniform readonly image2D imageAlbedo;

layout(binding = 4) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
	mat4 invViewProj;
	vec3 eyePos;
	vec2 textureDimens;
	uint lightCount;
} ubo;

layout (std430, binding = 5) buffer BufferObject {
    PointLight pointLights[];
};


layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visiblePointLightIndices[MAX_LIGHTS];
shared uint visiblePointLightCount;
shared vec2 tilePos;

shared uvec2 tileTopLeft; 
shared uvec2 tileBottomRight;
shared vec2 tileTopLeftNdc;
shared vec2 tileBottomRightNdc;

void main() {


	if (gl_LocalInvocationIndex == 0) {
		vec2 texCoord = vec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy) / ubo.textureDimens;
		tilePos = 2.0 * texCoord - 1.0;
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visiblePointLightCount = 0;

		tileTopLeft = gl_WorkGroupID.xy * gl_WorkGroupSize.xy; 
		tileBottomRight = tileTopLeft + gl_WorkGroupSize.xy;
		tileTopLeftNdc = 2.0 * tileTopLeft / ubo.textureDimens - 1.0;
		tileBottomRightNdc = 2.0 * tileBottomRight / ubo.textureDimens - 1.0;
	}

	memoryBarrierShared();
	barrier();
	
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);


	vec4 normalDepth = imageLoad(imageNormalDepth, pixelPos);
	vec3 normal = vec3(normalDepth);
	float depth = normalDepth.w;
    uint depthInt = TO_UINT(depth);

	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);

	memoryBarrierShared();
	barrier();

	float minDepth = TO_FLOAT(minDepthInt);
	float maxDepth = TO_FLOAT(maxDepthInt);
	
	// D = -dot(n, p)
	vec2 tileDimens = ubo.textureDimens / WORK_GROUP_SIZE; 
	// total tiles = tileScale * 2
	vec2 tileScale = ubo.textureDimens / float(2 * WORK_GROUP_SIZE);
	vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

	vec4 c1 = vec4(-ubo.proj[0][0] * tileScale.x, 0.0, tileBias.x, 0.0);
	vec4 c2 = vec4(0.0, -ubo.proj[1][1] * tileScale.y, tileBias.y, 0.0);
	vec4 c4 = vec4(0.0, 0.0, -1.0, 0.0);

	// sides
	vec4 frustumPlanes[6];
	frustumPlanes[0] = c1 + c4; // left
	frustumPlanes[1] = c4 - c1; // right
	frustumPlanes[2] = c2 + c4; // top
	frustumPlanes[3] = c4 - c2; // bottom
	frustumPlanes[4] = vec4(0.0, 0.0, 1.0, -minDepth); // near
	frustumPlanes[5] = vec4(0.0, 0.0,  -1.0,  maxDepth); // far

	frustumPlanes[0] /= length(frustumPlanes[0].xyz);
	frustumPlanes[1] /= length(frustumPlanes[1].xyz);
	frustumPlanes[2] /= length(frustumPlanes[2].xyz);
	frustumPlanes[3] /= length(frustumPlanes[3].xyz);


	uint threadCount = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	uint passCount = (ubo.lightCount + threadCount - 1) / threadCount;

//	for (uint lightIndex = gl_LocalInvocationIndex; lightIndex < ubo.lightCount; lightIndex += WORK_GROUP_SIZE) {
	for (uint passIt = 0; passIt < passCount; ++passIt) {
		uint lightIndex = passIt * threadCount + gl_LocalInvocationIndex;
		lightIndex = min(lightIndex, ubo.lightCount);
		vec4 lightPos = ubo.view * vec4(pointLights[lightIndex].position, 1.0);
		float radius = pointLights[lightIndex].radius;
		
		bool inFrustum = true;
		for (uint i = 0; i < 4; ++i) {
			float d = dot(frustumPlanes[i], lightPos);
            inFrustum = inFrustum && (d >= -radius);
		}
		//inFrustum = true;
		if (inFrustum) {
			uint offset = atomicAdd(visiblePointLightCount, 1);
			visiblePointLightIndices[offset] = lightIndex;
		}
	}

	memoryBarrierShared();
	barrier();
	vec4 positionWS = imageLoad(imagePositionWS, pixelPos);
	vec4 albedoColor = imageLoad(imageAlbedo, pixelPos);
	vec2 texCoord = vec2(pixelPos) / ubo.textureDimens;
	vec2 proj = 2.0 * texCoord - 1.0;
	vec4 position = ubo.invViewProj * vec4(proj, depth, 1.0); 
	vec3 posWS = position.xyz / position.w;

	vec3 color = albedoColor.rgb * 0.4;
	vec3 c = vec3(0.0, 0.0, 0.0);
//for (uint lightIt = 0; lightIt < ubo.lightCount; ++lightIt) {
	for (uint lightIt = 0; lightIt < visiblePointLightCount; ++lightIt) {
		uint lightIndex = 
//lightIt;
visiblePointLightIndices[lightIt];
		vec3 lightPosWS = pointLights[lightIndex].position;
		float lightRadius = pointLights[lightIndex].radius;
		vec3 lightColor = pointLights[lightIndex].color;

		// Vector to light
		vec3 L = lightPosWS - positionWS.xyz;
		// Distance from light to fragment position
		float dist = length(L);
		L = normalize(L);

		// Viewer to fragment
		vec3 V = normalize(ubo.eyePos - positionWS.xyz);

		// Attenuation
		float atten = lightRadius / (pow(dist, 2.0) + 1.0);
		float borderAtten = lightRadius / (pow(lightRadius, 2.0) + 1.0);
		float scaleAtten = lightRadius / (lightRadius - borderAtten);
		atten = max(0.0, scaleAtten * (atten - borderAtten));

		// Diffuse part
		float NdotL = max(0.0, dot(normal, L));
		vec3 diff = lightColor * albedoColor.rgb * NdotL * atten;
		color += 0.5 * diff;
		c = lightColor * NdotL * atten;	
	}


	vec4 red = vec4(1.0, 0.0, 0.0, 1.0);
	vec2 dim = vec2(ubo.textureDimens);
	vec4 borderColor = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 firstLight = ubo.proj * ubo.view * vec4(pointLights[0].position, 1.0);
	vec4 firstLightWS = vec4(pointLights[0].position, 1.0);
	vec4 result =
//vec4(color, 1.0) + vec4(float(visiblePointLightCount) / ubo.lightCount); 
vec4(color, 1.0); 
//vec4(c, 1.0);
//vec4(posWS - positionWS.xyz, 1.0);
//vec4(float(maxDepth) - float(minDepth));
//vec4(float(visiblePointLightCount) / ubo.lightCount);
//albedoColor;
//vec4(positionWS.xyz, 1.0);
/*
	if (pixelPos.x - tileTopLeft.x < 1) {
		result = borderColor;
	}

	if (pixelPos.y - tileTopLeft.y < 1) {
		result = borderColor;
	}
*/

	if (tileBottomRight.x - pixelPos.x == 1) {
		result = borderColor;
	}

	if (tileBottomRight.y - pixelPos.y == 1) {
		result = borderColor;
	}
/*
	if (length(positionWS.xyz - pointLights[0].position) < pointLights[0].radius) {
		result = red;
	}

/*
	if (length(proj.x - firstLight.x / firstLight.w) < WORK_GROUP_SIZE / ubo.textureDimens.x 
	&& length(proj.y - firstLight.y / firstLight.w) < WORK_GROUP_SIZE / ubo.textureDimens.y) {
		result = red;
	}
*/

	imageStore(outImage, pixelPos, result);
}

