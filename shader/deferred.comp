#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define WORK_GROUP_SIZE 16
#define MAX_LIGHTS 1024
#define MAX_LIGHTS_PER_TILE 40

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};

layout (binding = 0, rgba8) uniform writeonly image2D outImage;
layout (binding = 1, rgba16f) uniform readonly image2D imageNormalDepth;
layout (binding = 2, rgba16f) uniform readonly image2D imageAlbedo;

layout(binding = 4) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
	vec3 eyePos;
	vec2 textureDimens;
	int lightCount;
} ubo;

layout (std430, binding = 5) buffer LightsBufferObject {
    PointLight pointLights[];
};


layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visiblePointLights[MAX_LIGHTS];
shared uint visiblePointLightCount;

void main() {

	if (gl_LocalInvocationIndex == 0) {
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visiblePointLightCount = 0;
	}

	memoryBarrierShared();
	barrier();
	
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
	float depth = imageLoad(imageNormalDepth, pixelPos).w;
    uint depthInt = uint(depth * 0xFFFFFFFF);
	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);

	memoryBarrierShared();
	barrier();

	float minDepth = float(minDepthInt / float(0xFFFFFFFF));
	float maxDepth = float(maxDepthInt / float(0xFFFFFFFF));

    vec2 tilePos = vec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy) / ubo.textureDimens;
	vec4 normalColor = imageLoad(imageNormal, pixelPos);
	vec4 albedoColor = imageLoad(imageAlbedo, pixelPos);

	imageStore(outImage, pixelPos, normalColor);
}

