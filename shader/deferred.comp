#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define WORK_GROUP_SIZE 16
#define MAX_LIGHTS 1024
#define MAX_LIGHTS_PER_TILE 40

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};




layout (binding = 0) uniform writeonly image2D outImage;
layout (binding = 1) uniform sampler2D samplerNormal;
layout (binding = 2) uniform sampler2D samplerAlbedo;
layout (binding = 3) uniform sampler2D samplerDepth;

layout(binding = 4) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
	vec3 eyePos;
	vec2 textureDimens;
} ubo;

layout (std430, binding = 5) buffer LightsBufferObject {
    PointLight pointLights[];
};


layout (local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

shared uint minDepth;
shared uint maxDepth;
shared uint pointLightIndex[MAX_LIGHTS];
shared uint pointLightCount;

void main() {
	if ((gl_LocalInvocationID.x | gl_LocalInvocationID.y) == 0) {
		minDepth = 0xFFFFFFFF;
		maxDepth = 0;
		pointLightCount = 0;
	}
	memoryBarrierShared();
	barrier();

	vec2 texCoord = vec2(gl_GlobalInvocationID.xy) / ubo.textureDimens;
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 tilePos = vec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy) / ubo.textureDimens;
	vec4 normalColor = texture(samplerNormal, texCoord);
	
	barrier();
}

