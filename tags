!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AI_AISTRING	lib/__assimp/metadata.h	/^    AI_AISTRING   = 5,$/;"	e	enum:aiMetadataType
AI_AISTRING	lib/assimp/metadata.h	/^    AI_AISTRING = 4,$/;"	e	enum:aiMetadataType
AI_AIVECTOR3D	lib/__assimp/metadata.h	/^    AI_AIVECTOR3D = 6,$/;"	e	enum:aiMetadataType
AI_AIVECTOR3D	lib/assimp/metadata.h	/^    AI_AIVECTOR3D = 5,$/;"	e	enum:aiMetadataType
AI_ANDROIDJNIIOSYSTEM_H_INC	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	46;"	d
AI_ANIM_H_INC	lib/__assimp/anim.h	49;"	d
AI_ANIM_H_INC	lib/assimp/anim.h	47;"	d
AI_ASSERT_H_INC	lib/__assimp/ai_assert.h	43;"	d
AI_ASSIMP_HPP_INC	lib/__assimp/Importer.hpp	47;"	d
AI_ASSIMP_H_INC	lib/__assimp/cimport.h	47;"	d
AI_ASSIMP_H_INC	lib/assimp/cimport.h	46;"	d
AI_BOOL	lib/__assimp/metadata.h	/^    AI_BOOL       = 0,$/;"	e	enum:aiMetadataType
AI_BOOL	lib/assimp/metadata.h	/^    AI_BOOL = 0,$/;"	e	enum:aiMetadataType
AI_BUILD_BIG_ENDIAN	lib/__assimp/defs.h	279;"	d
AI_BUILD_BIG_ENDIAN	lib/assimp/defs.h	261;"	d
AI_CAMERA_H_INC	lib/__assimp/camera.h	48;"	d
AI_CAMERA_H_INC	lib/assimp/camera.h	47;"	d
AI_COLOR4D_H_INC	lib/__assimp/color4.h	46;"	d
AI_COLOR4D_H_INC	lib/assimp/color4.h	45;"	d
AI_CONFIG_ANDROID_JNI_ASSIMP_MANAGER_SUPPORT	lib/assimp/config.h	860;"	d
AI_CONFIG_EXPORT_XFILE_64BIT	lib/assimp/config.h	905;"	d
AI_CONFIG_FAVOUR_SPEED	lib/assimp/config.h	523;"	d
AI_CONFIG_GLOB_MEASURE_TIME	lib/assimp/config.h	77;"	d
AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION	lib/assimp/config.h	676;"	d
AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL	lib/assimp/config.h	665;"	d
AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS	lib/assimp/config.h	708;"	d
AI_CONFIG_IMPORT_COLLADA_IGNORE_UP_DIRECTION	lib/assimp/config.h	896;"	d
AI_CONFIG_IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES	lib/assimp/config.h	631;"	d
AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS	lib/assimp/config.h	620;"	d
AI_CONFIG_IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS	lib/assimp/config.h	540;"	d
AI_CONFIG_IMPORT_FBX_READ_ALL_MATERIALS	lib/assimp/config.h	552;"	d
AI_CONFIG_IMPORT_FBX_READ_ANIMATIONS	lib/assimp/config.h	597;"	d
AI_CONFIG_IMPORT_FBX_READ_CAMERAS	lib/assimp/config.h	579;"	d
AI_CONFIG_IMPORT_FBX_READ_LIGHTS	lib/assimp/config.h	588;"	d
AI_CONFIG_IMPORT_FBX_READ_MATERIALS	lib/assimp/config.h	561;"	d
AI_CONFIG_IMPORT_FBX_READ_TEXTURES	lib/assimp/config.h	570;"	d
AI_CONFIG_IMPORT_FBX_STRICT_MODE	lib/assimp/config.h	609;"	d
AI_CONFIG_IMPORT_GLOBAL_KEYFRAME	lib/assimp/config.h	649;"	d
AI_CONFIG_IMPORT_IFC_CUSTOM_TRIANGULATION	lib/assimp/config.h	887;"	d
AI_CONFIG_IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS	lib/assimp/config.h	872;"	d
AI_CONFIG_IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS	lib/assimp/config.h	852;"	d
AI_CONFIG_IMPORT_IRR_ANIM_FPS	lib/assimp/config.h	810;"	d
AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY	lib/assimp/config.h	764;"	d
AI_CONFIG_IMPORT_LWS_ANIM_END	lib/assimp/config.h	799;"	d
AI_CONFIG_IMPORT_LWS_ANIM_START	lib/assimp/config.h	797;"	d
AI_CONFIG_IMPORT_MD2_KEYFRAME	lib/assimp/config.h	652;"	d
AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART	lib/assimp/config.h	720;"	d
AI_CONFIG_IMPORT_MD3_KEYFRAME	lib/assimp/config.h	651;"	d
AI_CONFIG_IMPORT_MD3_SHADER_SRC	lib/assimp/config.h	750;"	d
AI_CONFIG_IMPORT_MD3_SKIN_NAME	lib/assimp/config.h	732;"	d
AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD	lib/assimp/config.h	778;"	d
AI_CONFIG_IMPORT_MDC_KEYFRAME	lib/assimp/config.h	654;"	d
AI_CONFIG_IMPORT_MDL_COLORMAP	lib/assimp/config.h	186;"	d
AI_CONFIG_IMPORT_MDL_KEYFRAME	lib/assimp/config.h	653;"	d
AI_CONFIG_IMPORT_NO_SKELETON_MESHES	lib/assimp/config.h	89;"	d
AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE	lib/assimp/config.h	823;"	d
AI_CONFIG_IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME	lib/assimp/config.h	843;"	d
AI_CONFIG_IMPORT_SMD_KEYFRAME	lib/assimp/config.h	655;"	d
AI_CONFIG_IMPORT_TER_MAKE_UVS	lib/assimp/config.h	698;"	d
AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS	lib/assimp/config.h	685;"	d
AI_CONFIG_IMPORT_UNREAL_KEYFRAME	lib/assimp/config.h	656;"	d
AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE	lib/assimp/config.h	147;"	d
AI_CONFIG_PP_CT_TEXTURE_CHANNEL_INDEX	lib/assimp/config.h	157;"	d
AI_CONFIG_PP_DB_ALL_OR_NONE	lib/assimp/config.h	355;"	d
AI_CONFIG_PP_DB_THRESHOLD	lib/assimp/config.h	341;"	d
AI_CONFIG_PP_FD_REMOVE	lib/assimp/config.h	265;"	d
AI_CONFIG_PP_FID_ANIM_ACCURACY	lib/assimp/config.h	487;"	d
AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE	lib/assimp/config.h	172;"	d
AI_CONFIG_PP_ICL_PTCACHE_SIZE	lib/assimp/config.h	375;"	d
AI_CONFIG_PP_LBW_MAX_WEIGHTS	lib/assimp/config.h	327;"	d
AI_CONFIG_PP_OG_EXCLUDE_LIST	lib/assimp/config.h	286;"	d
AI_CONFIG_PP_PTV_ADD_ROOT_TRANSFORMATION	lib/assimp/config.h	242;"	d
AI_CONFIG_PP_PTV_KEEP_HIERARCHY	lib/assimp/config.h	223;"	d
AI_CONFIG_PP_PTV_NORMALIZE	lib/assimp/config.h	233;"	d
AI_CONFIG_PP_PTV_ROOT_TRANSFORMATION	lib/assimp/config.h	252;"	d
AI_CONFIG_PP_RRM_EXCLUDE_LIST	lib/assimp/config.h	208;"	d
AI_CONFIG_PP_RVC_FLAGS	lib/assimp/config.h	463;"	d
AI_CONFIG_PP_SBBC_MAX_BONES	lib/assimp/config.h	129;"	d
AI_CONFIG_PP_SBP_REMOVE	lib/assimp/config.h	475;"	d
AI_CONFIG_PP_SLM_TRIANGLE_LIMIT	lib/assimp/config.h	297;"	d
AI_CONFIG_PP_SLM_VERTEX_LIMIT	lib/assimp/config.h	313;"	d
AI_CONFIG_PP_TUV_EVALUATE	lib/assimp/config.h	511;"	d
AI_DEBONE_THRESHOLD	lib/assimp/config.h	346;"	d
AI_DEBUG_H_INC	lib/assimp/ai_assert.h	42;"	d
AI_DEFAULTIOSTREAM_H_INC	lib/__assimp/DefaultIOStream.h	43;"	d
AI_DEFAULTIOSYSTEM_H_INC	lib/__assimp/DefaultIOSystem.h	43;"	d
AI_DEFAULT_MATERIAL_NAME	lib/__assimp/material.h	56;"	d
AI_DEFAULT_MATERIAL_NAME	lib/assimp/material.h	56;"	d
AI_DEFINES_H_INC	lib/__assimp/defs.h	49;"	d
AI_DEG_TO_RAD	lib/__assimp/defs.h	263;"	d
AI_DEG_TO_RAD	lib/assimp/defs.h	245;"	d
AI_DOUBLE	lib/__assimp/metadata.h	/^    AI_DOUBLE     = 4,$/;"	e	enum:aiMetadataType
AI_EMBEDDED_TEXNAME_PREFIX	lib/__assimp/texture.h	67;"	d
AI_EXPORT_HPP_INC	lib/__assimp/Exporter.hpp	47;"	d
AI_EXPORT_HPP_INC	lib/assimp/Exporter.hpp	46;"	d
AI_EXPORT_H_INC	lib/__assimp/cexport.h	47;"	d
AI_EXPORT_H_INC	lib/assimp/cexport.h	46;"	d
AI_FAILURE	lib/__assimp/types.h	397;"	d
AI_FAILURE	lib/assimp/types.h	396;"	d
AI_FALSE	lib/__assimp/cimport.h	93;"	d
AI_FALSE	lib/assimp/cimport.h	91;"	d
AI_FILEIO_H_INC	lib/__assimp/cfileio.h	47;"	d
AI_FILEIO_H_INC	lib/assimp/cfileio.h	46;"	d
AI_FLOAT	lib/__assimp/metadata.h	/^    AI_FLOAT      = 3,$/;"	e	enum:aiMetadataType
AI_FLOAT	lib/assimp/metadata.h	/^    AI_FLOAT = 3,$/;"	e	enum:aiMetadataType
AI_FORCE_INLINE	lib/__assimp/defs.h	149;"	d
AI_FORCE_INLINE	lib/__assimp/defs.h	165;"	d
AI_FORCE_INLINE	lib/assimp/defs.h	146;"	d
AI_FORCE_INLINE	lib/assimp/defs.h	162;"	d
AI_IMPORTER_DESC_H_INC	lib/__assimp/importerdesc.h	47;"	d
AI_INT	lib/assimp/metadata.h	/^    AI_INT = 1,$/;"	e	enum:aiMetadataType
AI_INT32	lib/__assimp/metadata.h	/^    AI_INT32      = 1,$/;"	e	enum:aiMetadataType
AI_IOSTREAM_H_INC	lib/__assimp/IOStream.hpp	47;"	d
AI_IOSTREAM_H_INC	lib/assimp/IOStream.hpp	46;"	d
AI_IOSYSTEM_H_INC	lib/__assimp/IOSystem.hpp	49;"	d
AI_IOSYSTEM_H_INC	lib/assimp/IOSystem.hpp	48;"	d
AI_LIGHT_H_INC	lib/__assimp/light.h	48;"	d
AI_LMW_MAX_WEIGHTS	lib/assimp/config.h	332;"	d
AI_MAKE_EMBEDDED_TEXNAME	lib/__assimp/texture.h	77;"	d
AI_MAKE_EMBEDDED_TEXNAME	lib/assimp/texture.h	69;"	d
AI_MATERIAL_H_INC	lib/__assimp/material.h	47;"	d
AI_MATERIAL_H_INC	lib/assimp/material.h	47;"	d
AI_MATH_HALF_PI	lib/__assimp/defs.h	255;"	d
AI_MATH_HALF_PI	lib/assimp/defs.h	237;"	d
AI_MATH_HALF_PI_F	lib/__assimp/defs.h	260;"	d
AI_MATH_HALF_PI_F	lib/assimp/defs.h	242;"	d
AI_MATH_PI	lib/__assimp/defs.h	253;"	d
AI_MATH_PI	lib/assimp/defs.h	235;"	d
AI_MATH_PI_F	lib/__assimp/defs.h	258;"	d
AI_MATH_PI_F	lib/assimp/defs.h	240;"	d
AI_MATH_TWO_PI	lib/__assimp/defs.h	254;"	d
AI_MATH_TWO_PI	lib/assimp/defs.h	236;"	d
AI_MATH_TWO_PI_F	lib/__assimp/defs.h	259;"	d
AI_MATH_TWO_PI_F	lib/assimp/defs.h	241;"	d
AI_MATKEY_BLEND_FUNC	lib/__assimp/material.h	892;"	d
AI_MATKEY_BLEND_FUNC	lib/assimp/material.h	874;"	d
AI_MATKEY_BUMPSCALING	lib/__assimp/material.h	894;"	d
AI_MATKEY_BUMPSCALING	lib/assimp/material.h	876;"	d
AI_MATKEY_COLOR_AMBIENT	lib/__assimp/material.h	900;"	d
AI_MATKEY_COLOR_AMBIENT	lib/assimp/material.h	882;"	d
AI_MATKEY_COLOR_DIFFUSE	lib/__assimp/material.h	899;"	d
AI_MATKEY_COLOR_DIFFUSE	lib/assimp/material.h	881;"	d
AI_MATKEY_COLOR_EMISSIVE	lib/__assimp/material.h	902;"	d
AI_MATKEY_COLOR_EMISSIVE	lib/assimp/material.h	884;"	d
AI_MATKEY_COLOR_REFLECTIVE	lib/__assimp/material.h	904;"	d
AI_MATKEY_COLOR_REFLECTIVE	lib/assimp/material.h	886;"	d
AI_MATKEY_COLOR_SPECULAR	lib/__assimp/material.h	901;"	d
AI_MATKEY_COLOR_SPECULAR	lib/assimp/material.h	883;"	d
AI_MATKEY_COLOR_TRANSPARENT	lib/__assimp/material.h	903;"	d
AI_MATKEY_COLOR_TRANSPARENT	lib/assimp/material.h	885;"	d
AI_MATKEY_ENABLE_WIREFRAME	lib/__assimp/material.h	891;"	d
AI_MATKEY_ENABLE_WIREFRAME	lib/assimp/material.h	873;"	d
AI_MATKEY_GLOBAL_BACKGROUND_IMAGE	lib/__assimp/material.h	905;"	d
AI_MATKEY_GLOBAL_BACKGROUND_IMAGE	lib/assimp/material.h	887;"	d
AI_MATKEY_MAPPING	lib/__assimp/material.h	1041;"	d
AI_MATKEY_MAPPING	lib/assimp/material.h	1023;"	d
AI_MATKEY_MAPPINGMODE_U	lib/__assimp/material.h	1119;"	d
AI_MATKEY_MAPPINGMODE_U	lib/assimp/material.h	1101;"	d
AI_MATKEY_MAPPINGMODE_U_AMBIENT	lib/__assimp/material.h	1129;"	d
AI_MATKEY_MAPPINGMODE_U_AMBIENT	lib/assimp/material.h	1111;"	d
AI_MATKEY_MAPPINGMODE_U_DIFFUSE	lib/__assimp/material.h	1123;"	d
AI_MATKEY_MAPPINGMODE_U_DIFFUSE	lib/assimp/material.h	1105;"	d
AI_MATKEY_MAPPINGMODE_U_DISPLACEMENT	lib/__assimp/material.h	1147;"	d
AI_MATKEY_MAPPINGMODE_U_DISPLACEMENT	lib/assimp/material.h	1129;"	d
AI_MATKEY_MAPPINGMODE_U_EMISSIVE	lib/__assimp/material.h	1132;"	d
AI_MATKEY_MAPPINGMODE_U_EMISSIVE	lib/assimp/material.h	1114;"	d
AI_MATKEY_MAPPINGMODE_U_HEIGHT	lib/__assimp/material.h	1138;"	d
AI_MATKEY_MAPPINGMODE_U_HEIGHT	lib/assimp/material.h	1120;"	d
AI_MATKEY_MAPPINGMODE_U_LIGHTMAP	lib/__assimp/material.h	1150;"	d
AI_MATKEY_MAPPINGMODE_U_LIGHTMAP	lib/assimp/material.h	1132;"	d
AI_MATKEY_MAPPINGMODE_U_NORMALS	lib/__assimp/material.h	1135;"	d
AI_MATKEY_MAPPINGMODE_U_NORMALS	lib/assimp/material.h	1117;"	d
AI_MATKEY_MAPPINGMODE_U_OPACITY	lib/__assimp/material.h	1144;"	d
AI_MATKEY_MAPPINGMODE_U_OPACITY	lib/assimp/material.h	1126;"	d
AI_MATKEY_MAPPINGMODE_U_REFLECTION	lib/__assimp/material.h	1153;"	d
AI_MATKEY_MAPPINGMODE_U_REFLECTION	lib/assimp/material.h	1135;"	d
AI_MATKEY_MAPPINGMODE_U_SHININESS	lib/__assimp/material.h	1141;"	d
AI_MATKEY_MAPPINGMODE_U_SHININESS	lib/assimp/material.h	1123;"	d
AI_MATKEY_MAPPINGMODE_U_SPECULAR	lib/__assimp/material.h	1126;"	d
AI_MATKEY_MAPPINGMODE_U_SPECULAR	lib/assimp/material.h	1108;"	d
AI_MATKEY_MAPPINGMODE_V	lib/__assimp/material.h	1158;"	d
AI_MATKEY_MAPPINGMODE_V	lib/assimp/material.h	1140;"	d
AI_MATKEY_MAPPINGMODE_V_AMBIENT	lib/__assimp/material.h	1168;"	d
AI_MATKEY_MAPPINGMODE_V_AMBIENT	lib/assimp/material.h	1150;"	d
AI_MATKEY_MAPPINGMODE_V_DIFFUSE	lib/__assimp/material.h	1162;"	d
AI_MATKEY_MAPPINGMODE_V_DIFFUSE	lib/assimp/material.h	1144;"	d
AI_MATKEY_MAPPINGMODE_V_DISPLACEMENT	lib/__assimp/material.h	1186;"	d
AI_MATKEY_MAPPINGMODE_V_DISPLACEMENT	lib/assimp/material.h	1168;"	d
AI_MATKEY_MAPPINGMODE_V_EMISSIVE	lib/__assimp/material.h	1171;"	d
AI_MATKEY_MAPPINGMODE_V_EMISSIVE	lib/assimp/material.h	1153;"	d
AI_MATKEY_MAPPINGMODE_V_HEIGHT	lib/__assimp/material.h	1177;"	d
AI_MATKEY_MAPPINGMODE_V_HEIGHT	lib/assimp/material.h	1159;"	d
AI_MATKEY_MAPPINGMODE_V_LIGHTMAP	lib/__assimp/material.h	1189;"	d
AI_MATKEY_MAPPINGMODE_V_LIGHTMAP	lib/assimp/material.h	1171;"	d
AI_MATKEY_MAPPINGMODE_V_NORMALS	lib/__assimp/material.h	1174;"	d
AI_MATKEY_MAPPINGMODE_V_NORMALS	lib/assimp/material.h	1156;"	d
AI_MATKEY_MAPPINGMODE_V_OPACITY	lib/__assimp/material.h	1183;"	d
AI_MATKEY_MAPPINGMODE_V_OPACITY	lib/assimp/material.h	1165;"	d
AI_MATKEY_MAPPINGMODE_V_REFLECTION	lib/__assimp/material.h	1192;"	d
AI_MATKEY_MAPPINGMODE_V_REFLECTION	lib/assimp/material.h	1174;"	d
AI_MATKEY_MAPPINGMODE_V_SHININESS	lib/__assimp/material.h	1180;"	d
AI_MATKEY_MAPPINGMODE_V_SHININESS	lib/assimp/material.h	1162;"	d
AI_MATKEY_MAPPINGMODE_V_SPECULAR	lib/__assimp/material.h	1165;"	d
AI_MATKEY_MAPPINGMODE_V_SPECULAR	lib/assimp/material.h	1147;"	d
AI_MATKEY_MAPPING_AMBIENT	lib/__assimp/material.h	1051;"	d
AI_MATKEY_MAPPING_AMBIENT	lib/assimp/material.h	1033;"	d
AI_MATKEY_MAPPING_DIFFUSE	lib/__assimp/material.h	1045;"	d
AI_MATKEY_MAPPING_DIFFUSE	lib/assimp/material.h	1027;"	d
AI_MATKEY_MAPPING_DISPLACEMENT	lib/__assimp/material.h	1069;"	d
AI_MATKEY_MAPPING_DISPLACEMENT	lib/assimp/material.h	1051;"	d
AI_MATKEY_MAPPING_EMISSIVE	lib/__assimp/material.h	1054;"	d
AI_MATKEY_MAPPING_EMISSIVE	lib/assimp/material.h	1036;"	d
AI_MATKEY_MAPPING_HEIGHT	lib/__assimp/material.h	1060;"	d
AI_MATKEY_MAPPING_HEIGHT	lib/assimp/material.h	1042;"	d
AI_MATKEY_MAPPING_LIGHTMAP	lib/__assimp/material.h	1072;"	d
AI_MATKEY_MAPPING_LIGHTMAP	lib/assimp/material.h	1054;"	d
AI_MATKEY_MAPPING_NORMALS	lib/__assimp/material.h	1057;"	d
AI_MATKEY_MAPPING_NORMALS	lib/assimp/material.h	1039;"	d
AI_MATKEY_MAPPING_OPACITY	lib/__assimp/material.h	1066;"	d
AI_MATKEY_MAPPING_OPACITY	lib/assimp/material.h	1048;"	d
AI_MATKEY_MAPPING_REFLECTION	lib/__assimp/material.h	1075;"	d
AI_MATKEY_MAPPING_REFLECTION	lib/assimp/material.h	1057;"	d
AI_MATKEY_MAPPING_SHININESS	lib/__assimp/material.h	1063;"	d
AI_MATKEY_MAPPING_SHININESS	lib/assimp/material.h	1045;"	d
AI_MATKEY_MAPPING_SPECULAR	lib/__assimp/material.h	1048;"	d
AI_MATKEY_MAPPING_SPECULAR	lib/assimp/material.h	1030;"	d
AI_MATKEY_NAME	lib/__assimp/material.h	888;"	d
AI_MATKEY_NAME	lib/assimp/material.h	870;"	d
AI_MATKEY_OPACITY	lib/__assimp/material.h	893;"	d
AI_MATKEY_OPACITY	lib/assimp/material.h	875;"	d
AI_MATKEY_REFLECTIVITY	lib/__assimp/material.h	896;"	d
AI_MATKEY_REFLECTIVITY	lib/assimp/material.h	878;"	d
AI_MATKEY_REFRACTI	lib/__assimp/material.h	898;"	d
AI_MATKEY_REFRACTI	lib/assimp/material.h	880;"	d
AI_MATKEY_SHADING_MODEL	lib/__assimp/material.h	890;"	d
AI_MATKEY_SHADING_MODEL	lib/assimp/material.h	872;"	d
AI_MATKEY_SHININESS	lib/__assimp/material.h	895;"	d
AI_MATKEY_SHININESS	lib/assimp/material.h	877;"	d
AI_MATKEY_SHININESS_STRENGTH	lib/__assimp/material.h	897;"	d
AI_MATKEY_SHININESS_STRENGTH	lib/assimp/material.h	879;"	d
AI_MATKEY_TEXBLEND	lib/__assimp/material.h	1080;"	d
AI_MATKEY_TEXBLEND	lib/assimp/material.h	1062;"	d
AI_MATKEY_TEXBLEND_AMBIENT	lib/__assimp/material.h	1090;"	d
AI_MATKEY_TEXBLEND_AMBIENT	lib/assimp/material.h	1072;"	d
AI_MATKEY_TEXBLEND_DIFFUSE	lib/__assimp/material.h	1084;"	d
AI_MATKEY_TEXBLEND_DIFFUSE	lib/assimp/material.h	1066;"	d
AI_MATKEY_TEXBLEND_DISPLACEMENT	lib/__assimp/material.h	1108;"	d
AI_MATKEY_TEXBLEND_DISPLACEMENT	lib/assimp/material.h	1090;"	d
AI_MATKEY_TEXBLEND_EMISSIVE	lib/__assimp/material.h	1093;"	d
AI_MATKEY_TEXBLEND_EMISSIVE	lib/assimp/material.h	1075;"	d
AI_MATKEY_TEXBLEND_HEIGHT	lib/__assimp/material.h	1099;"	d
AI_MATKEY_TEXBLEND_HEIGHT	lib/assimp/material.h	1081;"	d
AI_MATKEY_TEXBLEND_LIGHTMAP	lib/__assimp/material.h	1111;"	d
AI_MATKEY_TEXBLEND_LIGHTMAP	lib/assimp/material.h	1093;"	d
AI_MATKEY_TEXBLEND_NORMALS	lib/__assimp/material.h	1096;"	d
AI_MATKEY_TEXBLEND_NORMALS	lib/assimp/material.h	1078;"	d
AI_MATKEY_TEXBLEND_OPACITY	lib/__assimp/material.h	1105;"	d
AI_MATKEY_TEXBLEND_OPACITY	lib/assimp/material.h	1087;"	d
AI_MATKEY_TEXBLEND_REFLECTION	lib/__assimp/material.h	1114;"	d
AI_MATKEY_TEXBLEND_REFLECTION	lib/assimp/material.h	1096;"	d
AI_MATKEY_TEXBLEND_SHININESS	lib/__assimp/material.h	1102;"	d
AI_MATKEY_TEXBLEND_SHININESS	lib/assimp/material.h	1084;"	d
AI_MATKEY_TEXBLEND_SPECULAR	lib/__assimp/material.h	1087;"	d
AI_MATKEY_TEXBLEND_SPECULAR	lib/assimp/material.h	1069;"	d
AI_MATKEY_TEXFLAGS	lib/__assimp/material.h	1278;"	d
AI_MATKEY_TEXFLAGS	lib/assimp/material.h	1260;"	d
AI_MATKEY_TEXFLAGS_AMBIENT	lib/__assimp/material.h	1288;"	d
AI_MATKEY_TEXFLAGS_AMBIENT	lib/assimp/material.h	1270;"	d
AI_MATKEY_TEXFLAGS_DIFFUSE	lib/__assimp/material.h	1282;"	d
AI_MATKEY_TEXFLAGS_DIFFUSE	lib/assimp/material.h	1264;"	d
AI_MATKEY_TEXFLAGS_DISPLACEMENT	lib/__assimp/material.h	1306;"	d
AI_MATKEY_TEXFLAGS_DISPLACEMENT	lib/assimp/material.h	1288;"	d
AI_MATKEY_TEXFLAGS_EMISSIVE	lib/__assimp/material.h	1291;"	d
AI_MATKEY_TEXFLAGS_EMISSIVE	lib/assimp/material.h	1273;"	d
AI_MATKEY_TEXFLAGS_HEIGHT	lib/__assimp/material.h	1297;"	d
AI_MATKEY_TEXFLAGS_HEIGHT	lib/assimp/material.h	1279;"	d
AI_MATKEY_TEXFLAGS_LIGHTMAP	lib/__assimp/material.h	1309;"	d
AI_MATKEY_TEXFLAGS_LIGHTMAP	lib/assimp/material.h	1291;"	d
AI_MATKEY_TEXFLAGS_NORMALS	lib/__assimp/material.h	1294;"	d
AI_MATKEY_TEXFLAGS_NORMALS	lib/assimp/material.h	1276;"	d
AI_MATKEY_TEXFLAGS_OPACITY	lib/__assimp/material.h	1303;"	d
AI_MATKEY_TEXFLAGS_OPACITY	lib/assimp/material.h	1285;"	d
AI_MATKEY_TEXFLAGS_REFLECTION	lib/__assimp/material.h	1312;"	d
AI_MATKEY_TEXFLAGS_REFLECTION	lib/assimp/material.h	1294;"	d
AI_MATKEY_TEXFLAGS_SHININESS	lib/__assimp/material.h	1300;"	d
AI_MATKEY_TEXFLAGS_SHININESS	lib/assimp/material.h	1282;"	d
AI_MATKEY_TEXFLAGS_SPECULAR	lib/__assimp/material.h	1285;"	d
AI_MATKEY_TEXFLAGS_SPECULAR	lib/assimp/material.h	1267;"	d
AI_MATKEY_TEXFLAGS_UNKNOWN	lib/__assimp/material.h	1315;"	d
AI_MATKEY_TEXFLAGS_UNKNOWN	lib/assimp/material.h	1297;"	d
AI_MATKEY_TEXMAP_AXIS	lib/__assimp/material.h	1197;"	d
AI_MATKEY_TEXMAP_AXIS	lib/assimp/material.h	1179;"	d
AI_MATKEY_TEXMAP_AXIS_AMBIENT	lib/__assimp/material.h	1207;"	d
AI_MATKEY_TEXMAP_AXIS_AMBIENT	lib/assimp/material.h	1189;"	d
AI_MATKEY_TEXMAP_AXIS_DIFFUSE	lib/__assimp/material.h	1201;"	d
AI_MATKEY_TEXMAP_AXIS_DIFFUSE	lib/assimp/material.h	1183;"	d
AI_MATKEY_TEXMAP_AXIS_DISPLACEMENT	lib/__assimp/material.h	1225;"	d
AI_MATKEY_TEXMAP_AXIS_DISPLACEMENT	lib/assimp/material.h	1207;"	d
AI_MATKEY_TEXMAP_AXIS_EMISSIVE	lib/__assimp/material.h	1210;"	d
AI_MATKEY_TEXMAP_AXIS_EMISSIVE	lib/assimp/material.h	1192;"	d
AI_MATKEY_TEXMAP_AXIS_HEIGHT	lib/__assimp/material.h	1216;"	d
AI_MATKEY_TEXMAP_AXIS_HEIGHT	lib/assimp/material.h	1198;"	d
AI_MATKEY_TEXMAP_AXIS_LIGHTMAP	lib/__assimp/material.h	1228;"	d
AI_MATKEY_TEXMAP_AXIS_LIGHTMAP	lib/assimp/material.h	1210;"	d
AI_MATKEY_TEXMAP_AXIS_NORMALS	lib/__assimp/material.h	1213;"	d
AI_MATKEY_TEXMAP_AXIS_NORMALS	lib/assimp/material.h	1195;"	d
AI_MATKEY_TEXMAP_AXIS_OPACITY	lib/__assimp/material.h	1222;"	d
AI_MATKEY_TEXMAP_AXIS_OPACITY	lib/assimp/material.h	1204;"	d
AI_MATKEY_TEXMAP_AXIS_REFLECTION	lib/__assimp/material.h	1231;"	d
AI_MATKEY_TEXMAP_AXIS_REFLECTION	lib/assimp/material.h	1213;"	d
AI_MATKEY_TEXMAP_AXIS_SHININESS	lib/__assimp/material.h	1219;"	d
AI_MATKEY_TEXMAP_AXIS_SHININESS	lib/assimp/material.h	1201;"	d
AI_MATKEY_TEXMAP_AXIS_SPECULAR	lib/__assimp/material.h	1204;"	d
AI_MATKEY_TEXMAP_AXIS_SPECULAR	lib/assimp/material.h	1186;"	d
AI_MATKEY_TEXOP	lib/__assimp/material.h	1002;"	d
AI_MATKEY_TEXOP	lib/assimp/material.h	984;"	d
AI_MATKEY_TEXOP_AMBIENT	lib/__assimp/material.h	1012;"	d
AI_MATKEY_TEXOP_AMBIENT	lib/assimp/material.h	994;"	d
AI_MATKEY_TEXOP_DIFFUSE	lib/__assimp/material.h	1006;"	d
AI_MATKEY_TEXOP_DIFFUSE	lib/assimp/material.h	988;"	d
AI_MATKEY_TEXOP_DISPLACEMENT	lib/__assimp/material.h	1030;"	d
AI_MATKEY_TEXOP_DISPLACEMENT	lib/assimp/material.h	1012;"	d
AI_MATKEY_TEXOP_EMISSIVE	lib/__assimp/material.h	1015;"	d
AI_MATKEY_TEXOP_EMISSIVE	lib/assimp/material.h	997;"	d
AI_MATKEY_TEXOP_HEIGHT	lib/__assimp/material.h	1021;"	d
AI_MATKEY_TEXOP_HEIGHT	lib/assimp/material.h	1003;"	d
AI_MATKEY_TEXOP_LIGHTMAP	lib/__assimp/material.h	1033;"	d
AI_MATKEY_TEXOP_LIGHTMAP	lib/assimp/material.h	1015;"	d
AI_MATKEY_TEXOP_NORMALS	lib/__assimp/material.h	1018;"	d
AI_MATKEY_TEXOP_NORMALS	lib/assimp/material.h	1000;"	d
AI_MATKEY_TEXOP_OPACITY	lib/__assimp/material.h	1027;"	d
AI_MATKEY_TEXOP_OPACITY	lib/assimp/material.h	1009;"	d
AI_MATKEY_TEXOP_REFLECTION	lib/__assimp/material.h	1036;"	d
AI_MATKEY_TEXOP_REFLECTION	lib/assimp/material.h	1018;"	d
AI_MATKEY_TEXOP_SHININESS	lib/__assimp/material.h	1024;"	d
AI_MATKEY_TEXOP_SHININESS	lib/assimp/material.h	1006;"	d
AI_MATKEY_TEXOP_SPECULAR	lib/__assimp/material.h	1009;"	d
AI_MATKEY_TEXOP_SPECULAR	lib/assimp/material.h	991;"	d
AI_MATKEY_TEXTURE	lib/__assimp/material.h	923;"	d
AI_MATKEY_TEXTURE	lib/assimp/material.h	905;"	d
AI_MATKEY_TEXTURE_AMBIENT	lib/__assimp/material.h	933;"	d
AI_MATKEY_TEXTURE_AMBIENT	lib/assimp/material.h	915;"	d
AI_MATKEY_TEXTURE_DIFFUSE	lib/__assimp/material.h	927;"	d
AI_MATKEY_TEXTURE_DIFFUSE	lib/assimp/material.h	909;"	d
AI_MATKEY_TEXTURE_DISPLACEMENT	lib/__assimp/material.h	951;"	d
AI_MATKEY_TEXTURE_DISPLACEMENT	lib/assimp/material.h	933;"	d
AI_MATKEY_TEXTURE_EMISSIVE	lib/__assimp/material.h	936;"	d
AI_MATKEY_TEXTURE_EMISSIVE	lib/assimp/material.h	918;"	d
AI_MATKEY_TEXTURE_HEIGHT	lib/__assimp/material.h	942;"	d
AI_MATKEY_TEXTURE_HEIGHT	lib/assimp/material.h	924;"	d
AI_MATKEY_TEXTURE_LIGHTMAP	lib/__assimp/material.h	954;"	d
AI_MATKEY_TEXTURE_LIGHTMAP	lib/assimp/material.h	936;"	d
AI_MATKEY_TEXTURE_NORMALS	lib/__assimp/material.h	939;"	d
AI_MATKEY_TEXTURE_NORMALS	lib/assimp/material.h	921;"	d
AI_MATKEY_TEXTURE_OPACITY	lib/__assimp/material.h	948;"	d
AI_MATKEY_TEXTURE_OPACITY	lib/assimp/material.h	930;"	d
AI_MATKEY_TEXTURE_REFLECTION	lib/__assimp/material.h	957;"	d
AI_MATKEY_TEXTURE_REFLECTION	lib/assimp/material.h	939;"	d
AI_MATKEY_TEXTURE_SHININESS	lib/__assimp/material.h	945;"	d
AI_MATKEY_TEXTURE_SHININESS	lib/assimp/material.h	927;"	d
AI_MATKEY_TEXTURE_SPECULAR	lib/__assimp/material.h	930;"	d
AI_MATKEY_TEXTURE_SPECULAR	lib/assimp/material.h	912;"	d
AI_MATKEY_TWOSIDED	lib/__assimp/material.h	889;"	d
AI_MATKEY_TWOSIDED	lib/assimp/material.h	871;"	d
AI_MATKEY_UVTRANSFORM	lib/__assimp/material.h	1236;"	d
AI_MATKEY_UVTRANSFORM	lib/assimp/material.h	1218;"	d
AI_MATKEY_UVTRANSFORM_AMBIENT	lib/__assimp/material.h	1246;"	d
AI_MATKEY_UVTRANSFORM_AMBIENT	lib/assimp/material.h	1228;"	d
AI_MATKEY_UVTRANSFORM_DIFFUSE	lib/__assimp/material.h	1240;"	d
AI_MATKEY_UVTRANSFORM_DIFFUSE	lib/assimp/material.h	1222;"	d
AI_MATKEY_UVTRANSFORM_DISPLACEMENT	lib/__assimp/material.h	1264;"	d
AI_MATKEY_UVTRANSFORM_DISPLACEMENT	lib/assimp/material.h	1246;"	d
AI_MATKEY_UVTRANSFORM_EMISSIVE	lib/__assimp/material.h	1249;"	d
AI_MATKEY_UVTRANSFORM_EMISSIVE	lib/assimp/material.h	1231;"	d
AI_MATKEY_UVTRANSFORM_HEIGHT	lib/__assimp/material.h	1255;"	d
AI_MATKEY_UVTRANSFORM_HEIGHT	lib/assimp/material.h	1237;"	d
AI_MATKEY_UVTRANSFORM_LIGHTMAP	lib/__assimp/material.h	1267;"	d
AI_MATKEY_UVTRANSFORM_LIGHTMAP	lib/assimp/material.h	1249;"	d
AI_MATKEY_UVTRANSFORM_NORMALS	lib/__assimp/material.h	1252;"	d
AI_MATKEY_UVTRANSFORM_NORMALS	lib/assimp/material.h	1234;"	d
AI_MATKEY_UVTRANSFORM_OPACITY	lib/__assimp/material.h	1261;"	d
AI_MATKEY_UVTRANSFORM_OPACITY	lib/assimp/material.h	1243;"	d
AI_MATKEY_UVTRANSFORM_REFLECTION	lib/__assimp/material.h	1270;"	d
AI_MATKEY_UVTRANSFORM_REFLECTION	lib/assimp/material.h	1252;"	d
AI_MATKEY_UVTRANSFORM_SHININESS	lib/__assimp/material.h	1258;"	d
AI_MATKEY_UVTRANSFORM_SHININESS	lib/assimp/material.h	1240;"	d
AI_MATKEY_UVTRANSFORM_SPECULAR	lib/__assimp/material.h	1243;"	d
AI_MATKEY_UVTRANSFORM_SPECULAR	lib/assimp/material.h	1225;"	d
AI_MATKEY_UVTRANSFORM_UNKNOWN	lib/__assimp/material.h	1273;"	d
AI_MATKEY_UVTRANSFORM_UNKNOWN	lib/assimp/material.h	1255;"	d
AI_MATKEY_UVWSRC	lib/__assimp/material.h	963;"	d
AI_MATKEY_UVWSRC	lib/assimp/material.h	945;"	d
AI_MATKEY_UVWSRC_AMBIENT	lib/__assimp/material.h	973;"	d
AI_MATKEY_UVWSRC_AMBIENT	lib/assimp/material.h	955;"	d
AI_MATKEY_UVWSRC_DIFFUSE	lib/__assimp/material.h	967;"	d
AI_MATKEY_UVWSRC_DIFFUSE	lib/assimp/material.h	949;"	d
AI_MATKEY_UVWSRC_DISPLACEMENT	lib/__assimp/material.h	991;"	d
AI_MATKEY_UVWSRC_DISPLACEMENT	lib/assimp/material.h	973;"	d
AI_MATKEY_UVWSRC_EMISSIVE	lib/__assimp/material.h	976;"	d
AI_MATKEY_UVWSRC_EMISSIVE	lib/assimp/material.h	958;"	d
AI_MATKEY_UVWSRC_HEIGHT	lib/__assimp/material.h	982;"	d
AI_MATKEY_UVWSRC_HEIGHT	lib/assimp/material.h	964;"	d
AI_MATKEY_UVWSRC_LIGHTMAP	lib/__assimp/material.h	994;"	d
AI_MATKEY_UVWSRC_LIGHTMAP	lib/assimp/material.h	976;"	d
AI_MATKEY_UVWSRC_NORMALS	lib/__assimp/material.h	979;"	d
AI_MATKEY_UVWSRC_NORMALS	lib/assimp/material.h	961;"	d
AI_MATKEY_UVWSRC_OPACITY	lib/__assimp/material.h	988;"	d
AI_MATKEY_UVWSRC_OPACITY	lib/assimp/material.h	970;"	d
AI_MATKEY_UVWSRC_REFLECTION	lib/__assimp/material.h	997;"	d
AI_MATKEY_UVWSRC_REFLECTION	lib/assimp/material.h	979;"	d
AI_MATKEY_UVWSRC_SHININESS	lib/__assimp/material.h	985;"	d
AI_MATKEY_UVWSRC_SHININESS	lib/assimp/material.h	967;"	d
AI_MATKEY_UVWSRC_SPECULAR	lib/__assimp/material.h	970;"	d
AI_MATKEY_UVWSRC_SPECULAR	lib/assimp/material.h	952;"	d
AI_MATRIX3X3_H_INC	lib/__assimp/matrix3x3.h	47;"	d
AI_MATRIX3x3_H_INC	lib/assimp/matrix3x3.h	46;"	d
AI_MATRIX4X4_H_INC	lib/__assimp/matrix4x4.h	46;"	d
AI_MATRIX4X4_H_INC	lib/assimp/matrix4x4.h	45;"	d
AI_MAX_ALLOC	lib/__assimp/defs.h	287;"	d
AI_MAX_ALLOC	lib/assimp/defs.h	269;"	d
AI_MAX_BONE_WEIGHTS	lib/__assimp/mesh.h	73;"	d
AI_MAX_BONE_WEIGHTS	lib/assimp/mesh.h	72;"	d
AI_MAX_FACES	lib/__assimp/mesh.h	87;"	d
AI_MAX_FACES	lib/assimp/mesh.h	86;"	d
AI_MAX_FACE_INDICES	lib/__assimp/mesh.h	66;"	d
AI_MAX_FACE_INDICES	lib/assimp/mesh.h	65;"	d
AI_MAX_NUMBER_OF_COLOR_SETS	lib/__assimp/mesh.h	94;"	d
AI_MAX_NUMBER_OF_COLOR_SETS	lib/assimp/mesh.h	93;"	d
AI_MAX_NUMBER_OF_TEXTURECOORDS	lib/__assimp/mesh.h	101;"	d
AI_MAX_NUMBER_OF_TEXTURECOORDS	lib/assimp/mesh.h	100;"	d
AI_MAX_VERTICES	lib/__assimp/mesh.h	80;"	d
AI_MAX_VERTICES	lib/assimp/mesh.h	79;"	d
AI_MESH_H_INC	lib/__assimp/mesh.h	48;"	d
AI_METADATA_H_INC	lib/__assimp/metadata.h	47;"	d
AI_OUTOFMEMORY	lib/__assimp/types.h	398;"	d
AI_OUTOFMEMORY	lib/assimp/types.h	397;"	d
AI_POSTPROCESS_H_INC	lib/__assimp/postprocess.h	46;"	d
AI_POSTPROCESS_H_INC	lib/assimp/postprocess.h	45;"	d
AI_PRIMITIVE_TYPE_FOR_N_INDICES	lib/__assimp/mesh.h	330;"	d
AI_PRIMITIVE_TYPE_FOR_N_INDICES	lib/assimp/mesh.h	329;"	d
AI_PROGRESSHANDLER_H_INC	lib/__assimp/ProgressHandler.hpp	46;"	d
AI_PROPERTY_WAS_NOT_EXISTING	lib/__assimp/Importer.hpp	80;"	d
AI_PROPERTY_WAS_NOT_EXISTING	lib/assimp/Importer.hpp	82;"	d
AI_PUSHPACK_IS_DEFINED	lib/__assimp/Compiler/poppack1.h	22;"	d
AI_PUSHPACK_IS_DEFINED	lib/__assimp/Compiler/pushpack1.h	43;"	d
AI_PUSHPACK_IS_DEFINED	lib/assimp/Compiler/poppack1.h	22;"	d
AI_PUSHPACK_IS_DEFINED	lib/assimp/Compiler/pushpack1.h	44;"	d
AI_QUATERNION_H_INC	lib/__assimp/quaternion.h	46;"	d
AI_QUATERNION_H_INC	lib/assimp/quaternion.h	45;"	d
AI_RAD_TO_DEG	lib/__assimp/defs.h	264;"	d
AI_RAD_TO_DEG	lib/assimp/defs.h	246;"	d
AI_SBBC_DEFAULT_MAX_BONES	lib/assimp/config.h	135;"	d
AI_SCENE_FLAGS_ALLOW_SHARED	lib/__assimp/scene.h	220;"	d
AI_SCENE_FLAGS_INCOMPLETE	lib/__assimp/scene.h	173;"	d
AI_SCENE_FLAGS_INCOMPLETE	lib/assimp/scene.h	226;"	d
AI_SCENE_FLAGS_NON_VERBOSE_FORMAT	lib/__assimp/scene.h	198;"	d
AI_SCENE_FLAGS_NON_VERBOSE_FORMAT	lib/assimp/scene.h	251;"	d
AI_SCENE_FLAGS_TERRAIN	lib/__assimp/scene.h	212;"	d
AI_SCENE_FLAGS_TERRAIN	lib/assimp/scene.h	265;"	d
AI_SCENE_FLAGS_VALIDATED	lib/__assimp/scene.h	180;"	d
AI_SCENE_FLAGS_VALIDATED	lib/assimp/scene.h	233;"	d
AI_SCENE_FLAGS_VALIDATION_WARNING	lib/__assimp/scene.h	190;"	d
AI_SCENE_FLAGS_VALIDATION_WARNING	lib/assimp/scene.h	243;"	d
AI_SCENE_H_INC	lib/__assimp/scene.h	47;"	d
AI_SLM_DEFAULT_MAX_TRIANGLES	lib/assimp/config.h	302;"	d
AI_SLM_DEFAULT_MAX_VERTICES	lib/assimp/config.h	318;"	d
AI_SUCCESS	lib/__assimp/types.h	396;"	d
AI_SUCCESS	lib/assimp/types.h	395;"	d
AI_TEXTURE_H_INC	lib/__assimp/texture.h	52;"	d
AI_TEXTURE_H_INC	lib/assimp/texture.h	52;"	d
AI_TEXTURE_TYPE_MAX	lib/__assimp/material.h	289;"	d
AI_TEXTURE_TYPE_MAX	lib/assimp/material.h	289;"	d
AI_TRUE	lib/__assimp/cimport.h	94;"	d
AI_TRUE	lib/assimp/cimport.h	92;"	d
AI_TYPES_H_INC	lib/__assimp/types.h	47;"	d
AI_TYPES_H_INC	lib/assimp/types.h	46;"	d
AI_UINT64	lib/__assimp/metadata.h	/^    AI_UINT64     = 2,$/;"	e	enum:aiMetadataType
AI_UINT64	lib/assimp/metadata.h	/^    AI_UINT64 = 2,$/;"	e	enum:aiMetadataType
AI_UVTRAFO_ALL	lib/assimp/config.h	501;"	d
AI_UVTRAFO_ROTATION	lib/assimp/config.h	495;"	d
AI_UVTRAFO_SCALING	lib/assimp/config.h	492;"	d
AI_UVTRAFO_TRANSLATION	lib/assimp/config.h	498;"	d
AI_VECTOR2D_H_INC	lib/__assimp/vector2.h	46;"	d
AI_VECTOR2D_H_INC	lib/assimp/vector2.h	45;"	d
AI_VECTOR3D_H_INC	lib/__assimp/vector3.h	46;"	d
AI_VECTOR3D_H_INC	lib/assimp/vector3.h	45;"	d
AI_VERSION_H_INC	lib/__assimp/version.h	48;"	d
AI_WONT_RETURN	lib/__assimp/defs.h	153;"	d
AI_WONT_RETURN	lib/__assimp/defs.h	161;"	d
AI_WONT_RETURN	lib/assimp/defs.h	150;"	d
AI_WONT_RETURN	lib/assimp/defs.h	158;"	d
AI_WONT_RETURN_SUFFIX	lib/__assimp/defs.h	169;"	d
AI_WONT_RETURN_SUFFIX	lib/__assimp/defs.h	171;"	d
AI_WONT_RETURN_SUFFIX	lib/assimp/defs.h	166;"	d
AI_WONT_RETURN_SUFFIX	lib/assimp/defs.h	168;"	d
AMVK_ANIM_NODE_H	inc/shape/anim_node.h	2;"	d
AMVK_BUFFER_INFO_H	inc/buffer_info.h	2;"	d
AMVK_BUFFER_MANAGER_H	inc/creator/buffer_helper.h	2;"	d
AMVK_CAMERA_H	inc/camera.h	2;"	d
AMVK_CMD_PASS_H	inc/cmd_pass.h	2;"	d
AMVK_DEBUG	inc/macro.h	9;"	d
AMVK_DESCRIPTOR_MANAGER_H	inc/creator/descriptor_creator.h	2;"	d
AMVK_DEVICE_MANAGER_H	inc/device_manager.h	2;"	d
AMVK_ENGINE_H	inc/engine.h	2;"	d
AMVK_FILE_MANAGER	inc/file_manager.h	2;"	d
AMVK_FULLSCREEN_QUAD_H	inc/shape/fullscreen_quad.h	2;"	d
AMVK_G_BUFFER_H	inc/g_buffer.h	2;"	d
AMVK_INPUT_MANAGER_H	inc/input_manager.h	2;"	d
AMVK_LIGHTS_H	inc/lights.h	2;"	d
AMVK_MACROS_H	inc/macro.h	3;"	d
AMVK_MODEL_H	inc/shape/model.h	2;"	d
AMVK_PIPELINE_CACHE_H	inc/pipeline_cache.h	2;"	d
AMVK_PIPELINE_MANAGER_H	/home/al/amvk/inc/creator/pipeline_creator.h	2;"	d
AMVK_POINT_LIGHT_H	inc/shape/point_light.h	2;"	d
AMVK_QUAD_H	inc/shape/quad.h	2;"	d
AMVK_SCENE_LIGHTS_H	inc/scene_lights.h	2;"	d
AMVK_SHADER_MANAGER_H	/home/al/amvk/inc/creator/shader_creator.h	2;"	d
AMVK_SKINNED_MODEL_H	inc/shape/skinned.h	2;"	d
AMVK_SPHERE_H	inc/shape/sphere.h	2;"	d
AMVK_SWAPCHAIN_MANAGER_H	inc/swapchain_manager.h	2;"	d
AMVK_TASK_MANAGER_H	inc/task_manager.h	4;"	d
AMVK_TEXTURE_DATA_H	inc/texture_data.h	2;"	d
AMVK_TEXTURE_MANAGER_H	inc/texture_manager.h	2;"	d
AMVK_TILED_RENDERER_H	/home/al/amvk/inc/tiled_renderer.h	2;"	d
AMVK_TIMER_H	inc/timer.h	2;"	d
AMVK_TQUAD_H	inc/shape/tquad.h	2;"	d
AMVK_UTIL_H	inc/util.h	2;"	d
AMVK_VULKAN_H	inc/vulkan.h	2;"	d
AMVK_VULKAN_IMAGE_MANAGER_H	inc/creator/image_helper.h	2;"	d
AMVK_VULKAN_MANAGER_H	inc/renderer.h	2;"	d
AMVK_VULKAN_PIPELINE_CREATOR_H	inc/creator/pipeline_builder.h	2;"	d
AMVK_VULKAN_STATE_H	/home/al/amvk/inc/state.h	2;"	d
AMVK_VULKAN_UTILS_H	inc/vulkan_utils.h	2;"	d
AMVK_WINDOW_H	inc/window.h	2;"	d
ARRAY_SIZE	inc/macro.h	46;"	d
ASSIMP_API	lib/__assimp/defs.h	125;"	d
ASSIMP_API	lib/__assimp/defs.h	131;"	d
ASSIMP_API	lib/__assimp/defs.h	140;"	d
ASSIMP_API	lib/__assimp/defs.h	143;"	d
ASSIMP_API	lib/__assimp/defs.h	163;"	d
ASSIMP_API	lib/assimp/defs.h	122;"	d
ASSIMP_API	lib/assimp/defs.h	128;"	d
ASSIMP_API	lib/assimp/defs.h	137;"	d
ASSIMP_API	lib/assimp/defs.h	140;"	d
ASSIMP_API	lib/assimp/defs.h	160;"	d
ASSIMP_API_WINONLY	lib/__assimp/defs.h	132;"	d
ASSIMP_API_WINONLY	lib/__assimp/defs.h	141;"	d
ASSIMP_API_WINONLY	lib/__assimp/defs.h	144;"	d
ASSIMP_API_WINONLY	lib/__assimp/defs.h	164;"	d
ASSIMP_API_WINONLY	lib/assimp/defs.h	129;"	d
ASSIMP_API_WINONLY	lib/assimp/defs.h	138;"	d
ASSIMP_API_WINONLY	lib/assimp/defs.h	141;"	d
ASSIMP_API_WINONLY	lib/assimp/defs.h	161;"	d
ASSIMP_BUILD_DEBUG	lib/__assimp/defs.h	230;"	d
ASSIMP_BUILD_DEBUG	lib/assimp/defs.h	227;"	d
ASSIMP_BUILD_NEED_UNZIP	lib/__assimp/defs.h	84;"	d
ASSIMP_BUILD_NEED_UNZIP	lib/__assimp/defs.h	89;"	d
ASSIMP_BUILD_NEED_UNZIP	lib/assimp/defs.h	81;"	d
ASSIMP_BUILD_NEED_UNZIP	lib/assimp/defs.h	86;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/__assimp/defs.h	75;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/__assimp/defs.h	79;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/__assimp/defs.h	83;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/__assimp/defs.h	88;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/assimp/defs.h	72;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/assimp/defs.h	76;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/assimp/defs.h	80;"	d
ASSIMP_BUILD_NEED_Z_INFLATE	lib/assimp/defs.h	85;"	d
ASSIMP_BUILD_SINGLETHREADED	lib/__assimp/defs.h	226;"	d
ASSIMP_BUILD_SINGLETHREADED	lib/assimp/defs.h	223;"	d
ASSIMP_CFLAGS_DEBUG	lib/__assimp/version.h	89;"	d
ASSIMP_CFLAGS_DEBUG	lib/assimp/version.h	88;"	d
ASSIMP_CFLAGS_NOBOOST	lib/__assimp/version.h	92;"	d
ASSIMP_CFLAGS_NOBOOST	lib/assimp/version.h	91;"	d
ASSIMP_CFLAGS_SHARED	lib/__assimp/version.h	85;"	d
ASSIMP_CFLAGS_SHARED	lib/assimp/version.h	84;"	d
ASSIMP_CFLAGS_SINGLETHREADED	lib/__assimp/version.h	94;"	d
ASSIMP_CFLAGS_SINGLETHREADED	lib/assimp/version.h	93;"	d
ASSIMP_CFLAGS_STLPORT	lib/__assimp/version.h	87;"	d
ASSIMP_CFLAGS_STLPORT	lib/assimp/version.h	86;"	d
ASSIMP_DEFAULT_LOG_NAME	lib/__assimp/DefaultLogger.hpp	57;"	d
ASSIMP_DEFAULT_LOG_NAME	lib/assimp/DefaultLogger.hpp	57;"	d
ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t ATTACHMENT_COUNT = 4;$/;"	m	class:GBuffer	access:public
AccessQualifier	lib/vulkan/spirv.hpp	/^enum AccessQualifier {$/;"	g	namespace:spv
AccessQualifierMax	lib/vulkan/spirv.hpp	/^    AccessQualifierMax = 0x7fffffff,$/;"	e	enum:spv::AccessQualifier
AccessQualifierReadOnly	lib/vulkan/spirv.hpp	/^    AccessQualifierReadOnly = 0,$/;"	e	enum:spv::AccessQualifier
AccessQualifierReadWrite	lib/vulkan/spirv.hpp	/^    AccessQualifierReadWrite = 2,$/;"	e	enum:spv::AccessQualifier
AccessQualifierWriteOnly	lib/vulkan/spirv.hpp	/^    AccessQualifierWriteOnly = 1,$/;"	e	enum:spv::AccessQualifier
AcquireNextImageKHR	lib/vulkan/vk_layer.h	/^    PFN_vkAcquireNextImageKHR AcquireNextImageKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
Add	lib/__assimp/metadata.h	/^	inline void Add(const std::string& key, const T& value)$/;"	f	struct:aiMetadata	access:public	signature:(const std::string& key, const T& value)
AddressingModel	lib/vulkan/spirv.hpp	/^enum AddressingModel {$/;"	g	namespace:spv
AddressingModelLogical	lib/vulkan/spirv.hpp	/^    AddressingModelLogical = 0,$/;"	e	enum:spv::AddressingModel
AddressingModelMax	lib/vulkan/spirv.hpp	/^    AddressingModelMax = 0x7fffffff,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysical32	lib/vulkan/spirv.hpp	/^    AddressingModelPhysical32 = 1,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysical64	lib/vulkan/spirv.hpp	/^    AddressingModelPhysical64 = 2,$/;"	e	enum:spv::AddressingModel
Alloc	lib/__assimp/metadata.h	/^    aiMetadata *Alloc( unsigned int numProperties ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned int numProperties )
AllocateCommandBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateCommandBuffers AllocateCommandBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
AllocateDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateDescriptorSets AllocateDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
AllocateFromAssimpHeap	lib/__assimp/types.h	/^    struct ASSIMP_API AllocateFromAssimpHeap    {$/;"	s	namespace:Assimp::Intern
AllocateFromAssimpHeap	lib/assimp/types.h	/^    struct ASSIMP_API AllocateFromAssimpHeap    {$/;"	s	namespace:Assimp::Intern
AllocateMemory	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateMemory AllocateMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
AndroidJNIIOSystem	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^class ASSIMP_API AndroidJNIIOSystem : public DefaultIOSystem$/;"	c	namespace:Assimp	inherits:DefaultIOSystem
AnimNode	inc/shape/anim_node.h	/^struct AnimNode $/;"	s
AnimNode	src/shape/anim_node.cpp	/^AnimNode::AnimNode(aiNode& assimpNode): $/;"	f	class:AnimNode	signature:(aiNode& assimpNode)
AnimNode::AnimNode	src/shape/anim_node.cpp	/^AnimNode::AnimNode(aiNode& assimpNode): $/;"	f	class:AnimNode	signature:(aiNode& assimpNode)
AnimNode::DEFAULT_TICKS_DURATION	inc/shape/anim_node.h	/^    const static double DEFAULT_TICKS_DURATION;$/;"	m	struct:AnimNode	access:public
AnimNode::DEFAULT_TICKS_DURATION	src/shape/anim_node.cpp	/^const double AnimNode::DEFAULT_TICKS_DURATION = 100.0;$/;"	m	class:AnimNode	file:
AnimNode::DEFAULT_TICKS_PER_SECOND	inc/shape/anim_node.h	/^    const static double DEFAULT_TICKS_PER_SECOND;$/;"	m	struct:AnimNode	access:public
AnimNode::DEFAULT_TICKS_PER_SECOND	src/shape/anim_node.cpp	/^const double AnimNode::DEFAULT_TICKS_PER_SECOND = 25.0;$/;"	m	class:AnimNode	file:
AnimNode::boneIndex	inc/shape/anim_node.h	/^    uint32_t boneIndex;$/;"	m	struct:AnimNode	access:public
AnimNode::getAnimatedTransform	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getAnimatedTransform(float progress, unsigned int animIndex)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex)
AnimNode::getRotation	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getRotation(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
AnimNode::getScaling	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getScaling(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
AnimNode::getTranslation	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getTranslation(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
AnimNode::isAnimatedAtIndex	src/shape/anim_node.cpp	/^bool AnimNode::isAnimatedAtIndex(unsigned int animIndex) const$/;"	f	class:AnimNode	signature:(unsigned int animIndex) const
AnimNode::mAnimTypes	inc/shape/anim_node.h	/^    std::vector<aiNodeAnim*> mAnimTypes;$/;"	m	struct:AnimNode	access:public
AnimNode::mAssimpNode	inc/shape/anim_node.h	/^    aiNode& mAssimpNode;$/;"	m	struct:AnimNode	access:public
AnimNode::mChildren	inc/shape/anim_node.h	/^    std::vector<AnimNode*> mChildren;$/;"	m	struct:AnimNode	access:public
AnimNode::~AnimNode	src/shape/anim_node.cpp	/^AnimNode::~AnimNode()$/;"	f	class:AnimNode	signature:()
Append	lib/__assimp/types.h	/^    void Append (const char* app)   {$/;"	f	struct:aiString	access:public	signature:(const char* app)
Append	lib/assimp/types.h	/^    void Append (const char* app)   {$/;"	f	struct:aiString	access:public	signature:(const char* app)
Assimp	lib/__assimp/DefaultIOStream.h	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/DefaultIOSystem.h	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/DefaultLogger.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/Exporter.hpp	/^namespace Assimp {$/;"	n
Assimp	lib/__assimp/IOStream.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/IOSystem.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/Importer.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/LogStream.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/Logger.hpp	/^namespace Assimp {$/;"	n
Assimp	lib/__assimp/NullLogger.hpp	/^namespace Assimp {$/;"	n
Assimp	lib/__assimp/ProgressHandler.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/__assimp/anim.h	/^namespace Assimp {$/;"	n
Assimp	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^namespace Assimp	{$/;"	n
Assimp	lib/__assimp/types.h	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/DefaultLogger.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/Exporter.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/IOStream.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/IOSystem.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/Importer.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/LogStream.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/Logger.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/NullLogger.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/ProgressHandler.hpp	/^namespace Assimp    {$/;"	n
Assimp	lib/assimp/anim.h	/^namespace Assimp {$/;"	n
Assimp	lib/assimp/types.h	/^namespace Assimp    {$/;"	n
Assimp::AndroidJNIIOSystem	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^class ASSIMP_API AndroidJNIIOSystem : public DefaultIOSystem$/;"	c	namespace:Assimp	inherits:DefaultIOSystem
Assimp::AndroidJNIIOSystem::mApkAssetManager	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^	AAssetManager* mApkAssetManager;$/;"	m	class:Assimp::AndroidJNIIOSystem	access:public
Assimp::AndroidJNIIOSystem::mApkWorkspacePath	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^	std::string mApkWorkspacePath;$/;"	m	class:Assimp::AndroidJNIIOSystem	access:public
Assimp::DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^class ASSIMP_API DefaultIOStream : public IOStream$/;"	c	namespace:Assimp	inherits:IOStream
Assimp::DefaultIOStream::DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^inline DefaultIOStream::DefaultIOStream () :$/;"	f	class:Assimp::DefaultIOStream	signature:()
Assimp::DefaultIOStream::DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^inline DefaultIOStream::DefaultIOStream (FILE* pFile,$/;"	f	class:Assimp::DefaultIOStream	signature:(FILE* pFile, const std::string &strFilename)
Assimp::DefaultIOStream::mCachedSize	lib/__assimp/DefaultIOStream.h	/^    mutable size_t mCachedSize;$/;"	m	class:Assimp::DefaultIOStream	access:private
Assimp::DefaultIOStream::mFile	lib/__assimp/DefaultIOStream.h	/^    FILE* mFile;$/;"	m	class:Assimp::DefaultIOStream	access:private
Assimp::DefaultIOStream::mFilename	lib/__assimp/DefaultIOStream.h	/^    std::string mFilename;$/;"	m	class:Assimp::DefaultIOStream	access:private
Assimp::DefaultIOSystem	lib/__assimp/DefaultIOSystem.h	/^class ASSIMP_API DefaultIOSystem : public IOSystem$/;"	c	namespace:Assimp	inherits:IOSystem
Assimp::DefaultLogger	lib/__assimp/DefaultLogger.hpp	/^class ASSIMP_API DefaultLogger :$/;"	c	namespace:Assimp	inherits:Logger
Assimp::DefaultLogger	lib/assimp/DefaultLogger.hpp	/^class ASSIMP_API DefaultLogger :$/;"	c	namespace:Assimp	inherits:Logger
Assimp::DefaultLogger::ConstStreamIt	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::const_iterator ConstStreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::ConstStreamIt	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::const_iterator ConstStreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::StreamArray	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*> StreamArray;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::StreamArray	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*> StreamArray;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::StreamIt	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::iterator StreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::StreamIt	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::iterator StreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::lastLen	lib/__assimp/DefaultLogger.hpp	/^    size_t lastLen;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::lastLen	lib/assimp/DefaultLogger.hpp	/^    size_t lastLen;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::lastMsg	lib/__assimp/DefaultLogger.hpp	/^    char lastMsg[MAX_LOG_MESSAGE_LENGTH*2];$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::lastMsg	lib/assimp/DefaultLogger.hpp	/^    char lastMsg[MAX_LOG_MESSAGE_LENGTH*2];$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::m_StreamArray	lib/__assimp/DefaultLogger.hpp	/^    StreamArray m_StreamArray;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::m_StreamArray	lib/assimp/DefaultLogger.hpp	/^    StreamArray m_StreamArray;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::m_pLogger	lib/__assimp/DefaultLogger.hpp	/^    static Logger *m_pLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::m_pLogger	lib/assimp/DefaultLogger.hpp	/^    static Logger *m_pLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::noRepeatMsg	lib/__assimp/DefaultLogger.hpp	/^    bool noRepeatMsg;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::noRepeatMsg	lib/assimp/DefaultLogger.hpp	/^    bool noRepeatMsg;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::s_pNullLogger	lib/__assimp/DefaultLogger.hpp	/^    static NullLogger s_pNullLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::DefaultLogger::s_pNullLogger	lib/assimp/DefaultLogger.hpp	/^    static NullLogger s_pNullLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
Assimp::ExportProperties	lib/__assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties {$/;"	c	namespace:Assimp
Assimp::ExportProperties	lib/__assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties;$/;"	m	namespace:Assimp	typeref:class:Assimp::ASSIMP_API
Assimp::ExportProperties	lib/assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties$/;"	c	namespace:Assimp
Assimp::ExportProperties	lib/assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties;$/;"	m	namespace:Assimp	typeref:class:Assimp::ASSIMP_API
Assimp::ExportProperties::FloatPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, ai_real> FloatPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::FloatPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, float> FloatPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::GetPropertyBool	lib/__assimp/Exporter.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool bErrorReturn = false) const
Assimp::ExportProperties::GetPropertyBool	lib/assimp/Exporter.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool bErrorReturn = false) const
Assimp::ExportProperties::IntPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, int> IntPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::IntPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, int> IntPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::KeyType	lib/__assimp/Exporter.hpp	/^    typedef unsigned int KeyType;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::KeyType	lib/assimp/Exporter.hpp	/^    typedef unsigned int KeyType;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::MatrixPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, aiMatrix4x4> MatrixPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::MatrixPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, aiMatrix4x4> MatrixPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::SetPropertyBool	lib/__assimp/Exporter.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool value)
Assimp::ExportProperties::SetPropertyBool	lib/assimp/Exporter.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool value)
Assimp::ExportProperties::StringPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, std::string> StringPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::StringPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, std::string> StringPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Assimp::ExportProperties::mFloatProperties	lib/__assimp/Exporter.hpp	/^    FloatPropertyMap mFloatProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mFloatProperties	lib/assimp/Exporter.hpp	/^    FloatPropertyMap mFloatProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mIntProperties	lib/__assimp/Exporter.hpp	/^    IntPropertyMap mIntProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mIntProperties	lib/assimp/Exporter.hpp	/^    IntPropertyMap mIntProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mMatrixProperties	lib/__assimp/Exporter.hpp	/^    MatrixPropertyMap mMatrixProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mMatrixProperties	lib/assimp/Exporter.hpp	/^    MatrixPropertyMap mMatrixProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mStringProperties	lib/__assimp/Exporter.hpp	/^    StringPropertyMap mStringProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::ExportProperties::mStringProperties	lib/assimp/Exporter.hpp	/^    StringPropertyMap mStringProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
Assimp::Exporter	lib/__assimp/Exporter.hpp	/^class ASSIMP_API Exporter {$/;"	c	namespace:Assimp
Assimp::Exporter	lib/assimp/Exporter.hpp	/^class ASSIMP_API Exporter$/;"	c	namespace:Assimp
Assimp::Exporter::Export	lib/__assimp/Exporter.hpp	/^aiReturn Exporter :: Export( const aiScene* pScene, const std::string& pFormatId, $/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)
Assimp::Exporter::Export	lib/assimp/Exporter.hpp	/^inline aiReturn Exporter :: Export( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)
Assimp::Exporter::ExportFormatEntry	lib/__assimp/Exporter.hpp	/^    struct ExportFormatEntry$/;"	s	class:Assimp::Exporter	access:public
Assimp::Exporter::ExportFormatEntry	lib/assimp/Exporter.hpp	/^    struct ExportFormatEntry$/;"	s	class:Assimp::Exporter	access:public
Assimp::Exporter::ExportFormatEntry::ExportFormatEntry	lib/__assimp/Exporter.hpp	/^        ExportFormatEntry( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)
Assimp::Exporter::ExportFormatEntry::ExportFormatEntry	lib/__assimp/Exporter.hpp	/^        ExportFormatEntry() :$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:()
Assimp::Exporter::ExportFormatEntry::ExportFormatEntry	lib/assimp/Exporter.hpp	/^        ExportFormatEntry( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)
Assimp::Exporter::ExportFormatEntry::ExportFormatEntry	lib/assimp/Exporter.hpp	/^        ExportFormatEntry() :$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:()
Assimp::Exporter::ExportFormatEntry::mDescription	lib/__assimp/Exporter.hpp	/^        aiExportFormatDesc mDescription;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportFormatEntry::mDescription	lib/assimp/Exporter.hpp	/^        aiExportFormatDesc mDescription;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportFormatEntry::mEnforcePP	lib/__assimp/Exporter.hpp	/^        unsigned int mEnforcePP;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportFormatEntry::mEnforcePP	lib/assimp/Exporter.hpp	/^        unsigned int mEnforcePP;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportFormatEntry::mExportFunction	lib/__assimp/Exporter.hpp	/^        fpExportFunc mExportFunction;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportFormatEntry::mExportFunction	lib/assimp/Exporter.hpp	/^        fpExportFunc mExportFunction;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
Assimp::Exporter::ExportToBlob	lib/__assimp/Exporter.hpp	/^const aiExportDataBlob* Exporter::ExportToBlob(  const aiScene* pScene, const std::string& pFormatId,$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, unsigned int pPreprocessing, const ExportProperties* pProperties)
Assimp::Exporter::ExportToBlob	lib/assimp/Exporter.hpp	/^inline const aiExportDataBlob* Exporter :: ExportToBlob(  const aiScene* pScene, const std::string& pFormatId,unsigned int pPreprocessing, const ExportProperties* pProperties)$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId,unsigned int pPreprocessing, const ExportProperties* pProperties)
Assimp::Exporter::fpExportFunc	lib/__assimp/Exporter.hpp	/^    typedef void (*fpExportFunc)(const char*, IOSystem*, const aiScene*, const ExportProperties*);$/;"	t	class:Assimp::Exporter	access:public
Assimp::Exporter::fpExportFunc	lib/assimp/Exporter.hpp	/^    typedef void (*fpExportFunc)(const char*, IOSystem*, const aiScene*, const ExportProperties*);$/;"	t	class:Assimp::Exporter	access:public
Assimp::Exporter::pimpl	lib/__assimp/Exporter.hpp	/^    ExporterPimpl* pimpl;$/;"	m	class:Assimp::Exporter	access:protected
Assimp::Exporter::pimpl	lib/assimp/Exporter.hpp	/^    ExporterPimpl* pimpl;$/;"	m	class:Assimp::Exporter	access:protected
Assimp::IOStream	lib/__assimp/IOStream.hpp	/^class ASSIMP_API IOStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::IOStream	lib/assimp/IOStream.hpp	/^class ASSIMP_API IOStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::IOStream::IOStream	lib/__assimp/IOStream.hpp	/^inline IOStream::IOStream()$/;"	f	class:Assimp::IOStream	signature:()
Assimp::IOStream::IOStream	lib/assimp/IOStream.hpp	/^inline IOStream::IOStream()$/;"	f	class:Assimp::IOStream	signature:()
Assimp::IOStream::~IOStream	lib/__assimp/IOStream.hpp	/^inline IOStream::~IOStream()$/;"	f	class:Assimp::IOStream	signature:()
Assimp::IOStream::~IOStream	lib/assimp/IOStream.hpp	/^inline IOStream::~IOStream()$/;"	f	class:Assimp::IOStream	signature:()
Assimp::IOSystem	lib/__assimp/IOSystem.hpp	/^class ASSIMP_API IOSystem$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::IOSystem	lib/assimp/IOSystem.hpp	/^class ASSIMP_API IOSystem$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::IOSystem::ComparePaths	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::ComparePaths (const std::string& one,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& one, const std::string& second) const
Assimp::IOSystem::ComparePaths	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::ComparePaths (const std::string& one,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& one, const std::string& second) const
Assimp::IOSystem::CurrentDirectory	lib/__assimp/IOSystem.hpp	/^inline const std::string &IOSystem::CurrentDirectory() const {$/;"	f	class:Assimp::IOSystem	signature:() const
Assimp::IOSystem::CurrentDirectory	lib/assimp/IOSystem.hpp	/^inline const std::string &IOSystem::CurrentDirectory() const {$/;"	f	class:Assimp::IOSystem	signature:() const
Assimp::IOSystem::Exists	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE bool IOSystem::Exists( const std::string& pFile) const$/;"	f	class:Assimp::IOSystem	signature:( const std::string& pFile) const
Assimp::IOSystem::Exists	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE bool IOSystem::Exists( const std::string& pFile) const$/;"	f	class:Assimp::IOSystem	signature:( const std::string& pFile) const
Assimp::IOSystem::IOSystem	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::IOSystem() :$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::IOSystem::IOSystem	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::IOSystem() :$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::IOSystem::Open	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOStream* IOSystem::Open(const std::string& pFile,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& pFile, const std::string& pMode)
Assimp::IOSystem::Open	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOStream* IOSystem::Open(const std::string& pFile,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& pFile, const std::string& pMode)
Assimp::IOSystem::PopDirectory	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::PopDirectory() {$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::IOSystem::PopDirectory	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::PopDirectory() {$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::IOSystem::PushDirectory	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::PushDirectory( const std::string &path ) {$/;"	f	class:Assimp::IOSystem	signature:( const std::string &path )
Assimp::IOSystem::PushDirectory	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::PushDirectory( const std::string &path ) {$/;"	f	class:Assimp::IOSystem	signature:( const std::string &path )
Assimp::IOSystem::StackSize	lib/__assimp/IOSystem.hpp	/^inline size_t IOSystem::StackSize() const {$/;"	f	class:Assimp::IOSystem	signature:() const
Assimp::IOSystem::StackSize	lib/assimp/IOSystem.hpp	/^inline size_t IOSystem::StackSize() const {$/;"	f	class:Assimp::IOSystem	signature:() const
Assimp::IOSystem::m_pathStack	lib/__assimp/IOSystem.hpp	/^    std::vector<std::string> m_pathStack;$/;"	m	class:Assimp::IOSystem	access:private
Assimp::IOSystem::m_pathStack	lib/assimp/IOSystem.hpp	/^    std::vector<std::string> m_pathStack;$/;"	m	class:Assimp::IOSystem	access:private
Assimp::IOSystem::~IOSystem	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::~IOSystem()$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::IOSystem::~IOSystem	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::~IOSystem()$/;"	f	class:Assimp::IOSystem	signature:()
Assimp::Importer	lib/__assimp/Importer.hpp	/^class ASSIMP_API Importer   {$/;"	c	namespace:Assimp
Assimp::Importer	lib/assimp/Importer.hpp	/^class ASSIMP_API Importer   {$/;"	c	namespace:Assimp
Assimp::Importer::GetExtensionList	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE void Importer::GetExtensionList(std::string& szOut) const   {$/;"	f	class:Assimp::Importer	signature:(std::string& szOut) const
Assimp::Importer::GetExtensionList	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE void Importer::GetExtensionList(std::string& szOut) const   {$/;"	f	class:Assimp::Importer	signature:(std::string& szOut) const
Assimp::Importer::GetPropertyBool	lib/__assimp/Importer.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool bErrorReturn = false) const
Assimp::Importer::GetPropertyBool	lib/assimp/Importer.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool bErrorReturn = false) const
Assimp::Importer::IsExtensionSupported	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE bool Importer::IsExtensionSupported(const std::string& szExtension) const   {$/;"	f	class:Assimp::Importer	signature:(const std::string& szExtension) const
Assimp::Importer::IsExtensionSupported	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE bool Importer::IsExtensionSupported(const std::string& szExtension) const   {$/;"	f	class:Assimp::Importer	signature:(const std::string& szExtension) const
Assimp::Importer::MaxLenHint	lib/__assimp/Importer.hpp	/^    static const unsigned int MaxLenHint = 200;$/;"	m	class:Assimp::Importer	access:public
Assimp::Importer::MaxLenHint	lib/assimp/Importer.hpp	/^    static const unsigned int MaxLenHint = 200; $/;"	m	class:Assimp::Importer	access:public
Assimp::Importer::Pimpl	lib/__assimp/Importer.hpp	/^    ImporterPimpl* Pimpl() { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:()
Assimp::Importer::Pimpl	lib/__assimp/Importer.hpp	/^    const ImporterPimpl* Pimpl() const { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:() const
Assimp::Importer::Pimpl	lib/assimp/Importer.hpp	/^    ImporterPimpl* Pimpl() { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:()
Assimp::Importer::Pimpl	lib/assimp/Importer.hpp	/^    const ImporterPimpl* Pimpl() const { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:() const
Assimp::Importer::ReadFile	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE const aiScene* Importer::ReadFile( const std::string& pFile,unsigned int pFlags){$/;"	f	class:Assimp::Importer	signature:( const std::string& pFile,unsigned int pFlags)
Assimp::Importer::ReadFile	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE const aiScene* Importer::ReadFile( const std::string& pFile,unsigned int pFlags){$/;"	f	class:Assimp::Importer	signature:( const std::string& pFile,unsigned int pFlags)
Assimp::Importer::SetPropertyBool	lib/__assimp/Importer.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool value)
Assimp::Importer::SetPropertyBool	lib/assimp/Importer.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool value)
Assimp::Importer::pimpl	lib/__assimp/Importer.hpp	/^    ImporterPimpl* pimpl;$/;"	m	class:Assimp::Importer	access:protected
Assimp::Importer::pimpl	lib/assimp/Importer.hpp	/^    ImporterPimpl* pimpl;$/;"	m	class:Assimp::Importer	access:protected
Assimp::Intern	lib/__assimp/types.h	/^namespace Intern        {$/;"	n	namespace:Assimp
Assimp::Intern	lib/assimp/types.h	/^namespace Intern        {$/;"	n	namespace:Assimp
Assimp::Intern::AllocateFromAssimpHeap	lib/__assimp/types.h	/^    struct ASSIMP_API AllocateFromAssimpHeap    {$/;"	s	namespace:Assimp::Intern
Assimp::Intern::AllocateFromAssimpHeap	lib/assimp/types.h	/^    struct ASSIMP_API AllocateFromAssimpHeap    {$/;"	s	namespace:Assimp::Intern
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator <aiQuaternion>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator <unsigned int>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiMeshKey>     {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiQuatKey>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiVectorKey>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator  <aiVectorKey>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiMeshKey>     {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiQuatKey>     {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiQuaternion>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator <unsigned int>  {$/;"	s	namespace:Assimp
Assimp::Interpolator	lib/assimp/anim.h	/^struct Interpolator$/;"	s	namespace:Assimp
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (T& out,const T& a, const T& b, ai_real d) const {$/;"	f	struct:Assimp::Interpolator	access:public	signature:(T& out,const T& a, const T& b, ai_real d) const
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (aiQuaternion& out, const aiQuatKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out, const aiQuatKey& a, const aiQuatKey& b, ai_real d) const
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (aiQuaternion& out,const aiQuaternion& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out,const aiQuaternion& a, const aiQuaternion& b, ai_real d) const
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (aiVector3D& out,const aiVectorKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiVector3D& out,const aiVectorKey& a, const aiVectorKey& b, ai_real d) const
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (unsigned int& out, const aiMeshKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out, const aiMeshKey& a, const aiMeshKey& b, ai_real d) const
Assimp::Interpolator::operator ()	lib/__assimp/anim.h	/^    void operator () (unsigned int& out,unsigned int a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out,unsigned int a, unsigned int b, ai_real d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (T& out,const T& a, const T& b, float d) const {$/;"	f	struct:Assimp::Interpolator	access:public	signature:(T& out,const T& a, const T& b, float d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (aiQuaternion& out, const aiQuatKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out, const aiQuatKey& a, const aiQuatKey& b, float d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (aiQuaternion& out,const aiQuaternion& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out,const aiQuaternion& a, const aiQuaternion& b, float d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (aiVector3D& out,const aiVectorKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiVector3D& out,const aiVectorKey& a, const aiVectorKey& b, float d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (unsigned int& out, const aiMeshKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out, const aiMeshKey& a, const aiMeshKey& b, float d) const
Assimp::Interpolator::operator ()	lib/assimp/anim.h	/^    void operator () (unsigned int& out,unsigned int a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out,unsigned int a, unsigned int b, float d) const
Assimp::LogStream	lib/__assimp/LogStream.hpp	/^class ASSIMP_API LogStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::LogStream	lib/assimp/LogStream.hpp	/^class ASSIMP_API LogStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::LogStream::LogStream	lib/__assimp/LogStream.hpp	/^    LogStream() {$/;"	f	class:Assimp::LogStream	access:protected	signature:()
Assimp::LogStream::LogStream	lib/assimp/LogStream.hpp	/^    LogStream() {$/;"	f	class:Assimp::LogStream	access:protected	signature:()
Assimp::LogStream::~LogStream	lib/__assimp/LogStream.hpp	/^    virtual ~LogStream() {$/;"	f	class:Assimp::LogStream	access:public	signature:()
Assimp::LogStream::~LogStream	lib/assimp/LogStream.hpp	/^    virtual ~LogStream() {$/;"	f	class:Assimp::LogStream	access:public	signature:()
Assimp::Logger	lib/__assimp/Logger.hpp	/^class ASSIMP_API Logger$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::Logger	lib/assimp/Logger.hpp	/^class ASSIMP_API Logger$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::Logger::Debugging	lib/__assimp/Logger.hpp	/^        Debugging   = 1,    \/\/!< Debug log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::Debugging	lib/assimp/Logger.hpp	/^        Debugging   = 1,    \/\/!< Debug log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::Err	lib/__assimp/Logger.hpp	/^        Err         = 8     \/\/!< Error log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::Err	lib/assimp/Logger.hpp	/^        Err         = 8     \/\/!< Error log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::ErrorSeverity	lib/__assimp/Logger.hpp	/^    enum ErrorSeverity$/;"	g	class:Assimp::Logger	access:public
Assimp::Logger::ErrorSeverity	lib/assimp/Logger.hpp	/^    enum ErrorSeverity$/;"	g	class:Assimp::Logger	access:public
Assimp::Logger::Info	lib/__assimp/Logger.hpp	/^        Info        = 2,    \/\/!< Info log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::Info	lib/assimp/Logger.hpp	/^        Info        = 2,    \/\/!< Info log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::LogSeverity	lib/__assimp/Logger.hpp	/^    enum LogSeverity$/;"	g	class:Assimp::Logger	access:public
Assimp::Logger::LogSeverity	lib/assimp/Logger.hpp	/^    enum LogSeverity$/;"	g	class:Assimp::Logger	access:public
Assimp::Logger::Logger	lib/__assimp/Logger.hpp	/^inline Logger::Logger() {$/;"	f	class:Assimp::Logger	signature:()
Assimp::Logger::Logger	lib/__assimp/Logger.hpp	/^inline Logger::Logger(LogSeverity severity) {$/;"	f	class:Assimp::Logger	signature:(LogSeverity severity)
Assimp::Logger::Logger	lib/assimp/Logger.hpp	/^inline Logger::Logger() {$/;"	f	class:Assimp::Logger	signature:()
Assimp::Logger::Logger	lib/assimp/Logger.hpp	/^inline Logger::Logger(LogSeverity severity) {$/;"	f	class:Assimp::Logger	signature:(LogSeverity severity)
Assimp::Logger::NORMAL	lib/__assimp/Logger.hpp	/^        NORMAL,     \/\/!< Normal granularity of logging$/;"	e	enum:Assimp::Logger::LogSeverity
Assimp::Logger::NORMAL	lib/assimp/Logger.hpp	/^        NORMAL,     \/\/!< Normal granularity of logging$/;"	e	enum:Assimp::Logger::LogSeverity
Assimp::Logger::VERBOSE	lib/__assimp/Logger.hpp	/^        VERBOSE     \/\/!< Debug infos will be logged, too$/;"	e	enum:Assimp::Logger::LogSeverity
Assimp::Logger::VERBOSE	lib/assimp/Logger.hpp	/^        VERBOSE     \/\/!< Debug infos will be logged, too$/;"	e	enum:Assimp::Logger::LogSeverity
Assimp::Logger::Warn	lib/__assimp/Logger.hpp	/^        Warn        = 4,    \/\/!< Warn log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::Warn	lib/assimp/Logger.hpp	/^        Warn        = 4,    \/\/!< Warn log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Assimp::Logger::debug	lib/__assimp/Logger.hpp	/^inline void Logger::debug(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::debug	lib/assimp/Logger.hpp	/^inline void Logger::debug(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::error	lib/__assimp/Logger.hpp	/^inline void Logger::error(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::error	lib/assimp/Logger.hpp	/^inline void Logger::error(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::getLogSeverity	lib/__assimp/Logger.hpp	/^inline Logger::LogSeverity Logger::getLogSeverity() const {$/;"	f	class:Assimp::Logger	signature:() const
Assimp::Logger::getLogSeverity	lib/assimp/Logger.hpp	/^inline Logger::LogSeverity Logger::getLogSeverity() const {$/;"	f	class:Assimp::Logger	signature:() const
Assimp::Logger::info	lib/__assimp/Logger.hpp	/^inline void Logger::info(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::info	lib/assimp/Logger.hpp	/^inline void Logger::info(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::m_Severity	lib/__assimp/Logger.hpp	/^    LogSeverity m_Severity;$/;"	m	class:Assimp::Logger	access:protected
Assimp::Logger::m_Severity	lib/assimp/Logger.hpp	/^    LogSeverity m_Severity;$/;"	m	class:Assimp::Logger	access:protected
Assimp::Logger::setLogSeverity	lib/__assimp/Logger.hpp	/^inline void Logger::setLogSeverity(LogSeverity log_severity){$/;"	f	class:Assimp::Logger	signature:(LogSeverity log_severity)
Assimp::Logger::setLogSeverity	lib/assimp/Logger.hpp	/^inline void Logger::setLogSeverity(LogSeverity log_severity){$/;"	f	class:Assimp::Logger	signature:(LogSeverity log_severity)
Assimp::Logger::warn	lib/__assimp/Logger.hpp	/^inline void Logger::warn(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::warn	lib/assimp/Logger.hpp	/^inline void Logger::warn(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
Assimp::Logger::~Logger	lib/__assimp/Logger.hpp	/^inline  Logger::~Logger()$/;"	f	class:Assimp::Logger	signature:()
Assimp::Logger::~Logger	lib/assimp/Logger.hpp	/^inline  Logger::~Logger()$/;"	f	class:Assimp::Logger	signature:()
Assimp::NullLogger	lib/__assimp/NullLogger.hpp	/^class ASSIMP_API NullLogger$/;"	c	namespace:Assimp	inherits:Logger
Assimp::NullLogger	lib/assimp/NullLogger.hpp	/^class ASSIMP_API NullLogger$/;"	c	namespace:Assimp	inherits:Logger
Assimp::NullLogger::OnDebug	lib/__assimp/NullLogger.hpp	/^    void OnDebug(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnDebug	lib/assimp/NullLogger.hpp	/^    void OnDebug(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnError	lib/__assimp/NullLogger.hpp	/^    void OnError(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnError	lib/assimp/NullLogger.hpp	/^    void OnError(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnInfo	lib/__assimp/NullLogger.hpp	/^    void OnInfo(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnInfo	lib/assimp/NullLogger.hpp	/^    void OnInfo(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnWarn	lib/__assimp/NullLogger.hpp	/^    void OnWarn(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::OnWarn	lib/assimp/NullLogger.hpp	/^    void OnWarn(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Assimp::NullLogger::attachStream	lib/__assimp/NullLogger.hpp	/^    bool attachStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
Assimp::NullLogger::attachStream	lib/assimp/NullLogger.hpp	/^    bool attachStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
Assimp::NullLogger::detatchStream	lib/__assimp/NullLogger.hpp	/^    bool detatchStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
Assimp::NullLogger::detatchStream	lib/assimp/NullLogger.hpp	/^    bool detatchStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
Assimp::ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^class ASSIMP_API ProgressHandler$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::ProgressHandler	lib/assimp/ProgressHandler.hpp	/^class ASSIMP_API ProgressHandler$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Assimp::ProgressHandler::ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^    ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:protected	signature:()
Assimp::ProgressHandler::ProgressHandler	lib/assimp/ProgressHandler.hpp	/^    ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:protected	signature:()
Assimp::ProgressHandler::UpdateFileRead	lib/__assimp/ProgressHandler.hpp	/^    virtual void UpdateFileRead(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
Assimp::ProgressHandler::UpdateFileRead	lib/assimp/ProgressHandler.hpp	/^    virtual void UpdateFileRead(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
Assimp::ProgressHandler::UpdatePostProcess	lib/__assimp/ProgressHandler.hpp	/^    virtual void UpdatePostProcess(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
Assimp::ProgressHandler::UpdatePostProcess	lib/assimp/ProgressHandler.hpp	/^    virtual void UpdatePostProcess(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
Assimp::ProgressHandler::~ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^    virtual ~ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:()
Assimp::ProgressHandler::~ProgressHandler	lib/assimp/ProgressHandler.hpp	/^    virtual ~ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:()
BIN_DIR	Makefile	/^BIN_DIR := bin$/;"	m
BONE_INDEX_UNSET	inc/shape/anim_node.h	10;"	d
BeginCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkBeginCommandBuffer BeginCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
BindBufferMemory	lib/vulkan/vk_layer.h	/^    PFN_vkBindBufferMemory BindBufferMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
BindImageMemory	lib/vulkan/vk_layer.h	/^    PFN_vkBindImageMemory BindImageMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
BufferHelper	inc/creator/buffer_helper.h	/^namespace BufferHelper $/;"	n
BufferHelper::copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer src, VkBuffer dst, VkDeviceSize size)
BufferHelper::copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, const VkCommandPool& commandPool, const VkQueue& queue, VkBuffer src, VkBuffer dst, VkDeviceSize offset, VkDeviceSize size)
BufferHelper::copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, const VkCommandPool& commandPool, const VkQueue& queue, VkBuffer src, VkBuffer dst, VkDeviceSize size)
BufferHelper::createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, BufferInfo& bufferInfo, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
BufferHelper::createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
BufferHelper::createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
BufferHelper::createCommonBuffer	inc/creator/buffer_helper.h	/^inline void createCommonBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::createDynamicUniformBuffer	inc/creator/buffer_helper.h	/^inline void createDynamicUniformBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::createIndexBuffer	inc/creator/buffer_helper.h	/^inline void createIndexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, BufferInfo& bufferInfo)
BufferHelper::createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory)
BufferHelper::createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory)
BufferHelper::createUniformBuffer	inc/creator/buffer_helper.h	/^inline void createUniformBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::createVertexAndIndexBuffer	inc/creator/buffer_helper.h	/^inline void createVertexAndIndexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::createVertexBuffer	inc/creator/buffer_helper.h	/^inline void createVertexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
BufferHelper::getMemoryType	inc/creator/buffer_helper.h	/^inline uint32_t getMemoryType($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, uint32_t typeFilter, VkMemoryPropertyFlags flags)
BufferHelper::mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory($/;"	f	namespace:BufferHelper	signature:( const State& state, VkDeviceMemory& memory, VkDeviceSize offset, VkDeviceSize size, const void* src)
BufferHelper::mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, VkDeviceMemory& memory, VkDeviceSize offset, VkDeviceSize size, const void* src)
BufferHelper::mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory(const State& state, BufferInfo& bufferInfo, const void* src)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo, const void* src)
BufferHelper::mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory(const State& state, VkDeviceMemory& memory, VkDeviceSize size, const void* src)$/;"	f	namespace:BufferHelper	signature:(const State& state, VkDeviceMemory& memory, VkDeviceSize size, const void* src)
BufferInfo	inc/buffer_info.h	/^class BufferInfo {$/;"	c
BufferInfo	src/buffer_info.cpp	/^BufferInfo::BufferInfo(const VkDevice& device):$/;"	f	class:BufferInfo	signature:(const VkDevice& device)
BufferInfo	src/buffer_info.cpp	/^BufferInfo::BufferInfo(const VkDevice& device, VkDeviceSize size):$/;"	f	class:BufferInfo	signature:(const VkDevice& device, VkDeviceSize size)
BufferInfo::BufferInfo	src/buffer_info.cpp	/^BufferInfo::BufferInfo(const VkDevice& device):$/;"	f	class:BufferInfo	signature:(const VkDevice& device)
BufferInfo::BufferInfo	src/buffer_info.cpp	/^BufferInfo::BufferInfo(const VkDevice& device, VkDeviceSize size):$/;"	f	class:BufferInfo	signature:(const VkDevice& device, VkDeviceSize size)
BufferInfo::buffer	inc/buffer_info.h	/^	VkBuffer buffer;$/;"	m	class:BufferInfo	access:public
BufferInfo::mVkDevice	inc/buffer_info.h	/^	const VkDevice& mVkDevice;$/;"	m	class:BufferInfo	access:private
BufferInfo::memory	inc/buffer_info.h	/^	VkDeviceMemory memory;$/;"	m	class:BufferInfo	access:public
BufferInfo::size	inc/buffer_info.h	/^	VkDeviceSize size;$/;"	m	class:BufferInfo	access:public
BufferInfo::~BufferInfo	src/buffer_info.cpp	/^BufferInfo::~BufferInfo() $/;"	f	class:BufferInfo	signature:()
BuiltIn	lib/vulkan/spirv.hpp	/^enum BuiltIn {$/;"	g	namespace:spv
BuiltInClipDistance	lib/vulkan/spirv.hpp	/^    BuiltInClipDistance = 3,$/;"	e	enum:spv::BuiltIn
BuiltInCullDistance	lib/vulkan/spirv.hpp	/^    BuiltInCullDistance = 4,$/;"	e	enum:spv::BuiltIn
BuiltInEnqueuedWorkgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInEnqueuedWorkgroupSize = 32,$/;"	e	enum:spv::BuiltIn
BuiltInFragCoord	lib/vulkan/spirv.hpp	/^    BuiltInFragCoord = 15,$/;"	e	enum:spv::BuiltIn
BuiltInFragDepth	lib/vulkan/spirv.hpp	/^    BuiltInFragDepth = 22,$/;"	e	enum:spv::BuiltIn
BuiltInFrontFacing	lib/vulkan/spirv.hpp	/^    BuiltInFrontFacing = 17,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInGlobalInvocationId = 28,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalLinearId	lib/vulkan/spirv.hpp	/^    BuiltInGlobalLinearId = 34,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalOffset	lib/vulkan/spirv.hpp	/^    BuiltInGlobalOffset = 33,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalSize	lib/vulkan/spirv.hpp	/^    BuiltInGlobalSize = 31,$/;"	e	enum:spv::BuiltIn
BuiltInHelperInvocation	lib/vulkan/spirv.hpp	/^    BuiltInHelperInvocation = 23,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceId	lib/vulkan/spirv.hpp	/^    BuiltInInstanceId = 6,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceIndex	lib/vulkan/spirv.hpp	/^    BuiltInInstanceIndex = 43,$/;"	e	enum:spv::BuiltIn
BuiltInInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInInvocationId = 8,$/;"	e	enum:spv::BuiltIn
BuiltInLayer	lib/vulkan/spirv.hpp	/^    BuiltInLayer = 9,$/;"	e	enum:spv::BuiltIn
BuiltInLocalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInLocalInvocationId = 27,$/;"	e	enum:spv::BuiltIn
BuiltInLocalInvocationIndex	lib/vulkan/spirv.hpp	/^    BuiltInLocalInvocationIndex = 29,$/;"	e	enum:spv::BuiltIn
BuiltInMax	lib/vulkan/spirv.hpp	/^    BuiltInMax = 0x7fffffff,$/;"	e	enum:spv::BuiltIn
BuiltInNumEnqueuedSubgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumEnqueuedSubgroups = 39,$/;"	e	enum:spv::BuiltIn
BuiltInNumSubgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumSubgroups = 38,$/;"	e	enum:spv::BuiltIn
BuiltInNumWorkgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumWorkgroups = 24,$/;"	e	enum:spv::BuiltIn
BuiltInPatchVertices	lib/vulkan/spirv.hpp	/^    BuiltInPatchVertices = 14,$/;"	e	enum:spv::BuiltIn
BuiltInPointCoord	lib/vulkan/spirv.hpp	/^    BuiltInPointCoord = 16,$/;"	e	enum:spv::BuiltIn
BuiltInPointSize	lib/vulkan/spirv.hpp	/^    BuiltInPointSize = 1,$/;"	e	enum:spv::BuiltIn
BuiltInPosition	lib/vulkan/spirv.hpp	/^    BuiltInPosition = 0,$/;"	e	enum:spv::BuiltIn
BuiltInPrimitiveId	lib/vulkan/spirv.hpp	/^    BuiltInPrimitiveId = 7,$/;"	e	enum:spv::BuiltIn
BuiltInSampleId	lib/vulkan/spirv.hpp	/^    BuiltInSampleId = 18,$/;"	e	enum:spv::BuiltIn
BuiltInSampleMask	lib/vulkan/spirv.hpp	/^    BuiltInSampleMask = 20,$/;"	e	enum:spv::BuiltIn
BuiltInSamplePosition	lib/vulkan/spirv.hpp	/^    BuiltInSamplePosition = 19,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupId	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupId = 40,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLocalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupLocalInvocationId = 41,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupMaxSize	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupMaxSize = 37,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupSize = 36,$/;"	e	enum:spv::BuiltIn
BuiltInTessCoord	lib/vulkan/spirv.hpp	/^    BuiltInTessCoord = 13,$/;"	e	enum:spv::BuiltIn
BuiltInTessLevelInner	lib/vulkan/spirv.hpp	/^    BuiltInTessLevelInner = 12,$/;"	e	enum:spv::BuiltIn
BuiltInTessLevelOuter	lib/vulkan/spirv.hpp	/^    BuiltInTessLevelOuter = 11,$/;"	e	enum:spv::BuiltIn
BuiltInVertexId	lib/vulkan/spirv.hpp	/^    BuiltInVertexId = 5,$/;"	e	enum:spv::BuiltIn
BuiltInVertexIndex	lib/vulkan/spirv.hpp	/^    BuiltInVertexIndex = 42,$/;"	e	enum:spv::BuiltIn
BuiltInViewportIndex	lib/vulkan/spirv.hpp	/^    BuiltInViewportIndex = 10,$/;"	e	enum:spv::BuiltIn
BuiltInWorkDim	lib/vulkan/spirv.hpp	/^    BuiltInWorkDim = 30,$/;"	e	enum:spv::BuiltIn
BuiltInWorkgroupId	lib/vulkan/spirv.hpp	/^    BuiltInWorkgroupId = 26,$/;"	e	enum:spv::BuiltIn
BuiltInWorkgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInWorkgroupSize = 25,$/;"	e	enum:spv::BuiltIn
CACHE_DIR	Makefile	/^CACHE_DIR := cache$/;"	m
CACHE_DIR	inc/file_manager.h	/^	static constexpr const char* CACHE_DIR = "cache\/";$/;"	m	class:FileManager	access:private
CASE	lib/stb/stb_image.h	1360;"	d
CASE	lib/stb/stb_image.h	1378;"	d
CASE	lib/stb/stb_image.h	4084;"	d
CASE	lib/stb/stb_image.h	4097;"	d
CASE	lib/stb/stb_image.h	4101;"	d
CASE	lib/stb/stb_image.h	4114;"	d
COLOR_ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t COLOR_ATTACHMENT_COUNT = ATTACHMENT_COUNT - DEPTH_ATTACHMENT_COUNT;$/;"	m	class:GBuffer	access:public
COMBO	lib/stb/stb_image.h	1359;"	d
CURRENT_LOADER_ICD_INTERFACE_VERSION	lib/vulkan/vk_icd.h	31;"	d
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS= \\$/;"	m
C_ENUM	lib/__assimp/defs.h	179;"	d
C_ENUM	lib/__assimp/defs.h	205;"	d
C_ENUM	lib/__assimp/defs.h	208;"	d
C_ENUM	lib/assimp/defs.h	176;"	d
C_ENUM	lib/assimp/defs.h	202;"	d
C_ENUM	lib/assimp/defs.h	205;"	d
C_STRUCT	lib/__assimp/defs.h	178;"	d
C_STRUCT	lib/__assimp/defs.h	204;"	d
C_STRUCT	lib/__assimp/defs.h	207;"	d
C_STRUCT	lib/assimp/defs.h	175;"	d
C_STRUCT	lib/assimp/defs.h	201;"	d
C_STRUCT	lib/assimp/defs.h	204;"	d
C_Str	lib/__assimp/types.h	/^    const char* C_Str() const {$/;"	f	struct:aiString	access:public	signature:() const
C_Str	lib/assimp/types.h	/^    const char* C_Str() const {$/;"	f	struct:aiString	access:public	signature:() const
Camera	inc/camera.h	/^class Camera {$/;"	c
Camera	src/camera.cpp	/^Camera::Camera():$/;"	f	class:Camera	signature:()
Camera::Camera	src/camera.cpp	/^Camera::Camera():$/;"	f	class:Camera	signature:()
Camera::MAX_FOV_RADIANS	inc/camera.h	/^    const static float MAX_FOV_RADIANS, MIN_FOV_RADIANS;$/;"	m	class:Camera	access:private
Camera::MAX_FOV_RADIANS	src/camera.cpp	/^const float Camera::MAX_FOV_RADIANS = M_PI_2;$/;"	m	class:Camera	file:
Camera::MIN_FOV_RADIANS	inc/camera.h	/^    const static float MAX_FOV_RADIANS, MIN_FOV_RADIANS;$/;"	m	class:Camera	access:private
Camera::MIN_FOV_RADIANS	src/camera.cpp	/^const float Camera::MIN_FOV_RADIANS = M_PI_4;$/;"	m	class:Camera	file:
Camera::RIGHT	inc/camera.h	/^    const static glm::vec3 UP, RIGHT;$/;"	m	class:Camera	access:private
Camera::RIGHT	src/camera.cpp	/^const glm::vec3 Camera::RIGHT = glm::vec3(1.0f, 0.0f, 0.0f);$/;"	m	class:Camera	file:
Camera::UP	inc/camera.h	/^    const static glm::vec3 UP, RIGHT;$/;"	m	class:Camera	access:private
Camera::UP	src/camera.cpp	/^const glm::vec3 Camera::UP = glm::vec3(0.0f, 1.0f, 0.0f);$/;"	m	class:Camera	file:
Camera::getAspect	src/camera.cpp	/^float Camera::getAspect() const $/;"	f	class:Camera	signature:() const
Camera::initPrevPos	inc/camera.h	/^	bool initPrevPos;	$/;"	m	class:Camera	access:private
Camera::mAspect	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
Camera::mEye	inc/camera.h	/^    glm::vec3 mEye; $/;"	m	class:Camera	access:private
Camera::mFOV	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
Camera::mFar	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
Camera::mForwardMovementScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
Camera::mMouseSensitivityScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
Camera::mNear	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
Camera::mPitch	inc/camera.h	/^    float mPitch, mYaw;$/;"	m	class:Camera	access:private
Camera::mPrevMouseX	inc/camera.h	/^    double mPrevMouseX, mPrevMouseY;$/;"	m	class:Camera	access:public
Camera::mPrevMouseY	inc/camera.h	/^    double mPrevMouseX, mPrevMouseY;$/;"	m	class:Camera	access:public
Camera::mProj	inc/camera.h	/^    glm::mat4 mProj, mView;$/;"	m	class:Camera	access:private
Camera::mScrollSensitivityScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
Camera::mSidewaysMovementScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
Camera::mView	inc/camera.h	/^    glm::mat4 mProj, mView;$/;"	m	class:Camera	access:private
Camera::mYaw	inc/camera.h	/^    float mPitch, mYaw;$/;"	m	class:Camera	access:private
Camera::moveSideways	src/camera.cpp	/^void Camera::moveSideways(float direction, float dt)$/;"	f	class:Camera	signature:(float direction, float dt)
Camera::moveStraight	src/camera.cpp	/^void Camera::moveStraight(float direction, float dt)$/;"	f	class:Camera	signature:(float direction, float dt)
Camera::proj	src/camera.cpp	/^glm::mat4& Camera::proj()$/;"	f	class:Camera	signature:()
Camera::rebuildPerspective	src/camera.cpp	/^void Camera::rebuildPerspective()$/;"	f	class:Camera	signature:()
Camera::rebuildView	src/camera.cpp	/^void Camera::rebuildView()$/;"	f	class:Camera	signature:()
Camera::setAspect	src/camera.cpp	/^void Camera::setAspect(float aspect)$/;"	f	class:Camera	signature:(float aspect)
Camera::updateFOV	src/camera.cpp	/^void Camera::updateFOV(float scrollDirection)$/;"	f	class:Camera	signature:(float scrollDirection)
Camera::updateOrientation	src/camera.cpp	/^void Camera::updateOrientation(double mouseX, double mouseY)$/;"	f	class:Camera	signature:(double mouseX, double mouseY)
Camera::updateViewAngles	src/camera.cpp	/^void Camera::updateViewAngles()$/;"	f	class:Camera	signature:()
Camera::view	src/camera.cpp	/^glm::mat4& Camera::view()$/;"	f	class:Camera	signature:()
Capability	lib/vulkan/spirv.hpp	/^enum Capability {$/;"	g	namespace:spv
CapabilityAddresses	lib/vulkan/spirv.hpp	/^    CapabilityAddresses = 4,$/;"	e	enum:spv::Capability
CapabilityAtomicStorage	lib/vulkan/spirv.hpp	/^    CapabilityAtomicStorage = 21,$/;"	e	enum:spv::Capability
CapabilityClipDistance	lib/vulkan/spirv.hpp	/^    CapabilityClipDistance = 32,$/;"	e	enum:spv::Capability
CapabilityCullDistance	lib/vulkan/spirv.hpp	/^    CapabilityCullDistance = 33,$/;"	e	enum:spv::Capability
CapabilityDerivativeControl	lib/vulkan/spirv.hpp	/^    CapabilityDerivativeControl = 51,$/;"	e	enum:spv::Capability
CapabilityDeviceEnqueue	lib/vulkan/spirv.hpp	/^    CapabilityDeviceEnqueue = 19,$/;"	e	enum:spv::Capability
CapabilityFloat16	lib/vulkan/spirv.hpp	/^    CapabilityFloat16 = 9,$/;"	e	enum:spv::Capability
CapabilityFloat16Buffer	lib/vulkan/spirv.hpp	/^    CapabilityFloat16Buffer = 8,$/;"	e	enum:spv::Capability
CapabilityFloat64	lib/vulkan/spirv.hpp	/^    CapabilityFloat64 = 10,$/;"	e	enum:spv::Capability
CapabilityGenericPointer	lib/vulkan/spirv.hpp	/^    CapabilityGenericPointer = 38,$/;"	e	enum:spv::Capability
CapabilityGeometry	lib/vulkan/spirv.hpp	/^    CapabilityGeometry = 2,$/;"	e	enum:spv::Capability
CapabilityGeometryPointSize	lib/vulkan/spirv.hpp	/^    CapabilityGeometryPointSize = 24,$/;"	e	enum:spv::Capability
CapabilityGeometryStreams	lib/vulkan/spirv.hpp	/^    CapabilityGeometryStreams = 54,$/;"	e	enum:spv::Capability
CapabilityGroups	lib/vulkan/spirv.hpp	/^    CapabilityGroups = 18,$/;"	e	enum:spv::Capability
CapabilityImage1D	lib/vulkan/spirv.hpp	/^    CapabilityImage1D = 44,$/;"	e	enum:spv::Capability
CapabilityImageBasic	lib/vulkan/spirv.hpp	/^    CapabilityImageBasic = 13,$/;"	e	enum:spv::Capability
CapabilityImageBuffer	lib/vulkan/spirv.hpp	/^    CapabilityImageBuffer = 47,$/;"	e	enum:spv::Capability
CapabilityImageCubeArray	lib/vulkan/spirv.hpp	/^    CapabilityImageCubeArray = 34,$/;"	e	enum:spv::Capability
CapabilityImageGatherExtended	lib/vulkan/spirv.hpp	/^    CapabilityImageGatherExtended = 25,$/;"	e	enum:spv::Capability
CapabilityImageMSArray	lib/vulkan/spirv.hpp	/^    CapabilityImageMSArray = 48,$/;"	e	enum:spv::Capability
CapabilityImageMipmap	lib/vulkan/spirv.hpp	/^    CapabilityImageMipmap = 15,$/;"	e	enum:spv::Capability
CapabilityImageQuery	lib/vulkan/spirv.hpp	/^    CapabilityImageQuery = 50,$/;"	e	enum:spv::Capability
CapabilityImageReadWrite	lib/vulkan/spirv.hpp	/^    CapabilityImageReadWrite = 14,$/;"	e	enum:spv::Capability
CapabilityImageRect	lib/vulkan/spirv.hpp	/^    CapabilityImageRect = 36,$/;"	e	enum:spv::Capability
CapabilityInputAttachment	lib/vulkan/spirv.hpp	/^    CapabilityInputAttachment = 40,$/;"	e	enum:spv::Capability
CapabilityInt16	lib/vulkan/spirv.hpp	/^    CapabilityInt16 = 22,$/;"	e	enum:spv::Capability
CapabilityInt64	lib/vulkan/spirv.hpp	/^    CapabilityInt64 = 11,$/;"	e	enum:spv::Capability
CapabilityInt64Atomics	lib/vulkan/spirv.hpp	/^    CapabilityInt64Atomics = 12,$/;"	e	enum:spv::Capability
CapabilityInt8	lib/vulkan/spirv.hpp	/^    CapabilityInt8 = 39,$/;"	e	enum:spv::Capability
CapabilityInterpolationFunction	lib/vulkan/spirv.hpp	/^    CapabilityInterpolationFunction = 52,$/;"	e	enum:spv::Capability
CapabilityKernel	lib/vulkan/spirv.hpp	/^    CapabilityKernel = 6,$/;"	e	enum:spv::Capability
CapabilityLinkage	lib/vulkan/spirv.hpp	/^    CapabilityLinkage = 5,$/;"	e	enum:spv::Capability
CapabilityLiteralSampler	lib/vulkan/spirv.hpp	/^    CapabilityLiteralSampler = 20,$/;"	e	enum:spv::Capability
CapabilityMatrix	lib/vulkan/spirv.hpp	/^    CapabilityMatrix = 0,$/;"	e	enum:spv::Capability
CapabilityMax	lib/vulkan/spirv.hpp	/^    CapabilityMax = 0x7fffffff,$/;"	e	enum:spv::Capability
CapabilityMinLod	lib/vulkan/spirv.hpp	/^    CapabilityMinLod = 42,$/;"	e	enum:spv::Capability
CapabilityMultiViewport	lib/vulkan/spirv.hpp	/^    CapabilityMultiViewport = 57,$/;"	e	enum:spv::Capability
CapabilityNamedBarrier	lib/vulkan/spirv.hpp	/^    CapabilityNamedBarrier = 59,$/;"	e	enum:spv::Capability
CapabilityPipeStorage	lib/vulkan/spirv.hpp	/^    CapabilityPipeStorage = 60,$/;"	e	enum:spv::Capability
CapabilityPipes	lib/vulkan/spirv.hpp	/^    CapabilityPipes = 17,$/;"	e	enum:spv::Capability
CapabilitySampleRateShading	lib/vulkan/spirv.hpp	/^    CapabilitySampleRateShading = 35,$/;"	e	enum:spv::Capability
CapabilitySampled1D	lib/vulkan/spirv.hpp	/^    CapabilitySampled1D = 43,$/;"	e	enum:spv::Capability
CapabilitySampledBuffer	lib/vulkan/spirv.hpp	/^    CapabilitySampledBuffer = 46,$/;"	e	enum:spv::Capability
CapabilitySampledCubeArray	lib/vulkan/spirv.hpp	/^    CapabilitySampledCubeArray = 45,$/;"	e	enum:spv::Capability
CapabilitySampledImageArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilitySampledImageArrayDynamicIndexing = 29,$/;"	e	enum:spv::Capability
CapabilitySampledRect	lib/vulkan/spirv.hpp	/^    CapabilitySampledRect = 37,$/;"	e	enum:spv::Capability
CapabilityShader	lib/vulkan/spirv.hpp	/^    CapabilityShader = 1,$/;"	e	enum:spv::Capability
CapabilitySparseResidency	lib/vulkan/spirv.hpp	/^    CapabilitySparseResidency = 41,$/;"	e	enum:spv::Capability
CapabilityStorageBufferArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityStorageBufferArrayDynamicIndexing = 30,$/;"	e	enum:spv::Capability
CapabilityStorageImageArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageArrayDynamicIndexing = 31,$/;"	e	enum:spv::Capability
CapabilityStorageImageExtendedFormats	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageExtendedFormats = 49,$/;"	e	enum:spv::Capability
CapabilityStorageImageMultisample	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageMultisample = 27,$/;"	e	enum:spv::Capability
CapabilityStorageImageReadWithoutFormat	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageReadWithoutFormat = 55,$/;"	e	enum:spv::Capability
CapabilityStorageImageWriteWithoutFormat	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageWriteWithoutFormat = 56,$/;"	e	enum:spv::Capability
CapabilitySubgroupDispatch	lib/vulkan/spirv.hpp	/^    CapabilitySubgroupDispatch = 58,$/;"	e	enum:spv::Capability
CapabilityTessellation	lib/vulkan/spirv.hpp	/^    CapabilityTessellation = 3,$/;"	e	enum:spv::Capability
CapabilityTessellationPointSize	lib/vulkan/spirv.hpp	/^    CapabilityTessellationPointSize = 23,$/;"	e	enum:spv::Capability
CapabilityTransformFeedback	lib/vulkan/spirv.hpp	/^    CapabilityTransformFeedback = 53,$/;"	e	enum:spv::Capability
CapabilityUniformBufferArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityUniformBufferArrayDynamicIndexing = 28,$/;"	e	enum:spv::Capability
CapabilityVector16	lib/vulkan/spirv.hpp	/^    CapabilityVector16 = 7,$/;"	e	enum:spv::Capability
CheckFormat	lib/__assimp/texture.h	/^    bool CheckFormat(const char* s) const$/;"	f	struct:aiTexture	access:public	signature:(const char* s) const
CheckFormat	lib/assimp/texture.h	/^    bool CheckFormat(const char* s) const$/;"	f	struct:aiTexture	access:public	signature:(const char* s) const
Clear	lib/__assimp/types.h	/^    void Clear ()   {$/;"	f	struct:aiString	access:public	signature:()
Clear	lib/assimp/types.h	/^    void Clear ()   {$/;"	f	struct:aiString	access:public	signature:()
CloseProc	lib/__assimp/cfileio.h	/^    aiFileCloseProc CloseProc;$/;"	m	struct:aiFileIO	access:public
CloseProc	lib/assimp/cfileio.h	/^    aiFileCloseProc CloseProc;$/;"	m	struct:aiFileIO	access:public
CmdBeginQuery	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBeginQuery CmdBeginQuery;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBeginRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBeginRenderPass CmdBeginRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBindDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindDescriptorSets CmdBindDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBindIndexBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindIndexBuffer CmdBindIndexBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBindPipeline	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindPipeline CmdBindPipeline;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBindVertexBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindVertexBuffers CmdBindVertexBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdBlitImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBlitImage CmdBlitImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdClearAttachments	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearAttachments CmdClearAttachments;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdClearColorImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearColorImage CmdClearColorImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdClearDepthStencilImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearDepthStencilImage CmdClearDepthStencilImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdCopyBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyBuffer CmdCopyBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdCopyBufferToImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyBufferToImage CmdCopyBufferToImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdCopyImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyImage CmdCopyImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdCopyImageToBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyImageToBuffer CmdCopyImageToBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdCopyQueryPoolResults	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyQueryPoolResults CmdCopyQueryPoolResults;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDispatch	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDispatch CmdDispatch;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDispatchIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDispatchIndirect CmdDispatchIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDraw	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDraw CmdDraw;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDrawIndexed	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndexed CmdDrawIndexed;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDrawIndexedIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndexedIndirect CmdDrawIndexedIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdDrawIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndirect CmdDrawIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdEndQuery	lib/vulkan/vk_layer.h	/^    PFN_vkCmdEndQuery CmdEndQuery;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdEndRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdEndRenderPass CmdEndRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdExecuteCommands	lib/vulkan/vk_layer.h	/^    PFN_vkCmdExecuteCommands CmdExecuteCommands;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdFillBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdFillBuffer CmdFillBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdNextSubpass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdNextSubpass CmdNextSubpass;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdPass	inc/cmd_pass.h	/^class CmdPass {$/;"	c
CmdPass	src/cmd_pass.cpp	/^CmdPass::CmdPass(const VkDevice& vkDevice, const VkCommandPool& vkCommandPool, const VkQueue& vkQueue): $/;"	f	class:CmdPass	signature:(const VkDevice& vkDevice, const VkCommandPool& vkCommandPool, const VkQueue& vkQueue)
CmdPass::CmdPass	src/cmd_pass.cpp	/^CmdPass::CmdPass(const VkDevice& vkDevice, const VkCommandPool& vkCommandPool, const VkQueue& vkQueue): $/;"	f	class:CmdPass	signature:(const VkDevice& vkDevice, const VkCommandPool& vkCommandPool, const VkQueue& vkQueue)
CmdPass::buffer	inc/cmd_pass.h	/^	VkCommandBuffer buffer;$/;"	m	class:CmdPass	access:public
CmdPass::mVkCommandPool	inc/cmd_pass.h	/^	const VkCommandPool& mVkCommandPool;$/;"	m	class:CmdPass	access:private
CmdPass::mVkDevice	inc/cmd_pass.h	/^	const VkDevice& mVkDevice;$/;"	m	class:CmdPass	access:private
CmdPass::mVkQueue	inc/cmd_pass.h	/^	const VkQueue& mVkQueue;$/;"	m	class:CmdPass	access:private
CmdPass::~CmdPass	src/cmd_pass.cpp	/^CmdPass::~CmdPass()$/;"	f	class:CmdPass	signature:()
CmdPipelineBarrier	lib/vulkan/vk_layer.h	/^    PFN_vkCmdPipelineBarrier CmdPipelineBarrier;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdPushConstants	lib/vulkan/vk_layer.h	/^    PFN_vkCmdPushConstants CmdPushConstants;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdResetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResetEvent CmdResetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdResetQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResetQueryPool CmdResetQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdResolveImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResolveImage CmdResolveImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetBlendConstants	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetBlendConstants CmdSetBlendConstants;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetDepthBias	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetDepthBias CmdSetDepthBias;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetDepthBounds	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetDepthBounds CmdSetDepthBounds;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetEvent CmdSetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetLineWidth	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetLineWidth CmdSetLineWidth;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetScissor	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetScissor CmdSetScissor;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetStencilCompareMask	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilCompareMask CmdSetStencilCompareMask;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetStencilReference	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilReference CmdSetStencilReference;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetStencilWriteMask	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilWriteMask CmdSetStencilWriteMask;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdSetViewport	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetViewport CmdSetViewport;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdUpdateBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdUpdateBuffer CmdUpdateBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdWaitEvents	lib/vulkan/vk_layer.h	/^    PFN_vkCmdWaitEvents CmdWaitEvents;$/;"	m	struct:VkLayerDispatchTable_	access:public
CmdWriteTimestamp	lib/vulkan/vk_layer.h	/^    PFN_vkCmdWriteTimestamp CmdWriteTimestamp;$/;"	m	struct:VkLayerDispatchTable_	access:public
ComparePaths	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::ComparePaths (const std::string& one,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& one, const std::string& second) const
ComparePaths	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::ComparePaths (const std::string& one,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& one, const std::string& second) const
ConstStreamIt	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::const_iterator ConstStreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
ConstStreamIt	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::const_iterator ConstStreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
CreateAndroidSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateAndroidSurfaceKHR CreateAndroidSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCreateBuffer CreateBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateBufferView	lib/vulkan/vk_layer.h	/^    PFN_vkCreateBufferView CreateBufferView;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateCommandPool CreateCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateComputePipelines	lib/vulkan/vk_layer.h	/^    PFN_vkCreateComputePipelines CreateComputePipelines;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateDebugReportCallbackEXT	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallbackEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDescriptorPool CreateDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateDescriptorSetLayout	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDescriptorSetLayout CreateDescriptorSetLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateDisplayModeKHR	lib/vulkan/vk_layer.h	/^        CreateDisplayModeKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateDisplayPlaneSurfaceKHR	lib/vulkan/vk_layer.h	/^        CreateDisplayPlaneSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCreateEvent CreateEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateFence	lib/vulkan/vk_layer.h	/^    PFN_vkCreateFence CreateFence;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateFramebuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCreateFramebuffer CreateFramebuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateGraphicsPipelines	lib/vulkan/vk_layer.h	/^    PFN_vkCreateGraphicsPipelines CreateGraphicsPipelines;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateImage	lib/vulkan/vk_layer.h	/^    PFN_vkCreateImage CreateImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateImageView	lib/vulkan/vk_layer.h	/^    PFN_vkCreateImageView CreateImageView;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateMirSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateMirSurfaceKHR CreateMirSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreatePipelineCache	lib/vulkan/vk_layer.h	/^    PFN_vkCreatePipelineCache CreatePipelineCache;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreatePipelineLayout	lib/vulkan/vk_layer.h	/^    PFN_vkCreatePipelineLayout CreatePipelineLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateQueryPool CreateQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCreateRenderPass CreateRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateSampler	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSampler CreateSampler;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateSemaphore	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSemaphore CreateSemaphore;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateShaderModule	lib/vulkan/vk_layer.h	/^    PFN_vkCreateShaderModule CreateShaderModule;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateSwapchainKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSwapchainKHR CreateSwapchainKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
CreateWaylandSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateWaylandSurfaceKHR CreateWaylandSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateWin32SurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateWin32SurfaceKHR CreateWin32SurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateXcbSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateXcbSurfaceKHR CreateXcbSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CreateXlibSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateXlibSurfaceKHR CreateXlibSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
CurrentDirectory	lib/__assimp/IOSystem.hpp	/^inline const std::string &IOSystem::CurrentDirectory() const {$/;"	f	class:Assimp::IOSystem	signature:() const
CurrentDirectory	lib/assimp/IOSystem.hpp	/^inline const std::string &IOSystem::CurrentDirectory() const {$/;"	f	class:Assimp::IOSystem	signature:() const
DECL	lib/__assimp/Compiler/pstdint.h	824;"	d
DECL	lib/assimp/Compiler/pstdint.h	795;"	d
DECLI	lib/__assimp/Compiler/pstdint.h	822;"	d
DECLI	lib/assimp/Compiler/pstdint.h	793;"	d
DECLU	lib/__assimp/Compiler/pstdint.h	821;"	d
DECLU	lib/assimp/Compiler/pstdint.h	792;"	d
DEFAULT_FLAGS	inc/shape/model.h	/^	static constexpr uint32_t const DEFAULT_FLAGS = $/;"	m	class:Model	access:public
DEFAULT_FLAGS	inc/shape/skinned.h	/^	static constexpr uint32_t const DEFAULT_FLAGS = $/;"	m	class:Skinned	access:public
DEFAULT_TICKS_DURATION	inc/shape/anim_node.h	/^    const static double DEFAULT_TICKS_DURATION;$/;"	m	struct:AnimNode	access:public
DEFAULT_TICKS_DURATION	src/shape/anim_node.cpp	/^const double AnimNode::DEFAULT_TICKS_DURATION = 100.0;$/;"	m	class:AnimNode	file:
DEFAULT_TICKS_PER_SECOND	inc/shape/anim_node.h	/^    const static double DEFAULT_TICKS_PER_SECOND;$/;"	m	struct:AnimNode	access:public
DEFAULT_TICKS_PER_SECOND	src/shape/anim_node.cpp	/^const double AnimNode::DEFAULT_TICKS_PER_SECOND = 25.0;$/;"	m	class:AnimNode	file:
DEPS	Makefile	/^DEPS=$(patsubst %.cpp,$(OBJ_DIR)\/%.d, $(SRCS_NO_PATH))$/;"	m
DEPTH_ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t DEPTH_ATTACHMENT_COUNT = 1;$/;"	m	class:GBuffer	access:public
DLS_DEBUGGER	lib/__assimp/types.h	455;"	d
DLS_DEBUGGER	lib/assimp/types.h	454;"	d
DLS_FILE	lib/__assimp/types.h	452;"	d
DLS_FILE	lib/assimp/types.h	451;"	d
DLS_STDERR	lib/__assimp/types.h	454;"	d
DLS_STDERR	lib/assimp/types.h	453;"	d
DLS_STDOUT	lib/__assimp/types.h	453;"	d
DLS_STDOUT	lib/assimp/types.h	452;"	d
DebugReportMessageEXT	lib/vulkan/vk_layer.h	/^    PFN_vkDebugReportMessageEXT DebugReportMessageEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
Debugging	lib/__assimp/Logger.hpp	/^        Debugging   = 1,    \/\/!< Debug log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Debugging	lib/assimp/Logger.hpp	/^        Debugging   = 1,    \/\/!< Debug log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Decoration	lib/vulkan/spirv.hpp	/^enum Decoration {$/;"	g	namespace:spv
DecorationAliased	lib/vulkan/spirv.hpp	/^    DecorationAliased = 20,$/;"	e	enum:spv::Decoration
DecorationAlignment	lib/vulkan/spirv.hpp	/^    DecorationAlignment = 44,$/;"	e	enum:spv::Decoration
DecorationArrayStride	lib/vulkan/spirv.hpp	/^    DecorationArrayStride = 6,$/;"	e	enum:spv::Decoration
DecorationBinding	lib/vulkan/spirv.hpp	/^    DecorationBinding = 33,$/;"	e	enum:spv::Decoration
DecorationBlock	lib/vulkan/spirv.hpp	/^    DecorationBlock = 2,$/;"	e	enum:spv::Decoration
DecorationBufferBlock	lib/vulkan/spirv.hpp	/^    DecorationBufferBlock = 3,$/;"	e	enum:spv::Decoration
DecorationBuiltIn	lib/vulkan/spirv.hpp	/^    DecorationBuiltIn = 11,$/;"	e	enum:spv::Decoration
DecorationCPacked	lib/vulkan/spirv.hpp	/^    DecorationCPacked = 10,$/;"	e	enum:spv::Decoration
DecorationCentroid	lib/vulkan/spirv.hpp	/^    DecorationCentroid = 16,$/;"	e	enum:spv::Decoration
DecorationCoherent	lib/vulkan/spirv.hpp	/^    DecorationCoherent = 23,$/;"	e	enum:spv::Decoration
DecorationColMajor	lib/vulkan/spirv.hpp	/^    DecorationColMajor = 5,$/;"	e	enum:spv::Decoration
DecorationComponent	lib/vulkan/spirv.hpp	/^    DecorationComponent = 31,$/;"	e	enum:spv::Decoration
DecorationConstant	lib/vulkan/spirv.hpp	/^    DecorationConstant = 22,$/;"	e	enum:spv::Decoration
DecorationDescriptorSet	lib/vulkan/spirv.hpp	/^    DecorationDescriptorSet = 34,$/;"	e	enum:spv::Decoration
DecorationFPFastMathMode	lib/vulkan/spirv.hpp	/^    DecorationFPFastMathMode = 40,$/;"	e	enum:spv::Decoration
DecorationFPRoundingMode	lib/vulkan/spirv.hpp	/^    DecorationFPRoundingMode = 39,$/;"	e	enum:spv::Decoration
DecorationFlat	lib/vulkan/spirv.hpp	/^    DecorationFlat = 14,$/;"	e	enum:spv::Decoration
DecorationFuncParamAttr	lib/vulkan/spirv.hpp	/^    DecorationFuncParamAttr = 38,$/;"	e	enum:spv::Decoration
DecorationGLSLPacked	lib/vulkan/spirv.hpp	/^    DecorationGLSLPacked = 9,$/;"	e	enum:spv::Decoration
DecorationGLSLShared	lib/vulkan/spirv.hpp	/^    DecorationGLSLShared = 8,$/;"	e	enum:spv::Decoration
DecorationIndex	lib/vulkan/spirv.hpp	/^    DecorationIndex = 32,$/;"	e	enum:spv::Decoration
DecorationInputAttachmentIndex	lib/vulkan/spirv.hpp	/^    DecorationInputAttachmentIndex = 43,$/;"	e	enum:spv::Decoration
DecorationInvariant	lib/vulkan/spirv.hpp	/^    DecorationInvariant = 18,$/;"	e	enum:spv::Decoration
DecorationLinkageAttributes	lib/vulkan/spirv.hpp	/^    DecorationLinkageAttributes = 41,$/;"	e	enum:spv::Decoration
DecorationLocation	lib/vulkan/spirv.hpp	/^    DecorationLocation = 30,$/;"	e	enum:spv::Decoration
DecorationMatrixStride	lib/vulkan/spirv.hpp	/^    DecorationMatrixStride = 7,$/;"	e	enum:spv::Decoration
DecorationMax	lib/vulkan/spirv.hpp	/^    DecorationMax = 0x7fffffff,$/;"	e	enum:spv::Decoration
DecorationMaxByteOffset	lib/vulkan/spirv.hpp	/^    DecorationMaxByteOffset = 45,$/;"	e	enum:spv::Decoration
DecorationNoContraction	lib/vulkan/spirv.hpp	/^    DecorationNoContraction = 42,$/;"	e	enum:spv::Decoration
DecorationNoPerspective	lib/vulkan/spirv.hpp	/^    DecorationNoPerspective = 13,$/;"	e	enum:spv::Decoration
DecorationNonReadable	lib/vulkan/spirv.hpp	/^    DecorationNonReadable = 25,$/;"	e	enum:spv::Decoration
DecorationNonWritable	lib/vulkan/spirv.hpp	/^    DecorationNonWritable = 24,$/;"	e	enum:spv::Decoration
DecorationOffset	lib/vulkan/spirv.hpp	/^    DecorationOffset = 35,$/;"	e	enum:spv::Decoration
DecorationPatch	lib/vulkan/spirv.hpp	/^    DecorationPatch = 15,$/;"	e	enum:spv::Decoration
DecorationRelaxedPrecision	lib/vulkan/spirv.hpp	/^    DecorationRelaxedPrecision = 0,$/;"	e	enum:spv::Decoration
DecorationRestrict	lib/vulkan/spirv.hpp	/^    DecorationRestrict = 19,$/;"	e	enum:spv::Decoration
DecorationRowMajor	lib/vulkan/spirv.hpp	/^    DecorationRowMajor = 4,$/;"	e	enum:spv::Decoration
DecorationSample	lib/vulkan/spirv.hpp	/^    DecorationSample = 17,$/;"	e	enum:spv::Decoration
DecorationSaturatedConversion	lib/vulkan/spirv.hpp	/^    DecorationSaturatedConversion = 28,$/;"	e	enum:spv::Decoration
DecorationSpecId	lib/vulkan/spirv.hpp	/^    DecorationSpecId = 1,$/;"	e	enum:spv::Decoration
DecorationStream	lib/vulkan/spirv.hpp	/^    DecorationStream = 29,$/;"	e	enum:spv::Decoration
DecorationUniform	lib/vulkan/spirv.hpp	/^    DecorationUniform = 26,$/;"	e	enum:spv::Decoration
DecorationVolatile	lib/vulkan/spirv.hpp	/^    DecorationVolatile = 21,$/;"	e	enum:spv::Decoration
DecorationXfbBuffer	lib/vulkan/spirv.hpp	/^    DecorationXfbBuffer = 36,$/;"	e	enum:spv::Decoration
DecorationXfbStride	lib/vulkan/spirv.hpp	/^    DecorationXfbStride = 37,$/;"	e	enum:spv::Decoration
DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^class ASSIMP_API DefaultIOStream : public IOStream$/;"	c	namespace:Assimp	inherits:IOStream
DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^inline DefaultIOStream::DefaultIOStream () :$/;"	f	class:Assimp::DefaultIOStream	signature:()
DefaultIOStream	lib/__assimp/DefaultIOStream.h	/^inline DefaultIOStream::DefaultIOStream (FILE* pFile,$/;"	f	class:Assimp::DefaultIOStream	signature:(FILE* pFile, const std::string &strFilename)
DefaultIOSystem	lib/__assimp/DefaultIOSystem.h	/^class ASSIMP_API DefaultIOSystem : public IOSystem$/;"	c	namespace:Assimp	inherits:IOSystem
DefaultLogger	lib/__assimp/DefaultLogger.hpp	/^class ASSIMP_API DefaultLogger :$/;"	c	namespace:Assimp	inherits:Logger
DefaultLogger	lib/assimp/DefaultLogger.hpp	/^class ASSIMP_API DefaultLogger :$/;"	c	namespace:Assimp	inherits:Logger
DescriptorCreator	inc/creator/descriptor_creator.h	/^namespace DescriptorCreator$/;"	n
DescriptorCreator::createDeferredDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDeferredDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createDescriptorPool	inc/creator/descriptor_creator.h	/^inline void createDescriptorPool(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createDescriptorSetLayouts	inc/creator/descriptor_creator.h	/^inline void createDescriptorSetLayouts(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createDynamicUniformFragmentDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDynamicUniformFragmentDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createDynamicUniformVertexDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDynamicUniformVertexDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createModelDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createModelDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createPointLightDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createPointLightDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createSamplerDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createSamplerDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createSamplerListDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createSamplerListDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createTQuadDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createTQuadDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createUniformFragmentDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createUniformFragmentDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorCreator::createUniformVertexDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createUniformVertexDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
DescriptorSetLayouts	/home/al/amvk/inc/state.h	/^struct DescriptorSetLayouts {$/;"	s
DescriptorSetLayouts::deferred	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout deferred;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::dynamicUniformFragment	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout dynamicUniformFragment;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::dynamicUniformVertex	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout dynamicUniformVertex;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::fullscreenQuad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout fullscreenQuad;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::model	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout model;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::pointLight	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout pointLight;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::quad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout quad;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::sampler	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout sampler;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::samplerList	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout samplerList;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::tquad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout tquad;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::uniformFragment	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout uniformFragment;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSetLayouts::uniformVertex	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout uniformVertex;$/;"	m	struct:DescriptorSetLayouts	access:public
DescriptorSets	/home/al/amvk/inc/state.h	/^struct DescriptorSets {$/;"	s
DestroyBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyBuffer DestroyBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyBufferView	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyBufferView DestroyBufferView;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyCommandPool DestroyCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyDebugReportCallbackEXT	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallbackEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
DestroyDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDescriptorPool DestroyDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyDescriptorSetLayout	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDescriptorSetLayout DestroyDescriptorSetLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyDevice	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDevice DestroyDevice;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyEvent	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyEvent DestroyEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyFence	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyFence DestroyFence;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyFramebuffer	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyFramebuffer DestroyFramebuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyImage	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyImage DestroyImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyImageView	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyImageView DestroyImageView;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyInstance	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyInstance DestroyInstance;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
DestroyPipeline	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipeline DestroyPipeline;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyPipelineCache	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipelineCache DestroyPipelineCache;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyPipelineLayout	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipelineLayout DestroyPipelineLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyQueryPool DestroyQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyRenderPass DestroyRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroySampler	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySampler DestroySampler;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroySemaphore	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySemaphore DestroySemaphore;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroyShaderModule	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyShaderModule DestroyShaderModule;$/;"	m	struct:VkLayerDispatchTable_	access:public
DestroySurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySurfaceKHR DestroySurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
DestroySwapchainKHR	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySwapchainKHR DestroySwapchainKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
DeviceInfo	/home/al/amvk/inc/state.h	/^	DeviceInfo():$/;"	f	struct:DeviceInfo	access:public	signature:()
DeviceInfo	/home/al/amvk/inc/state.h	/^struct DeviceInfo {$/;"	s
DeviceInfo::DeviceInfo	/home/al/amvk/inc/state.h	/^	DeviceInfo():$/;"	f	struct:DeviceInfo	access:public	signature:()
DeviceInfo::maxDescriptorSetUniformBuffersDynamic	/home/al/amvk/inc/state.h	/^	uint32_t maxDescriptorSetUniformBuffersDynamic;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::maxPushConstantsSize	/home/al/amvk/inc/state.h	/^	uint32_t maxPushConstantsSize;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::minUniformBufferOffsetAlignment	/home/al/amvk/inc/state.h	/^	VkDeviceSize minUniformBufferOffsetAlignment;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::presentModes	/home/al/amvk/inc/state.h	/^	std::vector<VkPresentModeKHR> presentModes;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::samplerAnisotropy	/home/al/amvk/inc/state.h	/^	VkBool32 samplerAnisotropy;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::surfaceCapabilities	/home/al/amvk/inc/state.h	/^	VkSurfaceCapabilitiesKHR surfaceCapabilities;$/;"	m	struct:DeviceInfo	access:public
DeviceInfo::surfaceFormats	/home/al/amvk/inc/state.h	/^	std::vector<VkSurfaceFormatKHR> surfaceFormats;$/;"	m	struct:DeviceInfo	access:public
DeviceManager	inc/device_manager.h	/^class DeviceManager {$/;"	c
DeviceManager	src/device_manager.cpp	/^DeviceManager::DeviceManager(State& vulkanState):$/;"	f	class:DeviceManager	signature:(State& vulkanState)
DeviceManager::DeviceManager	src/device_manager.cpp	/^DeviceManager::DeviceManager(State& vulkanState):$/;"	f	class:DeviceManager	signature:(State& vulkanState)
DeviceManager::QueueIndices	inc/device_manager.h	/^	struct QueueIndices {$/;"	s	class:DeviceManager	access:public
DeviceManager::QueueIndices::compute	inc/device_manager.h	/^		uint32_t compute = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
DeviceManager::QueueIndices::graphics	inc/device_manager.h	/^		uint32_t graphics = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
DeviceManager::QueueIndices::present	inc/device_manager.h	/^		uint32_t present = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
DeviceManager::QueueIndices::transfer	inc/device_manager.h	/^		uint32_t transfer = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
DeviceManager::createLogicalDevice	src/device_manager.cpp	/^void DeviceManager::createLogicalDevice() $/;"	f	class:DeviceManager	signature:()
DeviceManager::createPhysicalDevice	src/device_manager.cpp	/^void DeviceManager::createPhysicalDevice(SwapchainManager& swapchainManager) $/;"	f	class:DeviceManager	signature:(SwapchainManager& swapchainManager)
DeviceManager::createVkInstance	src/device_manager.cpp	/^void DeviceManager::createVkInstance() $/;"	f	class:DeviceManager	signature:()
DeviceManager::deviceExtensionsSupported	src/device_manager.cpp	/^bool DeviceManager::deviceExtensionsSupported(const VkPhysicalDevice& physicalDevice) const $/;"	f	class:DeviceManager	signature:(const VkPhysicalDevice& physicalDevice) const
DeviceManager::deviceQueueIndicesSupported	src/device_manager.cpp	/^bool DeviceManager::deviceQueueIndicesSupported(const VkPhysicalDevice& physicalDevice, QueueIndices& outIndices) const {$/;"	f	class:DeviceManager	signature:(const VkPhysicalDevice& physicalDevice, QueueIndices& outIndices) const
DeviceManager::enableDebug	src/device_manager.cpp	/^void DeviceManager::enableDebug() $/;"	f	class:DeviceManager	signature:()
DeviceManager::getExtensionNames	src/device_manager.cpp	/^std::vector<const char*> DeviceManager::getExtensionNames() $/;"	f	class:DeviceManager	signature:()
DeviceManager::mDebugReportCallback	inc/device_manager.h	/^	VkDebugReportCallbackEXT mDebugReportCallback; $/;"	m	class:DeviceManager	access:private
DeviceManager::mState	inc/device_manager.h	/^	State& mState;$/;"	m	class:DeviceManager	access:private
DeviceManager::sDeviceExtensions	inc/device_manager.h	/^	static const std::vector<const char*> sDeviceExtensions;$/;"	m	class:DeviceManager	access:public
DeviceManager::sDeviceExtensions	src/device_manager.cpp	/^const std::vector<const char*> DeviceManager::sDeviceExtensions = {$/;"	m	class:DeviceManager	file:
DeviceManager::sValidationLayers	inc/device_manager.h	/^	static const std::vector<const char*> sValidationLayers;$/;"	m	class:DeviceManager	access:public
DeviceManager::sValidationLayers	src/device_manager.cpp	/^const std::vector<const char*> DeviceManager::sValidationLayers = {$/;"	m	class:DeviceManager	file:
DeviceWaitIdle	lib/vulkan/vk_layer.h	/^    PFN_vkDeviceWaitIdle DeviceWaitIdle;$/;"	m	struct:VkLayerDispatchTable_	access:public
Dim	lib/vulkan/spirv.hpp	/^enum Dim {$/;"	g	namespace:spv
Dim1D	lib/vulkan/spirv.hpp	/^    Dim1D = 0,$/;"	e	enum:spv::Dim
Dim2D	lib/vulkan/spirv.hpp	/^    Dim2D = 1,$/;"	e	enum:spv::Dim
Dim3D	lib/vulkan/spirv.hpp	/^    Dim3D = 2,$/;"	e	enum:spv::Dim
DimBuffer	lib/vulkan/spirv.hpp	/^    DimBuffer = 5,$/;"	e	enum:spv::Dim
DimCube	lib/vulkan/spirv.hpp	/^    DimCube = 3,$/;"	e	enum:spv::Dim
DimMax	lib/vulkan/spirv.hpp	/^    DimMax = 0x7fffffff,$/;"	e	enum:spv::Dim
DimRect	lib/vulkan/spirv.hpp	/^    DimRect = 4,$/;"	e	enum:spv::Dim
DimSubpassData	lib/vulkan/spirv.hpp	/^    DimSubpassData = 6,$/;"	e	enum:spv::Dim
ENGINE_RELATIVE_ROOT	inc/file_manager.h	/^	static constexpr const char* ENGINE_RELATIVE_ROOT = "";$/;"	m	class:FileManager	access:private
ENGINE_RELATIVE_ROOT	inc/file_manager.h	/^	static constexpr const char* ENGINE_RELATIVE_ROOT = "\/..\/";$/;"	m	class:FileManager	access:private
EndCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkEndCommandBuffer EndCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
Engine	inc/engine.h	/^class Engine {$/;"	c
Engine	src/engine.cpp	/^Engine::Engine():$/;"	f	class:Engine	signature:()
Engine::Engine	src/engine.cpp	/^Engine::Engine():$/;"	f	class:Engine	signature:()
Engine::getCamera	src/engine.cpp	/^Camera& Engine::getCamera()$/;"	f	class:Engine	signature:()
Engine::getRenderer	src/engine.cpp	/^Renderer& Engine::getRenderer()$/;"	f	class:Engine	signature:()
Engine::getTaskManager	src/engine.cpp	/^TaskManager& Engine::getTaskManager() $/;"	f	class:Engine	signature:()
Engine::getTimer	src/engine.cpp	/^Timer& Engine::getTimer()$/;"	f	class:Engine	signature:()
Engine::getWindow	src/engine.cpp	/^Window& Engine::getWindow()$/;"	f	class:Engine	signature:()
Engine::handleCmd	src/engine.cpp	/^void Engine::handleCmd(struct android_app *app, int32_t cmd)$/;"	f	class:Engine	signature:(struct android_app *app, int32_t cmd)
Engine::handleInput	src/engine.cpp	/^int32_t Engine::handleInput(android_app *app, AInputEvent *event)$/;"	f	class:Engine	signature:(android_app *app, AInputEvent *event)
Engine::handleMovement	src/engine.cpp	/^void Engine::handleMovement(double dt)$/;"	f	class:Engine	signature:(double dt)
Engine::hasFocus	inc/engine.h	/^    bool hasFocus;$/;"	m	class:Engine	access:public
Engine::init	src/engine.cpp	/^void Engine::init()$/;"	f	class:Engine	signature:()
Engine::init	src/engine.cpp	/^void Engine::init(android_app* state)$/;"	f	class:Engine	signature:(android_app* state)
Engine::isReady	inc/engine.h	/^    bool isReady;$/;"	m	class:Engine	access:public
Engine::mCamera	inc/engine.h	/^	Camera mCamera;$/;"	m	class:Engine	access:private
Engine::mRenderer	inc/engine.h	/^	Renderer mRenderer;$/;"	m	class:Engine	access:private
Engine::mTaskManager	inc/engine.h	/^	TaskManager mTaskManager;$/;"	m	class:Engine	access:private
Engine::mTimer	inc/engine.h	/^	Timer mTimer;$/;"	m	class:Engine	access:private
Engine::mWindow	inc/engine.h	/^	Window mWindow;$/;"	m	class:Engine	access:private
Engine::state	inc/engine.h	/^    android_app* state;$/;"	m	class:Engine	access:public
Engine::~Engine	src/engine.cpp	/^Engine::~Engine() $/;"	f	class:Engine	signature:()
EnumerateDeviceExtensionProperties	lib/vulkan/vk_layer.h	/^    PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
EnumerateDeviceLayerProperties	lib/vulkan/vk_layer.h	/^    PFN_vkEnumerateDeviceLayerProperties EnumerateDeviceLayerProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
EnumeratePhysicalDevices	lib/vulkan/vk_layer.h	/^    PFN_vkEnumeratePhysicalDevices EnumeratePhysicalDevices;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
Err	lib/__assimp/Logger.hpp	/^        Err         = 8     \/\/!< Error log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Err	lib/assimp/Logger.hpp	/^        Err         = 8     \/\/!< Error log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
ErrorSeverity	lib/__assimp/Logger.hpp	/^    enum ErrorSeverity$/;"	g	class:Assimp::Logger	access:public
ErrorSeverity	lib/assimp/Logger.hpp	/^    enum ErrorSeverity$/;"	g	class:Assimp::Logger	access:public
ExecutionMode	lib/vulkan/spirv.hpp	/^enum ExecutionMode {$/;"	g	namespace:spv
ExecutionModeContractionOff	lib/vulkan/spirv.hpp	/^    ExecutionModeContractionOff = 31,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthGreater	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthGreater = 14,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthLess	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthLess = 15,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthReplacing	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthReplacing = 12,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthUnchanged	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthUnchanged = 16,$/;"	e	enum:spv::ExecutionMode
ExecutionModeEarlyFragmentTests	lib/vulkan/spirv.hpp	/^    ExecutionModeEarlyFragmentTests = 9,$/;"	e	enum:spv::ExecutionMode
ExecutionModeFinalizer	lib/vulkan/spirv.hpp	/^    ExecutionModeFinalizer = 34,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInitializer	lib/vulkan/spirv.hpp	/^    ExecutionModeInitializer = 33,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputLines	lib/vulkan/spirv.hpp	/^    ExecutionModeInputLines = 20,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputLinesAdjacency	lib/vulkan/spirv.hpp	/^    ExecutionModeInputLinesAdjacency = 21,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputPoints	lib/vulkan/spirv.hpp	/^    ExecutionModeInputPoints = 19,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputTrianglesAdjacency	lib/vulkan/spirv.hpp	/^    ExecutionModeInputTrianglesAdjacency = 23,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInvocations	lib/vulkan/spirv.hpp	/^    ExecutionModeInvocations = 0,$/;"	e	enum:spv::ExecutionMode
ExecutionModeIsolines	lib/vulkan/spirv.hpp	/^    ExecutionModeIsolines = 25,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSize	lib/vulkan/spirv.hpp	/^    ExecutionModeLocalSize = 17,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSizeHint	lib/vulkan/spirv.hpp	/^    ExecutionModeLocalSizeHint = 18,$/;"	e	enum:spv::ExecutionMode
ExecutionModeMax	lib/vulkan/spirv.hpp	/^    ExecutionModeMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOriginLowerLeft	lib/vulkan/spirv.hpp	/^    ExecutionModeOriginLowerLeft = 8,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOriginUpperLeft	lib/vulkan/spirv.hpp	/^    ExecutionModeOriginUpperLeft = 7,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputLineStrip	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputLineStrip = 28,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputPoints	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputPoints = 27,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputTriangleStrip	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputTriangleStrip = 29,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputVertices	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputVertices = 26,$/;"	e	enum:spv::ExecutionMode
ExecutionModePixelCenterInteger	lib/vulkan/spirv.hpp	/^    ExecutionModePixelCenterInteger = 6,$/;"	e	enum:spv::ExecutionMode
ExecutionModePointMode	lib/vulkan/spirv.hpp	/^    ExecutionModePointMode = 10,$/;"	e	enum:spv::ExecutionMode
ExecutionModeQuads	lib/vulkan/spirv.hpp	/^    ExecutionModeQuads = 24,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingEqual	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingEqual = 1,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingFractionalEven	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingFractionalEven = 2,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingFractionalOdd	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingFractionalOdd = 3,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupSize	lib/vulkan/spirv.hpp	/^    ExecutionModeSubgroupSize = 35,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupsPerWorkgroup	lib/vulkan/spirv.hpp	/^    ExecutionModeSubgroupsPerWorkgroup = 36,$/;"	e	enum:spv::ExecutionMode
ExecutionModeTriangles	lib/vulkan/spirv.hpp	/^    ExecutionModeTriangles = 22,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVecTypeHint	lib/vulkan/spirv.hpp	/^    ExecutionModeVecTypeHint = 30,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVertexOrderCcw	lib/vulkan/spirv.hpp	/^    ExecutionModeVertexOrderCcw = 5,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVertexOrderCw	lib/vulkan/spirv.hpp	/^    ExecutionModeVertexOrderCw = 4,$/;"	e	enum:spv::ExecutionMode
ExecutionModeXfb	lib/vulkan/spirv.hpp	/^    ExecutionModeXfb = 11,$/;"	e	enum:spv::ExecutionMode
ExecutionModel	lib/vulkan/spirv.hpp	/^enum ExecutionModel {$/;"	g	namespace:spv
ExecutionModelFragment	lib/vulkan/spirv.hpp	/^    ExecutionModelFragment = 4,$/;"	e	enum:spv::ExecutionModel
ExecutionModelGLCompute	lib/vulkan/spirv.hpp	/^    ExecutionModelGLCompute = 5,$/;"	e	enum:spv::ExecutionModel
ExecutionModelGeometry	lib/vulkan/spirv.hpp	/^    ExecutionModelGeometry = 3,$/;"	e	enum:spv::ExecutionModel
ExecutionModelKernel	lib/vulkan/spirv.hpp	/^    ExecutionModelKernel = 6,$/;"	e	enum:spv::ExecutionModel
ExecutionModelMax	lib/vulkan/spirv.hpp	/^    ExecutionModelMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionModel
ExecutionModelTessellationControl	lib/vulkan/spirv.hpp	/^    ExecutionModelTessellationControl = 1,$/;"	e	enum:spv::ExecutionModel
ExecutionModelTessellationEvaluation	lib/vulkan/spirv.hpp	/^    ExecutionModelTessellationEvaluation = 2,$/;"	e	enum:spv::ExecutionModel
ExecutionModelVertex	lib/vulkan/spirv.hpp	/^    ExecutionModelVertex = 0,$/;"	e	enum:spv::ExecutionModel
Exists	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE bool IOSystem::Exists( const std::string& pFile) const$/;"	f	class:Assimp::IOSystem	signature:( const std::string& pFile) const
Exists	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE bool IOSystem::Exists( const std::string& pFile) const$/;"	f	class:Assimp::IOSystem	signature:( const std::string& pFile) const
Export	lib/__assimp/Exporter.hpp	/^aiReturn Exporter :: Export( const aiScene* pScene, const std::string& pFormatId, $/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)
Export	lib/assimp/Exporter.hpp	/^inline aiReturn Exporter :: Export( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, const std::string& pPath, unsigned int pPreprocessing, const ExportProperties* pProperties)
ExportFormatEntry	lib/__assimp/Exporter.hpp	/^        ExportFormatEntry( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)
ExportFormatEntry	lib/__assimp/Exporter.hpp	/^        ExportFormatEntry() :$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:()
ExportFormatEntry	lib/__assimp/Exporter.hpp	/^    struct ExportFormatEntry$/;"	s	class:Assimp::Exporter	access:public
ExportFormatEntry	lib/assimp/Exporter.hpp	/^        ExportFormatEntry( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:( const char* pId, const char* pDesc, const char* pExtension, fpExportFunc pFunction, unsigned int pEnforcePP = 0u)
ExportFormatEntry	lib/assimp/Exporter.hpp	/^        ExportFormatEntry() :$/;"	f	struct:Assimp::Exporter::ExportFormatEntry	access:public	signature:()
ExportFormatEntry	lib/assimp/Exporter.hpp	/^    struct ExportFormatEntry$/;"	s	class:Assimp::Exporter	access:public
ExportProperties	lib/__assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties {$/;"	c	namespace:Assimp
ExportProperties	lib/__assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties;$/;"	m	namespace:Assimp	typeref:class:Assimp::ASSIMP_API
ExportProperties	lib/assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties$/;"	c	namespace:Assimp
ExportProperties	lib/assimp/Exporter.hpp	/^class ASSIMP_API ExportProperties;$/;"	m	namespace:Assimp	typeref:class:Assimp::ASSIMP_API
ExportToBlob	lib/__assimp/Exporter.hpp	/^const aiExportDataBlob* Exporter::ExportToBlob(  const aiScene* pScene, const std::string& pFormatId,$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId, unsigned int pPreprocessing, const ExportProperties* pProperties)
ExportToBlob	lib/assimp/Exporter.hpp	/^inline const aiExportDataBlob* Exporter :: ExportToBlob(  const aiScene* pScene, const std::string& pFormatId,unsigned int pPreprocessing, const ExportProperties* pProperties)$/;"	f	class:Assimp::Exporter	signature:( const aiScene* pScene, const std::string& pFormatId,unsigned int pPreprocessing, const ExportProperties* pProperties)
Exporter	lib/__assimp/Exporter.hpp	/^class ASSIMP_API Exporter {$/;"	c	namespace:Assimp
Exporter	lib/assimp/Exporter.hpp	/^class ASSIMP_API Exporter$/;"	c	namespace:Assimp
FAST_BITS	lib/stb/stb_image.h	1456;"	d
FIRST_CONCRETE	lib/vulkan/libspirv.h	/^  FIRST_CONCRETE(SPV_OPERAND_TYPE_ID),$/;"	e	enum:spv_operand_type_t
FIRST_CONCRETE	lib/vulkan/libspirv.h	161;"	d
FIRST_CONCRETE	lib/vulkan/libspirv.h	94;"	d
FIRST_CONCRETE_MASK	lib/vulkan/libspirv.h	/^  FIRST_CONCRETE_MASK(SPV_OPERAND_TYPE_IMAGE),    \/\/ SPIR-V Sec 3.14$/;"	e	enum:spv_operand_type_t
FIRST_CONCRETE_MASK	lib/vulkan/libspirv.h	150;"	d
FIRST_CONCRETE_MASK	lib/vulkan/libspirv.h	160;"	d
FIRST_OPTIONAL	lib/vulkan/libspirv.h	/^  FIRST_OPTIONAL(SPV_OPERAND_TYPE_OPTIONAL_ID),$/;"	e	enum:spv_operand_type_t
FIRST_OPTIONAL	lib/vulkan/libspirv.h	172;"	d
FIRST_VARIABLE	lib/vulkan/libspirv.h	/^  FIRST_VARIABLE(SPV_OPERAND_TYPE_VARIABLE_ID),$/;"	e	enum:spv_operand_type_t
FIRST_VARIABLE	lib/vulkan/libspirv.h	173;"	d
FORCE_32BIT	lib/__assimp/metadata.h	/^    FORCE_32BIT = INT_MAX$/;"	e	enum:aiMetadataType
FORCE_32BIT	lib/assimp/metadata.h	/^    FORCE_32BIT = INT_MAX$/;"	e	enum:aiMetadataType
FPFastMathModeAllowRecipMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeAllowRecipMask = 0x00000008,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeAllowRecipShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeAllowRecipShift = 3,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeFastMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeFastMask = 0x00000010,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeFastShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeFastShift = 4,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeMask	lib/vulkan/spirv.hpp	/^enum FPFastMathModeMask {$/;"	g	namespace:spv
FPFastMathModeMaskNone	lib/vulkan/spirv.hpp	/^    FPFastMathModeMaskNone = 0,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeMax	lib/vulkan/spirv.hpp	/^    FPFastMathModeMax = 0x7fffffff,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNSZMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNSZMask = 0x00000004,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNSZShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNSZShift = 2,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNotInfMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotInfMask = 0x00000002,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNotInfShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotInfShift = 1,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNotNaNMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotNaNMask = 0x00000001,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNotNaNShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotNaNShift = 0,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeShift	lib/vulkan/spirv.hpp	/^enum FPFastMathModeShift {$/;"	g	namespace:spv
FPRoundingMode	lib/vulkan/spirv.hpp	/^enum FPRoundingMode {$/;"	g	namespace:spv
FPRoundingModeMax	lib/vulkan/spirv.hpp	/^    FPRoundingModeMax = 0x7fffffff,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTE	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTE = 0,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTN	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTN = 3,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTP	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTP = 2,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTZ	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTZ = 1,$/;"	e	enum:spv::FPRoundingMode
FPS	src/timer.cpp	/^uint32_t Timer::FPS() const$/;"	f	class:Timer	signature:() const
FileManager	inc/file_manager.h	/^class FileManager {$/;"	c
FileManager	src/file_manager.cpp	/^FileManager::FileManager() $/;"	f	class:FileManager	signature:()
FileManager::CACHE_DIR	inc/file_manager.h	/^	static constexpr const char* CACHE_DIR = "cache\/";$/;"	m	class:FileManager	access:private
FileManager::ENGINE_RELATIVE_ROOT	inc/file_manager.h	/^	static constexpr const char* ENGINE_RELATIVE_ROOT = "";$/;"	m	class:FileManager	access:private
FileManager::ENGINE_RELATIVE_ROOT	inc/file_manager.h	/^	static constexpr const char* ENGINE_RELATIVE_ROOT = "\/..\/";$/;"	m	class:FileManager	access:private
FileManager::FileManager	src/file_manager.cpp	/^FileManager::FileManager() $/;"	f	class:FileManager	signature:()
FileManager::MODELS_DIR	inc/file_manager.h	/^	static constexpr const char* MODELS_DIR = "model\/";$/;"	m	class:FileManager	access:private
FileManager::MODELS_DIR	inc/file_manager.h	/^	static constexpr const char* MODELS_DIR = "res\/model\/";$/;"	m	class:FileManager	access:private
FileManager::RESOURCE_DIR	inc/file_manager.h	/^	static constexpr const char* RESOURCE_DIR = "";$/;"	m	class:FileManager	access:private
FileManager::RESOURCE_DIR	inc/file_manager.h	/^	static constexpr const char* RESOURCE_DIR = "res\/";$/;"	m	class:FileManager	access:private
FileManager::SHADER_DIR	inc/file_manager.h	/^	static constexpr const char* SHADER_DIR = "shader\/spv\/";$/;"	m	class:FileManager	access:private
FileManager::SHADER_DIR	inc/file_manager.h	/^	static constexpr const char* SHADER_DIR = "shaders\/";$/;"	m	class:FileManager	access:private
FileManager::activity	inc/file_manager.h	/^    static ANativeActivity* activity;$/;"	m	class:FileManager	access:public
FileManager::activity	src/file_manager.cpp	/^ANativeActivity* FileManager::activity = nullptr;$/;"	m	class:FileManager	file:
FileManager::assetManager	inc/file_manager.h	/^	static AAssetManager* assetManager;$/;"	m	class:FileManager	access:public
FileManager::assetManager	src/file_manager.cpp	/^AAssetManager* FileManager::assetManager = nullptr;$/;"	m	class:FileManager	file:
FileManager::fileManager	inc/file_manager.h	/^	FileManager(const FileManager& fileManager) = delete;$/;"	m	class:FileManager	access:public
FileManager::fileManager	inc/file_manager.h	/^	void operator=(const FileManager& fileManager) = delete;$/;"	m	class:FileManager	access:public
FileManager::getBinPath	src/file_manager.cpp	/^std::string FileManager::getBinPath() $/;"	f	class:FileManager	signature:()
FileManager::getCachePath	src/file_manager.cpp	/^std::string FileManager::getCachePath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
FileManager::getFilePath	src/file_manager.cpp	/^std::string FileManager::getFilePath(const char* filename) $/;"	f	class:FileManager	signature:(const char* filename)
FileManager::getFilePath	src/file_manager.cpp	/^std::string FileManager::getFilePath(const std::string& filename)$/;"	f	class:FileManager	signature:(const std::string& filename)
FileManager::getInstance	src/file_manager.cpp	/^FileManager& FileManager::getInstance()$/;"	f	class:FileManager	signature:()
FileManager::getModelsPath	src/file_manager.cpp	/^std::string FileManager::getModelsPath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
FileManager::getResourcePath	src/file_manager.cpp	/^std::string FileManager::getResourcePath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
FileManager::initBinPath	src/file_manager.cpp	/^void FileManager::initBinPath()$/;"	f	class:FileManager	signature:()
FileManager::internalStoragePath	inc/file_manager.h	/^	static const char* internalStoragePath;$/;"	m	class:FileManager	access:public
FileManager::internalStoragePath	src/file_manager.cpp	/^const char* FileManager::internalStoragePath = nullptr;$/;"	m	class:FileManager	file:
FileManager::mBinPath	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::mCacheDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::mEngineRoot	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::mModelsDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::mResourceDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::mShaderDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
FileManager::newAssimpIOSystem	src/file_manager.cpp	/^Assimp::AndroidJNIIOSystem* FileManager::newAssimpIOSystem() {$/;"	f	class:FileManager	signature:()
FileManager::readCache	src/file_manager.cpp	/^void FileManager::readCache(std::vector<char>& out, const std::string& cacheName)$/;"	f	class:FileManager	signature:(std::vector<char>& out, const std::string& cacheName)
FileManager::readFile	src/file_manager.cpp	/^std::vector<char> FileManager::readFile(const std::string& filename) $/;"	f	class:FileManager	signature:(const std::string& filename)
FileManager::readShader	src/file_manager.cpp	/^std::vector<char> FileManager::readShader(const std::string& shaderName)$/;"	f	class:FileManager	signature:(const std::string& shaderName)
FileManager::stripPath	src/file_manager.cpp	/^std::string FileManager::stripPath(const std::string&& path)$/;"	f	class:FileManager	signature:(const std::string&& path)
FileManager::writeCache	src/file_manager.cpp	/^void FileManager::writeCache(const char* cacheName, void* data, size_t size)$/;"	f	class:FileManager	signature:(const char* cacheName, void* data, size_t size)
FileSizeProc	lib/__assimp/cfileio.h	/^    aiFileTellProc FileSizeProc;$/;"	m	struct:aiFile	access:public
FileSizeProc	lib/assimp/cfileio.h	/^    aiFileTellProc FileSizeProc;$/;"	m	struct:aiFile	access:public
FindNode	lib/__assimp/scene.h	/^    aiNode* FindNode(const aiString& name) {$/;"	f	struct:aiNode	access:public	signature:(const aiString& name)
FindNode	lib/__assimp/scene.h	/^    const aiNode* FindNode(const aiString& name) const {$/;"	f	struct:aiNode	access:public	signature:(const aiString& name) const
FindNode	lib/assimp/scene.h	/^    inline aiNode* FindNode(const aiString& name)$/;"	f	struct:aiNode	access:public	signature:(const aiString& name)
FindNode	lib/assimp/scene.h	/^    inline aiNode* FindNode(const char* name)$/;"	f	struct:aiNode	access:public	signature:(const char* name)
FindNode	lib/assimp/scene.h	/^    inline const aiNode* FindNode(const aiString& name) const$/;"	f	struct:aiNode	access:public	signature:(const aiString& name) const
FindNode	lib/assimp/scene.h	/^    inline const aiNode* FindNode(const char* name) const$/;"	f	struct:aiNode	access:public	signature:(const char* name) const
FloatPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, ai_real> FloatPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
FloatPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, float> FloatPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
FlushMappedMemoryRanges	lib/vulkan/vk_layer.h	/^    PFN_vkFlushMappedMemoryRanges FlushMappedMemoryRanges;$/;"	m	struct:VkLayerDispatchTable_	access:public
FlushProc	lib/__assimp/cfileio.h	/^    aiFileFlushProc FlushProc;$/;"	m	struct:aiFile	access:public
FlushProc	lib/assimp/cfileio.h	/^    aiFileFlushProc FlushProc;$/;"	m	struct:aiFile	access:public
FramebufferAttachment	inc/g_buffer.h	/^struct FramebufferAttachment {$/;"	s
FramebufferAttachment::format	inc/g_buffer.h	/^	VkFormat format;$/;"	m	struct:FramebufferAttachment	access:public
FramebufferAttachment::image	inc/g_buffer.h	/^	VkImage image;$/;"	m	struct:FramebufferAttachment	access:public
FramebufferAttachment::memory	inc/g_buffer.h	/^	VkDeviceMemory memory;$/;"	m	struct:FramebufferAttachment	access:public
FramebufferAttachment::view	inc/g_buffer.h	/^	VkImageView view;$/;"	m	struct:FramebufferAttachment	access:public
FreeCommandBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkFreeCommandBuffers FreeCommandBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
FreeDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkFreeDescriptorSets FreeDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
FreeMemory	lib/vulkan/vk_layer.h	/^    PFN_vkFreeMemory FreeMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
FullscreenQuad	inc/shape/fullscreen_quad.h	/^class FullscreenQuad {$/;"	c
FullscreenQuad	src/shape/fullscreen_quad.cpp	/^FullscreenQuad::FullscreenQuad(State& state):$/;"	f	class:FullscreenQuad	signature:(State& state)
FullscreenQuad::FullscreenQuad	src/shape/fullscreen_quad.cpp	/^FullscreenQuad::FullscreenQuad(State& state):$/;"	f	class:FullscreenQuad	signature:(State& state)
FullscreenQuad::createDescriptorSets	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::createDescriptorSets() $/;"	f	class:FullscreenQuad	signature:()
FullscreenQuad::draw	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::draw($/;"	f	class:FullscreenQuad	signature:( VkCommandBuffer& cmdBuffer, VkPipeline pipeline, VkPipelineLayout layout, VkDescriptorSet* descriptors, uint32_t numDescriptors)
FullscreenQuad::draw	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::draw(VkCommandBuffer& cmdBuffer) $/;"	f	class:FullscreenQuad	signature:(VkCommandBuffer& cmdBuffer)
FullscreenQuad::init	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::init() $/;"	f	class:FullscreenQuad	signature:()
FullscreenQuad::mDescriptorSet	inc/shape/fullscreen_quad.h	/^	VkDescriptorSet mDescriptorSet;$/;"	m	class:FullscreenQuad	access:public
FullscreenQuad::mImageInfo	inc/shape/fullscreen_quad.h	/^	ImageInfo* mImageInfo;$/;"	m	class:FullscreenQuad	access:private
FullscreenQuad::mState	inc/shape/fullscreen_quad.h	/^	State& mState;$/;"	m	class:FullscreenQuad	access:private
FunctionControlConstMask	lib/vulkan/spirv.hpp	/^    FunctionControlConstMask = 0x00000008,$/;"	e	enum:spv::FunctionControlMask
FunctionControlConstShift	lib/vulkan/spirv.hpp	/^    FunctionControlConstShift = 3,$/;"	e	enum:spv::FunctionControlShift
FunctionControlDontInlineMask	lib/vulkan/spirv.hpp	/^    FunctionControlDontInlineMask = 0x00000002,$/;"	e	enum:spv::FunctionControlMask
FunctionControlDontInlineShift	lib/vulkan/spirv.hpp	/^    FunctionControlDontInlineShift = 1,$/;"	e	enum:spv::FunctionControlShift
FunctionControlInlineMask	lib/vulkan/spirv.hpp	/^    FunctionControlInlineMask = 0x00000001,$/;"	e	enum:spv::FunctionControlMask
FunctionControlInlineShift	lib/vulkan/spirv.hpp	/^    FunctionControlInlineShift = 0,$/;"	e	enum:spv::FunctionControlShift
FunctionControlMask	lib/vulkan/spirv.hpp	/^enum FunctionControlMask {$/;"	g	namespace:spv
FunctionControlMaskNone	lib/vulkan/spirv.hpp	/^    FunctionControlMaskNone = 0,$/;"	e	enum:spv::FunctionControlMask
FunctionControlMax	lib/vulkan/spirv.hpp	/^    FunctionControlMax = 0x7fffffff,$/;"	e	enum:spv::FunctionControlShift
FunctionControlPureMask	lib/vulkan/spirv.hpp	/^    FunctionControlPureMask = 0x00000004,$/;"	e	enum:spv::FunctionControlMask
FunctionControlPureShift	lib/vulkan/spirv.hpp	/^    FunctionControlPureShift = 2,$/;"	e	enum:spv::FunctionControlShift
FunctionControlShift	lib/vulkan/spirv.hpp	/^enum FunctionControlShift {$/;"	g	namespace:spv
FunctionParameterAttribute	lib/vulkan/spirv.hpp	/^enum FunctionParameterAttribute {$/;"	g	namespace:spv
FunctionParameterAttributeByVal	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeByVal = 2,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeMax	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeMax = 0x7fffffff,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoAlias	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoAlias = 4,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoCapture	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoCapture = 5,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoReadWrite	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoReadWrite = 7,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoWrite	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoWrite = 6,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeSext	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeSext = 1,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeSret	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeSret = 3,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeZext	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeZext = 0,$/;"	e	enum:spv::FunctionParameterAttribute
GBuffer	inc/g_buffer.h	/^class GBuffer {$/;"	c
GBuffer	src/g_buffer.cpp	/^GBuffer::GBuffer(State& state):$/;"	f	class:GBuffer	signature:(State& state)
GBuffer::ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t ATTACHMENT_COUNT = 4;$/;"	m	class:GBuffer	access:public
GBuffer::COLOR_ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t COLOR_ATTACHMENT_COUNT = ATTACHMENT_COUNT - DEPTH_ATTACHMENT_COUNT;$/;"	m	class:GBuffer	access:public
GBuffer::DEPTH_ATTACHMENT_COUNT	inc/g_buffer.h	/^	static const constexpr uint32_t DEPTH_ATTACHMENT_COUNT = 1;$/;"	m	class:GBuffer	access:public
GBuffer::GBuffer	src/g_buffer.cpp	/^GBuffer::GBuffer(State& state):$/;"	f	class:GBuffer	signature:(State& state)
GBuffer::INDEX_ALBEDO	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_ALBEDO   = 2;$/;"	m	class:GBuffer	access:public
GBuffer::INDEX_DEPTH	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_DEPTH    = 3;$/;"	m	class:GBuffer	access:public
GBuffer::INDEX_NORMAL	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_NORMAL   = 1;$/;"	m	class:GBuffer	access:public
GBuffer::INDEX_POSITION	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_POSITION = 0;$/;"	m	class:GBuffer	access:public
GBuffer::albedo	inc/g_buffer.h	/^	inline FramebufferAttachment& albedo() { return attachments[INDEX_ALBEDO]; }$/;"	f	class:GBuffer	access:public	signature:()
GBuffer::attachments	inc/g_buffer.h	/^	std::array<FramebufferAttachment, ATTACHMENT_COUNT> attachments;$/;"	m	class:GBuffer	access:public
GBuffer::clearValues	inc/g_buffer.h	/^	std::array<VkClearValue, ATTACHMENT_COUNT> clearValues;$/;"	m	class:GBuffer	access:public
GBuffer::cmdBuffer	inc/g_buffer.h	/^	VkCommandBuffer cmdBuffer;$/;"	m	class:GBuffer	access:public
GBuffer::createAttachment	src/g_buffer.cpp	/^void GBuffer::createAttachment($/;"	f	class:GBuffer	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, FramebufferAttachment& attachment, VkFormat format, VkImageUsageFlagBits usage)
GBuffer::createCmdBuffer	src/g_buffer.cpp	/^void GBuffer::createCmdBuffer(const VkDevice& device, const VkCommandPool& cmdPool)$/;"	f	class:GBuffer	signature:(const VkDevice& device, const VkCommandPool& cmdPool)
GBuffer::createColorAttachmentDesc	src/g_buffer.cpp	/^void GBuffer::createColorAttachmentDesc(VkAttachmentDescription& desc, VkFormat format) $/;"	f	class:GBuffer	signature:(VkAttachmentDescription& desc, VkFormat format)
GBuffer::createDepthAttachmentDesc	src/g_buffer.cpp	/^void GBuffer::createDepthAttachmentDesc(VkAttachmentDescription& desc, VkFormat format)$/;"	f	class:GBuffer	signature:(VkAttachmentDescription& desc, VkFormat format)
GBuffer::createDescriptorPool	src/g_buffer.cpp	/^void GBuffer::createDescriptorPool()$/;"	f	class:GBuffer	signature:()
GBuffer::createDescriptors	src/g_buffer.cpp	/^void GBuffer::createDescriptors()$/;"	f	class:GBuffer	signature:()
GBuffer::createFramebuffers	src/g_buffer.cpp	/^void GBuffer::createFramebuffers(const VkPhysicalDevice& physicalDevice, const VkDevice& device) $/;"	f	class:GBuffer	signature:(const VkPhysicalDevice& physicalDevice, const VkDevice& device)
GBuffer::createSampler	src/g_buffer.cpp	/^void GBuffer::createSampler(const VkDevice& device)$/;"	f	class:GBuffer	signature:(const VkDevice& device)
GBuffer::createUniformBuffer	src/g_buffer.cpp	/^void GBuffer::createUniformBuffer()$/;"	f	class:GBuffer	signature:()
GBuffer::deferredQuad	inc/g_buffer.h	/^	FullscreenQuad deferredQuad;$/;"	m	class:GBuffer	access:public
GBuffer::depth	inc/g_buffer.h	/^	inline FramebufferAttachment& depth() { return attachments[INDEX_DEPTH]; }$/;"	f	class:GBuffer	access:public	signature:()
GBuffer::drawDeferredQuad	src/g_buffer.cpp	/^void GBuffer::drawDeferredQuad(VkCommandBuffer& cmdBuffer)$/;"	f	class:GBuffer	signature:(VkCommandBuffer& cmdBuffer)
GBuffer::frameBuffer	inc/g_buffer.h	/^	VkFramebuffer frameBuffer;$/;"	m	class:GBuffer	access:public
GBuffer::height	inc/g_buffer.h	/^	int32_t width, height;$/;"	m	class:GBuffer	access:public
GBuffer::init	src/g_buffer.cpp	/^void GBuffer::init(const VkPhysicalDevice& physicalDevice, const VkDevice& device, uint32_t width, uint32_t height)$/;"	f	class:GBuffer	signature:(const VkPhysicalDevice& physicalDevice, const VkDevice& device, uint32_t width, uint32_t height)
GBuffer::mDescriptorPool	inc/g_buffer.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:GBuffer	access:private
GBuffer::mDescriptorSet	inc/g_buffer.h	/^	VkDescriptorSet mDescriptorSet;$/;"	m	class:GBuffer	access:private
GBuffer::mState	inc/g_buffer.h	/^	State* mState;$/;"	m	class:GBuffer	access:private
GBuffer::mUniformBufferInfo	inc/g_buffer.h	/^	BufferInfo mUniformBufferInfo;$/;"	m	class:GBuffer	access:private
GBuffer::normal	inc/g_buffer.h	/^	inline FramebufferAttachment& normal() { return attachments[INDEX_NORMAL]; }$/;"	f	class:GBuffer	access:public	signature:()
GBuffer::position	inc/g_buffer.h	/^	inline FramebufferAttachment& position() { return attachments[INDEX_POSITION]; }$/;"	f	class:GBuffer	access:public	signature:()
GBuffer::renderPass	inc/g_buffer.h	/^	VkRenderPass renderPass;$/;"	m	class:GBuffer	access:public
GBuffer::sampler	inc/g_buffer.h	/^	VkSampler sampler;$/;"	m	class:GBuffer	access:public
GBuffer::update	src/g_buffer.cpp	/^void GBuffer::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:GBuffer	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
GBuffer::width	inc/g_buffer.h	/^	int32_t width, height;$/;"	m	class:GBuffer	access:public
GBuffer::~GBuffer	src/g_buffer.cpp	/^GBuffer::~GBuffer() $/;"	f	class:GBuffer	signature:()
GLFW_INCLUDE_VULKAN	inc/window.h	8;"	d
GLM_ALIGN	lib/glm/detail/setup.hpp	645;"	d
GLM_ALIGN	lib/glm/detail/setup.hpp	657;"	d
GLM_ALIGN	lib/glm/detail/setup.hpp	673;"	d
GLM_ALIGN	lib/glm/detail/setup.hpp	681;"	d
GLM_ALIGNED_STORAGE_TYPE_STRUCT	lib/glm/detail/type_vec.hpp	20;"	d
GLM_ALIGNED_STRUCT	lib/glm/detail/setup.hpp	646;"	d
GLM_ALIGNED_STRUCT	lib/glm/detail/setup.hpp	658;"	d
GLM_ALIGNED_STRUCT	lib/glm/detail/setup.hpp	674;"	d
GLM_ALIGNED_STRUCT	lib/glm/detail/setup.hpp	682;"	d
GLM_ALIGNED_TYPEDEF	lib/glm/detail/setup.hpp	647;"	d
GLM_ALIGNED_TYPEDEF	lib/glm/detail/setup.hpp	659;"	d
GLM_ALIGNED_TYPEDEF	lib/glm/detail/setup.hpp	675;"	d
GLM_ALIGNED_TYPEDEF	lib/glm/detail/setup.hpp	683;"	d
GLM_ARCH	lib/glm/simd/platform.h	268;"	d
GLM_ARCH	lib/glm/simd/platform.h	270;"	d
GLM_ARCH	lib/glm/simd/platform.h	272;"	d
GLM_ARCH	lib/glm/simd/platform.h	274;"	d
GLM_ARCH	lib/glm/simd/platform.h	276;"	d
GLM_ARCH	lib/glm/simd/platform.h	278;"	d
GLM_ARCH	lib/glm/simd/platform.h	280;"	d
GLM_ARCH	lib/glm/simd/platform.h	282;"	d
GLM_ARCH	lib/glm/simd/platform.h	284;"	d
GLM_ARCH	lib/glm/simd/platform.h	286;"	d
GLM_ARCH	lib/glm/simd/platform.h	288;"	d
GLM_ARCH	lib/glm/simd/platform.h	290;"	d
GLM_ARCH	lib/glm/simd/platform.h	294;"	d
GLM_ARCH	lib/glm/simd/platform.h	296;"	d
GLM_ARCH	lib/glm/simd/platform.h	298;"	d
GLM_ARCH	lib/glm/simd/platform.h	300;"	d
GLM_ARCH	lib/glm/simd/platform.h	302;"	d
GLM_ARCH	lib/glm/simd/platform.h	304;"	d
GLM_ARCH	lib/glm/simd/platform.h	306;"	d
GLM_ARCH	lib/glm/simd/platform.h	308;"	d
GLM_ARCH	lib/glm/simd/platform.h	310;"	d
GLM_ARCH	lib/glm/simd/platform.h	312;"	d
GLM_ARCH	lib/glm/simd/platform.h	314;"	d
GLM_ARCH	lib/glm/simd/platform.h	316;"	d
GLM_ARCH	lib/glm/simd/platform.h	318;"	d
GLM_ARCH	lib/glm/simd/platform.h	320;"	d
GLM_ARCH	lib/glm/simd/platform.h	324;"	d
GLM_ARCH	lib/glm/simd/platform.h	326;"	d
GLM_ARCH	lib/glm/simd/platform.h	328;"	d
GLM_ARCH	lib/glm/simd/platform.h	330;"	d
GLM_ARCH	lib/glm/simd/platform.h	333;"	d
GLM_ARCH	lib/glm/simd/platform.h	335;"	d
GLM_ARCH	lib/glm/simd/platform.h	338;"	d
GLM_ARCH	lib/glm/simd/platform.h	340;"	d
GLM_ARCH	lib/glm/simd/platform.h	343;"	d
GLM_ARCH_ARM	lib/glm/simd/platform.h	262;"	d
GLM_ARCH_ARM_BIT	lib/glm/simd/platform.h	247;"	d
GLM_ARCH_AVX	lib/glm/simd/platform.h	259;"	d
GLM_ARCH_AVX2	lib/glm/simd/platform.h	260;"	d
GLM_ARCH_AVX2_BIT	lib/glm/simd/platform.h	245;"	d
GLM_ARCH_AVX512	lib/glm/simd/platform.h	261;"	d
GLM_ARCH_AVX512_BIT	lib/glm/simd/platform.h	246;"	d
GLM_ARCH_AVX_BIT	lib/glm/simd/platform.h	244;"	d
GLM_ARCH_MIPS	lib/glm/simd/platform.h	264;"	d
GLM_ARCH_MIPS_BIT	lib/glm/simd/platform.h	249;"	d
GLM_ARCH_NEON	lib/glm/simd/platform.h	263;"	d
GLM_ARCH_NEON_BIT	lib/glm/simd/platform.h	248;"	d
GLM_ARCH_PPC	lib/glm/simd/platform.h	265;"	d
GLM_ARCH_PPC_BIT	lib/glm/simd/platform.h	250;"	d
GLM_ARCH_PURE	lib/glm/simd/platform.h	252;"	d
GLM_ARCH_SSE2	lib/glm/simd/platform.h	254;"	d
GLM_ARCH_SSE2_BIT	lib/glm/simd/platform.h	239;"	d
GLM_ARCH_SSE3	lib/glm/simd/platform.h	255;"	d
GLM_ARCH_SSE3_BIT	lib/glm/simd/platform.h	240;"	d
GLM_ARCH_SSE41	lib/glm/simd/platform.h	257;"	d
GLM_ARCH_SSE41_BIT	lib/glm/simd/platform.h	242;"	d
GLM_ARCH_SSE42	lib/glm/simd/platform.h	258;"	d
GLM_ARCH_SSE42_BIT	lib/glm/simd/platform.h	243;"	d
GLM_ARCH_SSSE3	lib/glm/simd/platform.h	256;"	d
GLM_ARCH_SSSE3_BIT	lib/glm/simd/platform.h	241;"	d
GLM_ARCH_X86	lib/glm/simd/platform.h	253;"	d
GLM_ARCH_X86_BIT	lib/glm/simd/platform.h	238;"	d
GLM_COMPILER	lib/glm/simd/platform.h	127;"	d
GLM_COMPILER	lib/glm/simd/platform.h	133;"	d
GLM_COMPILER	lib/glm/simd/platform.h	135;"	d
GLM_COMPILER	lib/glm/simd/platform.h	137;"	d
GLM_COMPILER	lib/glm/simd/platform.h	139;"	d
GLM_COMPILER	lib/glm/simd/platform.h	150;"	d
GLM_COMPILER	lib/glm/simd/platform.h	159;"	d
GLM_COMPILER	lib/glm/simd/platform.h	161;"	d
GLM_COMPILER	lib/glm/simd/platform.h	163;"	d
GLM_COMPILER	lib/glm/simd/platform.h	169;"	d
GLM_COMPILER	lib/glm/simd/platform.h	171;"	d
GLM_COMPILER	lib/glm/simd/platform.h	173;"	d
GLM_COMPILER	lib/glm/simd/platform.h	175;"	d
GLM_COMPILER	lib/glm/simd/platform.h	177;"	d
GLM_COMPILER	lib/glm/simd/platform.h	179;"	d
GLM_COMPILER	lib/glm/simd/platform.h	181;"	d
GLM_COMPILER	lib/glm/simd/platform.h	183;"	d
GLM_COMPILER	lib/glm/simd/platform.h	185;"	d
GLM_COMPILER	lib/glm/simd/platform.h	187;"	d
GLM_COMPILER	lib/glm/simd/platform.h	196;"	d
GLM_COMPILER	lib/glm/simd/platform.h	198;"	d
GLM_COMPILER	lib/glm/simd/platform.h	200;"	d
GLM_COMPILER	lib/glm/simd/platform.h	208;"	d
GLM_COMPILER	lib/glm/simd/platform.h	210;"	d
GLM_COMPILER	lib/glm/simd/platform.h	212;"	d
GLM_COMPILER	lib/glm/simd/platform.h	214;"	d
GLM_COMPILER	lib/glm/simd/platform.h	216;"	d
GLM_COMPILER	lib/glm/simd/platform.h	218;"	d
GLM_COMPILER	lib/glm/simd/platform.h	220;"	d
GLM_COMPILER	lib/glm/simd/platform.h	222;"	d
GLM_COMPILER	lib/glm/simd/platform.h	226;"	d
GLM_COMPILER_CLANG	lib/glm/simd/platform.h	110;"	d
GLM_COMPILER_CLANG34	lib/glm/simd/platform.h	111;"	d
GLM_COMPILER_CLANG35	lib/glm/simd/platform.h	112;"	d
GLM_COMPILER_CLANG36	lib/glm/simd/platform.h	113;"	d
GLM_COMPILER_CLANG37	lib/glm/simd/platform.h	114;"	d
GLM_COMPILER_CLANG38	lib/glm/simd/platform.h	115;"	d
GLM_COMPILER_CLANG39	lib/glm/simd/platform.h	116;"	d
GLM_COMPILER_CLANG40	lib/glm/simd/platform.h	117;"	d
GLM_COMPILER_CLANG41	lib/glm/simd/platform.h	118;"	d
GLM_COMPILER_CLANG42	lib/glm/simd/platform.h	119;"	d
GLM_COMPILER_CUDA	lib/glm/simd/platform.h	104;"	d
GLM_COMPILER_CUDA70	lib/glm/simd/platform.h	105;"	d
GLM_COMPILER_CUDA75	lib/glm/simd/platform.h	106;"	d
GLM_COMPILER_CUDA80	lib/glm/simd/platform.h	107;"	d
GLM_COMPILER_GCC	lib/glm/simd/platform.h	93;"	d
GLM_COMPILER_GCC46	lib/glm/simd/platform.h	94;"	d
GLM_COMPILER_GCC47	lib/glm/simd/platform.h	95;"	d
GLM_COMPILER_GCC48	lib/glm/simd/platform.h	96;"	d
GLM_COMPILER_GCC49	lib/glm/simd/platform.h	97;"	d
GLM_COMPILER_GCC5	lib/glm/simd/platform.h	98;"	d
GLM_COMPILER_GCC6	lib/glm/simd/platform.h	99;"	d
GLM_COMPILER_GCC7	lib/glm/simd/platform.h	100;"	d
GLM_COMPILER_GCC8	lib/glm/simd/platform.h	101;"	d
GLM_COMPILER_INTEL	lib/glm/simd/platform.h	79;"	d
GLM_COMPILER_INTEL14	lib/glm/simd/platform.h	80;"	d
GLM_COMPILER_INTEL15	lib/glm/simd/platform.h	81;"	d
GLM_COMPILER_INTEL16	lib/glm/simd/platform.h	82;"	d
GLM_COMPILER_INTEL17	lib/glm/simd/platform.h	83;"	d
GLM_COMPILER_UNKNOWN	lib/glm/simd/platform.h	76;"	d
GLM_COMPILER_VC	lib/glm/simd/platform.h	86;"	d
GLM_COMPILER_VC12	lib/glm/simd/platform.h	87;"	d
GLM_COMPILER_VC14	lib/glm/simd/platform.h	88;"	d
GLM_COMPILER_VC15	lib/glm/simd/platform.h	89;"	d
GLM_COMPILER_VC16	lib/glm/simd/platform.h	90;"	d
GLM_CONSTEXPR	lib/glm/detail/setup.hpp	702;"	d
GLM_CONSTEXPR	lib/glm/detail/setup.hpp	709;"	d
GLM_CONSTEXPR_CTOR	lib/glm/detail/setup.hpp	704;"	d
GLM_CONSTEXPR_CTOR	lib/glm/detail/setup.hpp	706;"	d
GLM_CONSTEXPR_CTOR	lib/glm/detail/setup.hpp	710;"	d
GLM_CONSTEXPR_SIMD	lib/glm/detail/setup.hpp	720;"	d
GLM_CONSTEXPR_SIMD	lib/glm/detail/setup.hpp	722;"	d
GLM_COORDINATE_SYSTEM	lib/glm/detail/setup.hpp	626;"	d
GLM_COORDINATE_SYSTEM	lib/glm/detail/setup.hpp	628;"	d
GLM_COUNTOF	lib/glm/detail/setup.hpp	775;"	d
GLM_CUDA_FUNC_DECL	lib/glm/detail/setup.hpp	522;"	d
GLM_CUDA_FUNC_DECL	lib/glm/detail/setup.hpp	525;"	d
GLM_CUDA_FUNC_DEF	lib/glm/detail/setup.hpp	521;"	d
GLM_CUDA_FUNC_DEF	lib/glm/detail/setup.hpp	524;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	lib/glm/detail/_features.hpp	266;"	d
GLM_CXX11_ALIAS_TEMPLATE	lib/glm/detail/_features.hpp	270;"	d
GLM_CXX11_ALIGNAS	lib/glm/detail/_features.hpp	274;"	d
GLM_CXX11_ATTRIBUTES	lib/glm/detail/_features.hpp	278;"	d
GLM_CXX11_AUTO_TYPE	lib/glm/detail/_features.hpp	370;"	d
GLM_CXX11_CONSTEXPR	lib/glm/detail/_features.hpp	282;"	d
GLM_CXX11_DECLTYPE	lib/glm/detail/_features.hpp	286;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	lib/glm/detail/_features.hpp	294;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	lib/glm/detail/_features.hpp	290;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	lib/glm/detail/_features.hpp	298;"	d
GLM_CXX11_DELETED_FUNCTIONS	lib/glm/detail/_features.hpp	302;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	lib/glm/detail/_features.hpp	306;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	lib/glm/detail/_features.hpp	310;"	d
GLM_CXX11_IMPLICIT_MOVES	lib/glm/detail/_features.hpp	314;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	lib/glm/detail/_features.hpp	318;"	d
GLM_CXX11_INLINE_NAMESPACES	lib/glm/detail/_features.hpp	322;"	d
GLM_CXX11_LAMBDAS	lib/glm/detail/_features.hpp	326;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	lib/glm/detail/_features.hpp	330;"	d
GLM_CXX11_NOEXCEPT	lib/glm/detail/_features.hpp	334;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	lib/glm/detail/_features.hpp	338;"	d
GLM_CXX11_NULLPTR	lib/glm/detail/_features.hpp	342;"	d
GLM_CXX11_OVERRIDE_CONTROL	lib/glm/detail/_features.hpp	346;"	d
GLM_CXX11_RANGE_FOR	lib/glm/detail/_features.hpp	354;"	d
GLM_CXX11_RAW_STRING_LITERALS	lib/glm/detail/_features.hpp	358;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	lib/glm/detail/_features.hpp	350;"	d
GLM_CXX11_RVALUE_REFERENCES	lib/glm/detail/_features.hpp	362;"	d
GLM_CXX11_STATIC_ASSERT	lib/glm/detail/_features.hpp	254;"	d
GLM_CXX11_STATIC_ASSERT	lib/glm/detail/_features.hpp	366;"	d
GLM_CXX11_STRONG_ENUMS	lib/glm/detail/_features.hpp	374;"	d
GLM_CXX11_TRAILING_RETURN	lib/glm/detail/_features.hpp	378;"	d
GLM_CXX11_UNICODE_LITERALS	lib/glm/detail/_features.hpp	382;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	lib/glm/detail/_features.hpp	386;"	d
GLM_CXX11_USER_LITERALS	lib/glm/detail/_features.hpp	390;"	d
GLM_CXX11_VARIADIC_TEMPLATES	lib/glm/detail/_features.hpp	394;"	d
GLM_CXX98_EXCEPTIONS	lib/glm/detail/_features.hpp	258;"	d
GLM_CXX98_RTTI	lib/glm/detail/_features.hpp	262;"	d
GLM_DEFAULT	lib/glm/detail/setup.hpp	690;"	d
GLM_DEFAULT	lib/glm/detail/setup.hpp	697;"	d
GLM_DEFAULT	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat(mat<2, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat<2, 2, T, P> & operator=(mat<2, 2, T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat(mat<2, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat<2, 3, T, P> & operator=(mat<2, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat(mat<2, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat<2, 4, T, P> & operator=(mat<2, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat(mat<3, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat<3, 2, T, P> & operator=(mat<3, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat(mat<3, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat<3, 3, T, P> & operator=(mat<3, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat(mat<3, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat<3, 4, T, P> & operator=(mat<3, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat(mat<4, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat<4, 2, T, P> & operator=(mat<4, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat(mat<4, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat<4, 3, T, P> & operator=(mat<4, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat(mat<4, 4, T, P> const& m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat<4, 4, T, P> & operator=(mat<4, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL vec & operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL vec& operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL vec & operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_SIMD vec(vec<4, T, P> const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL vec<4, T, P>& operator=(vec<4, T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tquat(tquat<T, P> const& q) GLM_DEFAULT;$/;"	m	struct:glm::tquat	access:public
GLM_DEFAULT	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL tquat<T, P> & operator=(tquat<T, P> const& q) GLM_DEFAULT;$/;"	m	struct:glm::tquat	access:public
GLM_DEFAULT	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tdualquat(tdualquat<T, P> const & d) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat	access:public
GLM_DEFAULT	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL tdualquat<T, P> & operator=(tdualquat<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/setup.hpp	692;"	d
GLM_DEFAULT_CTOR	lib/glm/detail/setup.hpp	694;"	d
GLM_DEFAULT_CTOR	lib/glm/detail/setup.hpp	698;"	d
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT_CTOR	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_SIMD vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
GLM_DEFAULT_CTOR	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tquat	access:public
GLM_DEFAULT_CTOR	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tdualquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tdualquat	access:public
GLM_DEPRECATED	lib/glm/detail/setup.hpp	644;"	d
GLM_DEPRECATED	lib/glm/detail/setup.hpp	656;"	d
GLM_DEPRECATED	lib/glm/detail/setup.hpp	672;"	d
GLM_DEPRECATED	lib/glm/detail/setup.hpp	680;"	d
GLM_DEPTH_CLIP_SPACE	lib/glm/detail/setup.hpp	604;"	d
GLM_DEPTH_CLIP_SPACE	lib/glm/detail/setup.hpp	606;"	d
GLM_DEPTH_NEGATIVE_ONE_TO_ONE	lib/glm/detail/setup.hpp	601;"	d
GLM_DEPTH_ZERO_TO_ONE	lib/glm/detail/setup.hpp	600;"	d
GLM_ENABLE_EXPERIMENTAL	inc/macro.h	14;"	d
GLM_ENABLE_EXPERIMENTAL	lib/glm/detail/glm.cpp	4;"	d	file:
GLM_EXPLICIT	lib/glm/detail/setup.hpp	726;"	d
GLM_EXPLICIT	lib/glm/detail/setup.hpp	728;"	d
GLM_FORCE_PURE	lib/glm/detail/setup.hpp	244;"	d
GLM_FORCE_RADIANS	inc/macro.h	11;"	d
GLM_FORCE_ZERO_TO_ONE	inc/macro.h	12;"	d
GLM_FUNC_DECL	lib/glm/detail/setup.hpp	553;"	d
GLM_FUNC_QUALIFIER	lib/glm/detail/setup.hpp	554;"	d
GLM_HAS_ALIGNED_TYPE	lib/glm/detail/setup.hpp	733;"	d
GLM_HAS_ALIGNOF	lib/glm/detail/setup.hpp	427;"	d
GLM_HAS_ALIGNOF	lib/glm/detail/setup.hpp	429;"	d
GLM_HAS_ALIGNOF	lib/glm/detail/setup.hpp	431;"	d
GLM_HAS_ASSIGNABLE	lib/glm/detail/setup.hpp	445;"	d
GLM_HAS_ASSIGNABLE	lib/glm/detail/setup.hpp	447;"	d
GLM_HAS_BITSCAN_WINDOWS	lib/glm/detail/setup.hpp	465;"	d
GLM_HAS_BITSCAN_WINDOWS	lib/glm/detail/setup.hpp	467;"	d
GLM_HAS_CONSTEXPR	lib/glm/detail/setup.hpp	323;"	d
GLM_HAS_CONSTEXPR	lib/glm/detail/setup.hpp	326;"	d
GLM_HAS_CONSTEXPR	lib/glm/detail/setup.hpp	329;"	d
GLM_HAS_CONSTEXPR_PARTIAL	lib/glm/detail/setup.hpp	324;"	d
GLM_HAS_CONSTEXPR_PARTIAL	lib/glm/detail/setup.hpp	327;"	d
GLM_HAS_CONSTEXPR_PARTIAL	lib/glm/detail/setup.hpp	332;"	d
GLM_HAS_CXX11_STL	lib/glm/detail/setup.hpp	284;"	d
GLM_HAS_CXX11_STL	lib/glm/detail/setup.hpp	287;"	d
GLM_HAS_CXX11_STL	lib/glm/detail/setup.hpp	289;"	d
GLM_HAS_CXX11_STL	lib/glm/detail/setup.hpp	292;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	lib/glm/detail/setup.hpp	361;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	lib/glm/detail/setup.hpp	363;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	lib/glm/detail/setup.hpp	365;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	lib/glm/detail/setup.hpp	367;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	lib/glm/detail/setup.hpp	388;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	lib/glm/detail/setup.hpp	390;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	lib/glm/detail/setup.hpp	392;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	lib/glm/detail/setup.hpp	312;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	lib/glm/detail/setup.hpp	314;"	d
GLM_HAS_INITIALIZER_LISTS	lib/glm/detail/setup.hpp	337;"	d
GLM_HAS_INITIALIZER_LISTS	lib/glm/detail/setup.hpp	339;"	d
GLM_HAS_INITIALIZER_LISTS	lib/glm/detail/setup.hpp	341;"	d
GLM_HAS_MAKE_SIGNED	lib/glm/detail/setup.hpp	457;"	d
GLM_HAS_MAKE_SIGNED	lib/glm/detail/setup.hpp	459;"	d
GLM_HAS_ONLY_XYZW	lib/glm/detail/setup.hpp	438;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	476;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	478;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	480;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	482;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	486;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	488;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	491;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	494;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	496;"	d
GLM_HAS_OPENMP	lib/glm/detail/setup.hpp	499;"	d
GLM_HAS_RANGE_FOR	lib/glm/detail/setup.hpp	414;"	d
GLM_HAS_RANGE_FOR	lib/glm/detail/setup.hpp	416;"	d
GLM_HAS_RANGE_FOR	lib/glm/detail/setup.hpp	418;"	d
GLM_HAS_RVALUE_REFERENCES	lib/glm/detail/setup.hpp	376;"	d
GLM_HAS_RVALUE_REFERENCES	lib/glm/detail/setup.hpp	378;"	d
GLM_HAS_RVALUE_REFERENCES	lib/glm/detail/setup.hpp	380;"	d
GLM_HAS_STATIC_ASSERT	lib/glm/detail/setup.hpp	300;"	d
GLM_HAS_STATIC_ASSERT	lib/glm/detail/setup.hpp	302;"	d
GLM_HAS_STATIC_ASSERT	lib/glm/detail/setup.hpp	304;"	d
GLM_HAS_TEMPLATE_ALIASES	lib/glm/detail/setup.hpp	401;"	d
GLM_HAS_TEMPLATE_ALIASES	lib/glm/detail/setup.hpp	403;"	d
GLM_HAS_TEMPLATE_ALIASES	lib/glm/detail/setup.hpp	405;"	d
GLM_HAS_TRIVIAL_QUERIES	lib/glm/detail/setup.hpp	453;"	d
GLM_HAS_UNRESTRICTED_UNIONS	lib/glm/detail/setup.hpp	349;"	d
GLM_HAS_UNRESTRICTED_UNIONS	lib/glm/detail/setup.hpp	351;"	d
GLM_HAS_UNRESTRICTED_UNIONS	lib/glm/detail/setup.hpp	353;"	d
GLM_IMPLEMENT_SCAL_MULT	lib/glm/gtx/scalar_multiplication.hpp	39;"	d
GLM_IMPLEMENT_SCAL_MULT	lib/glm/gtx/scalar_multiplication.hpp	72;"	d
GLM_INLINE	lib/glm/detail/setup.hpp	536;"	d
GLM_INLINE	lib/glm/detail/setup.hpp	539;"	d
GLM_INLINE	lib/glm/detail/setup.hpp	542;"	d
GLM_INLINE	lib/glm/detail/setup.hpp	545;"	d
GLM_INLINE	lib/glm/detail/setup.hpp	549;"	d
GLM_LANG	lib/glm/detail/setup.hpp	146;"	d
GLM_LANG	lib/glm/detail/setup.hpp	156;"	d
GLM_LANG	lib/glm/detail/setup.hpp	159;"	d
GLM_LANG	lib/glm/detail/setup.hpp	161;"	d
GLM_LANG	lib/glm/detail/setup.hpp	165;"	d
GLM_LANG	lib/glm/detail/setup.hpp	167;"	d
GLM_LANG	lib/glm/detail/setup.hpp	169;"	d
GLM_LANG	lib/glm/detail/setup.hpp	171;"	d
GLM_LANG	lib/glm/detail/setup.hpp	173;"	d
GLM_LANG	lib/glm/detail/setup.hpp	175;"	d
GLM_LANG	lib/glm/detail/setup.hpp	179;"	d
GLM_LANG	lib/glm/detail/setup.hpp	181;"	d
GLM_LANG	lib/glm/detail/setup.hpp	183;"	d
GLM_LANG	lib/glm/detail/setup.hpp	185;"	d
GLM_LANG	lib/glm/detail/setup.hpp	190;"	d
GLM_LANG	lib/glm/detail/setup.hpp	192;"	d
GLM_LANG	lib/glm/detail/setup.hpp	194;"	d
GLM_LANG	lib/glm/detail/setup.hpp	198;"	d
GLM_LANG	lib/glm/detail/setup.hpp	200;"	d
GLM_LANG	lib/glm/detail/setup.hpp	202;"	d
GLM_LANG	lib/glm/detail/setup.hpp	212;"	d
GLM_LANG	lib/glm/detail/setup.hpp	214;"	d
GLM_LANG	lib/glm/detail/setup.hpp	216;"	d
GLM_LANG	lib/glm/detail/setup.hpp	218;"	d
GLM_LANG	lib/glm/detail/setup.hpp	220;"	d
GLM_LANG	lib/glm/detail/setup.hpp	229;"	d
GLM_LANG	lib/glm/detail/setup.hpp	231;"	d
GLM_LANG	lib/glm/detail/setup.hpp	235;"	d
GLM_LANG	lib/glm/detail/setup.hpp	237;"	d
GLM_LANG	lib/glm/detail/setup.hpp	239;"	d
GLM_LANG	lib/glm/detail/setup.hpp	241;"	d
GLM_LANG_CXX03	lib/glm/detail/setup.hpp	129;"	d
GLM_LANG_CXX03_FLAG	lib/glm/detail/setup.hpp	119;"	d
GLM_LANG_CXX0X	lib/glm/detail/setup.hpp	130;"	d
GLM_LANG_CXX0X_FLAG	lib/glm/detail/setup.hpp	120;"	d
GLM_LANG_CXX11	lib/glm/detail/setup.hpp	131;"	d
GLM_LANG_CXX11_FLAG	lib/glm/detail/setup.hpp	121;"	d
GLM_LANG_CXX14	lib/glm/detail/setup.hpp	133;"	d
GLM_LANG_CXX14_FLAG	lib/glm/detail/setup.hpp	123;"	d
GLM_LANG_CXX1Y	lib/glm/detail/setup.hpp	132;"	d
GLM_LANG_CXX1Y_FLAG	lib/glm/detail/setup.hpp	122;"	d
GLM_LANG_CXX1Z	lib/glm/detail/setup.hpp	134;"	d
GLM_LANG_CXX1Z_FLAG	lib/glm/detail/setup.hpp	124;"	d
GLM_LANG_CXX98	lib/glm/detail/setup.hpp	128;"	d
GLM_LANG_CXX98_FLAG	lib/glm/detail/setup.hpp	118;"	d
GLM_LANG_CXXGNU	lib/glm/detail/setup.hpp	136;"	d
GLM_LANG_CXXGNU_FLAG	lib/glm/detail/setup.hpp	126;"	d
GLM_LANG_CXXMS	lib/glm/detail/setup.hpp	135;"	d
GLM_LANG_CXXMS_FLAG	lib/glm/detail/setup.hpp	125;"	d
GLM_LANG_STL11_FORCED	lib/glm/detail/setup.hpp	147;"	d
GLM_LANG_STL11_FORCED	lib/glm/detail/setup.hpp	157;"	d
GLM_LEFT_HANDED	lib/glm/detail/setup.hpp	622;"	d
GLM_MESSAGES	lib/glm/detail/setup.hpp	17;"	d
GLM_MESSAGES	lib/glm/detail/setup.hpp	19;"	d
GLM_MESSAGES_DISABLE	lib/glm/detail/setup.hpp	14;"	d
GLM_MESSAGES_ENABLED	lib/glm/detail/setup.hpp	13;"	d
GLM_MESSAGE_ARCH_DISPLAYED	lib/glm/detail/setup.hpp	83;"	d
GLM_MESSAGE_COMPILER_DISPLAYED	lib/glm/detail/setup.hpp	42;"	d
GLM_MESSAGE_CORE_INCLUDED_DISPLAYED	lib/glm/glm.hpp	64;"	d
GLM_MESSAGE_DEPTH_DISPLAYED	lib/glm/detail/setup.hpp	610;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	lib/glm/ext.hpp	33;"	d
GLM_MESSAGE_FORCE_SIZE_T_LENGTH	lib/glm/detail/setup.hpp	751;"	d
GLM_MESSAGE_HANDED_DISPLAYED	lib/glm/detail/setup.hpp	632;"	d
GLM_MESSAGE_LANG_DISPLAYED	lib/glm/detail/setup.hpp	250;"	d
GLM_MESSAGE_MODEL_DISPLAYED	lib/glm/detail/setup.hpp	74;"	d
GLM_MESSAGE_PLATFORM_DISPLAYED	lib/glm/simd/platform.h	47;"	d
GLM_MESSAGE_SWIZZLE_DISPLAYED	lib/glm/detail/setup.hpp	571;"	d
GLM_MESSAGE_UNRESTRICTED_GENTYPE_DISPLAYED	lib/glm/detail/setup.hpp	591;"	d
GLM_MESSAGE_VERSION_DISPLAYED	lib/glm/detail/setup.hpp	36;"	d
GLM_MODEL	lib/glm/detail/setup.hpp	62;"	d
GLM_MODEL	lib/glm/detail/setup.hpp	64;"	d
GLM_MODEL	lib/glm/detail/setup.hpp	66;"	d
GLM_MODEL_32	lib/glm/simd/platform.h	122;"	d
GLM_MODEL_64	lib/glm/simd/platform.h	123;"	d
GLM_MSC_EXT	lib/glm/detail/setup.hpp	207;"	d
GLM_MSC_EXT	lib/glm/detail/setup.hpp	209;"	d
GLM_MSC_EXT	lib/glm/detail/setup.hpp	224;"	d
GLM_MSC_EXT	lib/glm/detail/setup.hpp	226;"	d
GLM_MUTABLE	lib/glm/detail/_swizzle_func.hpp	45;"	d
GLM_NEVER_INLINE	lib/glm/detail/setup.hpp	537;"	d
GLM_NEVER_INLINE	lib/glm/detail/setup.hpp	540;"	d
GLM_NEVER_INLINE	lib/glm/detail/setup.hpp	543;"	d
GLM_NEVER_INLINE	lib/glm/detail/setup.hpp	546;"	d
GLM_NEVER_INLINE	lib/glm/detail/setup.hpp	550;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	22;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	24;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	26;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	28;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	30;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	32;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	34;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	36;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	38;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	40;"	d
GLM_PLATFORM	lib/glm/simd/platform.h	42;"	d
GLM_PLATFORM_ANDROID	lib/glm/simd/platform.h	14;"	d
GLM_PLATFORM_APPLE	lib/glm/simd/platform.h	12;"	d
GLM_PLATFORM_CHROME_NACL	lib/glm/simd/platform.h	15;"	d
GLM_PLATFORM_CYGWIN	lib/glm/simd/platform.h	19;"	d
GLM_PLATFORM_LINUX	lib/glm/simd/platform.h	11;"	d
GLM_PLATFORM_QNXNTO	lib/glm/simd/platform.h	17;"	d
GLM_PLATFORM_UNIX	lib/glm/simd/platform.h	16;"	d
GLM_PLATFORM_UNKNOWN	lib/glm/simd/platform.h	9;"	d
GLM_PLATFORM_WINCE	lib/glm/simd/platform.h	18;"	d
GLM_PLATFORM_WINDOWS	lib/glm/simd/platform.h	10;"	d
GLM_RELAXED_CONSTEXPR	lib/glm/detail/setup.hpp	714;"	d
GLM_RELAXED_CONSTEXPR	lib/glm/detail/setup.hpp	716;"	d
GLM_RESTRICT	lib/glm/detail/setup.hpp	649;"	d
GLM_RESTRICT	lib/glm/detail/setup.hpp	661;"	d
GLM_RESTRICT	lib/glm/detail/setup.hpp	677;"	d
GLM_RESTRICT	lib/glm/detail/setup.hpp	685;"	d
GLM_RESTRICT_FUNC	lib/glm/detail/setup.hpp	648;"	d
GLM_RESTRICT_FUNC	lib/glm/detail/setup.hpp	660;"	d
GLM_RESTRICT_FUNC	lib/glm/detail/setup.hpp	676;"	d
GLM_RESTRICT_FUNC	lib/glm/detail/setup.hpp	684;"	d
GLM_RIGHT_HANDED	lib/glm/detail/setup.hpp	623;"	d
GLM_STATIC_ASSERT	lib/glm/detail/setup.hpp	507;"	d
GLM_STATIC_ASSERT	lib/glm/detail/setup.hpp	509;"	d
GLM_STATIC_ASSERT	lib/glm/detail/setup.hpp	511;"	d
GLM_STATIC_ASSERT	lib/glm/detail/setup.hpp	513;"	d
GLM_STATIC_ASSERT_NULL	lib/glm/detail/setup.hpp	514;"	d
GLM_SWIZZLE	lib/glm/detail/setup.hpp	565;"	d
GLM_SWIZZLE	lib/glm/detail/setup.hpp	567;"	d
GLM_SWIZZLE_DISABLE	lib/glm/detail/setup.hpp	562;"	d
GLM_SWIZZLE_ENABLED	lib/glm/detail/setup.hpp	561;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	47;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	56;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	81;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	64;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	95;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	121;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	lib/glm/detail/_swizzle_func.hpp	51;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	lib/glm/detail/_swizzle_func.hpp	76;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	lib/glm/detail/_swizzle_func.hpp	72;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	lib/glm/detail/_swizzle_func.hpp	152;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	lib/glm/detail/_swizzle_func.hpp	147;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	lib/glm/detail/_swizzle_func.hpp	6;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	lib/glm/detail/_swizzle_func.hpp	24;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	157;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	201;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	334;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	lib/glm/detail/_swizzle_func.hpp	12;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	lib/glm/detail/_swizzle_func.hpp	31;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	163;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	212;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	352;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	lib/glm/detail/_swizzle_func.hpp	18;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	lib/glm/detail/_swizzle_func.hpp	38;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	173;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	241;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	lib/glm/detail/_swizzle_func.hpp	418;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	lib/glm/detail/_swizzle_func.hpp	196;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	lib/glm/detail/_swizzle_func.hpp	191;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	lib/glm/detail/_swizzle_func.hpp	329;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	lib/glm/detail/_swizzle_func.hpp	324;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	lib/glm/detail/_swizzle_func.hpp	681;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	lib/glm/detail/_swizzle_func.hpp	676;"	d
GLM_UNRESTRICTED_GENTYPE	lib/glm/detail/setup.hpp	585;"	d
GLM_UNRESTRICTED_GENTYPE	lib/glm/detail/setup.hpp	587;"	d
GLM_VAR_USED	lib/glm/detail/setup.hpp	529;"	d
GLM_VAR_USED	lib/glm/detail/setup.hpp	531;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	651;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	653;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	664;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	666;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	669;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	678;"	d
GLM_VECTOR_CALL	lib/glm/detail/setup.hpp	686;"	d
GLM_VERSION	lib/glm/detail/setup.hpp	29;"	d
GLM_VERSION_MAJOR	lib/glm/detail/setup.hpp	30;"	d
GLM_VERSION_MINOR	lib/glm/detail/setup.hpp	31;"	d
GLM_VERSION_PATCH	lib/glm/detail/setup.hpp	32;"	d
GLM_VERSION_REVISION	lib/glm/detail/setup.hpp	33;"	d
GLM_VULKAN_PERSPECTIVE	inc/macro.h	13;"	d
GLSLstd450	lib/vulkan/GLSL.std.450.h	/^enum GLSLstd450 {$/;"	g
GLSLstd450Acos	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Acos = 17,$/;"	e	enum:GLSLstd450
GLSLstd450Acosh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Acosh = 23,$/;"	e	enum:GLSLstd450
GLSLstd450Asin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Asin = 16,$/;"	e	enum:GLSLstd450
GLSLstd450Asinh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Asinh = 22,$/;"	e	enum:GLSLstd450
GLSLstd450Atan	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Atan = 18,$/;"	e	enum:GLSLstd450
GLSLstd450Atan2	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Atan2 = 25,$/;"	e	enum:GLSLstd450
GLSLstd450Atanh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Atanh = 24,$/;"	e	enum:GLSLstd450
GLSLstd450Bad	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Bad = 0,              \/\/ Don't use$/;"	e	enum:GLSLstd450
GLSLstd450Ceil	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Ceil = 9,$/;"	e	enum:GLSLstd450
GLSLstd450Cos	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Cos = 14,$/;"	e	enum:GLSLstd450
GLSLstd450Cosh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Cosh = 20,$/;"	e	enum:GLSLstd450
GLSLstd450Count	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Count$/;"	e	enum:GLSLstd450
GLSLstd450Cross	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Cross = 68,$/;"	e	enum:GLSLstd450
GLSLstd450Degrees	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Degrees = 12,$/;"	e	enum:GLSLstd450
GLSLstd450Determinant	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Determinant = 33,$/;"	e	enum:GLSLstd450
GLSLstd450Distance	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Distance = 67,$/;"	e	enum:GLSLstd450
GLSLstd450Exp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Exp = 27,$/;"	e	enum:GLSLstd450
GLSLstd450Exp2	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Exp2 = 29,$/;"	e	enum:GLSLstd450
GLSLstd450FAbs	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FAbs = 4,$/;"	e	enum:GLSLstd450
GLSLstd450FClamp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FClamp = 43,$/;"	e	enum:GLSLstd450
GLSLstd450FMax	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FMax = 40,$/;"	e	enum:GLSLstd450
GLSLstd450FMin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FMin = 37,$/;"	e	enum:GLSLstd450
GLSLstd450FMix	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FMix = 46,$/;"	e	enum:GLSLstd450
GLSLstd450FSign	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FSign = 6,$/;"	e	enum:GLSLstd450
GLSLstd450FaceForward	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FaceForward = 70,$/;"	e	enum:GLSLstd450
GLSLstd450FindILsb	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FindILsb = 73,$/;"	e	enum:GLSLstd450
GLSLstd450FindSMsb	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FindSMsb = 74,$/;"	e	enum:GLSLstd450
GLSLstd450FindUMsb	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FindUMsb = 75,$/;"	e	enum:GLSLstd450
GLSLstd450Floor	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Floor = 8,$/;"	e	enum:GLSLstd450
GLSLstd450Fma	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Fma = 50,$/;"	e	enum:GLSLstd450
GLSLstd450Fract	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Fract = 10,$/;"	e	enum:GLSLstd450
GLSLstd450Frexp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Frexp = 51,            \/\/ second operand needs an OpVariable to write to$/;"	e	enum:GLSLstd450
GLSLstd450FrexpStruct	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450FrexpStruct = 52,      \/\/ no OpVariable operand$/;"	e	enum:GLSLstd450
GLSLstd450IMix	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450IMix = 47,            \/\/ Reserved$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtCentroid	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450InterpolateAtCentroid = 76,$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtOffset	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450InterpolateAtOffset = 78,$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtSample	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450InterpolateAtSample = 77,$/;"	e	enum:GLSLstd450
GLSLstd450InverseSqrt	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450InverseSqrt = 32,$/;"	e	enum:GLSLstd450
GLSLstd450Ldexp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Ldexp = 53,$/;"	e	enum:GLSLstd450
GLSLstd450Length	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Length = 66,$/;"	e	enum:GLSLstd450
GLSLstd450Log	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Log = 28,$/;"	e	enum:GLSLstd450
GLSLstd450Log2	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Log2 = 30,$/;"	e	enum:GLSLstd450
GLSLstd450MatrixInverse	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450MatrixInverse = 34,$/;"	e	enum:GLSLstd450
GLSLstd450Modf	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Modf = 35,            \/\/ second operand needs an OpVariable to write to$/;"	e	enum:GLSLstd450
GLSLstd450ModfStruct	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450ModfStruct = 36,      \/\/ no OpVariable operand$/;"	e	enum:GLSLstd450
GLSLstd450NClamp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450NClamp = 81,$/;"	e	enum:GLSLstd450
GLSLstd450NMax	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450NMax = 80,$/;"	e	enum:GLSLstd450
GLSLstd450NMin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450NMin = 79,$/;"	e	enum:GLSLstd450
GLSLstd450Normalize	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Normalize = 69,$/;"	e	enum:GLSLstd450
GLSLstd450PackDouble2x32	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackDouble2x32 = 59,$/;"	e	enum:GLSLstd450
GLSLstd450PackHalf2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackHalf2x16 = 58,$/;"	e	enum:GLSLstd450
GLSLstd450PackSnorm2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackSnorm2x16 = 56,$/;"	e	enum:GLSLstd450
GLSLstd450PackSnorm4x8	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackSnorm4x8 = 54,$/;"	e	enum:GLSLstd450
GLSLstd450PackUnorm2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackUnorm2x16 = 57,$/;"	e	enum:GLSLstd450
GLSLstd450PackUnorm4x8	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450PackUnorm4x8 = 55,$/;"	e	enum:GLSLstd450
GLSLstd450Pow	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Pow = 26,$/;"	e	enum:GLSLstd450
GLSLstd450Radians	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Radians = 11,$/;"	e	enum:GLSLstd450
GLSLstd450Reflect	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Reflect = 71,$/;"	e	enum:GLSLstd450
GLSLstd450Refract	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Refract = 72,$/;"	e	enum:GLSLstd450
GLSLstd450Revision	lib/vulkan/GLSL.std.450.h	/^static const int GLSLstd450Revision = 3;$/;"	v
GLSLstd450Round	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Round = 1,$/;"	e	enum:GLSLstd450
GLSLstd450RoundEven	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450RoundEven = 2,$/;"	e	enum:GLSLstd450
GLSLstd450SAbs	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SAbs = 5,$/;"	e	enum:GLSLstd450
GLSLstd450SClamp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SClamp = 45,$/;"	e	enum:GLSLstd450
GLSLstd450SMax	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SMax = 42,$/;"	e	enum:GLSLstd450
GLSLstd450SMin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SMin = 39,$/;"	e	enum:GLSLstd450
GLSLstd450SSign	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SSign = 7,$/;"	e	enum:GLSLstd450
GLSLstd450Sin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Sin = 13,$/;"	e	enum:GLSLstd450
GLSLstd450Sinh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Sinh = 19,$/;"	e	enum:GLSLstd450
GLSLstd450SmoothStep	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450SmoothStep = 49,$/;"	e	enum:GLSLstd450
GLSLstd450Sqrt	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Sqrt = 31,$/;"	e	enum:GLSLstd450
GLSLstd450Step	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Step = 48,$/;"	e	enum:GLSLstd450
GLSLstd450Tan	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Tan = 15,$/;"	e	enum:GLSLstd450
GLSLstd450Tanh	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Tanh = 21,$/;"	e	enum:GLSLstd450
GLSLstd450Trunc	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450Trunc = 3,$/;"	e	enum:GLSLstd450
GLSLstd450UClamp	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UClamp = 44,$/;"	e	enum:GLSLstd450
GLSLstd450UMax	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UMax = 41,$/;"	e	enum:GLSLstd450
GLSLstd450UMin	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UMin = 38,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackDouble2x32	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackDouble2x32 = 65,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackHalf2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackHalf2x16 = 62,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackSnorm2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackSnorm2x16 = 60,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackSnorm4x8	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackSnorm4x8 = 63,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackUnorm2x16	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackUnorm2x16 = 61,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackUnorm4x8	lib/vulkan/GLSL.std.450.h	/^    GLSLstd450UnpackUnorm4x8 = 64,$/;"	e	enum:GLSLstd450
GLSLstd450Version	lib/vulkan/GLSL.std.450.h	/^static const int GLSLstd450Version = 100;$/;"	v
GLSLstd450_H	lib/vulkan/GLSL.std.450.h	28;"	d
Get	lib/__assimp/metadata.h	/^	inline bool Get(size_t index, const aiString*& key, const aiMetadataEntry*& entry) {$/;"	f	struct:aiMetadata	access:public	signature:(size_t index, const aiString*& key, const aiMetadataEntry*& entry)
Get	lib/__assimp/metadata.h	/^    bool Get( const aiString& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const aiString& key, T& value )
Get	lib/__assimp/metadata.h	/^    bool Get( unsigned index, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, T& value )
Get	lib/__assimp/metadata.h	/^    inline bool Get( const std::string& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const std::string& key, T& value )
Get	lib/assimp/metadata.h	/^    inline bool Get( const aiString& key, T& value )$/;"	f	struct:aiMetadata	access:public	signature:( const aiString& key, T& value )
Get	lib/assimp/metadata.h	/^    inline bool Get( const std::string& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const std::string& key, T& value )
Get	lib/assimp/metadata.h	/^    inline bool Get( unsigned index, T& value )$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, T& value )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( bool )       { return AI_BOOL; }$/;"	f	signature:( bool )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( const aiString & )   { return AI_AISTRING; }$/;"	f	signature:( const aiString & )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( const aiVector3D & ) { return AI_AIVECTOR3D; }$/;"	f	signature:( const aiVector3D & )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( double )     { return AI_DOUBLE; }$/;"	f	signature:( double )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( float )      { return AI_FLOAT; }$/;"	f	signature:( float )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( int32_t )    { return AI_INT32; }$/;"	f	signature:( int32_t )
GetAiType	lib/__assimp/metadata.h	/^inline aiMetadataType GetAiType( uint64_t )   { return AI_UINT64; }$/;"	f	signature:( uint64_t )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( aiString ) { return AI_AISTRING; }$/;"	f	signature:( aiString )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( aiVector3D ) { return AI_AIVECTOR3D; }$/;"	f	signature:( aiVector3D )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( bool ) { return AI_BOOL; }$/;"	f	signature:( bool )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( float ) { return AI_FLOAT; }$/;"	f	signature:( float )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( int ) { return AI_INT; }$/;"	f	signature:( int )
GetAiType	lib/assimp/metadata.h	/^inline aiMetadataType GetAiType( uint64_t ) { return AI_UINT64; }$/;"	f	signature:( uint64_t )
GetBufferMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetBufferMemoryRequirements GetBufferMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetCameraMatrix	lib/__assimp/camera.h	/^    void GetCameraMatrix (aiMatrix4x4& out) const$/;"	f	struct:aiCamera	access:public	signature:(aiMatrix4x4& out) const
GetCameraMatrix	lib/assimp/camera.h	/^    void GetCameraMatrix (aiMatrix4x4& out) const$/;"	f	struct:aiCamera	access:public	signature:(aiMatrix4x4& out) const
GetDeviceMemoryCommitment	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceMemoryCommitment GetDeviceMemoryCommitment;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetDeviceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceProcAddr GetDeviceProcAddr;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetDeviceQueue	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceQueue GetDeviceQueue;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetDisplayModePropertiesKHR	lib/vulkan/vk_layer.h	/^        GetDisplayModePropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetDisplayPlaneCapabilitiesKHR	lib/vulkan/vk_layer.h	/^        GetDisplayPlaneCapabilitiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetDisplayPlaneSupportedDisplaysKHR	lib/vulkan/vk_layer.h	/^        GetDisplayPlaneSupportedDisplaysKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetEventStatus	lib/vulkan/vk_layer.h	/^    PFN_vkGetEventStatus GetEventStatus;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetExtensionList	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE void Importer::GetExtensionList(std::string& szOut) const   {$/;"	f	class:Assimp::Importer	signature:(std::string& szOut) const
GetExtensionList	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE void Importer::GetExtensionList(std::string& szOut) const   {$/;"	f	class:Assimp::Importer	signature:(std::string& szOut) const
GetFenceStatus	lib/vulkan/vk_layer.h	/^    PFN_vkGetFenceStatus GetFenceStatus;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetImageMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetImageSparseMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetImageSubresourceLayout	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr GetInstanceProcAddr;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetNumColorChannels	lib/__assimp/mesh.h	/^    unsigned int GetNumColorChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
GetNumColorChannels	lib/assimp/mesh.h	/^    unsigned int GetNumColorChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
GetNumUVChannels	lib/__assimp/mesh.h	/^    unsigned int GetNumUVChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
GetNumUVChannels	lib/assimp/mesh.h	/^    unsigned int GetNumUVChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
GetPhysicalDeviceDisplayPlanePropertiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceDisplayPlanePropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceDisplayPropertiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceDisplayPropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceFeatures	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceFeatures GetPhysicalDeviceFeatures;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceFormatProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceFormatProperties GetPhysicalDeviceFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceImageFormatProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceImageFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceMemoryProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceMemoryProperties GetPhysicalDeviceMemoryProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceMirPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceMirPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceProperties GetPhysicalDeviceProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceQueueFamilyProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceQueueFamilyProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceSparseImageFormatProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSparseImageFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceSurfaceCapabilitiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSurfaceCapabilitiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceSurfaceFormatsKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR GetPhysicalDeviceSurfaceFormatsKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceSurfacePresentModesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSurfacePresentModesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceSurfaceSupportKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceSurfaceSupportKHR GetPhysicalDeviceSurfaceSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceWaylandPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceWaylandPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceWin32PresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceWin32PresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceXcbPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceXcbPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPhysicalDeviceXlibPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceXlibPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
GetPipelineCacheData	lib/vulkan/vk_layer.h	/^    PFN_vkGetPipelineCacheData GetPipelineCacheData;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetPropertyBool	lib/__assimp/Exporter.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool bErrorReturn = false) const
GetPropertyBool	lib/__assimp/Importer.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool bErrorReturn = false) const
GetPropertyBool	lib/assimp/Exporter.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool bErrorReturn = false) const
GetPropertyBool	lib/assimp/Importer.hpp	/^    bool GetPropertyBool(const char* szName, bool bErrorReturn = false) const {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool bErrorReturn = false) const
GetQueryPoolResults	lib/vulkan/vk_layer.h	/^    PFN_vkGetQueryPoolResults GetQueryPoolResults;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetRenderAreaGranularity	lib/vulkan/vk_layer.h	/^    PFN_vkGetRenderAreaGranularity GetRenderAreaGranularity;$/;"	m	struct:VkLayerDispatchTable_	access:public
GetSwapchainImagesKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetSwapchainImagesKHR GetSwapchainImagesKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
GroupOperation	lib/vulkan/spirv.hpp	/^enum GroupOperation {$/;"	g	namespace:spv
GroupOperationExclusiveScan	lib/vulkan/spirv.hpp	/^    GroupOperationExclusiveScan = 2,$/;"	e	enum:spv::GroupOperation
GroupOperationInclusiveScan	lib/vulkan/spirv.hpp	/^    GroupOperationInclusiveScan = 1,$/;"	e	enum:spv::GroupOperation
GroupOperationMax	lib/vulkan/spirv.hpp	/^    GroupOperationMax = 0x7fffffff,$/;"	e	enum:spv::GroupOperation
GroupOperationReduce	lib/vulkan/spirv.hpp	/^    GroupOperationReduce = 0,$/;"	e	enum:spv::GroupOperation
HasAnimations	lib/__assimp/scene.h	/^    inline bool HasAnimations() const { $/;"	f	struct:aiScene	access:public	signature:() const
HasAnimations	lib/assimp/scene.h	/^    inline bool HasAnimations() const$/;"	f	struct:aiScene	access:public	signature:() const
HasBones	lib/__assimp/mesh.h	/^    inline bool HasBones() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasBones	lib/assimp/mesh.h	/^    inline bool HasBones() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasCameras	lib/__assimp/scene.h	/^    inline bool HasCameras() const {$/;"	f	struct:aiScene	access:public	signature:() const
HasCameras	lib/assimp/scene.h	/^    inline bool HasCameras() const$/;"	f	struct:aiScene	access:public	signature:() const
HasFaces	lib/__assimp/mesh.h	/^    bool HasFaces() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasFaces	lib/assimp/mesh.h	/^    bool HasFaces() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasLights	lib/__assimp/scene.h	/^    inline bool HasLights() const { $/;"	f	struct:aiScene	access:public	signature:() const
HasLights	lib/assimp/scene.h	/^    inline bool HasLights() const$/;"	f	struct:aiScene	access:public	signature:() const
HasMaterials	lib/__assimp/scene.h	/^    inline bool HasMaterials() const { $/;"	f	struct:aiScene	access:public	signature:() const
HasMaterials	lib/assimp/scene.h	/^    inline bool HasMaterials() const$/;"	f	struct:aiScene	access:public	signature:() const
HasMeshes	lib/__assimp/scene.h	/^    inline bool HasMeshes() const { $/;"	f	struct:aiScene	access:public	signature:() const
HasMeshes	lib/assimp/scene.h	/^    inline bool HasMeshes() const$/;"	f	struct:aiScene	access:public	signature:() const
HasNormals	lib/__assimp/mesh.h	/^    bool HasNormals() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasNormals	lib/__assimp/mesh.h	/^    bool HasNormals() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasNormals	lib/assimp/mesh.h	/^    bool HasNormals() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasNormals	lib/assimp/mesh.h	/^    bool HasNormals() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasPositions	lib/__assimp/mesh.h	/^    bool HasPositions() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasPositions	lib/__assimp/mesh.h	/^    bool HasPositions() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasPositions	lib/assimp/mesh.h	/^    bool HasPositions() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasPositions	lib/assimp/mesh.h	/^    bool HasPositions() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasTangentsAndBitangents	lib/__assimp/mesh.h	/^    bool HasTangentsAndBitangents() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasTangentsAndBitangents	lib/__assimp/mesh.h	/^    bool HasTangentsAndBitangents() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasTangentsAndBitangents	lib/assimp/mesh.h	/^    bool HasTangentsAndBitangents() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
HasTangentsAndBitangents	lib/assimp/mesh.h	/^    bool HasTangentsAndBitangents() const$/;"	f	struct:aiMesh	access:public	signature:() const
HasTextureCoords	lib/__assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const   {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
HasTextureCoords	lib/__assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
HasTextureCoords	lib/assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const   {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
HasTextureCoords	lib/assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
HasTextures	lib/__assimp/scene.h	/^    inline bool HasTextures() const {$/;"	f	struct:aiScene	access:public	signature:() const
HasTextures	lib/assimp/scene.h	/^    inline bool HasTextures() const$/;"	f	struct:aiScene	access:public	signature:() const
HasVertexColors	lib/__assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const    {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
HasVertexColors	lib/__assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
HasVertexColors	lib/assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const    {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
HasVertexColors	lib/assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
ICD_LOADER_MAGIC	lib/vulkan/vk_icd.h	40;"	d
INCLUDED_AI_ASSIMP_HPP	lib/assimp/Importer.hpp	46;"	d
INCLUDED_AI_CONFIG_H	lib/assimp/config.h	59;"	d
INCLUDED_AI_DEFAULTLOGGER	lib/__assimp/DefaultLogger.hpp	44;"	d
INCLUDED_AI_DEFAULTLOGGER	lib/assimp/DefaultLogger.hpp	44;"	d
INCLUDED_AI_DEFINES_H	lib/assimp/defs.h	48;"	d
INCLUDED_AI_IMPORTER_DESC_H	lib/assimp/importerdesc.h	46;"	d
INCLUDED_AI_LOGGER_H	lib/__assimp/Logger.hpp	45;"	d
INCLUDED_AI_LOGGER_H	lib/assimp/Logger.hpp	45;"	d
INCLUDED_AI_LOGSTREAM_H	lib/__assimp/LogStream.hpp	45;"	d
INCLUDED_AI_LOGSTREAM_H	lib/assimp/LogStream.hpp	45;"	d
INCLUDED_AI_MESH_H	lib/assimp/mesh.h	47;"	d
INCLUDED_AI_NULLLOGGER_H	lib/__assimp/NullLogger.hpp	46;"	d
INCLUDED_AI_NULLLOGGER_H	lib/assimp/NullLogger.hpp	46;"	d
INCLUDED_AI_PROGRESSHANDLER_H	lib/assimp/ProgressHandler.hpp	45;"	d
INCLUDED_AI_VERSION_H	lib/assimp/version.h	47;"	d
INC_DIR	Makefile	/^INC_DIR := inc$/;"	m
INDEX_ALBEDO	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_ALBEDO   = 2;$/;"	m	class:GBuffer	access:public
INDEX_DEPTH	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_DEPTH    = 3;$/;"	m	class:GBuffer	access:public
INDEX_NORMAL	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_NORMAL   = 1;$/;"	m	class:GBuffer	access:public
INDEX_POSITION	inc/g_buffer.h	/^	static const constexpr uint32_t INDEX_POSITION = 0;$/;"	m	class:GBuffer	access:public
INT16_C	lib/__assimp/Compiler/pstdint.h	308;"	d
INT16_C	lib/__assimp/Compiler/pstdint.h	424;"	d
INT16_C	lib/__assimp/Compiler/pstdint.h	430;"	d
INT16_C	lib/assimp/Compiler/pstdint.h	261;"	d
INT16_C	lib/assimp/Compiler/pstdint.h	335;"	d
INT16_C	lib/assimp/Compiler/pstdint.h	341;"	d
INT16_MAX	lib/__assimp/Compiler/pstdint.h	416;"	d
INT16_MAX	lib/assimp/Compiler/pstdint.h	327;"	d
INT16_MIN	lib/__assimp/Compiler/pstdint.h	419;"	d
INT16_MIN	lib/assimp/Compiler/pstdint.h	330;"	d
INT32_C	lib/__assimp/Compiler/pstdint.h	302;"	d
INT32_C	lib/__assimp/Compiler/pstdint.h	475;"	d
INT32_C	lib/__assimp/Compiler/pstdint.h	481;"	d
INT32_C	lib/__assimp/Compiler/pstdint.h	487;"	d
INT32_C	lib/assimp/Compiler/pstdint.h	255;"	d
INT32_C	lib/assimp/Compiler/pstdint.h	359;"	d
INT32_C	lib/assimp/Compiler/pstdint.h	365;"	d
INT32_C	lib/assimp/Compiler/pstdint.h	371;"	d
INT32_MAX	lib/__assimp/Compiler/pstdint.h	329;"	d
INT32_MAX	lib/__assimp/Compiler/pstdint.h	467;"	d
INT32_MAX	lib/assimp/Compiler/pstdint.h	282;"	d
INT32_MAX	lib/assimp/Compiler/pstdint.h	351;"	d
INT32_MIN	lib/__assimp/Compiler/pstdint.h	470;"	d
INT32_MIN	lib/assimp/Compiler/pstdint.h	354;"	d
INT64_C	lib/__assimp/Compiler/pstdint.h	296;"	d
INT64_C	lib/__assimp/Compiler/pstdint.h	510;"	d
INT64_C	lib/__assimp/Compiler/pstdint.h	523;"	d
INT64_C	lib/__assimp/Compiler/pstdint.h	532;"	d
INT64_C	lib/__assimp/Compiler/pstdint.h	541;"	d
INT64_C	lib/assimp/Compiler/pstdint.h	249;"	d
INT64_C	lib/assimp/Compiler/pstdint.h	486;"	d
INT64_C	lib/assimp/Compiler/pstdint.h	500;"	d
INT64_C	lib/assimp/Compiler/pstdint.h	508;"	d
INT64_C	lib/assimp/Compiler/pstdint.h	516;"	d
INT64_MAX	lib/__assimp/Compiler/pstdint.h	323;"	d
INT64_MAX	lib/__assimp/Compiler/pstdint.h	556;"	d
INT64_MAX	lib/assimp/Compiler/pstdint.h	276;"	d
INT64_MAX	lib/assimp/Compiler/pstdint.h	531;"	d
INT64_MIN	lib/__assimp/Compiler/pstdint.h	559;"	d
INT64_MIN	lib/assimp/Compiler/pstdint.h	534;"	d
INT8_C	lib/__assimp/Compiler/pstdint.h	314;"	d
INT8_C	lib/__assimp/Compiler/pstdint.h	388;"	d
INT8_C	lib/assimp/Compiler/pstdint.h	267;"	d
INT8_C	lib/assimp/Compiler/pstdint.h	320;"	d
INT8_MAX	lib/__assimp/Compiler/pstdint.h	380;"	d
INT8_MAX	lib/assimp/Compiler/pstdint.h	312;"	d
INT8_MIN	lib/__assimp/Compiler/pstdint.h	383;"	d
INT8_MIN	lib/assimp/Compiler/pstdint.h	315;"	d
INTMAX_C	lib/__assimp/Compiler/pstdint.h	619;"	d
INTMAX_C	lib/__assimp/Compiler/pstdint.h	635;"	d
INTMAX_C	lib/assimp/Compiler/pstdint.h	583;"	d
INTMAX_C	lib/assimp/Compiler/pstdint.h	599;"	d
INTMAX_MAX	lib/__assimp/Compiler/pstdint.h	332;"	d
INTMAX_MAX	lib/__assimp/Compiler/pstdint.h	615;"	d
INTMAX_MAX	lib/__assimp/Compiler/pstdint.h	632;"	d
INTMAX_MAX	lib/assimp/Compiler/pstdint.h	285;"	d
INTMAX_MAX	lib/assimp/Compiler/pstdint.h	579;"	d
INTMAX_MAX	lib/assimp/Compiler/pstdint.h	596;"	d
INTMAX_MIN	lib/__assimp/Compiler/pstdint.h	335;"	d
INTMAX_MIN	lib/__assimp/Compiler/pstdint.h	616;"	d
INTMAX_MIN	lib/assimp/Compiler/pstdint.h	288;"	d
INTMAX_MIN	lib/assimp/Compiler/pstdint.h	580;"	d
INTPTR_C	lib/__assimp/Compiler/pstdint.h	782;"	d
INTPTR_C	lib/assimp/Compiler/pstdint.h	746;"	d
INTPTR_MAX	lib/__assimp/Compiler/pstdint.h	776;"	d
INTPTR_MAX	lib/assimp/Compiler/pstdint.h	740;"	d
INTPTR_MIN	lib/__assimp/Compiler/pstdint.h	779;"	d
INTPTR_MIN	lib/assimp/Compiler/pstdint.h	743;"	d
INT_FAST16_MAX	lib/__assimp/Compiler/pstdint.h	703;"	d
INT_FAST16_MAX	lib/assimp/Compiler/pstdint.h	669;"	d
INT_FAST16_MIN	lib/__assimp/Compiler/pstdint.h	707;"	d
INT_FAST16_MIN	lib/assimp/Compiler/pstdint.h	673;"	d
INT_FAST32_MAX	lib/__assimp/Compiler/pstdint.h	705;"	d
INT_FAST32_MAX	lib/assimp/Compiler/pstdint.h	671;"	d
INT_FAST32_MIN	lib/__assimp/Compiler/pstdint.h	708;"	d
INT_FAST32_MIN	lib/assimp/Compiler/pstdint.h	674;"	d
INT_FAST64_MAX	lib/__assimp/Compiler/pstdint.h	713;"	d
INT_FAST64_MAX	lib/assimp/Compiler/pstdint.h	679;"	d
INT_FAST64_MIN	lib/__assimp/Compiler/pstdint.h	714;"	d
INT_FAST64_MIN	lib/assimp/Compiler/pstdint.h	680;"	d
INT_FAST8_MAX	lib/__assimp/Compiler/pstdint.h	701;"	d
INT_FAST8_MAX	lib/assimp/Compiler/pstdint.h	667;"	d
INT_FAST8_MIN	lib/__assimp/Compiler/pstdint.h	706;"	d
INT_FAST8_MIN	lib/assimp/Compiler/pstdint.h	672;"	d
INT_LEAST16_MAX	lib/__assimp/Compiler/pstdint.h	666;"	d
INT_LEAST16_MAX	lib/assimp/Compiler/pstdint.h	630;"	d
INT_LEAST16_MIN	lib/__assimp/Compiler/pstdint.h	670;"	d
INT_LEAST16_MIN	lib/assimp/Compiler/pstdint.h	634;"	d
INT_LEAST32_MAX	lib/__assimp/Compiler/pstdint.h	668;"	d
INT_LEAST32_MAX	lib/assimp/Compiler/pstdint.h	632;"	d
INT_LEAST32_MIN	lib/__assimp/Compiler/pstdint.h	671;"	d
INT_LEAST32_MIN	lib/assimp/Compiler/pstdint.h	635;"	d
INT_LEAST64_MAX	lib/__assimp/Compiler/pstdint.h	677;"	d
INT_LEAST64_MAX	lib/assimp/Compiler/pstdint.h	641;"	d
INT_LEAST64_MIN	lib/__assimp/Compiler/pstdint.h	678;"	d
INT_LEAST64_MIN	lib/assimp/Compiler/pstdint.h	642;"	d
INT_LEAST8_MAX	lib/__assimp/Compiler/pstdint.h	664;"	d
INT_LEAST8_MAX	lib/assimp/Compiler/pstdint.h	628;"	d
INT_LEAST8_MIN	lib/__assimp/Compiler/pstdint.h	669;"	d
INT_LEAST8_MIN	lib/assimp/Compiler/pstdint.h	633;"	d
IOStream	lib/__assimp/IOStream.hpp	/^class ASSIMP_API IOStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
IOStream	lib/__assimp/IOStream.hpp	/^inline IOStream::IOStream()$/;"	f	class:Assimp::IOStream	signature:()
IOStream	lib/assimp/IOStream.hpp	/^class ASSIMP_API IOStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
IOStream	lib/assimp/IOStream.hpp	/^inline IOStream::IOStream()$/;"	f	class:Assimp::IOStream	signature:()
IOSystem	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::IOSystem() :$/;"	f	class:Assimp::IOSystem	signature:()
IOSystem	lib/__assimp/IOSystem.hpp	/^class ASSIMP_API IOSystem$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
IOSystem	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::IOSystem() :$/;"	f	class:Assimp::IOSystem	signature:()
IOSystem	lib/assimp/IOSystem.hpp	/^class ASSIMP_API IOSystem$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Id	lib/vulkan/spirv.hpp	/^typedef unsigned int Id;$/;"	t	namespace:spv
ImageChannelDataType	lib/vulkan/spirv.hpp	/^enum ImageChannelDataType {$/;"	g	namespace:spv
ImageChannelDataTypeFloat	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeFloat = 14,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeHalfFloat	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeHalfFloat = 13,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeMax	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt16 = 8,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt32	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt32 = 9,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt8 = 7,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSnormInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSnormInt16 = 1,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSnormInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSnormInt8 = 0,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt101010	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt101010 = 6,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt101010_2	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt101010_2 = 16,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt16 = 3,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt24	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt24 = 15,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt8 = 2,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormShort555	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormShort555 = 5,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormShort565	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormShort565 = 4,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt16 = 11,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt32	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt32 = 12,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt8 = 10,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelOrder	lib/vulkan/spirv.hpp	/^enum ImageChannelOrder {$/;"	g	namespace:spv
ImageChannelOrderA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderA = 1,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderABGR	lib/vulkan/spirv.hpp	/^    ImageChannelOrderABGR = 19,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderARGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrderARGB = 7,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderBGRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderBGRA = 6,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderDepth	lib/vulkan/spirv.hpp	/^    ImageChannelOrderDepth = 13,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderDepthStencil	lib/vulkan/spirv.hpp	/^    ImageChannelOrderDepthStencil = 14,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderIntensity	lib/vulkan/spirv.hpp	/^    ImageChannelOrderIntensity = 8,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderLuminance	lib/vulkan/spirv.hpp	/^    ImageChannelOrderLuminance = 9,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderMax	lib/vulkan/spirv.hpp	/^    ImageChannelOrderMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderR	lib/vulkan/spirv.hpp	/^    ImageChannelOrderR = 0,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRA = 3,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRG	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRG = 2,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGB = 4,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGBA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGBA = 5,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGBx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGBx = 12,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGx = 11,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRx = 10,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersBGRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersBGRA = 18,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGB = 15,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGBA	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGBA = 17,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGBx	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGBx = 16,$/;"	e	enum:spv::ImageChannelOrder
ImageFormat	lib/vulkan/spirv.hpp	/^enum ImageFormat {$/;"	g	namespace:spv
ImageFormatMax	lib/vulkan/spirv.hpp	/^    ImageFormatMax = 0x7fffffff,$/;"	e	enum:spv::ImageFormat
ImageFormatR11fG11fB10f	lib/vulkan/spirv.hpp	/^    ImageFormatR11fG11fB10f = 8,$/;"	e	enum:spv::ImageFormat
ImageFormatR16	lib/vulkan/spirv.hpp	/^    ImageFormatR16 = 14,$/;"	e	enum:spv::ImageFormat
ImageFormatR16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatR16Snorm = 19,$/;"	e	enum:spv::ImageFormat
ImageFormatR16f	lib/vulkan/spirv.hpp	/^    ImageFormatR16f = 9,$/;"	e	enum:spv::ImageFormat
ImageFormatR16i	lib/vulkan/spirv.hpp	/^    ImageFormatR16i = 28,$/;"	e	enum:spv::ImageFormat
ImageFormatR16ui	lib/vulkan/spirv.hpp	/^    ImageFormatR16ui = 38,$/;"	e	enum:spv::ImageFormat
ImageFormatR32f	lib/vulkan/spirv.hpp	/^    ImageFormatR32f = 3,$/;"	e	enum:spv::ImageFormat
ImageFormatR32i	lib/vulkan/spirv.hpp	/^    ImageFormatR32i = 24,$/;"	e	enum:spv::ImageFormat
ImageFormatR32ui	lib/vulkan/spirv.hpp	/^    ImageFormatR32ui = 33,$/;"	e	enum:spv::ImageFormat
ImageFormatR8	lib/vulkan/spirv.hpp	/^    ImageFormatR8 = 15,$/;"	e	enum:spv::ImageFormat
ImageFormatR8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatR8Snorm = 20,$/;"	e	enum:spv::ImageFormat
ImageFormatR8i	lib/vulkan/spirv.hpp	/^    ImageFormatR8i = 29,$/;"	e	enum:spv::ImageFormat
ImageFormatR8ui	lib/vulkan/spirv.hpp	/^    ImageFormatR8ui = 39,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16	lib/vulkan/spirv.hpp	/^    ImageFormatRg16 = 12,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRg16Snorm = 17,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16f	lib/vulkan/spirv.hpp	/^    ImageFormatRg16f = 7,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16i	lib/vulkan/spirv.hpp	/^    ImageFormatRg16i = 26,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg16ui = 36,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32f	lib/vulkan/spirv.hpp	/^    ImageFormatRg32f = 6,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32i	lib/vulkan/spirv.hpp	/^    ImageFormatRg32i = 25,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg32ui = 35,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8	lib/vulkan/spirv.hpp	/^    ImageFormatRg8 = 13,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRg8Snorm = 18,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8i	lib/vulkan/spirv.hpp	/^    ImageFormatRg8i = 27,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg8ui = 37,$/;"	e	enum:spv::ImageFormat
ImageFormatRgb10A2	lib/vulkan/spirv.hpp	/^    ImageFormatRgb10A2 = 11,$/;"	e	enum:spv::ImageFormat
ImageFormatRgb10a2ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgb10a2ui = 34,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16 = 10,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16Snorm = 16,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16f	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16f = 2,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16i = 22,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16ui = 31,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32f	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32f = 1,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32i = 21,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32ui = 30,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8 = 4,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8Snorm = 5,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8i = 23,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8ui = 32,$/;"	e	enum:spv::ImageFormat
ImageFormatUnknown	lib/vulkan/spirv.hpp	/^    ImageFormatUnknown = 0,$/;"	e	enum:spv::ImageFormat
ImageHelper	inc/creator/image_helper.h	/^namespace ImageHelper {$/;"	n
ImageHelper::copyImage	inc/creator/image_helper.h	/^inline void copyImage($/;"	f	namespace:ImageHelper	signature:( State& state, ImageInfo& srcImage, ImageInfo& dstImage)
ImageHelper::copyImage	inc/creator/image_helper.h	/^inline void copyImage(VkCommandBuffer& cmdBuffer, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)$/;"	f	namespace:ImageHelper	signature:(VkCommandBuffer& cmdBuffer, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)
ImageHelper::copyImage	inc/creator/image_helper.h	/^inline void copyImage(const State& state, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)$/;"	f	namespace:ImageHelper	signature:(const State& state, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)
ImageHelper::createImage	inc/creator/image_helper.h	/^inline void createImage($/;"	f	namespace:ImageHelper	signature:( State& state, ImageInfo& imageDesc, VkFormat format, VkImageTiling tiling, VkImageLayout initialLayout, VkImageUsageFlags usage, VkMemoryPropertyFlags properties)
ImageHelper::createImageView	inc/creator/image_helper.h	/^inline void createImageView($/;"	f	namespace:ImageHelper	signature:( const VkDevice& device, ImageInfo& imageDesc, VkFormat format, VkImageAspectFlags aspectFlags)
ImageHelper::createImageView	inc/creator/image_helper.h	/^inline void createImageView($/;"	f	namespace:ImageHelper	signature:( const VkDevice& device, VkImage image, VkFormat format, VkImageAspectFlags aspectFlags, VkImageView& imageView)
ImageHelper::createStagedImage	inc/creator/image_helper.h	/^inline void createStagedImage($/;"	f	namespace:ImageHelper	signature:( ImageInfo& imageInfo, const TextureData& textureData, State& state, const VkCommandPool& cmdPool, const VkQueue& cmdQueue)
ImageHelper::findDepthFormat	inc/creator/image_helper.h	/^inline VkFormat findDepthFormat(VkPhysicalDevice& physicalDevice)$/;"	f	namespace:ImageHelper	signature:(VkPhysicalDevice& physicalDevice)
ImageHelper::findDepthStencilFormat	inc/creator/image_helper.h	/^inline VkFormat findDepthStencilFormat(const VkPhysicalDevice& physicalDevice) $/;"	f	namespace:ImageHelper	signature:(const VkPhysicalDevice& physicalDevice)
ImageHelper::findSupportedFormat	inc/creator/image_helper.h	/^inline VkFormat findSupportedFormat($/;"	f	namespace:ImageHelper	signature:( const State& state, const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features)
ImageHelper::findSupportedFormat	inc/creator/image_helper.h	/^inline VkFormat findSupportedFormat($/;"	f	namespace:ImageHelper	signature:( const VkPhysicalDevice& physicalDevice, const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features)
ImageHelper::transitionLayout	inc/creator/image_helper.h	/^inline void transitionLayout($/;"	f	namespace:ImageHelper	signature:( State& state, VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout, VkImageAspectFlags barrierAspectMask, VkAccessFlags srcAccessMask, VkAccessFlags dstAccessMask)
ImageHelper::transitionLayout	inc/creator/image_helper.h	/^inline void transitionLayout($/;"	f	namespace:ImageHelper	signature:( VkCommandBuffer& cmdBuffer, VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout, VkImageAspectFlags barrierAspectMask, VkAccessFlags srcAccessMask, VkAccessFlags dstAccessMask)
ImageInfo	inc/image_info.h	/^class ImageInfo {$/;"	c
ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(): $/;"	f	class:ImageInfo	signature:()
ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(VkDevice& vkDevice):$/;"	f	class:ImageInfo	signature:(VkDevice& vkDevice)
ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(VkDevice& vkDevice, uint32_t width, uint32_t height):$/;"	f	class:ImageInfo	signature:(VkDevice& vkDevice, uint32_t width, uint32_t height)
ImageInfo::ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(): $/;"	f	class:ImageInfo	signature:()
ImageInfo::ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(VkDevice& vkDevice):$/;"	f	class:ImageInfo	signature:(VkDevice& vkDevice)
ImageInfo::ImageInfo	src/image_info.cpp	/^ImageInfo::ImageInfo(VkDevice& vkDevice, uint32_t width, uint32_t height):$/;"	f	class:ImageInfo	signature:(VkDevice& vkDevice, uint32_t width, uint32_t height)
ImageInfo::height	inc/image_info.h	/^	uint32_t width, height;$/;"	m	class:ImageInfo	access:public
ImageInfo::image	inc/image_info.h	/^	VkImage image;$/;"	m	class:ImageInfo	access:public
ImageInfo::imageView	inc/image_info.h	/^	VkImageView imageView;$/;"	m	class:ImageInfo	access:public
ImageInfo::mVkDevice	inc/image_info.h	/^	VkDevice* mVkDevice;$/;"	m	class:ImageInfo	access:public
ImageInfo::memory	inc/image_info.h	/^	VkDeviceMemory memory;$/;"	m	class:ImageInfo	access:public
ImageInfo::operator =	src/image_info.cpp	/^ImageInfo& ImageInfo::operator=(ImageInfo other) $/;"	f	class:ImageInfo	signature:(ImageInfo other)
ImageInfo::sampler	inc/image_info.h	/^	VkSampler sampler;$/;"	m	class:ImageInfo	access:public
ImageInfo::width	inc/image_info.h	/^	uint32_t width, height;$/;"	m	class:ImageInfo	access:public
ImageInfo::~ImageInfo	src/image_info.cpp	/^ImageInfo::~ImageInfo() $/;"	f	class:ImageInfo	signature:()
ImageOperandsBiasMask	lib/vulkan/spirv.hpp	/^    ImageOperandsBiasMask = 0x00000001,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsBiasShift	lib/vulkan/spirv.hpp	/^    ImageOperandsBiasShift = 0,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsConstOffsetMask	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetMask = 0x00000008,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsConstOffsetShift	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetShift = 3,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsConstOffsetsMask	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetsMask = 0x00000020,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsConstOffsetsShift	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetsShift = 5,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsGradMask	lib/vulkan/spirv.hpp	/^    ImageOperandsGradMask = 0x00000004,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsGradShift	lib/vulkan/spirv.hpp	/^    ImageOperandsGradShift = 2,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsLodMask	lib/vulkan/spirv.hpp	/^    ImageOperandsLodMask = 0x00000002,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsLodShift	lib/vulkan/spirv.hpp	/^    ImageOperandsLodShift = 1,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMask	lib/vulkan/spirv.hpp	/^enum ImageOperandsMask {$/;"	g	namespace:spv
ImageOperandsMaskNone	lib/vulkan/spirv.hpp	/^    ImageOperandsMaskNone = 0,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMax	lib/vulkan/spirv.hpp	/^    ImageOperandsMax = 0x7fffffff,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMinLodMask	lib/vulkan/spirv.hpp	/^    ImageOperandsMinLodMask = 0x00000080,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMinLodShift	lib/vulkan/spirv.hpp	/^    ImageOperandsMinLodShift = 7,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsOffsetMask	lib/vulkan/spirv.hpp	/^    ImageOperandsOffsetMask = 0x00000010,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsOffsetShift	lib/vulkan/spirv.hpp	/^    ImageOperandsOffsetShift = 4,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsSampleMask	lib/vulkan/spirv.hpp	/^    ImageOperandsSampleMask = 0x00000040,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsSampleShift	lib/vulkan/spirv.hpp	/^    ImageOperandsSampleShift = 6,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsShift	lib/vulkan/spirv.hpp	/^enum ImageOperandsShift {$/;"	g	namespace:spv
Importer	lib/__assimp/Importer.hpp	/^class ASSIMP_API Importer   {$/;"	c	namespace:Assimp
Importer	lib/assimp/Importer.hpp	/^class ASSIMP_API Importer   {$/;"	c	namespace:Assimp
Info	lib/__assimp/Logger.hpp	/^        Info        = 2,    \/\/!< Info log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Info	lib/assimp/Logger.hpp	/^        Info        = 2,    \/\/!< Info log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
InputManager	inc/input_manager.h	/^class InputManager {$/;"	c
InputManager	src/input_manager.cpp	/^InputManager::InputManager()$/;"	f	class:InputManager	signature:()
InputManager	src/input_manager.cpp	/^InputManager::InputManager():$/;"	f	class:InputManager	signature:()
InputManager	src/input_manager.cpp	/^InputManager::InputManager(GLFWwindow& glfwWindow)$/;"	f	class:InputManager	signature:(GLFWwindow& glfwWindow)
InputManager::InputManager	src/input_manager.cpp	/^InputManager::InputManager()$/;"	f	class:InputManager	signature:()
InputManager::InputManager	src/input_manager.cpp	/^InputManager::InputManager():$/;"	f	class:InputManager	signature:()
InputManager::InputManager	src/input_manager.cpp	/^InputManager::InputManager(GLFWwindow& glfwWindow)$/;"	f	class:InputManager	signature:(GLFWwindow& glfwWindow)
InputManager::assertGlfwWindowIsValid	src/input_manager.cpp	/^void InputManager::assertGlfwWindowIsValid()$/;"	f	class:InputManager	signature:()
InputManager::directionForward	inc/input_manager.h	/^    float directionForward;$/;"	m	class:InputManager	access:public
InputManager::directionSideways	inc/input_manager.h	/^    float directionSideways;$/;"	m	class:InputManager	access:public
InputManager::keyPressed	src/input_manager.cpp	/^bool InputManager::keyPressed(int key)$/;"	f	class:InputManager	signature:(int key)
InputManager::mGlfwWindow	inc/input_manager.h	/^	GLFWwindow* mGlfwWindow;$/;"	m	class:InputManager	access:public
InputManager::movingForward	inc/input_manager.h	/^    bool movingForward;$/;"	m	class:InputManager	access:public
InputManager::movingSideways	inc/input_manager.h	/^    bool movingSideways;$/;"	m	class:InputManager	access:public
InputManager::pollEvents	src/input_manager.cpp	/^void InputManager::pollEvents()$/;"	f	class:InputManager	signature:()
InputManager::setCursorPosCallback	src/input_manager.cpp	/^void InputManager::setCursorPosCallback(GLFWcursorposfun cbfun)$/;"	f	class:InputManager	signature:(GLFWcursorposfun cbfun)
InputManager::setFramebufferSizeCallback	src/input_manager.cpp	/^void InputManager::setFramebufferSizeCallback(GLFWframebuffersizefun cbfun)$/;"	f	class:InputManager	signature:(GLFWframebuffersizefun cbfun)
InputManager::setGlfwWindow	src/input_manager.cpp	/^void InputManager::setGlfwWindow(GLFWwindow& glfwWindow)$/;"	f	class:InputManager	signature:(GLFWwindow& glfwWindow)
InputManager::setKeyCallback	src/input_manager.cpp	/^void InputManager::setKeyCallback(GLFWkeyfun cbfun)$/;"	f	class:InputManager	signature:(GLFWkeyfun cbfun)
InputManager::setMouseButtonCallback	src/input_manager.cpp	/^void InputManager::setMouseButtonCallback(GLFWmousebuttonfun cbfun)$/;"	f	class:InputManager	signature:(GLFWmousebuttonfun cbfun)
InputManager::setScrollCallback	src/input_manager.cpp	/^void InputManager::setScrollCallback(GLFWscrollfun cbfun)$/;"	f	class:InputManager	signature:(GLFWscrollfun cbfun)
InputManager::touching	inc/input_manager.h	/^	bool touching;$/;"	m	class:InputManager	access:public
InputManager::~InputManager	src/input_manager.cpp	/^InputManager::~InputManager()$/;"	f	class:InputManager	signature:()
IntPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, int> IntPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
IntPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, int> IntPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Intern	lib/__assimp/types.h	/^namespace Intern        {$/;"	n	namespace:Assimp
Intern	lib/assimp/types.h	/^namespace Intern        {$/;"	n	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator <aiQuaternion>  {$/;"	s	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator <unsigned int>  {$/;"	s	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator$/;"	s	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiMeshKey>     {$/;"	s	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiQuatKey>  {$/;"	s	namespace:Assimp
Interpolator	lib/__assimp/anim.h	/^struct Interpolator<aiVectorKey>  {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator  <aiVectorKey>  {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiMeshKey>     {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiQuatKey>     {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator <aiQuaternion>  {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator <unsigned int>  {$/;"	s	namespace:Assimp
Interpolator	lib/assimp/anim.h	/^struct Interpolator$/;"	s	namespace:Assimp
InvalidateMappedMemoryRanges	lib/vulkan/vk_layer.h	/^    PFN_vkInvalidateMappedMemoryRanges InvalidateMappedMemoryRanges;$/;"	m	struct:VkLayerDispatchTable_	access:public
IsBlack	lib/__assimp/types.h	/^    bool IsBlack() const {$/;"	f	struct:aiColor3D	access:public	signature:() const
IsBlack	lib/assimp/types.h	/^    bool IsBlack() const {$/;"	f	struct:aiColor3D	access:public	signature:() const
IsExtensionSupported	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE bool Importer::IsExtensionSupported(const std::string& szExtension) const   {$/;"	f	class:Assimp::Importer	signature:(const std::string& szExtension) const
IsExtensionSupported	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE bool Importer::IsExtensionSupported(const std::string& szExtension) const   {$/;"	f	class:Assimp::Importer	signature:(const std::string& szExtension) const
Java_vulkan_melnichuk_al_amvk_MainNativeActivity_setForwardMovement	src/main.cpp	/^Java_vulkan_melnichuk_al_amvk_MainNativeActivity_setForwardMovement(JNIEnv *env, jobject instance,$/;"	f	signature:(JNIEnv *env, jobject instance, jboolean moving, jfloat direction)
Java_vulkan_melnichuk_al_amvk_MainNativeActivity_setSidewaysMovement	src/main.cpp	/^Java_vulkan_melnichuk_al_amvk_MainNativeActivity_setSidewaysMovement(JNIEnv *env, jobject instance,$/;"	f	signature:(JNIEnv *env, jobject instance, jboolean moving, jfloat direction)
KernelEnqueueFlags	lib/vulkan/spirv.hpp	/^enum KernelEnqueueFlags {$/;"	g	namespace:spv
KernelEnqueueFlagsMax	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsMax = 0x7fffffff,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsNoWait	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsNoWait = 0,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsWaitKernel	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsWaitKernel = 1,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsWaitWorkGroup	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsWaitWorkGroup = 2,$/;"	e	enum:spv::KernelEnqueueFlags
KernelProfilingInfoCmdExecTimeMask	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoCmdExecTimeMask = 0x00000001,$/;"	e	enum:spv::KernelProfilingInfoMask
KernelProfilingInfoCmdExecTimeShift	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoCmdExecTimeShift = 0,$/;"	e	enum:spv::KernelProfilingInfoShift
KernelProfilingInfoMask	lib/vulkan/spirv.hpp	/^enum KernelProfilingInfoMask {$/;"	g	namespace:spv
KernelProfilingInfoMaskNone	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoMaskNone = 0,$/;"	e	enum:spv::KernelProfilingInfoMask
KernelProfilingInfoMax	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoMax = 0x7fffffff,$/;"	e	enum:spv::KernelProfilingInfoShift
KernelProfilingInfoShift	lib/vulkan/spirv.hpp	/^enum KernelProfilingInfoShift {$/;"	g	namespace:spv
KeyType	lib/__assimp/Exporter.hpp	/^    typedef unsigned int KeyType;$/;"	t	class:Assimp::ExportProperties	access:public
KeyType	lib/assimp/Exporter.hpp	/^    typedef unsigned int KeyType;$/;"	t	class:Assimp::ExportProperties	access:public
LAST_CONCRETE	lib/vulkan/libspirv.h	/^  LAST_CONCRETE(SPV_OPERAND_TYPE_MEMORY_ACCESS),  \/\/ SPIR-V Sec 3.26$/;"	e	enum:spv_operand_type_t
LAST_CONCRETE	lib/vulkan/libspirv.h	162;"	d
LAST_CONCRETE	lib/vulkan/libspirv.h	95;"	d
LAST_VARIABLE	lib/vulkan/libspirv.h	/^  LAST_VARIABLE(SPV_OPERAND_TYPE_VARIABLE_ID_LITERAL_INTEGER),$/;"	e	enum:spv_operand_type_t
LAST_VARIABLE	lib/vulkan/libspirv.h	174;"	d
LDLIBS	Makefile	/^LDLIBS=$(shell pkg-config --static --libs glfw3) -L$(VULKAN_LIB_PATH) -lvulkan -lassimp$/;"	m
LOG	inc/macro.h	23;"	d
LOG	inc/macro.h	27;"	d
LOG_TITLE	inc/macro.h	34;"	d
LONG_LONG_MAX	lib/__assimp/Compiler/pstdint.h	549;"	d
LONG_LONG_MAX	lib/assimp/Compiler/pstdint.h	524;"	d
LightUBO	inc/shape/point_light.h	/^	struct LightUBO {$/;"	s	class:PointLight	access:public
LinkageType	lib/vulkan/spirv.hpp	/^enum LinkageType {$/;"	g	namespace:spv
LinkageTypeExport	lib/vulkan/spirv.hpp	/^    LinkageTypeExport = 0,$/;"	e	enum:spv::LinkageType
LinkageTypeImport	lib/vulkan/spirv.hpp	/^    LinkageTypeImport = 1,$/;"	e	enum:spv::LinkageType
LinkageTypeMax	lib/vulkan/spirv.hpp	/^    LinkageTypeMax = 0x7fffffff,$/;"	e	enum:spv::LinkageType
LogSeverity	lib/__assimp/Logger.hpp	/^    enum LogSeverity$/;"	g	class:Assimp::Logger	access:public
LogSeverity	lib/assimp/Logger.hpp	/^    enum LogSeverity$/;"	g	class:Assimp::Logger	access:public
LogStream	lib/__assimp/LogStream.hpp	/^    LogStream() {$/;"	f	class:Assimp::LogStream	access:protected	signature:()
LogStream	lib/__assimp/LogStream.hpp	/^class ASSIMP_API LogStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
LogStream	lib/assimp/LogStream.hpp	/^    LogStream() {$/;"	f	class:Assimp::LogStream	access:protected	signature:()
LogStream	lib/assimp/LogStream.hpp	/^class ASSIMP_API LogStream$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Logger	lib/__assimp/Logger.hpp	/^class ASSIMP_API Logger$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Logger	lib/__assimp/Logger.hpp	/^inline Logger::Logger() {$/;"	f	class:Assimp::Logger	signature:()
Logger	lib/__assimp/Logger.hpp	/^inline Logger::Logger(LogSeverity severity) {$/;"	f	class:Assimp::Logger	signature:(LogSeverity severity)
Logger	lib/assimp/Logger.hpp	/^class ASSIMP_API Logger$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
Logger	lib/assimp/Logger.hpp	/^inline Logger::Logger() {$/;"	f	class:Assimp::Logger	signature:()
Logger	lib/assimp/Logger.hpp	/^inline Logger::Logger(LogSeverity severity) {$/;"	f	class:Assimp::Logger	signature:(LogSeverity severity)
LoopControlDependencyInfiniteMask	lib/vulkan/spirv.hpp	/^    LoopControlDependencyInfiniteMask = 0x00000004,$/;"	e	enum:spv::LoopControlMask
LoopControlDependencyInfiniteShift	lib/vulkan/spirv.hpp	/^    LoopControlDependencyInfiniteShift = 2,$/;"	e	enum:spv::LoopControlShift
LoopControlDependencyLengthMask	lib/vulkan/spirv.hpp	/^    LoopControlDependencyLengthMask = 0x00000008,$/;"	e	enum:spv::LoopControlMask
LoopControlDependencyLengthShift	lib/vulkan/spirv.hpp	/^    LoopControlDependencyLengthShift = 3,$/;"	e	enum:spv::LoopControlShift
LoopControlDontUnrollMask	lib/vulkan/spirv.hpp	/^    LoopControlDontUnrollMask = 0x00000002,$/;"	e	enum:spv::LoopControlMask
LoopControlDontUnrollShift	lib/vulkan/spirv.hpp	/^    LoopControlDontUnrollShift = 1,$/;"	e	enum:spv::LoopControlShift
LoopControlMask	lib/vulkan/spirv.hpp	/^enum LoopControlMask {$/;"	g	namespace:spv
LoopControlMaskNone	lib/vulkan/spirv.hpp	/^    LoopControlMaskNone = 0,$/;"	e	enum:spv::LoopControlMask
LoopControlMax	lib/vulkan/spirv.hpp	/^    LoopControlMax = 0x7fffffff,$/;"	e	enum:spv::LoopControlShift
LoopControlShift	lib/vulkan/spirv.hpp	/^enum LoopControlShift {$/;"	g	namespace:spv
LoopControlUnrollMask	lib/vulkan/spirv.hpp	/^    LoopControlUnrollMask = 0x00000001,$/;"	e	enum:spv::LoopControlMask
LoopControlUnrollShift	lib/vulkan/spirv.hpp	/^    LoopControlUnrollShift = 0,$/;"	e	enum:spv::LoopControlShift
MAXLEN	lib/__assimp/types.h	/^const size_t MAXLEN = 1024;$/;"	v
MAXLEN	lib/assimp/types.h	/^const size_t MAXLEN = 1024;$/;"	v
MAX_BONES	inc/shape/skinned.h	/^	static constexpr uint32_t const MAX_BONES = 64;$/;"	m	class:Skinned	access:public
MAX_BONES_PER_VERTEX	inc/shape/skinned.h	/^	static constexpr uint32_t const MAX_BONES_PER_VERTEX = 4;$/;"	m	class:Skinned	access:public
MAX_FOV_RADIANS	inc/camera.h	/^    const static float MAX_FOV_RADIANS, MIN_FOV_RADIANS;$/;"	m	class:Camera	access:private
MAX_FOV_RADIANS	src/camera.cpp	/^const float Camera::MAX_FOV_RADIANS = M_PI_2;$/;"	m	class:Camera	file:
MAX_LOG_MESSAGE_LENGTH	lib/__assimp/Logger.hpp	54;"	d
MAX_LOG_MESSAGE_LENGTH	lib/assimp/Logger.hpp	52;"	d
MAX_SAMPLERS_PER_VERTEX	inc/shape/skinned.h	41;"	d
MAX_SIZE_NOT_FOUND	inc/util.h	/^static constexpr const int MAX_SIZE_NOT_FOUND = std::numeric_limits<int>::lowest();$/;"	v
MIN_FOV_RADIANS	inc/camera.h	/^    const static float MAX_FOV_RADIANS, MIN_FOV_RADIANS;$/;"	m	class:Camera	access:private
MIN_FOV_RADIANS	src/camera.cpp	/^const float Camera::MIN_FOV_RADIANS = M_PI_4;$/;"	m	class:Camera	file:
MIN_SIZE_NOT_FOUND	inc/util.h	/^static constexpr const int MIN_SIZE_NOT_FOUND = std::numeric_limits<int>::max();$/;"	v
MIN_SUPPORTED_LOADER_ICD_INTERFACE_VERSION	lib/vulkan/vk_icd.h	32;"	d
MODELS_DIR	inc/file_manager.h	/^	static constexpr const char* MODELS_DIR = "model\/";$/;"	m	class:FileManager	access:private
MODELS_DIR	inc/file_manager.h	/^	static constexpr const char* MODELS_DIR = "res\/model\/";$/;"	m	class:FileManager	access:private
MagicNumber	lib/vulkan/spirv.hpp	/^static const unsigned int MagicNumber = 0x07230203;$/;"	m	namespace:spv
MapMemory	lib/vulkan/vk_layer.h	/^    PFN_vkMapMemory MapMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
Material	inc/shape/model.h	/^		Material(): $/;"	f	struct:Model::Material	access:public	signature:()
Material	inc/shape/model.h	/^	struct Material {$/;"	s	class:Model	access:public
Material	inc/shape/skinned.h	/^	struct Material {$/;"	s	class:Skinned	access:public
MaterialTexture	inc/shape/skinned.h	/^		MaterialTexture():$/;"	f	struct:Skinned::MaterialTexture	access:public	signature:()
MaterialTexture	inc/shape/skinned.h	/^	struct MaterialTexture {$/;"	s	class:Skinned	access:public
MatrixPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, aiMatrix4x4> MatrixPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
MatrixPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, aiMatrix4x4> MatrixPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
MaxLenHint	lib/__assimp/Importer.hpp	/^    static const unsigned int MaxLenHint = 200;$/;"	m	class:Assimp::Importer	access:public
MaxLenHint	lib/assimp/Importer.hpp	/^    static const unsigned int MaxLenHint = 200; $/;"	m	class:Assimp::Importer	access:public
MemoryAccessAlignedMask	lib/vulkan/spirv.hpp	/^    MemoryAccessAlignedMask = 0x00000002,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessAlignedShift	lib/vulkan/spirv.hpp	/^    MemoryAccessAlignedShift = 1,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMask	lib/vulkan/spirv.hpp	/^enum MemoryAccessMask {$/;"	g	namespace:spv
MemoryAccessMaskNone	lib/vulkan/spirv.hpp	/^    MemoryAccessMaskNone = 0,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMax	lib/vulkan/spirv.hpp	/^    MemoryAccessMax = 0x7fffffff,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessNontemporalMask	lib/vulkan/spirv.hpp	/^    MemoryAccessNontemporalMask = 0x00000004,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessNontemporalShift	lib/vulkan/spirv.hpp	/^    MemoryAccessNontemporalShift = 2,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessShift	lib/vulkan/spirv.hpp	/^enum MemoryAccessShift {$/;"	g	namespace:spv
MemoryAccessVolatileMask	lib/vulkan/spirv.hpp	/^    MemoryAccessVolatileMask = 0x00000001,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessVolatileShift	lib/vulkan/spirv.hpp	/^    MemoryAccessVolatileShift = 0,$/;"	e	enum:spv::MemoryAccessShift
MemoryModel	lib/vulkan/spirv.hpp	/^enum MemoryModel {$/;"	g	namespace:spv
MemoryModelGLSL450	lib/vulkan/spirv.hpp	/^    MemoryModelGLSL450 = 1,$/;"	e	enum:spv::MemoryModel
MemoryModelMax	lib/vulkan/spirv.hpp	/^    MemoryModelMax = 0x7fffffff,$/;"	e	enum:spv::MemoryModel
MemoryModelOpenCL	lib/vulkan/spirv.hpp	/^    MemoryModelOpenCL = 2,$/;"	e	enum:spv::MemoryModel
MemoryModelSimple	lib/vulkan/spirv.hpp	/^    MemoryModelSimple = 0,$/;"	e	enum:spv::MemoryModel
MemorySemanticsAcquireMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireMask = 0x00000002,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAcquireReleaseMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireReleaseMask = 0x00000008,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAcquireReleaseShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireReleaseShift = 3,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsAcquireShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireShift = 1,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsAtomicCounterMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryMask = 0x00000400,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAtomicCounterMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryShift = 10,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsCrossWorkgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsCrossWorkgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryShift = 9,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsImageMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsImageMemoryMask = 0x00000800,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsImageMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsImageMemoryShift = 11,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMask	lib/vulkan/spirv.hpp	/^enum MemorySemanticsMask {$/;"	g	namespace:spv
MemorySemanticsMaskNone	lib/vulkan/spirv.hpp	/^    MemorySemanticsMaskNone = 0,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMax	lib/vulkan/spirv.hpp	/^    MemorySemanticsMax = 0x7fffffff,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsReleaseMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsReleaseMask = 0x00000004,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsReleaseShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsReleaseShift = 2,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsSequentiallyConsistentMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsSequentiallyConsistentMask = 0x00000010,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsSequentiallyConsistentShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsSequentiallyConsistentShift = 4,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsShift	lib/vulkan/spirv.hpp	/^enum MemorySemanticsShift {$/;"	g	namespace:spv
MemorySemanticsSubgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsSubgroupMemoryMask = 0x00000080,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsSubgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsSubgroupMemoryShift = 7,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsUniformMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsUniformMemoryMask = 0x00000040,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsUniformMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsUniformMemoryShift = 6,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsWorkgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsWorkgroupMemoryMask = 0x00000100,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsWorkgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsWorkgroupMemoryShift = 8,$/;"	e	enum:spv::MemorySemanticsShift
MergePipelineCaches	lib/vulkan/vk_layer.h	/^    PFN_vkMergePipelineCaches MergePipelineCaches;$/;"	m	struct:VkLayerDispatchTable_	access:public
Mesh	inc/shape/model.h	/^		Mesh(): baseVertex(0), numVertices(0), baseIndex(0), numIndices(0), materialIndex(0) {}$/;"	f	struct:Model::Mesh	access:public	signature:()
Mesh	inc/shape/model.h	/^	struct Mesh {$/;"	s	class:Model	access:public
Mesh	inc/shape/skinned.h	/^		Mesh(): baseVertex(0), numVertices(0), baseIndex(0), numIndices(0), materialIndex(0) {}$/;"	f	struct:Skinned::Mesh	access:public	signature:()
Mesh	inc/shape/skinned.h	/^	struct Mesh {$/;"	s	class:Skinned	access:public
MessageTask	inc/task_manager.h	/^	MessageTask(int id): mId(id) {}$/;"	f	class:MessageTask	access:public	signature:(int id)
MessageTask	inc/task_manager.h	/^class MessageTask : public Task {$/;"	c	inherits:Task
MessageTask::MessageTask	inc/task_manager.h	/^	MessageTask(int id): mId(id) {}$/;"	f	class:MessageTask	access:public	signature:(int id)
MessageTask::execute	inc/task_manager.h	/^	void execute() {$/;"	f	class:MessageTask	access:public	signature:()
MessageTask::mId	inc/task_manager.h	/^	int mId;$/;"	m	class:MessageTask	access:public
Model	inc/shape/model.h	/^class Model {$/;"	c
Model	src/shape/model.cpp	/^Model::Model(State& vulkanState):$/;"	f	class:Model	signature:(State& vulkanState)
Model::DEFAULT_FLAGS	inc/shape/model.h	/^	static constexpr uint32_t const DEFAULT_FLAGS = $/;"	m	class:Model	access:public
Model::Material	inc/shape/model.h	/^	struct Material {$/;"	s	class:Model	access:public
Model::Material::Material	inc/shape/model.h	/^		Material(): $/;"	f	struct:Model::Material	access:public	signature:()
Model::Material::ambientImages	inc/shape/model.h	/^			ambientImages;$/;"	m	struct:Model::Material	access:public
Model::Material::descriptors	inc/shape/model.h	/^		std::vector<VkDescriptorSet> descriptors;$/;"	m	struct:Model::Material	access:public
Model::Material::diffuseImages	inc/shape/model.h	/^			diffuseImages, $/;"	m	struct:Model::Material	access:public
Model::Material::heightImages	inc/shape/model.h	/^			heightImages, $/;"	m	struct:Model::Material	access:public
Model::Material::maxImages	inc/shape/model.h	/^		uint32_t minImages, maxImages;$/;"	m	struct:Model::Material	access:public
Model::Material::minImages	inc/shape/model.h	/^		uint32_t minImages, maxImages;$/;"	m	struct:Model::Material	access:public
Model::Material::numImages	inc/shape/model.h	/^		uint32_t numImages;$/;"	m	struct:Model::Material	access:public
Model::Material::specularImages	inc/shape/model.h	/^			specularImages, $/;"	m	struct:Model::Material	access:public
Model::Mesh	inc/shape/model.h	/^	struct Mesh {$/;"	s	class:Model	access:public
Model::Mesh::Mesh	inc/shape/model.h	/^		Mesh(): baseVertex(0), numVertices(0), baseIndex(0), numIndices(0), materialIndex(0) {}$/;"	f	struct:Model::Mesh	access:public	signature:()
Model::Mesh::baseIndex	inc/shape/model.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Model::Mesh	access:public
Model::Mesh::baseVertex	inc/shape/model.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Model::Mesh	access:public
Model::Mesh::materialIndex	inc/shape/model.h	/^		uint32_t materialIndex;$/;"	m	struct:Model::Mesh	access:public
Model::Mesh::numIndices	inc/shape/model.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Model::Mesh	access:public
Model::Mesh::numVertices	inc/shape/model.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Model::Mesh	access:public
Model::Model	src/shape/model.cpp	/^Model::Model(State& vulkanState):$/;"	f	class:Model	signature:(State& vulkanState)
Model::NUM_TEXTURE_TYPES	inc/shape/model.h	/^	static const uint32_t NUM_TEXTURE_TYPES;$/;"	m	class:Model	access:public
Model::NUM_TEXTURE_TYPES	src/shape/model.cpp	/^const uint32_t Model::NUM_TEXTURE_TYPES = ARRAY_SIZE(Model_TEXTURE_TYPES);$/;"	m	class:Model	file:
Model::TEXTURE_TYPES	inc/shape/model.h	/^	static const aiTextureType* TEXTURE_TYPES;$/;"	m	class:Model	access:public
Model::TEXTURE_TYPES	src/shape/model.cpp	/^const aiTextureType* Model::TEXTURE_TYPES = Model_TEXTURE_TYPES;$/;"	m	class:Model	file:
Model::UBO	inc/shape/model.h	/^	struct UBO {$/;"	s	class:Model	access:public
Model::UBO::model	inc/shape/model.h	/^	    glm::mat4 model;$/;"	m	struct:Model::UBO	access:public
Model::UBO::proj	inc/shape/model.h	/^		glm::mat4 proj;$/;"	m	struct:Model::UBO	access:public
Model::UBO::view	inc/shape/model.h	/^		glm::mat4 view;$/;"	m	struct:Model::UBO	access:public
Model::Vertex	inc/shape/model.h	/^	struct Vertex {$/;"	s	class:Model	access:public
Model::Vertex::bitangent	inc/shape/model.h	/^		glm::vec3 bitangent;$/;"	m	struct:Model::Vertex	access:public
Model::Vertex::normal	inc/shape/model.h	/^		glm::vec3 normal;$/;"	m	struct:Model::Vertex	access:public
Model::Vertex::pos	inc/shape/model.h	/^		glm::vec3 pos;$/;"	m	struct:Model::Vertex	access:public
Model::Vertex::tangent	inc/shape/model.h	/^		glm::vec3 tangent;$/;"	m	struct:Model::Vertex	access:public
Model::Vertex::texCoord	inc/shape/model.h	/^		glm::vec2 texCoord;$/;"	m	struct:Model::Vertex	access:public
Model::convertVector	src/shape/model.cpp	/^void Model::convertVector(const aiVector3D& src, glm::vec2& dest)$/;"	f	class:Model	signature:(const aiVector3D& src, glm::vec2& dest)
Model::convertVector	src/shape/model.cpp	/^void Model::convertVector(const aiVector3D& src, glm::vec3& dest)$/;"	f	class:Model	signature:(const aiVector3D& src, glm::vec3& dest)
Model::createCommonBuffer	src/shape/model.cpp	/^void Model::createCommonBuffer(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Model	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
Model::createDescriptorPool	src/shape/model.cpp	/^void Model::createDescriptorPool() $/;"	f	class:Model	signature:()
Model::createDescriptorSet	src/shape/model.cpp	/^void Model::createDescriptorSet()$/;"	f	class:Model	signature:()
Model::draw	src/shape/model.cpp	/^void Model::draw(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)$/;"	f	class:Model	signature:(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)
Model::indexBufferOffset	inc/shape/model.h	/^				 indexBufferOffset; $/;"	m	class:Model	access:public
Model::init	src/shape/model.cpp	/^void Model::init(const char* modelPath, unsigned int pFlags)$/;"	f	class:Model	signature:(const char* modelPath, unsigned int pFlags)
Model::init	src/shape/model.cpp	/^void Model::init(std::string modelPath, unsigned int pFlags) $/;"	f	class:Model	signature:(std::string modelPath, unsigned int pFlags)
Model::mCommonBufferInfo	inc/shape/model.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Model	access:protected
Model::mDescriptorPool	inc/shape/model.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:Model	access:protected
Model::mFolder	inc/shape/model.h	/^	std::string mPath, mFolder;$/;"	m	class:Model	access:protected
Model::mMaterialIndexToMaterial	inc/shape/model.h	/^	std::unordered_map<uint32_t, Material> mMaterialIndexToMaterial;$/;"	m	class:Model	access:protected
Model::mMeshes	inc/shape/model.h	/^	std::vector<Mesh> mMeshes;$/;"	m	class:Model	access:protected
Model::mNumSamplerDescriptors	inc/shape/model.h	/^	uint32_t mNumSamplerDescriptors;$/;"	m	class:Model	access:protected
Model::mPath	inc/shape/model.h	/^	std::string mPath, mFolder;$/;"	m	class:Model	access:protected
Model::mState	inc/shape/model.h	/^	State& mState;$/;"	m	class:Model	access:protected
Model::mUniformDescriptorSet	inc/shape/model.h	/^	VkDescriptorSet mUniformDescriptorSet;$/;"	m	class:Model	access:protected
Model::numIndices	inc/shape/model.h	/^	uint32_t numVertices, numIndices;$/;"	m	class:Model	access:public
Model::numVertices	inc/shape/model.h	/^	uint32_t numVertices, numIndices;$/;"	m	class:Model	access:public
Model::processModel	src/shape/model.cpp	/^void Model::processModel(const aiScene& scene) $/;"	f	class:Model	signature:(const aiScene& scene)
Model::throwError	src/shape/model.cpp	/^void Model::throwError(const char* error) $/;"	f	class:Model	signature:(const char* error)
Model::throwError	src/shape/model.cpp	/^void Model::throwError(std::string& error) $/;"	f	class:Model	signature:(std::string& error)
Model::ubo	inc/shape/model.h	/^	UBO ubo;$/;"	m	class:Model	access:public
Model::uniformBufferOffset	inc/shape/model.h	/^	VkDeviceSize uniformBufferOffset,  $/;"	m	class:Model	access:public
Model::update	src/shape/model.cpp	/^void Model::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:Model	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
Model::vertexBufferOffset	inc/shape/model.h	/^				 vertexBufferOffset, $/;"	m	class:Model	access:public
Model::~Model	src/shape/model.cpp	/^Model::~Model() $/;"	f	class:Model	signature:()
ModelFlag_flipNormals	inc/shape/skinned.h	/^	static constexpr ModelFlags ModelFlag_flipNormals = 1 << 1;$/;"	m	class:Skinned	access:public
ModelFlag_stripFullPath	inc/shape/skinned.h	/^	static constexpr ModelFlags ModelFlag_stripFullPath = 1;$/;"	m	class:Skinned	access:public
ModelFlags	inc/shape/skinned.h	/^	typedef uint32_t ModelFlags;$/;"	t	class:Skinned	access:public
Model_TEXTURE_TYPES	src/shape/model.cpp	/^static const aiTextureType Model_TEXTURE_TYPES[] ={$/;"	v	file:
NOMINMAX	lib/vulkan/vk_sdk_platform.h	26;"	d
NORMAL	lib/__assimp/Logger.hpp	/^        NORMAL,     \/\/!< Normal granularity of logging$/;"	e	enum:Assimp::Logger::LogSeverity
NORMAL	lib/assimp/Logger.hpp	/^        NORMAL,     \/\/!< Normal granularity of logging$/;"	e	enum:Assimp::Logger::LogSeverity
NUM_DYNAMIC_OFFSETS	inc/scene_lights.h	/^	static const constexpr uint32_t NUM_DYNAMIC_OFFSETS = 2;$/;"	m	class:SceneLights	access:public
NUM_POINT_LIGHT_DESCRIPTORS	inc/scene_lights.h	/^	static const constexpr uint32_t NUM_POINT_LIGHT_DESCRIPTORS = 3;$/;"	m	class:SceneLights	access:public
NUM_TEXTURE_TYPES	inc/shape/model.h	/^	static const uint32_t NUM_TEXTURE_TYPES;$/;"	m	class:Model	access:public
NUM_TEXTURE_TYPES	inc/shape/skinned.h	/^	static const uint32_t NUM_TEXTURE_TYPES;$/;"	m	class:Skinned	access:public
NUM_TEXTURE_TYPES	src/shape/model.cpp	/^const uint32_t Model::NUM_TEXTURE_TYPES = ARRAY_SIZE(Model_TEXTURE_TYPES);$/;"	m	class:Model	file:
NUM_TEXTURE_TYPES	src/shape/skinned.cpp	/^const uint32_t Skinned::NUM_TEXTURE_TYPES = ARRAY_SIZE(Skinned_TEXTURE_TYPES);$/;"	m	class:Skinned	file:
NullLogger	lib/__assimp/NullLogger.hpp	/^class ASSIMP_API NullLogger$/;"	c	namespace:Assimp	inherits:Logger
NullLogger	lib/assimp/NullLogger.hpp	/^class ASSIMP_API NullLogger$/;"	c	namespace:Assimp	inherits:Logger
OBJS	Makefile	/^OBJS=$(patsubst %.cpp,$(OBJ_DIR)\/%.o, $(SRCS_NO_PATH))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR := obj$/;"	m
OnDebug	lib/__assimp/NullLogger.hpp	/^    void OnDebug(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnDebug	lib/assimp/NullLogger.hpp	/^    void OnDebug(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnError	lib/__assimp/NullLogger.hpp	/^    void OnError(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnError	lib/assimp/NullLogger.hpp	/^    void OnError(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnInfo	lib/__assimp/NullLogger.hpp	/^    void OnInfo(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnInfo	lib/assimp/NullLogger.hpp	/^    void OnInfo(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnWarn	lib/__assimp/NullLogger.hpp	/^    void OnWarn(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
OnWarn	lib/assimp/NullLogger.hpp	/^    void OnWarn(const char* message) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(const char* message)
Op	lib/vulkan/spirv.hpp	/^enum Op {$/;"	g	namespace:spv
OpAccessChain	lib/vulkan/spirv.hpp	/^    OpAccessChain = 65,$/;"	e	enum:spv::Op
OpAll	lib/vulkan/spirv.hpp	/^    OpAll = 155,$/;"	e	enum:spv::Op
OpAny	lib/vulkan/spirv.hpp	/^    OpAny = 154,$/;"	e	enum:spv::Op
OpArrayLength	lib/vulkan/spirv.hpp	/^    OpArrayLength = 68,$/;"	e	enum:spv::Op
OpAtomicAnd	lib/vulkan/spirv.hpp	/^    OpAtomicAnd = 240,$/;"	e	enum:spv::Op
OpAtomicCompareExchange	lib/vulkan/spirv.hpp	/^    OpAtomicCompareExchange = 230,$/;"	e	enum:spv::Op
OpAtomicCompareExchangeWeak	lib/vulkan/spirv.hpp	/^    OpAtomicCompareExchangeWeak = 231,$/;"	e	enum:spv::Op
OpAtomicExchange	lib/vulkan/spirv.hpp	/^    OpAtomicExchange = 229,$/;"	e	enum:spv::Op
OpAtomicFlagClear	lib/vulkan/spirv.hpp	/^    OpAtomicFlagClear = 319,$/;"	e	enum:spv::Op
OpAtomicFlagTestAndSet	lib/vulkan/spirv.hpp	/^    OpAtomicFlagTestAndSet = 318,$/;"	e	enum:spv::Op
OpAtomicIAdd	lib/vulkan/spirv.hpp	/^    OpAtomicIAdd = 234,$/;"	e	enum:spv::Op
OpAtomicIDecrement	lib/vulkan/spirv.hpp	/^    OpAtomicIDecrement = 233,$/;"	e	enum:spv::Op
OpAtomicIIncrement	lib/vulkan/spirv.hpp	/^    OpAtomicIIncrement = 232,$/;"	e	enum:spv::Op
OpAtomicISub	lib/vulkan/spirv.hpp	/^    OpAtomicISub = 235,$/;"	e	enum:spv::Op
OpAtomicLoad	lib/vulkan/spirv.hpp	/^    OpAtomicLoad = 227,$/;"	e	enum:spv::Op
OpAtomicOr	lib/vulkan/spirv.hpp	/^    OpAtomicOr = 241,$/;"	e	enum:spv::Op
OpAtomicSMax	lib/vulkan/spirv.hpp	/^    OpAtomicSMax = 238,$/;"	e	enum:spv::Op
OpAtomicSMin	lib/vulkan/spirv.hpp	/^    OpAtomicSMin = 236,$/;"	e	enum:spv::Op
OpAtomicStore	lib/vulkan/spirv.hpp	/^    OpAtomicStore = 228,$/;"	e	enum:spv::Op
OpAtomicUMax	lib/vulkan/spirv.hpp	/^    OpAtomicUMax = 239,$/;"	e	enum:spv::Op
OpAtomicUMin	lib/vulkan/spirv.hpp	/^    OpAtomicUMin = 237,$/;"	e	enum:spv::Op
OpAtomicXor	lib/vulkan/spirv.hpp	/^    OpAtomicXor = 242,$/;"	e	enum:spv::Op
OpBitCount	lib/vulkan/spirv.hpp	/^    OpBitCount = 205,$/;"	e	enum:spv::Op
OpBitFieldInsert	lib/vulkan/spirv.hpp	/^    OpBitFieldInsert = 201,$/;"	e	enum:spv::Op
OpBitFieldSExtract	lib/vulkan/spirv.hpp	/^    OpBitFieldSExtract = 202,$/;"	e	enum:spv::Op
OpBitFieldUExtract	lib/vulkan/spirv.hpp	/^    OpBitFieldUExtract = 203,$/;"	e	enum:spv::Op
OpBitReverse	lib/vulkan/spirv.hpp	/^    OpBitReverse = 204,$/;"	e	enum:spv::Op
OpBitcast	lib/vulkan/spirv.hpp	/^    OpBitcast = 124,$/;"	e	enum:spv::Op
OpBitwiseAnd	lib/vulkan/spirv.hpp	/^    OpBitwiseAnd = 199,$/;"	e	enum:spv::Op
OpBitwiseOr	lib/vulkan/spirv.hpp	/^    OpBitwiseOr = 197,$/;"	e	enum:spv::Op
OpBitwiseXor	lib/vulkan/spirv.hpp	/^    OpBitwiseXor = 198,$/;"	e	enum:spv::Op
OpBranch	lib/vulkan/spirv.hpp	/^    OpBranch = 249,$/;"	e	enum:spv::Op
OpBranchConditional	lib/vulkan/spirv.hpp	/^    OpBranchConditional = 250,$/;"	e	enum:spv::Op
OpBuildNDRange	lib/vulkan/spirv.hpp	/^    OpBuildNDRange = 304,$/;"	e	enum:spv::Op
OpCapability	lib/vulkan/spirv.hpp	/^    OpCapability = 17,$/;"	e	enum:spv::Op
OpCaptureEventProfilingInfo	lib/vulkan/spirv.hpp	/^    OpCaptureEventProfilingInfo = 302,$/;"	e	enum:spv::Op
OpCodeMask	lib/vulkan/spirv.hpp	/^static const unsigned int OpCodeMask = 0xffff;$/;"	m	namespace:spv
OpCommitReadPipe	lib/vulkan/spirv.hpp	/^    OpCommitReadPipe = 280,$/;"	e	enum:spv::Op
OpCommitWritePipe	lib/vulkan/spirv.hpp	/^    OpCommitWritePipe = 281,$/;"	e	enum:spv::Op
OpCompositeConstruct	lib/vulkan/spirv.hpp	/^    OpCompositeConstruct = 80,$/;"	e	enum:spv::Op
OpCompositeExtract	lib/vulkan/spirv.hpp	/^    OpCompositeExtract = 81,$/;"	e	enum:spv::Op
OpCompositeInsert	lib/vulkan/spirv.hpp	/^    OpCompositeInsert = 82,$/;"	e	enum:spv::Op
OpConstant	lib/vulkan/spirv.hpp	/^    OpConstant = 43,$/;"	e	enum:spv::Op
OpConstantComposite	lib/vulkan/spirv.hpp	/^    OpConstantComposite = 44,$/;"	e	enum:spv::Op
OpConstantFalse	lib/vulkan/spirv.hpp	/^    OpConstantFalse = 42,$/;"	e	enum:spv::Op
OpConstantNull	lib/vulkan/spirv.hpp	/^    OpConstantNull = 46,$/;"	e	enum:spv::Op
OpConstantPipeStorage	lib/vulkan/spirv.hpp	/^    OpConstantPipeStorage = 323,$/;"	e	enum:spv::Op
OpConstantSampler	lib/vulkan/spirv.hpp	/^    OpConstantSampler = 45,$/;"	e	enum:spv::Op
OpConstantTrue	lib/vulkan/spirv.hpp	/^    OpConstantTrue = 41,$/;"	e	enum:spv::Op
OpControlBarrier	lib/vulkan/spirv.hpp	/^    OpControlBarrier = 224,$/;"	e	enum:spv::Op
OpConvertFToS	lib/vulkan/spirv.hpp	/^    OpConvertFToS = 110,$/;"	e	enum:spv::Op
OpConvertFToU	lib/vulkan/spirv.hpp	/^    OpConvertFToU = 109,$/;"	e	enum:spv::Op
OpConvertPtrToU	lib/vulkan/spirv.hpp	/^    OpConvertPtrToU = 117,$/;"	e	enum:spv::Op
OpConvertSToF	lib/vulkan/spirv.hpp	/^    OpConvertSToF = 111,$/;"	e	enum:spv::Op
OpConvertUToF	lib/vulkan/spirv.hpp	/^    OpConvertUToF = 112,$/;"	e	enum:spv::Op
OpConvertUToPtr	lib/vulkan/spirv.hpp	/^    OpConvertUToPtr = 120,$/;"	e	enum:spv::Op
OpCopyMemory	lib/vulkan/spirv.hpp	/^    OpCopyMemory = 63,$/;"	e	enum:spv::Op
OpCopyMemorySized	lib/vulkan/spirv.hpp	/^    OpCopyMemorySized = 64,$/;"	e	enum:spv::Op
OpCopyObject	lib/vulkan/spirv.hpp	/^    OpCopyObject = 83,$/;"	e	enum:spv::Op
OpCreatePipeFromPipeStorage	lib/vulkan/spirv.hpp	/^    OpCreatePipeFromPipeStorage = 324,$/;"	e	enum:spv::Op
OpCreateUserEvent	lib/vulkan/spirv.hpp	/^    OpCreateUserEvent = 299,$/;"	e	enum:spv::Op
OpDPdx	lib/vulkan/spirv.hpp	/^    OpDPdx = 207,$/;"	e	enum:spv::Op
OpDPdxCoarse	lib/vulkan/spirv.hpp	/^    OpDPdxCoarse = 213,$/;"	e	enum:spv::Op
OpDPdxFine	lib/vulkan/spirv.hpp	/^    OpDPdxFine = 210,$/;"	e	enum:spv::Op
OpDPdy	lib/vulkan/spirv.hpp	/^    OpDPdy = 208,$/;"	e	enum:spv::Op
OpDPdyCoarse	lib/vulkan/spirv.hpp	/^    OpDPdyCoarse = 214,$/;"	e	enum:spv::Op
OpDPdyFine	lib/vulkan/spirv.hpp	/^    OpDPdyFine = 211,$/;"	e	enum:spv::Op
OpDecorate	lib/vulkan/spirv.hpp	/^    OpDecorate = 71,$/;"	e	enum:spv::Op
OpDecorationGroup	lib/vulkan/spirv.hpp	/^    OpDecorationGroup = 73,$/;"	e	enum:spv::Op
OpDot	lib/vulkan/spirv.hpp	/^    OpDot = 148,$/;"	e	enum:spv::Op
OpEmitStreamVertex	lib/vulkan/spirv.hpp	/^    OpEmitStreamVertex = 220,$/;"	e	enum:spv::Op
OpEmitVertex	lib/vulkan/spirv.hpp	/^    OpEmitVertex = 218,$/;"	e	enum:spv::Op
OpEndPrimitive	lib/vulkan/spirv.hpp	/^    OpEndPrimitive = 219,$/;"	e	enum:spv::Op
OpEndStreamPrimitive	lib/vulkan/spirv.hpp	/^    OpEndStreamPrimitive = 221,$/;"	e	enum:spv::Op
OpEnqueueKernel	lib/vulkan/spirv.hpp	/^    OpEnqueueKernel = 292,$/;"	e	enum:spv::Op
OpEnqueueMarker	lib/vulkan/spirv.hpp	/^    OpEnqueueMarker = 291,$/;"	e	enum:spv::Op
OpEntryPoint	lib/vulkan/spirv.hpp	/^    OpEntryPoint = 15,$/;"	e	enum:spv::Op
OpExecutionMode	lib/vulkan/spirv.hpp	/^    OpExecutionMode = 16,$/;"	e	enum:spv::Op
OpExtInst	lib/vulkan/spirv.hpp	/^    OpExtInst = 12,$/;"	e	enum:spv::Op
OpExtInstImport	lib/vulkan/spirv.hpp	/^    OpExtInstImport = 11,$/;"	e	enum:spv::Op
OpExtension	lib/vulkan/spirv.hpp	/^    OpExtension = 10,$/;"	e	enum:spv::Op
OpFAdd	lib/vulkan/spirv.hpp	/^    OpFAdd = 129,$/;"	e	enum:spv::Op
OpFConvert	lib/vulkan/spirv.hpp	/^    OpFConvert = 115,$/;"	e	enum:spv::Op
OpFDiv	lib/vulkan/spirv.hpp	/^    OpFDiv = 136,$/;"	e	enum:spv::Op
OpFMod	lib/vulkan/spirv.hpp	/^    OpFMod = 141,$/;"	e	enum:spv::Op
OpFMul	lib/vulkan/spirv.hpp	/^    OpFMul = 133,$/;"	e	enum:spv::Op
OpFNegate	lib/vulkan/spirv.hpp	/^    OpFNegate = 127,$/;"	e	enum:spv::Op
OpFOrdEqual	lib/vulkan/spirv.hpp	/^    OpFOrdEqual = 180,$/;"	e	enum:spv::Op
OpFOrdGreaterThan	lib/vulkan/spirv.hpp	/^    OpFOrdGreaterThan = 186,$/;"	e	enum:spv::Op
OpFOrdGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpFOrdGreaterThanEqual = 190,$/;"	e	enum:spv::Op
OpFOrdLessThan	lib/vulkan/spirv.hpp	/^    OpFOrdLessThan = 184,$/;"	e	enum:spv::Op
OpFOrdLessThanEqual	lib/vulkan/spirv.hpp	/^    OpFOrdLessThanEqual = 188,$/;"	e	enum:spv::Op
OpFOrdNotEqual	lib/vulkan/spirv.hpp	/^    OpFOrdNotEqual = 182,$/;"	e	enum:spv::Op
OpFRem	lib/vulkan/spirv.hpp	/^    OpFRem = 140,$/;"	e	enum:spv::Op
OpFSub	lib/vulkan/spirv.hpp	/^    OpFSub = 131,$/;"	e	enum:spv::Op
OpFUnordEqual	lib/vulkan/spirv.hpp	/^    OpFUnordEqual = 181,$/;"	e	enum:spv::Op
OpFUnordGreaterThan	lib/vulkan/spirv.hpp	/^    OpFUnordGreaterThan = 187,$/;"	e	enum:spv::Op
OpFUnordGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpFUnordGreaterThanEqual = 191,$/;"	e	enum:spv::Op
OpFUnordLessThan	lib/vulkan/spirv.hpp	/^    OpFUnordLessThan = 185,$/;"	e	enum:spv::Op
OpFUnordLessThanEqual	lib/vulkan/spirv.hpp	/^    OpFUnordLessThanEqual = 189,$/;"	e	enum:spv::Op
OpFUnordNotEqual	lib/vulkan/spirv.hpp	/^    OpFUnordNotEqual = 183,$/;"	e	enum:spv::Op
OpFunction	lib/vulkan/spirv.hpp	/^    OpFunction = 54,$/;"	e	enum:spv::Op
OpFunctionCall	lib/vulkan/spirv.hpp	/^    OpFunctionCall = 57,$/;"	e	enum:spv::Op
OpFunctionEnd	lib/vulkan/spirv.hpp	/^    OpFunctionEnd = 56,$/;"	e	enum:spv::Op
OpFunctionParameter	lib/vulkan/spirv.hpp	/^    OpFunctionParameter = 55,$/;"	e	enum:spv::Op
OpFwidth	lib/vulkan/spirv.hpp	/^    OpFwidth = 209,$/;"	e	enum:spv::Op
OpFwidthCoarse	lib/vulkan/spirv.hpp	/^    OpFwidthCoarse = 215,$/;"	e	enum:spv::Op
OpFwidthFine	lib/vulkan/spirv.hpp	/^    OpFwidthFine = 212,$/;"	e	enum:spv::Op
OpGenericCastToPtr	lib/vulkan/spirv.hpp	/^    OpGenericCastToPtr = 122,$/;"	e	enum:spv::Op
OpGenericCastToPtrExplicit	lib/vulkan/spirv.hpp	/^    OpGenericCastToPtrExplicit = 123,$/;"	e	enum:spv::Op
OpGenericPtrMemSemantics	lib/vulkan/spirv.hpp	/^    OpGenericPtrMemSemantics = 69,$/;"	e	enum:spv::Op
OpGetDefaultQueue	lib/vulkan/spirv.hpp	/^    OpGetDefaultQueue = 303,$/;"	e	enum:spv::Op
OpGetKernelLocalSizeForSubgroupCount	lib/vulkan/spirv.hpp	/^    OpGetKernelLocalSizeForSubgroupCount = 325,$/;"	e	enum:spv::Op
OpGetKernelMaxNumSubgroups	lib/vulkan/spirv.hpp	/^    OpGetKernelMaxNumSubgroups = 326,$/;"	e	enum:spv::Op
OpGetKernelNDrangeMaxSubGroupSize	lib/vulkan/spirv.hpp	/^    OpGetKernelNDrangeMaxSubGroupSize = 294,$/;"	e	enum:spv::Op
OpGetKernelNDrangeSubGroupCount	lib/vulkan/spirv.hpp	/^    OpGetKernelNDrangeSubGroupCount = 293,$/;"	e	enum:spv::Op
OpGetKernelPreferredWorkGroupSizeMultiple	lib/vulkan/spirv.hpp	/^    OpGetKernelPreferredWorkGroupSizeMultiple = 296,$/;"	e	enum:spv::Op
OpGetKernelWorkGroupSize	lib/vulkan/spirv.hpp	/^    OpGetKernelWorkGroupSize = 295,$/;"	e	enum:spv::Op
OpGetMaxPipePackets	lib/vulkan/spirv.hpp	/^    OpGetMaxPipePackets = 284,$/;"	e	enum:spv::Op
OpGetNumPipePackets	lib/vulkan/spirv.hpp	/^    OpGetNumPipePackets = 283,$/;"	e	enum:spv::Op
OpGroupAll	lib/vulkan/spirv.hpp	/^    OpGroupAll = 261,$/;"	e	enum:spv::Op
OpGroupAny	lib/vulkan/spirv.hpp	/^    OpGroupAny = 262,$/;"	e	enum:spv::Op
OpGroupAsyncCopy	lib/vulkan/spirv.hpp	/^    OpGroupAsyncCopy = 259,$/;"	e	enum:spv::Op
OpGroupBroadcast	lib/vulkan/spirv.hpp	/^    OpGroupBroadcast = 263,$/;"	e	enum:spv::Op
OpGroupCommitReadPipe	lib/vulkan/spirv.hpp	/^    OpGroupCommitReadPipe = 287,$/;"	e	enum:spv::Op
OpGroupCommitWritePipe	lib/vulkan/spirv.hpp	/^    OpGroupCommitWritePipe = 288,$/;"	e	enum:spv::Op
OpGroupDecorate	lib/vulkan/spirv.hpp	/^    OpGroupDecorate = 74,$/;"	e	enum:spv::Op
OpGroupFAdd	lib/vulkan/spirv.hpp	/^    OpGroupFAdd = 265,$/;"	e	enum:spv::Op
OpGroupFMax	lib/vulkan/spirv.hpp	/^    OpGroupFMax = 269,$/;"	e	enum:spv::Op
OpGroupFMin	lib/vulkan/spirv.hpp	/^    OpGroupFMin = 266,$/;"	e	enum:spv::Op
OpGroupIAdd	lib/vulkan/spirv.hpp	/^    OpGroupIAdd = 264,$/;"	e	enum:spv::Op
OpGroupMemberDecorate	lib/vulkan/spirv.hpp	/^    OpGroupMemberDecorate = 75,$/;"	e	enum:spv::Op
OpGroupReserveReadPipePackets	lib/vulkan/spirv.hpp	/^    OpGroupReserveReadPipePackets = 285,$/;"	e	enum:spv::Op
OpGroupReserveWritePipePackets	lib/vulkan/spirv.hpp	/^    OpGroupReserveWritePipePackets = 286,$/;"	e	enum:spv::Op
OpGroupSMax	lib/vulkan/spirv.hpp	/^    OpGroupSMax = 271,$/;"	e	enum:spv::Op
OpGroupSMin	lib/vulkan/spirv.hpp	/^    OpGroupSMin = 268,$/;"	e	enum:spv::Op
OpGroupUMax	lib/vulkan/spirv.hpp	/^    OpGroupUMax = 270,$/;"	e	enum:spv::Op
OpGroupUMin	lib/vulkan/spirv.hpp	/^    OpGroupUMin = 267,$/;"	e	enum:spv::Op
OpGroupWaitEvents	lib/vulkan/spirv.hpp	/^    OpGroupWaitEvents = 260,$/;"	e	enum:spv::Op
OpIAdd	lib/vulkan/spirv.hpp	/^    OpIAdd = 128,$/;"	e	enum:spv::Op
OpIAddCarry	lib/vulkan/spirv.hpp	/^    OpIAddCarry = 149,$/;"	e	enum:spv::Op
OpIEqual	lib/vulkan/spirv.hpp	/^    OpIEqual = 170,$/;"	e	enum:spv::Op
OpIMul	lib/vulkan/spirv.hpp	/^    OpIMul = 132,$/;"	e	enum:spv::Op
OpINotEqual	lib/vulkan/spirv.hpp	/^    OpINotEqual = 171,$/;"	e	enum:spv::Op
OpISub	lib/vulkan/spirv.hpp	/^    OpISub = 130,$/;"	e	enum:spv::Op
OpISubBorrow	lib/vulkan/spirv.hpp	/^    OpISubBorrow = 150,$/;"	e	enum:spv::Op
OpImage	lib/vulkan/spirv.hpp	/^    OpImage = 100,$/;"	e	enum:spv::Op
OpImageDrefGather	lib/vulkan/spirv.hpp	/^    OpImageDrefGather = 97,$/;"	e	enum:spv::Op
OpImageFetch	lib/vulkan/spirv.hpp	/^    OpImageFetch = 95,$/;"	e	enum:spv::Op
OpImageGather	lib/vulkan/spirv.hpp	/^    OpImageGather = 96,$/;"	e	enum:spv::Op
OpImageQueryFormat	lib/vulkan/spirv.hpp	/^    OpImageQueryFormat = 101,$/;"	e	enum:spv::Op
OpImageQueryLevels	lib/vulkan/spirv.hpp	/^    OpImageQueryLevels = 106,$/;"	e	enum:spv::Op
OpImageQueryLod	lib/vulkan/spirv.hpp	/^    OpImageQueryLod = 105,$/;"	e	enum:spv::Op
OpImageQueryOrder	lib/vulkan/spirv.hpp	/^    OpImageQueryOrder = 102,$/;"	e	enum:spv::Op
OpImageQuerySamples	lib/vulkan/spirv.hpp	/^    OpImageQuerySamples = 107,$/;"	e	enum:spv::Op
OpImageQuerySize	lib/vulkan/spirv.hpp	/^    OpImageQuerySize = 104,$/;"	e	enum:spv::Op
OpImageQuerySizeLod	lib/vulkan/spirv.hpp	/^    OpImageQuerySizeLod = 103,$/;"	e	enum:spv::Op
OpImageRead	lib/vulkan/spirv.hpp	/^    OpImageRead = 98,$/;"	e	enum:spv::Op
OpImageSampleDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleDrefExplicitLod = 90,$/;"	e	enum:spv::Op
OpImageSampleDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleDrefImplicitLod = 89,$/;"	e	enum:spv::Op
OpImageSampleExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleExplicitLod = 88,$/;"	e	enum:spv::Op
OpImageSampleImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleImplicitLod = 87,$/;"	e	enum:spv::Op
OpImageSampleProjDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjDrefExplicitLod = 94,$/;"	e	enum:spv::Op
OpImageSampleProjDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjDrefImplicitLod = 93,$/;"	e	enum:spv::Op
OpImageSampleProjExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjExplicitLod = 92,$/;"	e	enum:spv::Op
OpImageSampleProjImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjImplicitLod = 91,$/;"	e	enum:spv::Op
OpImageSparseDrefGather	lib/vulkan/spirv.hpp	/^    OpImageSparseDrefGather = 315,$/;"	e	enum:spv::Op
OpImageSparseFetch	lib/vulkan/spirv.hpp	/^    OpImageSparseFetch = 313,$/;"	e	enum:spv::Op
OpImageSparseGather	lib/vulkan/spirv.hpp	/^    OpImageSparseGather = 314,$/;"	e	enum:spv::Op
OpImageSparseRead	lib/vulkan/spirv.hpp	/^    OpImageSparseRead = 320,$/;"	e	enum:spv::Op
OpImageSparseSampleDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleDrefExplicitLod = 308,$/;"	e	enum:spv::Op
OpImageSparseSampleDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleDrefImplicitLod = 307,$/;"	e	enum:spv::Op
OpImageSparseSampleExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleExplicitLod = 306,$/;"	e	enum:spv::Op
OpImageSparseSampleImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleImplicitLod = 305,$/;"	e	enum:spv::Op
OpImageSparseSampleProjDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjDrefExplicitLod = 312,$/;"	e	enum:spv::Op
OpImageSparseSampleProjDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjDrefImplicitLod = 311,$/;"	e	enum:spv::Op
OpImageSparseSampleProjExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjExplicitLod = 310,$/;"	e	enum:spv::Op
OpImageSparseSampleProjImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjImplicitLod = 309,$/;"	e	enum:spv::Op
OpImageSparseTexelsResident	lib/vulkan/spirv.hpp	/^    OpImageSparseTexelsResident = 316,$/;"	e	enum:spv::Op
OpImageTexelPointer	lib/vulkan/spirv.hpp	/^    OpImageTexelPointer = 60,$/;"	e	enum:spv::Op
OpImageWrite	lib/vulkan/spirv.hpp	/^    OpImageWrite = 99,$/;"	e	enum:spv::Op
OpInBoundsAccessChain	lib/vulkan/spirv.hpp	/^    OpInBoundsAccessChain = 66,$/;"	e	enum:spv::Op
OpInBoundsPtrAccessChain	lib/vulkan/spirv.hpp	/^    OpInBoundsPtrAccessChain = 70,$/;"	e	enum:spv::Op
OpIsFinite	lib/vulkan/spirv.hpp	/^    OpIsFinite = 158,$/;"	e	enum:spv::Op
OpIsInf	lib/vulkan/spirv.hpp	/^    OpIsInf = 157,$/;"	e	enum:spv::Op
OpIsNan	lib/vulkan/spirv.hpp	/^    OpIsNan = 156,$/;"	e	enum:spv::Op
OpIsNormal	lib/vulkan/spirv.hpp	/^    OpIsNormal = 159,$/;"	e	enum:spv::Op
OpIsValidEvent	lib/vulkan/spirv.hpp	/^    OpIsValidEvent = 300,$/;"	e	enum:spv::Op
OpIsValidReserveId	lib/vulkan/spirv.hpp	/^    OpIsValidReserveId = 282,$/;"	e	enum:spv::Op
OpKill	lib/vulkan/spirv.hpp	/^    OpKill = 252,$/;"	e	enum:spv::Op
OpLabel	lib/vulkan/spirv.hpp	/^    OpLabel = 248,$/;"	e	enum:spv::Op
OpLessOrGreater	lib/vulkan/spirv.hpp	/^    OpLessOrGreater = 161,$/;"	e	enum:spv::Op
OpLifetimeStart	lib/vulkan/spirv.hpp	/^    OpLifetimeStart = 256,$/;"	e	enum:spv::Op
OpLifetimeStop	lib/vulkan/spirv.hpp	/^    OpLifetimeStop = 257,$/;"	e	enum:spv::Op
OpLine	lib/vulkan/spirv.hpp	/^    OpLine = 8,$/;"	e	enum:spv::Op
OpLoad	lib/vulkan/spirv.hpp	/^    OpLoad = 61,$/;"	e	enum:spv::Op
OpLogicalAnd	lib/vulkan/spirv.hpp	/^    OpLogicalAnd = 167,$/;"	e	enum:spv::Op
OpLogicalEqual	lib/vulkan/spirv.hpp	/^    OpLogicalEqual = 164,$/;"	e	enum:spv::Op
OpLogicalNot	lib/vulkan/spirv.hpp	/^    OpLogicalNot = 168,$/;"	e	enum:spv::Op
OpLogicalNotEqual	lib/vulkan/spirv.hpp	/^    OpLogicalNotEqual = 165,$/;"	e	enum:spv::Op
OpLogicalOr	lib/vulkan/spirv.hpp	/^    OpLogicalOr = 166,$/;"	e	enum:spv::Op
OpLoopMerge	lib/vulkan/spirv.hpp	/^    OpLoopMerge = 246,$/;"	e	enum:spv::Op
OpMatrixTimesMatrix	lib/vulkan/spirv.hpp	/^    OpMatrixTimesMatrix = 146,$/;"	e	enum:spv::Op
OpMatrixTimesScalar	lib/vulkan/spirv.hpp	/^    OpMatrixTimesScalar = 143,$/;"	e	enum:spv::Op
OpMatrixTimesVector	lib/vulkan/spirv.hpp	/^    OpMatrixTimesVector = 145,$/;"	e	enum:spv::Op
OpMax	lib/vulkan/spirv.hpp	/^    OpMax = 0x7fffffff,$/;"	e	enum:spv::Op
OpMemberDecorate	lib/vulkan/spirv.hpp	/^    OpMemberDecorate = 72,$/;"	e	enum:spv::Op
OpMemberName	lib/vulkan/spirv.hpp	/^    OpMemberName = 6,$/;"	e	enum:spv::Op
OpMemoryBarrier	lib/vulkan/spirv.hpp	/^    OpMemoryBarrier = 225,$/;"	e	enum:spv::Op
OpMemoryModel	lib/vulkan/spirv.hpp	/^    OpMemoryModel = 14,$/;"	e	enum:spv::Op
OpMemoryNamedBarrier	lib/vulkan/spirv.hpp	/^    OpMemoryNamedBarrier = 329,$/;"	e	enum:spv::Op
OpModuleProcessed	lib/vulkan/spirv.hpp	/^    OpModuleProcessed = 330,$/;"	e	enum:spv::Op
OpName	lib/vulkan/spirv.hpp	/^    OpName = 5,$/;"	e	enum:spv::Op
OpNamedBarrierInitialize	lib/vulkan/spirv.hpp	/^    OpNamedBarrierInitialize = 328,$/;"	e	enum:spv::Op
OpNoLine	lib/vulkan/spirv.hpp	/^    OpNoLine = 317,$/;"	e	enum:spv::Op
OpNop	lib/vulkan/spirv.hpp	/^    OpNop = 0,$/;"	e	enum:spv::Op
OpNot	lib/vulkan/spirv.hpp	/^    OpNot = 200,$/;"	e	enum:spv::Op
OpOrdered	lib/vulkan/spirv.hpp	/^    OpOrdered = 162,$/;"	e	enum:spv::Op
OpOuterProduct	lib/vulkan/spirv.hpp	/^    OpOuterProduct = 147,$/;"	e	enum:spv::Op
OpPhi	lib/vulkan/spirv.hpp	/^    OpPhi = 245,$/;"	e	enum:spv::Op
OpPtrAccessChain	lib/vulkan/spirv.hpp	/^    OpPtrAccessChain = 67,$/;"	e	enum:spv::Op
OpPtrCastToGeneric	lib/vulkan/spirv.hpp	/^    OpPtrCastToGeneric = 121,$/;"	e	enum:spv::Op
OpQuantizeToF16	lib/vulkan/spirv.hpp	/^    OpQuantizeToF16 = 116,$/;"	e	enum:spv::Op
OpReadPipe	lib/vulkan/spirv.hpp	/^    OpReadPipe = 274,$/;"	e	enum:spv::Op
OpReleaseEvent	lib/vulkan/spirv.hpp	/^    OpReleaseEvent = 298,$/;"	e	enum:spv::Op
OpReserveReadPipePackets	lib/vulkan/spirv.hpp	/^    OpReserveReadPipePackets = 278,$/;"	e	enum:spv::Op
OpReserveWritePipePackets	lib/vulkan/spirv.hpp	/^    OpReserveWritePipePackets = 279,$/;"	e	enum:spv::Op
OpReservedReadPipe	lib/vulkan/spirv.hpp	/^    OpReservedReadPipe = 276,$/;"	e	enum:spv::Op
OpReservedWritePipe	lib/vulkan/spirv.hpp	/^    OpReservedWritePipe = 277,$/;"	e	enum:spv::Op
OpRetainEvent	lib/vulkan/spirv.hpp	/^    OpRetainEvent = 297,$/;"	e	enum:spv::Op
OpReturn	lib/vulkan/spirv.hpp	/^    OpReturn = 253,$/;"	e	enum:spv::Op
OpReturnValue	lib/vulkan/spirv.hpp	/^    OpReturnValue = 254,$/;"	e	enum:spv::Op
OpSConvert	lib/vulkan/spirv.hpp	/^    OpSConvert = 114,$/;"	e	enum:spv::Op
OpSDiv	lib/vulkan/spirv.hpp	/^    OpSDiv = 135,$/;"	e	enum:spv::Op
OpSGreaterThan	lib/vulkan/spirv.hpp	/^    OpSGreaterThan = 173,$/;"	e	enum:spv::Op
OpSGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpSGreaterThanEqual = 175,$/;"	e	enum:spv::Op
OpSLessThan	lib/vulkan/spirv.hpp	/^    OpSLessThan = 177,$/;"	e	enum:spv::Op
OpSLessThanEqual	lib/vulkan/spirv.hpp	/^    OpSLessThanEqual = 179,$/;"	e	enum:spv::Op
OpSMod	lib/vulkan/spirv.hpp	/^    OpSMod = 139,$/;"	e	enum:spv::Op
OpSMulExtended	lib/vulkan/spirv.hpp	/^    OpSMulExtended = 152,$/;"	e	enum:spv::Op
OpSNegate	lib/vulkan/spirv.hpp	/^    OpSNegate = 126,$/;"	e	enum:spv::Op
OpSRem	lib/vulkan/spirv.hpp	/^    OpSRem = 138,$/;"	e	enum:spv::Op
OpSampledImage	lib/vulkan/spirv.hpp	/^    OpSampledImage = 86,$/;"	e	enum:spv::Op
OpSatConvertSToU	lib/vulkan/spirv.hpp	/^    OpSatConvertSToU = 118,$/;"	e	enum:spv::Op
OpSatConvertUToS	lib/vulkan/spirv.hpp	/^    OpSatConvertUToS = 119,$/;"	e	enum:spv::Op
OpSelect	lib/vulkan/spirv.hpp	/^    OpSelect = 169,$/;"	e	enum:spv::Op
OpSelectionMerge	lib/vulkan/spirv.hpp	/^    OpSelectionMerge = 247,$/;"	e	enum:spv::Op
OpSetUserEventStatus	lib/vulkan/spirv.hpp	/^    OpSetUserEventStatus = 301,$/;"	e	enum:spv::Op
OpShiftLeftLogical	lib/vulkan/spirv.hpp	/^    OpShiftLeftLogical = 196,$/;"	e	enum:spv::Op
OpShiftRightArithmetic	lib/vulkan/spirv.hpp	/^    OpShiftRightArithmetic = 195,$/;"	e	enum:spv::Op
OpShiftRightLogical	lib/vulkan/spirv.hpp	/^    OpShiftRightLogical = 194,$/;"	e	enum:spv::Op
OpSignBitSet	lib/vulkan/spirv.hpp	/^    OpSignBitSet = 160,$/;"	e	enum:spv::Op
OpSizeOf	lib/vulkan/spirv.hpp	/^    OpSizeOf = 321,$/;"	e	enum:spv::Op
OpSource	lib/vulkan/spirv.hpp	/^    OpSource = 3,$/;"	e	enum:spv::Op
OpSourceContinued	lib/vulkan/spirv.hpp	/^    OpSourceContinued = 2,$/;"	e	enum:spv::Op
OpSourceExtension	lib/vulkan/spirv.hpp	/^    OpSourceExtension = 4,$/;"	e	enum:spv::Op
OpSpecConstant	lib/vulkan/spirv.hpp	/^    OpSpecConstant = 50,$/;"	e	enum:spv::Op
OpSpecConstantComposite	lib/vulkan/spirv.hpp	/^    OpSpecConstantComposite = 51,$/;"	e	enum:spv::Op
OpSpecConstantFalse	lib/vulkan/spirv.hpp	/^    OpSpecConstantFalse = 49,$/;"	e	enum:spv::Op
OpSpecConstantOp	lib/vulkan/spirv.hpp	/^    OpSpecConstantOp = 52,$/;"	e	enum:spv::Op
OpSpecConstantTrue	lib/vulkan/spirv.hpp	/^    OpSpecConstantTrue = 48,$/;"	e	enum:spv::Op
OpStore	lib/vulkan/spirv.hpp	/^    OpStore = 62,$/;"	e	enum:spv::Op
OpString	lib/vulkan/spirv.hpp	/^    OpString = 7,$/;"	e	enum:spv::Op
OpSwitch	lib/vulkan/spirv.hpp	/^    OpSwitch = 251,$/;"	e	enum:spv::Op
OpTranspose	lib/vulkan/spirv.hpp	/^    OpTranspose = 84,$/;"	e	enum:spv::Op
OpTypeArray	lib/vulkan/spirv.hpp	/^    OpTypeArray = 28,$/;"	e	enum:spv::Op
OpTypeBool	lib/vulkan/spirv.hpp	/^    OpTypeBool = 20,$/;"	e	enum:spv::Op
OpTypeDeviceEvent	lib/vulkan/spirv.hpp	/^    OpTypeDeviceEvent = 35,$/;"	e	enum:spv::Op
OpTypeEvent	lib/vulkan/spirv.hpp	/^    OpTypeEvent = 34,$/;"	e	enum:spv::Op
OpTypeFloat	lib/vulkan/spirv.hpp	/^    OpTypeFloat = 22,$/;"	e	enum:spv::Op
OpTypeForwardPointer	lib/vulkan/spirv.hpp	/^    OpTypeForwardPointer = 39,$/;"	e	enum:spv::Op
OpTypeFunction	lib/vulkan/spirv.hpp	/^    OpTypeFunction = 33,$/;"	e	enum:spv::Op
OpTypeImage	lib/vulkan/spirv.hpp	/^    OpTypeImage = 25,$/;"	e	enum:spv::Op
OpTypeInt	lib/vulkan/spirv.hpp	/^    OpTypeInt = 21,$/;"	e	enum:spv::Op
OpTypeMatrix	lib/vulkan/spirv.hpp	/^    OpTypeMatrix = 24,$/;"	e	enum:spv::Op
OpTypeNamedBarrier	lib/vulkan/spirv.hpp	/^    OpTypeNamedBarrier = 327,$/;"	e	enum:spv::Op
OpTypeOpaque	lib/vulkan/spirv.hpp	/^    OpTypeOpaque = 31,$/;"	e	enum:spv::Op
OpTypePipe	lib/vulkan/spirv.hpp	/^    OpTypePipe = 38,$/;"	e	enum:spv::Op
OpTypePipeStorage	lib/vulkan/spirv.hpp	/^    OpTypePipeStorage = 322,$/;"	e	enum:spv::Op
OpTypePointer	lib/vulkan/spirv.hpp	/^    OpTypePointer = 32,$/;"	e	enum:spv::Op
OpTypeQueue	lib/vulkan/spirv.hpp	/^    OpTypeQueue = 37,$/;"	e	enum:spv::Op
OpTypeReserveId	lib/vulkan/spirv.hpp	/^    OpTypeReserveId = 36,$/;"	e	enum:spv::Op
OpTypeRuntimeArray	lib/vulkan/spirv.hpp	/^    OpTypeRuntimeArray = 29,$/;"	e	enum:spv::Op
OpTypeSampledImage	lib/vulkan/spirv.hpp	/^    OpTypeSampledImage = 27,$/;"	e	enum:spv::Op
OpTypeSampler	lib/vulkan/spirv.hpp	/^    OpTypeSampler = 26,$/;"	e	enum:spv::Op
OpTypeStruct	lib/vulkan/spirv.hpp	/^    OpTypeStruct = 30,$/;"	e	enum:spv::Op
OpTypeVector	lib/vulkan/spirv.hpp	/^    OpTypeVector = 23,$/;"	e	enum:spv::Op
OpTypeVoid	lib/vulkan/spirv.hpp	/^    OpTypeVoid = 19,$/;"	e	enum:spv::Op
OpUConvert	lib/vulkan/spirv.hpp	/^    OpUConvert = 113,$/;"	e	enum:spv::Op
OpUDiv	lib/vulkan/spirv.hpp	/^    OpUDiv = 134,$/;"	e	enum:spv::Op
OpUGreaterThan	lib/vulkan/spirv.hpp	/^    OpUGreaterThan = 172,$/;"	e	enum:spv::Op
OpUGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpUGreaterThanEqual = 174,$/;"	e	enum:spv::Op
OpULessThan	lib/vulkan/spirv.hpp	/^    OpULessThan = 176,$/;"	e	enum:spv::Op
OpULessThanEqual	lib/vulkan/spirv.hpp	/^    OpULessThanEqual = 178,$/;"	e	enum:spv::Op
OpUMod	lib/vulkan/spirv.hpp	/^    OpUMod = 137,$/;"	e	enum:spv::Op
OpUMulExtended	lib/vulkan/spirv.hpp	/^    OpUMulExtended = 151,$/;"	e	enum:spv::Op
OpUndef	lib/vulkan/spirv.hpp	/^    OpUndef = 1,$/;"	e	enum:spv::Op
OpUnordered	lib/vulkan/spirv.hpp	/^    OpUnordered = 163,$/;"	e	enum:spv::Op
OpUnreachable	lib/vulkan/spirv.hpp	/^    OpUnreachable = 255,$/;"	e	enum:spv::Op
OpVariable	lib/vulkan/spirv.hpp	/^    OpVariable = 59,$/;"	e	enum:spv::Op
OpVectorExtractDynamic	lib/vulkan/spirv.hpp	/^    OpVectorExtractDynamic = 77,$/;"	e	enum:spv::Op
OpVectorInsertDynamic	lib/vulkan/spirv.hpp	/^    OpVectorInsertDynamic = 78,$/;"	e	enum:spv::Op
OpVectorShuffle	lib/vulkan/spirv.hpp	/^    OpVectorShuffle = 79,$/;"	e	enum:spv::Op
OpVectorTimesMatrix	lib/vulkan/spirv.hpp	/^    OpVectorTimesMatrix = 144,$/;"	e	enum:spv::Op
OpVectorTimesScalar	lib/vulkan/spirv.hpp	/^    OpVectorTimesScalar = 142,$/;"	e	enum:spv::Op
OpWritePipe	lib/vulkan/spirv.hpp	/^    OpWritePipe = 275,$/;"	e	enum:spv::Op
Open	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOStream* IOSystem::Open(const std::string& pFile,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& pFile, const std::string& pMode)
Open	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOStream* IOSystem::Open(const std::string& pFile,$/;"	f	class:Assimp::IOSystem	signature:(const std::string& pFile, const std::string& pMode)
OpenProc	lib/__assimp/cfileio.h	/^    aiFileOpenProc OpenProc;$/;"	m	struct:aiFileIO	access:public
OpenProc	lib/assimp/cfileio.h	/^    aiFileOpenProc OpenProc;$/;"	m	struct:aiFileIO	access:public
PACK_STRUCT	lib/__assimp/Compiler/poppack1.h	20;"	d
PACK_STRUCT	lib/__assimp/Compiler/pushpack1.h	27;"	d
PACK_STRUCT	lib/__assimp/Compiler/pushpack1.h	30;"	d
PACK_STRUCT	lib/__assimp/Compiler/pushpack1.h	32;"	d
PACK_STRUCT	lib/__assimp/material.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiUVTransform
PACK_STRUCT	lib/__assimp/texture.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiTexel
PACK_STRUCT	lib/__assimp/vector2.h	/^} PACK_STRUCT;$/;"	v	typeref:class:aiVector2t
PACK_STRUCT	lib/assimp/Compiler/poppack1.h	20;"	d
PACK_STRUCT	lib/assimp/Compiler/pushpack1.h	27;"	d
PACK_STRUCT	lib/assimp/Compiler/pushpack1.h	30;"	d
PACK_STRUCT	lib/assimp/Compiler/pushpack1.h	32;"	d
PACK_STRUCT	lib/assimp/color4.h	/^} PACK_STRUCT;  \/\/ !struct aiColor4D$/;"	v	typeref:class:aiColor4t
PACK_STRUCT	lib/assimp/color4.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiColor4D
PACK_STRUCT	lib/assimp/material.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiUVTransform
PACK_STRUCT	lib/assimp/matrix3x3.h	/^} PACK_STRUCT;$/;"	v	typeref:class:aiMatrix3x3t
PACK_STRUCT	lib/assimp/matrix3x3.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiMatrix3x3
PACK_STRUCT	lib/assimp/matrix4x4.h	/^} PACK_STRUCT;$/;"	v	typeref:class:aiMatrix4x4t
PACK_STRUCT	lib/assimp/matrix4x4.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiMatrix4x4
PACK_STRUCT	lib/assimp/texture.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiTexel
PACK_STRUCT	lib/assimp/types.h	/^} PACK_STRUCT;  \/\/ !struct aiColor3D$/;"	v	typeref:struct:aiColor3D
PACK_STRUCT	lib/assimp/types.h	/^} PACK_STRUCT; \/\/ !struct aiPlane$/;"	v	typeref:struct:aiPlane
PACK_STRUCT	lib/assimp/types.h	/^} PACK_STRUCT; \/\/ !struct aiRay$/;"	v	typeref:struct:aiRay
PACK_STRUCT	lib/assimp/vector2.h	/^} PACK_STRUCT;$/;"	v	typeref:class:aiVector2t
PACK_STRUCT	lib/assimp/vector3.h	/^} PACK_STRUCT;$/;"	v	typeref:class:aiVector3t
PACK_STRUCT	lib/assimp/vector3.h	/^} PACK_STRUCT;$/;"	v	typeref:struct:aiVector3D
PFN_vkAcquireNextImageKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex);$/;"	t
PFN_vkAllocateCommandBuffers	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkAllocateDescriptorSets	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);$/;"	t
PFN_vkAllocateMemory	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkAllocateMemory)(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);$/;"	t
PFN_vkAllocationFunction	lib/vulkan/vulkan.h	/^typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)($/;"	t
PFN_vkBeginCommandBuffer	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo);$/;"	t
PFN_vkBindBufferMemory	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);$/;"	t
PFN_vkBindImageMemory	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);$/;"	t
PFN_vkCmdBeginQuery	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);$/;"	t
PFN_vkCmdBeginRenderPass	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);$/;"	t
PFN_vkCmdBindDescriptorSets	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets);$/;"	t
PFN_vkCmdBindIndexBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);$/;"	t
PFN_vkCmdBindPipeline	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);$/;"	t
PFN_vkCmdBindVertexBuffers	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets);$/;"	t
PFN_vkCmdBlitImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter);$/;"	t
PFN_vkCmdClearAttachments	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects);$/;"	t
PFN_vkCmdClearColorImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);$/;"	t
PFN_vkCmdClearDepthStencilImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);$/;"	t
PFN_vkCmdCopyBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions);$/;"	t
PFN_vkCmdCopyBufferToImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyImageToBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions);$/;"	t
PFN_vkCmdCopyQueryPoolResults	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);$/;"	t
PFN_vkCmdDebugMarkerBeginEXT	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo);$/;"	t
PFN_vkCmdDebugMarkerEndEXT	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);$/;"	t
PFN_vkCmdDebugMarkerInsertEXT	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo);$/;"	t
PFN_vkCmdDispatch	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t x, uint32_t y, uint32_t z);$/;"	t
PFN_vkCmdDispatchIndirect	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);$/;"	t
PFN_vkCmdDraw	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);$/;"	t
PFN_vkCmdDrawIndexed	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);$/;"	t
PFN_vkCmdDrawIndexedIndirect	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);$/;"	t
PFN_vkCmdDrawIndirect	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);$/;"	t
PFN_vkCmdEndQuery	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);$/;"	t
PFN_vkCmdEndRenderPass	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);$/;"	t
PFN_vkCmdExecuteCommands	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkCmdFillBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);$/;"	t
PFN_vkCmdNextSubpass	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);$/;"	t
PFN_vkCmdPipelineBarrier	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);$/;"	t
PFN_vkCmdPushConstants	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues);$/;"	t
PFN_vkCmdResetEvent	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);$/;"	t
PFN_vkCmdResetQueryPool	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);$/;"	t
PFN_vkCmdResolveImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions);$/;"	t
PFN_vkCmdSetBlendConstants	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4]);$/;"	t
PFN_vkCmdSetDepthBias	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);$/;"	t
PFN_vkCmdSetDepthBounds	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);$/;"	t
PFN_vkCmdSetEvent	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);$/;"	t
PFN_vkCmdSetLineWidth	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);$/;"	t
PFN_vkCmdSetScissor	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors);$/;"	t
PFN_vkCmdSetStencilCompareMask	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);$/;"	t
PFN_vkCmdSetStencilReference	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);$/;"	t
PFN_vkCmdSetStencilWriteMask	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);$/;"	t
PFN_vkCmdSetViewport	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports);$/;"	t
PFN_vkCmdUpdateBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData);$/;"	t
PFN_vkCmdWaitEvents	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);$/;"	t
PFN_vkCmdWriteTimestamp	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);$/;"	t
PFN_vkCreateAndroidSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateAndroidSurfaceKHR)(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateBuffer	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateBuffer)(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);$/;"	t
PFN_vkCreateBufferView	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateBufferView)(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView);$/;"	t
PFN_vkCreateCommandPool	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateCommandPool)(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);$/;"	t
PFN_vkCreateComputePipelines	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);$/;"	t
PFN_vkCreateDebugReportCallbackEXT	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);$/;"	t
PFN_vkCreateDescriptorPool	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);$/;"	t
PFN_vkCreateDescriptorSetLayout	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);$/;"	t
PFN_vkCreateDevice	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice);$/;"	t
PFN_vkCreateDisplayModeKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);$/;"	t
PFN_vkCreateDisplayPlaneSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateEvent	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateEvent)(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent);$/;"	t
PFN_vkCreateFence	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateFence)(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);$/;"	t
PFN_vkCreateFramebuffer	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);$/;"	t
PFN_vkCreateGraphicsPipelines	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);$/;"	t
PFN_vkCreateImage	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateImage)(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage);$/;"	t
PFN_vkCreateImageView	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateImageView)(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView);$/;"	t
PFN_vkCreateInstance	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance);$/;"	t
PFN_vkCreateMirSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateMirSurfaceKHR)(VkInstance instance, const VkMirSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreatePipelineCache	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);$/;"	t
PFN_vkCreatePipelineLayout	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);$/;"	t
PFN_vkCreateQueryPool	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);$/;"	t
PFN_vkCreateRenderPass	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass)(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);$/;"	t
PFN_vkCreateSampler	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSampler)(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler);$/;"	t
PFN_vkCreateSemaphore	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSemaphore)(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);$/;"	t
PFN_vkCreateShaderModule	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateShaderModule)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);$/;"	t
PFN_vkCreateSharedSwapchainsKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);$/;"	t
PFN_vkCreateSwapchainKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);$/;"	t
PFN_vkCreateWaylandSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateWaylandSurfaceKHR)(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateWin32SurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateWin32SurfaceKHR)(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateXcbSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateXcbSurfaceKHR)(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkCreateXlibSurfaceKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkCreateXlibSurfaceKHR)(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);$/;"	t
PFN_vkDebugMarkerSetObjectNameEXT	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo);$/;"	t
PFN_vkDebugMarkerSetObjectTagEXT	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo);$/;"	t
PFN_vkDebugReportCallbackEXT	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)($/;"	t
PFN_vkDebugReportMessageEXT	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage);$/;"	t
PFN_vkDestroyBuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyBufferView	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyCommandPool	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDebugReportCallbackEXT	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDescriptorPool	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDescriptorSetLayout	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyDevice	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyEvent	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyFence	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyFramebuffer	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyImage	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyImageView	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyInstance	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipeline	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipelineCache	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyPipelineLayout	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyQueryPool	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyRenderPass	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySampler	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySemaphore	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroyShaderModule	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySurfaceKHR	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDestroySwapchainKHR	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkDeviceWaitIdle	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);$/;"	t
PFN_vkEndCommandBuffer	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);$/;"	t
PFN_vkEnumerateDeviceExtensionProperties	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);$/;"	t
PFN_vkEnumerateDeviceLayerProperties	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties);$/;"	t
PFN_vkEnumerateInstanceExtensionProperties	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);$/;"	t
PFN_vkEnumerateInstanceLayerProperties	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount, VkLayerProperties* pProperties);$/;"	t
PFN_vkEnumeratePhysicalDevices	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);$/;"	t
PFN_vkFlushMappedMemoryRanges	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);$/;"	t
PFN_vkFreeCommandBuffers	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);$/;"	t
PFN_vkFreeDescriptorSets	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets);$/;"	t
PFN_vkFreeFunction	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeFunction)($/;"	t
PFN_vkFreeMemory	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator);$/;"	t
PFN_vkGetBufferMemoryRequirements	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);$/;"	t
PFN_vkGetDeviceMemoryCommitment	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);$/;"	t
PFN_vkGetDeviceProcAddr	lib/vulkan/vulkan.h	/^typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char* pName);$/;"	t
PFN_vkGetDeviceQueue	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);$/;"	t
PFN_vkGetDisplayModePropertiesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);$/;"	t
PFN_vkGetDisplayPlaneCapabilitiesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);$/;"	t
PFN_vkGetDisplayPlaneSupportedDisplaysKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays);$/;"	t
PFN_vkGetEventStatus	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);$/;"	t
PFN_vkGetFenceStatus	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);$/;"	t
PFN_vkGetImageMemoryRequirements	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);$/;"	t
PFN_vkGetImageSparseMemoryRequirements	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);$/;"	t
PFN_vkGetImageSubresourceLayout	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);$/;"	t
PFN_vkGetInstanceProcAddr	lib/vulkan/vulkan.h	/^typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char* pName);$/;"	t
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceFeatures	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);$/;"	t
PFN_vkGetPhysicalDeviceFormatProperties	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);$/;"	t
PFN_vkGetPhysicalDeviceImageFormatProperties	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);$/;"	t
PFN_vkGetPhysicalDeviceMemoryProperties	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);$/;"	t
PFN_vkGetPhysicalDeviceMirPresentationSupportKHR	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceMirPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, MirConnection* connection);$/;"	t
PFN_vkGetPhysicalDeviceProperties	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceQueueFamilyProperties	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);$/;"	t
PFN_vkGetPhysicalDeviceSparseImageFormatProperties	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);$/;"	t
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes);$/;"	t
PFN_vkGetPhysicalDeviceSurfaceSupportKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);$/;"	t
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display);$/;"	t
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);$/;"	t
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id);$/;"	t
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR	lib/vulkan/vulkan.h	/^typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID);$/;"	t
PFN_vkGetPipelineCacheData	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);$/;"	t
PFN_vkGetQueryPoolResults	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);$/;"	t
PFN_vkGetRenderAreaGranularity	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);$/;"	t
PFN_vkGetSwapchainImagesKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages);$/;"	t
PFN_vkInternalAllocationNotification	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)($/;"	t
PFN_vkInternalFreeNotification	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)($/;"	t
PFN_vkInvalidateMappedMemoryRanges	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);$/;"	t
PFN_vkMapMemory	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);$/;"	t
PFN_vkMergePipelineCaches	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches);$/;"	t
PFN_vkNegotiateLoaderICDInterfaceVersion	lib/vulkan/vk_icd.h	/^typedef VkResult (VKAPI_PTR *PFN_vkNegotiateLoaderICDInterfaceVersion)(uint32_t *pVersion);$/;"	t
PFN_vkQueueBindSparse	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence);$/;"	t
PFN_vkQueuePresentKHR	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR* pPresentInfo);$/;"	t
PFN_vkQueueSubmit	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence);$/;"	t
PFN_vkQueueWaitIdle	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);$/;"	t
PFN_vkReallocationFunction	lib/vulkan/vulkan.h	/^typedef void* (VKAPI_PTR *PFN_vkReallocationFunction)($/;"	t
PFN_vkResetCommandBuffer	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);$/;"	t
PFN_vkResetCommandPool	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);$/;"	t
PFN_vkResetDescriptorPool	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);$/;"	t
PFN_vkResetEvent	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);$/;"	t
PFN_vkResetFences	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences);$/;"	t
PFN_vkSetDeviceLoaderData	lib/vulkan/vk_layer.h	/^typedef VkResult (VKAPI_PTR *PFN_vkSetDeviceLoaderData)(VkDevice device,$/;"	t
PFN_vkSetEvent	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);$/;"	t
PFN_vkSetInstanceLoaderData	lib/vulkan/vk_layer.h	/^typedef VkResult (VKAPI_PTR *PFN_vkSetInstanceLoaderData)(VkInstance instance,$/;"	t
PFN_vkUnmapMemory	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);$/;"	t
PFN_vkUpdateDescriptorSets	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies);$/;"	t
PFN_vkVoidFunction	lib/vulkan/vulkan.h	/^typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);$/;"	t
PFN_vkWaitForFences	lib/vulkan/vulkan.h	/^typedef VkResult (VKAPI_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout);$/;"	t
PP_ICL_PTCACHE_SIZE	lib/assimp/config.h	361;"	d
PRINTF_INT16_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	265;"	d
PRINTF_INT16_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	588;"	d
PRINTF_INT16_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	230;"	d
PRINTF_INT16_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	564;"	d
PRINTF_INT16_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	241;"	d
PRINTF_INT16_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	576;"	d
PRINTF_INT16_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	218;"	d
PRINTF_INT16_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	551;"	d
PRINTF_INT16_MODIFIER	lib/__assimp/Compiler/pstdint.h	223;"	d
PRINTF_INT16_MODIFIER	lib/__assimp/Compiler/pstdint.h	401;"	d
PRINTF_INT16_MODIFIER	lib/__assimp/Compiler/pstdint.h	408;"	d
PRINTF_INT16_MODIFIER	lib/__assimp/Compiler/pstdint.h	426;"	d
PRINTF_INT16_MODIFIER	lib/__assimp/Compiler/pstdint.h	432;"	d
PRINTF_INT16_MODIFIER	lib/assimp/Compiler/pstdint.h	206;"	d
PRINTF_INT16_MODIFIER	lib/assimp/Compiler/pstdint.h	337;"	d
PRINTF_INT16_MODIFIER	lib/assimp/Compiler/pstdint.h	343;"	d
PRINTF_INT16_MODIFIER	lib/assimp/Compiler/pstdint.h	430;"	d
PRINTF_INT16_MODIFIER	lib/assimp/Compiler/pstdint.h	437;"	d
PRINTF_INT32_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	259;"	d
PRINTF_INT32_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	585;"	d
PRINTF_INT32_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	227;"	d
PRINTF_INT32_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	561;"	d
PRINTF_INT32_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	235;"	d
PRINTF_INT32_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	573;"	d
PRINTF_INT32_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	215;"	d
PRINTF_INT32_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	548;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	208;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	216;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	218;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	447;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	452;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	459;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	477;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	483;"	d
PRINTF_INT32_MODIFIER	lib/__assimp/Compiler/pstdint.h	489;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	203;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	361;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	367;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	373;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	452;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	457;"	d
PRINTF_INT32_MODIFIER	lib/assimp/Compiler/pstdint.h	464;"	d
PRINTF_INT64_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	253;"	d
PRINTF_INT64_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	582;"	d
PRINTF_INT64_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	224;"	d
PRINTF_INT64_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	558;"	d
PRINTF_INT64_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	229;"	d
PRINTF_INT64_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	570;"	d
PRINTF_INT64_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	212;"	d
PRINTF_INT64_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	545;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	205;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	212;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	512;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	525;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	534;"	d
PRINTF_INT64_MODIFIER	lib/__assimp/Compiler/pstdint.h	543;"	d
PRINTF_INT64_MODIFIER	lib/assimp/Compiler/pstdint.h	200;"	d
PRINTF_INT64_MODIFIER	lib/assimp/Compiler/pstdint.h	488;"	d
PRINTF_INT64_MODIFIER	lib/assimp/Compiler/pstdint.h	502;"	d
PRINTF_INT64_MODIFIER	lib/assimp/Compiler/pstdint.h	510;"	d
PRINTF_INT64_MODIFIER	lib/assimp/Compiler/pstdint.h	518;"	d
PRINTF_INT8_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	271;"	d
PRINTF_INT8_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	591;"	d
PRINTF_INT8_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	233;"	d
PRINTF_INT8_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	567;"	d
PRINTF_INT8_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	247;"	d
PRINTF_INT8_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	579;"	d
PRINTF_INT8_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	221;"	d
PRINTF_INT8_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	554;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	283;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	627;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	643;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	239;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	591;"	d
PRINTF_INTMAX_DEC_WIDTH	lib/assimp/Compiler/pstdint.h	607;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	277;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	624;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	640;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	236;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	588;"	d
PRINTF_INTMAX_HEX_WIDTH	lib/assimp/Compiler/pstdint.h	604;"	d
PRINTF_INTMAX_MODIFIER	lib/__assimp/Compiler/pstdint.h	226;"	d
PRINTF_INTMAX_MODIFIER	lib/__assimp/Compiler/pstdint.h	621;"	d
PRINTF_INTMAX_MODIFIER	lib/__assimp/Compiler/pstdint.h	637;"	d
PRINTF_INTMAX_MODIFIER	lib/assimp/Compiler/pstdint.h	209;"	d
PRINTF_INTMAX_MODIFIER	lib/assimp/Compiler/pstdint.h	585;"	d
PRINTF_INTMAX_MODIFIER	lib/assimp/Compiler/pstdint.h	601;"	d
PRINTF_INTPTR_MODIFIER	lib/__assimp/Compiler/pstdint.h	764;"	d
PRINTF_INTPTR_MODIFIER	lib/assimp/Compiler/pstdint.h	728;"	d
PRINTF_LEAST16_MODIFIER	lib/__assimp/Compiler/pstdint.h	662;"	d
PRINTF_LEAST16_MODIFIER	lib/assimp/Compiler/pstdint.h	626;"	d
PRINTF_LEAST32_MODIFIER	lib/__assimp/Compiler/pstdint.h	661;"	d
PRINTF_LEAST32_MODIFIER	lib/assimp/Compiler/pstdint.h	625;"	d
PRINTF_LEAST64_MODIFIER	lib/__assimp/Compiler/pstdint.h	675;"	d
PRINTF_LEAST64_MODIFIER	lib/assimp/Compiler/pstdint.h	639;"	d
PRINTF_UINT16_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	268;"	d
PRINTF_UINT16_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	600;"	d
PRINTF_UINT16_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	244;"	d
PRINTF_UINT32_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	262;"	d
PRINTF_UINT32_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	597;"	d
PRINTF_UINT32_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	238;"	d
PRINTF_UINT64_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	256;"	d
PRINTF_UINT64_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	594;"	d
PRINTF_UINT64_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	232;"	d
PRINTF_UINT8_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	274;"	d
PRINTF_UINT8_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	603;"	d
PRINTF_UINT8_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	250;"	d
PRINTF_UINTMAX_DEC_WIDTH	lib/__assimp/Compiler/pstdint.h	286;"	d
PRINTF_UINTMAX_HEX_WIDTH	lib/__assimp/Compiler/pstdint.h	280;"	d
PTRDIFF_MAX	lib/__assimp/Compiler/pstdint.h	767;"	d
PTRDIFF_MAX	lib/assimp/Compiler/pstdint.h	731;"	d
PTRDIFF_MIN	lib/__assimp/Compiler/pstdint.h	770;"	d
PTRDIFF_MIN	lib/assimp/Compiler/pstdint.h	734;"	d
Pimpl	lib/__assimp/Importer.hpp	/^    ImporterPimpl* Pimpl() { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:()
Pimpl	lib/__assimp/Importer.hpp	/^    const ImporterPimpl* Pimpl() const { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:() const
Pimpl	lib/assimp/Importer.hpp	/^    ImporterPimpl* Pimpl() { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:()
Pimpl	lib/assimp/Importer.hpp	/^    const ImporterPimpl* Pimpl() const { return pimpl; }$/;"	f	class:Assimp::Importer	access:public	signature:() const
PipelineBuilder	inc/creator/pipeline_builder.h	/^namespace PipelineBuilder$/;"	n
PipelineBuilder::blendAttachmentSrcAlpha	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendAttachmentState blendAttachmentSrcAlpha() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::blendAttachmentStateDisabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendAttachmentState blendAttachmentStateDisabled() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::blendStateDisabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendStateCreateInfo blendStateDisabled($/;"	f	namespace:PipelineBuilder	signature:( VkPipelineColorBlendAttachmentState* attachmentStates, uint32_t attachmentCount)
PipelineBuilder::blendStateEnabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendStateCreateInfo blendStateEnabled($/;"	f	namespace:PipelineBuilder	signature:( VkPipelineColorBlendAttachmentState* attachmentStates, uint32_t attachmentCount)
PipelineBuilder::depthStencilStateDepthLessNoStencil	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateDepthLessNoStencil() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::depthStencilStateDepthLessOrEqualNoStencil	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateDepthLessOrEqualNoStencil() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::depthStencilStateGBufferLightPass	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateGBufferLightPass() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::depthStencilStateGBufferStencilPass	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateGBufferStencilPass() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::dynamicState	inc/creator/pipeline_builder.h	/^inline VkPipelineDynamicStateCreateInfo dynamicState(VkDynamicState* dynamicStates, uint32_t stateCount)$/;"	f	namespace:PipelineBuilder	signature:(VkDynamicState* dynamicStates, uint32_t stateCount)
PipelineBuilder::gBufferColorBlendAttachments	inc/creator/pipeline_builder.h	/^inline std::array<VkPipelineColorBlendAttachmentState, 3> gBufferColorBlendAttachments() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::inputAssemblyNoRestart	inc/creator/pipeline_builder.h	/^inline VkPipelineInputAssemblyStateCreateInfo inputAssemblyNoRestart(VkPrimitiveTopology topology) $/;"	f	namespace:PipelineBuilder	signature:(VkPrimitiveTopology topology)
PipelineBuilder::layout	inc/creator/pipeline_builder.h	/^inline VkPipelineLayoutCreateInfo layout($/;"	f	namespace:PipelineBuilder	signature:( VkDescriptorSetLayout* setLayouts, uint32_t setLayoutCount, VkPushConstantRange* pushConstantRanges, uint32_t pushConstantRangeCount)
PipelineBuilder::multisampleStateNoMultisampleNoSampleShading	inc/creator/pipeline_builder.h	/^inline VkPipelineMultisampleStateCreateInfo multisampleStateNoMultisampleNoSampleShading()$/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::pipelineCache	inc/creator/pipeline_builder.h	/^inline void pipelineCache(const VkDevice& device, const std::vector<char>& cache, VkPipelineCacheCreateInfo& out)$/;"	f	namespace:PipelineBuilder	signature:(const VkDevice& device, const std::vector<char>& cache, VkPipelineCacheCreateInfo& out)
PipelineBuilder::pushConstantRange	inc/creator/pipeline_builder.h	/^inline VkPushConstantRange pushConstantRange(const State& state, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size)$/;"	f	namespace:PipelineBuilder	signature:(const State& state, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size)
PipelineBuilder::rasterizationState	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationState($/;"	f	namespace:PipelineBuilder	signature:( VkCullModeFlags cullMode, VkFrontFace frontFace, VkPolygonMode polygonMode = VK_POLYGON_MODE_FILL, VkBool32 rasterizationDiscardEnable = VK_FALSE)
PipelineBuilder::rasterizationStateCullBackCCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullBackCCW() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::rasterizationStateCullBackCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullBackCW() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::rasterizationStateCullNone	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullNone() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::rasterizationStateCullNoneCCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullNoneCCW() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::rasterizationStateWireframeCullNoneCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateWireframeCullNoneCW() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineBuilder::shaderStage	inc/creator/pipeline_builder.h	/^inline VkPipelineShaderStageCreateInfo shaderStage(VkShaderModule& shaderModule, VkShaderStageFlagBits stage)$/;"	f	namespace:PipelineBuilder	signature:(VkShaderModule& shaderModule, VkShaderStageFlagBits stage)
PipelineBuilder::shaderStage	inc/creator/pipeline_builder.h	/^inline VkPipelineShaderStageCreateInfo shaderStage(const VkDevice& device, const char* path, VkShaderStageFlagBits stage)$/;"	f	namespace:PipelineBuilder	signature:(const VkDevice& device, const char* path, VkShaderStageFlagBits stage)
PipelineBuilder::vertexInputState	inc/creator/pipeline_builder.h	/^inline VkPipelineVertexInputStateCreateInfo vertexInputState($/;"	f	namespace:PipelineBuilder	signature:( VkVertexInputBindingDescription* bindings, uint32_t bindingsCount, VkVertexInputAttributeDescription* attributes, uint32_t attributesCount)
PipelineBuilder::viewportStateDefault	inc/creator/pipeline_builder.h	/^inline VkPipelineViewportStateCreateInfo viewportStateDefault(VkExtent2D& extent)$/;"	f	namespace:PipelineBuilder	signature:(VkExtent2D& extent)
PipelineBuilder::viewportStateDynamic	inc/creator/pipeline_builder.h	/^inline VkPipelineViewportStateCreateInfo viewportStateDynamic() $/;"	f	namespace:PipelineBuilder	signature:()
PipelineCacheInfo	inc/pipeline_cache.h	/^struct PipelineCacheInfo {$/;"	s
PipelineCacheInfo	src/pipeline_cache.cpp	/^PipelineCacheInfo::PipelineCacheInfo(const char* cacheName, VkPipelineCache& pipelineCache):$/;"	f	class:PipelineCacheInfo	signature:(const char* cacheName, VkPipelineCache& pipelineCache)
PipelineCacheInfo::PipelineCacheInfo	src/pipeline_cache.cpp	/^PipelineCacheInfo::PipelineCacheInfo(const char* cacheName, VkPipelineCache& pipelineCache):$/;"	f	class:PipelineCacheInfo	signature:(const char* cacheName, VkPipelineCache& pipelineCache)
PipelineCacheInfo::cacheName	inc/pipeline_cache.h	/^    const char* cacheName;$/;"	m	struct:PipelineCacheInfo	access:public
PipelineCacheInfo::createInfo	inc/pipeline_cache.h	/^    VkPipelineCacheCreateInfo createInfo;$/;"	m	struct:PipelineCacheInfo	access:public
PipelineCacheInfo::data	inc/pipeline_cache.h	/^    std::vector<char> data;$/;"	m	struct:PipelineCacheInfo	access:public
PipelineCacheInfo::getCache	src/pipeline_cache.cpp	/^void PipelineCacheInfo::getCache(const VkDevice& device)$/;"	f	class:PipelineCacheInfo	signature:(const VkDevice& device)
PipelineCacheInfo::hasCache	inc/pipeline_cache.h	/^    bool hasCache;$/;"	m	struct:PipelineCacheInfo	access:public
PipelineCacheInfo::pipelineCache	inc/pipeline_cache.h	/^    VkPipelineCache& pipelineCache;$/;"	m	struct:PipelineCacheInfo	access:public
PipelineCacheInfo::saveCache	src/pipeline_cache.cpp	/^void PipelineCacheInfo::saveCache(const VkDevice& device)$/;"	f	class:PipelineCacheInfo	signature:(const VkDevice& device)
PipelineCreator	/home/al/amvk/inc/creator/pipeline_creator.h	/^namespace PipelineCreator$/;"	n
PipelineCreator::createDeferredPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createDeferredPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createFullscreenQuadPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createFullscreenQuadPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createModelPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createModelPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createPipelines	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createPipelines(State& state, GBuffer& gBuffer)$/;"	f	namespace:PipelineCreator	signature:(State& state, GBuffer& gBuffer)
PipelineCreator::createPointLightPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createPointLightPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createSkinnedPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createSkinnedPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createTQuadPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createTQuadPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineCreator::createTiledRendererPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createTiledRendererPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
PipelineInfo	/home/al/amvk/inc/state.h	/^	PipelineInfo(): $/;"	f	struct:PipelineInfo	access:public	signature:()
PipelineInfo	/home/al/amvk/inc/state.h	/^struct PipelineInfo {$/;"	s
PipelineInfo::PipelineInfo	/home/al/amvk/inc/state.h	/^	PipelineInfo(): $/;"	f	struct:PipelineInfo	access:public	signature:()
PipelineInfo::cache	/home/al/amvk/inc/state.h	/^	VkPipelineCache cache;$/;"	m	struct:PipelineInfo	access:public
PipelineInfo::layout	/home/al/amvk/inc/state.h	/^	VkPipelineLayout layout;$/;"	m	struct:PipelineInfo	access:public
PipelineInfo::pipeline	/home/al/amvk/inc/state.h	/^	VkPipeline pipeline;$/;"	m	struct:PipelineInfo	access:public
Pipelines	/home/al/amvk/inc/state.h	/^struct Pipelines {$/;"	s
Pipelines::deferred	/home/al/amvk/inc/state.h	/^	PipelineInfo deferred;$/;"	m	struct:Pipelines	access:public
Pipelines::fullscreenQuad	/home/al/amvk/inc/state.h	/^	PipelineInfo fullscreenQuad;$/;"	m	struct:Pipelines	access:public
Pipelines::model	/home/al/amvk/inc/state.h	/^	PipelineInfo model;$/;"	m	struct:Pipelines	access:public
Pipelines::pointLight	/home/al/amvk/inc/state.h	/^	PipelineInfo pointLight;$/;"	m	struct:Pipelines	access:public
Pipelines::quad	/home/al/amvk/inc/state.h	/^	PipelineInfo quad;$/;"	m	struct:Pipelines	access:public
Pipelines::skinned	/home/al/amvk/inc/state.h	/^	PipelineInfo skinned;$/;"	m	struct:Pipelines	access:public
Pipelines::tiledRenderer	/home/al/amvk/inc/state.h	/^	PipelineInfo tiledRenderer;$/;"	m	struct:Pipelines	access:public
Pipelines::tquad	/home/al/amvk/inc/state.h	/^	PipelineInfo tquad;$/;"	m	struct:Pipelines	access:public
PointLight	inc/shape/point_light.h	/^class PointLight {$/;"	c
PointLight	src/shape/point_light.cpp	/^PointLight::PointLight(UBO& ubo, LightUBO& lightUbo):$/;"	f	class:PointLight	signature:(UBO& ubo, LightUBO& lightUbo)
PointLight::LightUBO	inc/shape/point_light.h	/^	struct LightUBO {$/;"	s	class:PointLight	access:public
PointLight::LightUBO::color	inc/shape/point_light.h	/^		glm::vec3 color;$/;"	m	struct:PointLight::LightUBO	access:public
PointLight::LightUBO::constant	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
PointLight::LightUBO::linear	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
PointLight::LightUBO::position	inc/shape/point_light.h	/^		glm::vec3 position;$/;"	m	struct:PointLight::LightUBO	access:public
PointLight::LightUBO::quadratic	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
PointLight::LightUBO::specPower	inc/shape/point_light.h	/^		float specPower;$/;"	m	struct:PointLight::LightUBO	access:public
PointLight::PointLight	src/shape/point_light.cpp	/^PointLight::PointLight(UBO& ubo, LightUBO& lightUbo):$/;"	f	class:PointLight	signature:(UBO& ubo, LightUBO& lightUbo)
PointLight::UBO	inc/shape/point_light.h	/^	struct UBO {$/;"	s	class:PointLight	access:public
PointLight::UBO::model	inc/shape/point_light.h	/^	    glm::mat4 model;$/;"	m	struct:PointLight::UBO	access:public
PointLight::getPosition	src/shape/point_light.cpp	/^glm::vec3 PointLight::getPosition() const$/;"	f	class:PointLight	signature:() const
PointLight::getRadius	src/shape/point_light.cpp	/^float PointLight::getRadius() const$/;"	f	class:PointLight	signature:() const
PointLight::init	src/shape/point_light.cpp	/^void PointLight::init(State& state, const glm::vec3& color, const glm::vec3& position, float radius, float specPower \/* = 1.0f *\/)$/;"	f	class:PointLight	signature:(State& state, const glm::vec3& color, const glm::vec3& position, float radius, float specPower )
PointLight::lightUbo	inc/shape/point_light.h	/^	LightUBO* lightUbo;$/;"	m	class:PointLight	access:public
PointLight::mState	inc/shape/point_light.h	/^	State* mState;$/;"	m	class:PointLight	access:private
PointLight::setPosition	src/shape/point_light.cpp	/^void PointLight::setPosition(const glm::vec3& position) $/;"	f	class:PointLight	signature:(const glm::vec3& position)
PointLight::setRadius	src/shape/point_light.cpp	/^void PointLight::setRadius(float radius) $/;"	f	class:PointLight	signature:(float radius)
PointLight::ubo	inc/shape/point_light.h	/^	UBO* ubo;$/;"	m	class:PointLight	access:public
PointLightInfo	inc/scene_lights.h	/^	struct PointLightInfo {$/;"	s	class:SceneLights	access:public
PopDirectory	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::PopDirectory() {$/;"	f	class:Assimp::IOSystem	signature:()
PopDirectory	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::PopDirectory() {$/;"	f	class:Assimp::IOSystem	signature:()
ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^    ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:protected	signature:()
ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^class ASSIMP_API ProgressHandler$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
ProgressHandler	lib/assimp/ProgressHandler.hpp	/^    ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:protected	signature:()
ProgressHandler	lib/assimp/ProgressHandler.hpp	/^class ASSIMP_API ProgressHandler$/;"	c	namespace:Assimp	inherits:Intern::AllocateFromAssimpHeap
PushConstants	inc/shape/tquad.h	/^	struct PushConstants {$/;"	s	class:TQuad	access:public
PushDirectory	lib/__assimp/IOSystem.hpp	/^inline bool IOSystem::PushDirectory( const std::string &path ) {$/;"	f	class:Assimp::IOSystem	signature:( const std::string &path )
PushDirectory	lib/assimp/IOSystem.hpp	/^inline bool IOSystem::PushDirectory( const std::string &path ) {$/;"	f	class:Assimp::IOSystem	signature:( const std::string &path )
Q	lib/__assimp/Compiler/pstdint.h	893;"	d
Quad	inc/shape/quad.h	/^class Quad {$/;"	c
QueueBindSparse	lib/vulkan/vk_layer.h	/^    PFN_vkQueueBindSparse QueueBindSparse;$/;"	m	struct:VkLayerDispatchTable_	access:public
QueueIndices	inc/device_manager.h	/^	struct QueueIndices {$/;"	s	class:DeviceManager	access:public
QueuePresentKHR	lib/vulkan/vk_layer.h	/^    PFN_vkQueuePresentKHR QueuePresentKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
QueueSubmit	lib/vulkan/vk_layer.h	/^    PFN_vkQueueSubmit QueueSubmit;$/;"	m	struct:VkLayerDispatchTable_	access:public
QueueWaitIdle	lib/vulkan/vk_layer.h	/^    PFN_vkQueueWaitIdle QueueWaitIdle;$/;"	m	struct:VkLayerDispatchTable_	access:public
REPORTERROR	lib/__assimp/Compiler/pstdint.h	828;"	d
RESOURCE_DIR	inc/file_manager.h	/^	static constexpr const char* RESOURCE_DIR = "";$/;"	m	class:FileManager	access:private
RESOURCE_DIR	inc/file_manager.h	/^	static constexpr const char* RESOURCE_DIR = "res\/";$/;"	m	class:FileManager	access:private
RIGHT	inc/camera.h	/^    const static glm::vec3 UP, RIGHT;$/;"	m	class:Camera	access:private
RIGHT	src/camera.cpp	/^const glm::vec3 Camera::RIGHT = glm::vec3(1.0f, 0.0f, 0.0f);$/;"	m	class:Camera	file:
RM	Makefile	/^RM=rm -f$/;"	m
ReadFile	lib/__assimp/Importer.hpp	/^AI_FORCE_INLINE const aiScene* Importer::ReadFile( const std::string& pFile,unsigned int pFlags){$/;"	f	class:Assimp::Importer	signature:( const std::string& pFile,unsigned int pFlags)
ReadFile	lib/assimp/Importer.hpp	/^AI_FORCE_INLINE const aiScene* Importer::ReadFile( const std::string& pFile,unsigned int pFlags){$/;"	f	class:Assimp::Importer	signature:( const std::string& pFile,unsigned int pFlags)
ReadProc	lib/__assimp/cfileio.h	/^    aiFileReadProc ReadProc;$/;"	m	struct:aiFile	access:public
ReadProc	lib/assimp/cfileio.h	/^    aiFileReadProc ReadProc;$/;"	m	struct:aiFile	access:public
Renderer	inc/renderer.h	/^class Renderer {$/;"	c
Renderer	src/renderer.cpp	/^Renderer::Renderer(Window& window):$/;"	f	class:Renderer	signature:(Window& window)
Renderer::Renderer	src/renderer.cpp	/^Renderer::Renderer(Window& window):$/;"	f	class:Renderer	signature:(Window& window)
Renderer::buildCommandBuffers	src/renderer.cpp	/^void Renderer::buildCommandBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
Renderer::buildComputeBuffers	src/renderer.cpp	/^void Renderer::buildComputeBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
Renderer::buildGBuffers	src/renderer.cpp	/^void Renderer::buildGBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
Renderer::createSemaphores	src/renderer.cpp	/^void Renderer::createSemaphores()$/;"	f	class:Renderer	signature:()
Renderer::draw	src/renderer.cpp	/^void Renderer::draw()$/;"	f	class:Renderer	signature:()
Renderer::dwarf	inc/renderer.h	/^	Skinned dwarf;$/;"	m	class:Renderer	access:private
Renderer::fullscreenQuad	inc/renderer.h	/^	FullscreenQuad fullscreenQuad;$/;"	m	class:Renderer	access:private
Renderer::gBuffer	inc/renderer.h	/^	GBuffer gBuffer;$/;"	m	class:Renderer	access:private
Renderer::guard	inc/renderer.h	/^	Skinned guard;$/;"	m	class:Renderer	access:private
Renderer::imageAquiredSemaphore	inc/renderer.h	/^	VkSemaphore imageAquiredSemaphore;$/;"	m	class:Renderer	access:private
Renderer::imageIndex	inc/renderer.h	/^	uint32_t imageIndex;$/;"	m	class:Renderer	access:private
Renderer::init	src/renderer.cpp	/^void Renderer::init()$/;"	f	class:Renderer	signature:()
Renderer::mDeviceManager	inc/renderer.h	/^	DeviceManager mDeviceManager;$/;"	m	class:Renderer	access:private
Renderer::mState	inc/renderer.h	/^	State mState;$/;"	m	class:Renderer	access:private
Renderer::mSwapChainManager	inc/renderer.h	/^	SwapchainManager mSwapChainManager;$/;"	m	class:Renderer	access:private
Renderer::mWindow	inc/renderer.h	/^	Window& mWindow;$/;"	m	class:Renderer	access:private
Renderer::offscreenSemaphore	inc/renderer.h	/^	VkSemaphore offscreenSemaphore;$/;"	m	class:Renderer	access:private
Renderer::onWindowSizeChanged	src/renderer.cpp	/^void Renderer::onWindowSizeChanged(uint32_t width, uint32_t height)$/;"	f	class:Renderer	signature:(uint32_t width, uint32_t height)
Renderer::recreateSwapChain	src/renderer.cpp	/^void Renderer::recreateSwapChain()$/;"	f	class:Renderer	signature:()
Renderer::renderFinishedSemaphore	inc/renderer.h	/^	VkSemaphore renderFinishedSemaphore;$/;"	m	class:Renderer	access:private
Renderer::sceneLights	inc/renderer.h	/^	SceneLights sceneLights;$/;"	m	class:Renderer	access:private
Renderer::suit	inc/renderer.h	/^	Model suit;$/;"	m	class:Renderer	access:private
Renderer::tquad	inc/renderer.h	/^	TQuad tquad;$/;"	m	class:Renderer	access:private
Renderer::updateUniformBuffers	src/renderer.cpp	/^void Renderer::updateUniformBuffers(const Timer& timer, Camera& camera)$/;"	f	class:Renderer	signature:(const Timer& timer, Camera& camera)
Renderer::waitIdle	src/renderer.cpp	/^void Renderer::waitIdle()$/;"	f	class:Renderer	signature:()
Renderer::~Renderer	src/renderer.cpp	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
ResetCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkResetCommandBuffer ResetCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
ResetCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkResetCommandPool ResetCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
ResetDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkResetDescriptorPool ResetDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
ResetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkResetEvent ResetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
ResetFences	lib/vulkan/vk_layer.h	/^    PFN_vkResetFences ResetFences;$/;"	m	struct:VkLayerDispatchTable_	access:public
Revision	lib/vulkan/spirv.hpp	/^static const unsigned int Revision = 2;$/;"	m	namespace:spv
SAMPLER_LIST_SIZE	inc/macro.h	48;"	d
SHADER_DIR	inc/file_manager.h	/^	static constexpr const char* SHADER_DIR = "shader\/spv\/";$/;"	m	class:FileManager	access:private
SHADER_DIR	inc/file_manager.h	/^	static constexpr const char* SHADER_DIR = "shaders\/";$/;"	m	class:FileManager	access:private
SHADER_SPV_DIR	Makefile	/^SHADER_SPV_DIR := shader\/spv$/;"	m
SIG_ATOMIC_MAX	lib/__assimp/Compiler/pstdint.h	802;"	d
SIG_ATOMIC_MAX	lib/assimp/Compiler/pstdint.h	773;"	d
SIZE_MAX	lib/__assimp/Compiler/pstdint.h	358;"	d
SIZE_MAX	lib/__assimp/Defines.h	43;"	d
SIZE_MAX	lib/assimp/Compiler/pstdint.h	297;"	d
SPIRV_TOOLS_LIBSPIRV_H_	lib/vulkan/libspirv.h	28;"	d
SPV_BINARY_TO_TEXT_OPTION_COLOR	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_COLOR = SPV_BIT(2),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BINARY_TO_TEXT_OPTION_INDENT	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_INDENT = SPV_BIT(3),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BINARY_TO_TEXT_OPTION_NONE	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_NONE = SPV_BIT(0),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BINARY_TO_TEXT_OPTION_NO_HEADER	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_NO_HEADER = SPV_BIT(5),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BINARY_TO_TEXT_OPTION_PRINT	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_PRINT = SPV_BIT(1),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BINARY_TO_TEXT_OPTION_SHOW_BYTE_OFFSET	lib/vulkan/libspirv.h	/^  SPV_BINARY_TO_TEXT_OPTION_SHOW_BYTE_OFFSET = SPV_BIT(4),$/;"	e	enum:spv_binary_to_text_options_t
SPV_BIT	lib/vulkan/libspirv.h	41;"	d
SPV_ENDIANNESS_BIG	lib/vulkan/libspirv.h	/^  SPV_ENDIANNESS_BIG,$/;"	e	enum:spv_endianness_t
SPV_ENDIANNESS_LITTLE	lib/vulkan/libspirv.h	/^  SPV_ENDIANNESS_LITTLE,$/;"	e	enum:spv_endianness_t
SPV_END_OF_STREAM	lib/vulkan/libspirv.h	/^  SPV_END_OF_STREAM = 2,$/;"	e	enum:spv_result_t
SPV_ENV_UNIVERSAL_1_0	lib/vulkan/libspirv.h	/^  SPV_ENV_UNIVERSAL_1_0,  \/\/ SPIR-V 1.0 latest revision, no other restrictions.$/;"	e	enum:__anon84
SPV_ENV_UNIVERSAL_1_1	lib/vulkan/libspirv.h	/^  SPV_ENV_UNIVERSAL_1_1,  \/\/ SPIR-V 1.1 latest revision, no other restrictions.$/;"	e	enum:__anon84
SPV_ENV_VULKAN_1_0	lib/vulkan/libspirv.h	/^  SPV_ENV_VULKAN_1_0,     \/\/ Vulkan 1.0 latest revision.$/;"	e	enum:__anon84
SPV_ERROR_INTERNAL	lib/vulkan/libspirv.h	/^  SPV_ERROR_INTERNAL = -1,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_BINARY	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_BINARY = -4,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_CAPABILITY	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_CAPABILITY = -13,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_CFG	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_CFG = -11,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_DIAGNOSTIC	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_DIAGNOSTIC = -8,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_ID	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_ID = -10,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_LAYOUT	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_LAYOUT = -12,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_LOOKUP	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_LOOKUP = -9,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_POINTER	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_POINTER = -3,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_TABLE	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_TABLE = -6,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_TEXT	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_TEXT = -5,$/;"	e	enum:spv_result_t
SPV_ERROR_INVALID_VALUE	lib/vulkan/libspirv.h	/^  SPV_ERROR_INVALID_VALUE = -7,$/;"	e	enum:spv_result_t
SPV_ERROR_OUT_OF_MEMORY	lib/vulkan/libspirv.h	/^  SPV_ERROR_OUT_OF_MEMORY = -2,$/;"	e	enum:spv_result_t
SPV_EXT_INST_TYPE_GLSL_STD_450	lib/vulkan/libspirv.h	/^  SPV_EXT_INST_TYPE_GLSL_STD_450,$/;"	e	enum:spv_ext_inst_type_t
SPV_EXT_INST_TYPE_NONE	lib/vulkan/libspirv.h	/^  SPV_EXT_INST_TYPE_NONE = 0,$/;"	e	enum:spv_ext_inst_type_t
SPV_EXT_INST_TYPE_OPENCL_STD	lib/vulkan/libspirv.h	/^  SPV_EXT_INST_TYPE_OPENCL_STD,$/;"	e	enum:spv_ext_inst_type_t
SPV_FAILED_MATCH	lib/vulkan/libspirv.h	/^  SPV_FAILED_MATCH = 4,$/;"	e	enum:spv_result_t
SPV_FORCE_16_BIT_ENUM	lib/vulkan/libspirv.h	43;"	d
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	/^  SPV_FORCE_32_BIT_ENUM(spv_binary_to_text_options_t)$/;"	e	enum:spv_binary_to_text_options_t
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	/^  SPV_FORCE_32_BIT_ENUM(spv_endianness_t)$/;"	e	enum:spv_endianness_t
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	/^  SPV_FORCE_32_BIT_ENUM(spv_ext_inst_type_t)$/;"	e	enum:spv_ext_inst_type_t
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	/^  SPV_FORCE_32_BIT_ENUM(spv_operand_type_t)$/;"	e	enum:spv_operand_type_t
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	/^  SPV_FORCE_32_BIT_ENUM(spv_result_t)$/;"	e	enum:spv_result_t
SPV_FORCE_32_BIT_ENUM	lib/vulkan/libspirv.h	44;"	d
SPV_NUMBER_FLOATING	lib/vulkan/libspirv.h	/^  SPV_NUMBER_FLOATING,$/;"	e	enum:spv_number_kind_t
SPV_NUMBER_NONE	lib/vulkan/libspirv.h	/^  SPV_NUMBER_NONE = 0,  \/\/ The default for value initialization.$/;"	e	enum:spv_number_kind_t
SPV_NUMBER_SIGNED_INT	lib/vulkan/libspirv.h	/^  SPV_NUMBER_SIGNED_INT,$/;"	e	enum:spv_number_kind_t
SPV_NUMBER_UNSIGNED_INT	lib/vulkan/libspirv.h	/^  SPV_NUMBER_UNSIGNED_INT,$/;"	e	enum:spv_number_kind_t
SPV_OPERAND_TYPE_ACCESS_QUALIFIER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_ACCESS_QUALIFIER,              \/\/ SPIR-V Sec 3.18$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_ADDRESSING_MODEL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_ADDRESSING_MODEL,              \/\/ SPIR-V Sec 3.4$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_BUILT_IN	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_BUILT_IN,                      \/\/ SPIR-V Sec 3.21$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_CAPABILITY	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_CAPABILITY,                    \/\/ SPIR-V Sec 3.31$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_DECORATION	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_DECORATION,                    \/\/ SPIR-V Sec 3.20$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_DIMENSIONALITY	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_DIMENSIONALITY,                \/\/ SPIR-V Sec 3.8$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_EXECUTION_MODE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_EXECUTION_MODE,                \/\/ SPIR-V Sec 3.6$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_EXECUTION_MODEL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_EXECUTION_MODEL,               \/\/ SPIR-V Sec 3.3$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_EXTENSION_INSTRUCTION_NUMBER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_EXTENSION_INSTRUCTION_NUMBER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_FP_FAST_MATH_MODE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_FP_FAST_MATH_MODE,             \/\/ SPIR-V Sec 3.15$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_FP_ROUNDING_MODE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_FP_ROUNDING_MODE,              \/\/ SPIR-V Sec 3.16$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_FUNCTION_CONTROL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_FUNCTION_CONTROL,              \/\/ SPIR-V Sec 3.24$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_FUNCTION_PARAMETER_ATTRIBUTE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_FUNCTION_PARAMETER_ATTRIBUTE,  \/\/ SPIR-V Sec 3.19$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_GROUP_OPERATION	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_GROUP_OPERATION,               \/\/ SPIR-V Sec 3.28$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_IMAGE_CHANNEL_DATA_TYPE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_IMAGE_CHANNEL_DATA_TYPE,       \/\/ SPIR-V Sec 3.13$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_IMAGE_CHANNEL_ORDER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_IMAGE_CHANNEL_ORDER,           \/\/ SPIR-V Sec 3.12$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_KERNEL_ENQ_FLAGS	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_KERNEL_ENQ_FLAGS,              \/\/ SPIR-V Sec 3.29$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_KERNEL_PROFILING_INFO	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_KERNEL_PROFILING_INFO,         \/\/ SPIR-V Sec 3.30$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_LAST_CONCRETE_MASK_TYPE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_LAST_CONCRETE_MASK_TYPE =$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_LINKAGE_TYPE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_LINKAGE_TYPE,                  \/\/ SPIR-V Sec 3.17$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_LITERAL_INTEGER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_LITERAL_INTEGER,  \/\/ Always unsigned 32-bits.$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_LITERAL_STRING	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_LITERAL_STRING,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_LOOP_CONTROL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_LOOP_CONTROL,                  \/\/ SPIR-V Sec 3.23$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_MEMORY_MODEL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_MEMORY_MODEL,                  \/\/ SPIR-V Sec 3.5$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID,  \/\/ SPIR-V Sec 3.25$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_NONE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_NONE = 0,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_NUM_OPERAND_TYPES	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_NUM_OPERAND_TYPES,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_ACCESS_QUALIFIER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_ACCESS_QUALIFIER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_CIV	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_CIV,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_IMAGE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_IMAGE,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_LITERAL_INTEGER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_LITERAL_INTEGER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_LITERAL_NUMBER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_LITERAL_NUMBER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_LITERAL_STRING	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_LITERAL_STRING,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_MEMORY_ACCESS	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_MEMORY_ACCESS,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_OPTIONAL_TYPED_LITERAL_INTEGER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_OPTIONAL_TYPED_LITERAL_INTEGER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_RESULT_ID	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_RESULT_ID,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SAMPLER_ADDRESSING_MODE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SAMPLER_ADDRESSING_MODE,       \/\/ SPIR-V Sec 3.9$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SAMPLER_FILTER_MODE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SAMPLER_FILTER_MODE,           \/\/ SPIR-V Sec 3.10$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SAMPLER_IMAGE_FORMAT	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SAMPLER_IMAGE_FORMAT,          \/\/ SPIR-V Sec 3.11$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SCOPE_ID	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SCOPE_ID,             \/\/ SPIR-V Sec 3.27$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SELECTION_CONTROL	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SELECTION_CONTROL,             \/\/ SPIR-V Sec 3.22$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SOURCE_LANGUAGE	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SOURCE_LANGUAGE,               \/\/ SPIR-V Sec 3.2$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_SPEC_CONSTANT_OP_NUMBER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_SPEC_CONSTANT_OP_NUMBER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_STORAGE_CLASS	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_STORAGE_CLASS,                 \/\/ SPIR-V Sec 3.7$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_TYPED_LITERAL_NUMBER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_TYPED_LITERAL_NUMBER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_TYPE_ID	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_TYPE_ID,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_VARIABLE_LITERAL_INTEGER	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_VARIABLE_LITERAL_INTEGER,$/;"	e	enum:spv_operand_type_t
SPV_OPERAND_TYPE_VARIABLE_LITERAL_INTEGER_ID	lib/vulkan/libspirv.h	/^  SPV_OPERAND_TYPE_VARIABLE_LITERAL_INTEGER_ID,$/;"	e	enum:spv_operand_type_t
SPV_REQUESTED_TERMINATION	lib/vulkan/libspirv.h	/^  SPV_REQUESTED_TERMINATION = 5,  \/\/ Success, but signals early termination.$/;"	e	enum:spv_result_t
SPV_REVISION	lib/vulkan/spirv.h	54;"	d
SPV_REVISION	lib/vulkan/spirv.hpp	50;"	d
SPV_SUCCESS	lib/vulkan/libspirv.h	/^  SPV_SUCCESS = 0,$/;"	e	enum:spv_result_t
SPV_UNSUPPORTED	lib/vulkan/libspirv.h	/^  SPV_UNSUPPORTED = 1,$/;"	e	enum:spv_result_t
SPV_VERSION	lib/vulkan/spirv.h	53;"	d
SPV_VERSION	lib/vulkan/spirv.hpp	49;"	d
SPV_WARNING	lib/vulkan/libspirv.h	/^  SPV_WARNING = 3,$/;"	e	enum:spv_result_t
SRCS	Makefile	/^SRCS= $(foreach dir, $(SRC_DIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
SRCS_NO_PATH	Makefile	/^SRCS_NO_PATH = $(notdir $(SRCS))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR := src$/;"	m
SRC_DIRS	Makefile	/^SRC_DIRS := src src\/shape$/;"	m
STBIDEF	lib/stb/stb_image.h	415;"	d
STBIDEF	lib/stb/stb_image.h	417;"	d
STBI_ASSERT	lib/stb/stb_image.h	580;"	d
STBI_FREE	lib/stb/stb_image.h	638;"	d
STBI_HAS_LROTL	lib/stb/stb_image.h	618;"	d
STBI_INCLUDE_STB_IMAGE_H	lib/stb/stb_image.h	220;"	d
STBI_MALLOC	lib/stb/stb_image.h	636;"	d
STBI_NEON	lib/stb/stb_image.h	729;"	d
STBI_NOTUSED	lib/stb/stb_image.h	612;"	d
STBI_NOTUSED	lib/stb/stb_image.h	614;"	d
STBI_NO_BMP	lib/stb/stb_image.h	538;"	d
STBI_NO_GIF	lib/stb/stb_image.h	547;"	d
STBI_NO_HDR	lib/stb/stb_image.h	550;"	d
STBI_NO_JPEG	lib/stb/stb_image.h	532;"	d
STBI_NO_PIC	lib/stb/stb_image.h	553;"	d
STBI_NO_PNG	lib/stb/stb_image.h	535;"	d
STBI_NO_PNM	lib/stb/stb_image.h	556;"	d
STBI_NO_PSD	lib/stb/stb_image.h	541;"	d
STBI_NO_SIMD	lib/stb/stb_image.h	658;"	d
STBI_NO_SIMD	lib/stb/stb_image.h	673;"	d
STBI_NO_TGA	lib/stb/stb_image.h	544;"	d
STBI_NO_ZLIB	lib/stb/stb_image.h	561;"	d
STBI_REALLOC	lib/stb/stb_image.h	637;"	d
STBI_REALLOC_SIZED	lib/stb/stb_image.h	642;"	d
STBI_SIMD_ALIGN	lib/stb/stb_image.h	703;"	d
STBI_SIMD_ALIGN	lib/stb/stb_image.h	711;"	d
STBI_SIMD_ALIGN	lib/stb/stb_image.h	735;"	d
STBI_SIMD_ALIGN	lib/stb/stb_image.h	739;"	d
STBI_SSE2	lib/stb/stb_image.h	677;"	d
STBI_VERSION	lib/stb/stb_image.h	396;"	d
STBI__BYTECAST	lib/stb/stb_image.h	1322;"	d
STBI__F_avg	lib/stb/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon70
STBI__F_avg_first	lib/stb/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon70
STBI__F_none	lib/stb/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon70
STBI__F_paeth	lib/stb/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon70
STBI__F_paeth_first	lib/stb/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon70
STBI__F_sub	lib/stb/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon70
STBI__F_up	lib/stb/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon70
STBI__HDR_BUFLEN	lib/stb/stb_image.h	6089;"	d
STBI__IDCT_1D	lib/stb/stb_image.h	1932;"	d
STBI__MARKER_none	lib/stb/stb_image.h	2417;"	d
STBI__PNG_TYPE	lib/stb/stb_image.h	4419;"	d
STBI__RESTART	lib/stb/stb_image.h	2434;"	d
STBI__SCAN_header	lib/stb/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon61
STBI__SCAN_load	lib/stb/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon61
STBI__SCAN_type	lib/stb/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon61
STBI__X64_TARGET	lib/stb/stb_image.h	647;"	d
STBI__X86_TARGET	lib/stb/stb_image.h	649;"	d
STBI__ZFAST_BITS	lib/stb/stb_image.h	3482;"	d
STBI__ZFAST_MASK	lib/stb/stb_image.h	3483;"	d
STBI_default	lib/stb/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon58
STBI_grey	lib/stb/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon58
STBI_grey_alpha	lib/stb/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon58
STBI_rgb	lib/stb/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon58
STBI_rgb_alpha	lib/stb/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon58
STB_IMAGE_IMPLEMENTATION	src/texture_data.cpp	2;"	d	file:
STDINT_H_UINTPTR_T_DEFINED	lib/__assimp/Compiler/pstdint.h	740;"	d
STDINT_H_UINTPTR_T_DEFINED	lib/__assimp/Compiler/pstdint.h	794;"	d
STDINT_H_UINTPTR_T_DEFINED	lib/assimp/Compiler/pstdint.h	706;"	d
STDINT_H_UINTPTR_T_DEFINED	lib/assimp/Compiler/pstdint.h	765;"	d
STR	lib/__assimp/Compiler/pstdint.h	892;"	d
SamplerAddressingMode	lib/vulkan/spirv.hpp	/^enum SamplerAddressingMode {$/;"	g	namespace:spv
SamplerAddressingModeClamp	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeClamp = 2,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeClampToEdge	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeClampToEdge = 1,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeMax	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeNone	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeNone = 0,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeRepeat	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeRepeat = 3,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeRepeatMirrored	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeRepeatMirrored = 4,$/;"	e	enum:spv::SamplerAddressingMode
SamplerFilterMode	lib/vulkan/spirv.hpp	/^enum SamplerFilterMode {$/;"	g	namespace:spv
SamplerFilterModeLinear	lib/vulkan/spirv.hpp	/^    SamplerFilterModeLinear = 1,$/;"	e	enum:spv::SamplerFilterMode
SamplerFilterModeMax	lib/vulkan/spirv.hpp	/^    SamplerFilterModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerFilterMode
SamplerFilterModeNearest	lib/vulkan/spirv.hpp	/^    SamplerFilterModeNearest = 0,$/;"	e	enum:spv::SamplerFilterMode
SceneLights	inc/scene_lights.h	/^class SceneLights {$/;"	c
SceneLights	src/scene_lights.cpp	/^SceneLights::SceneLights(State& state):$/;"	f	class:SceneLights	signature:(State& state)
SceneLights::NUM_DYNAMIC_OFFSETS	inc/scene_lights.h	/^	static const constexpr uint32_t NUM_DYNAMIC_OFFSETS = 2;$/;"	m	class:SceneLights	access:public
SceneLights::NUM_POINT_LIGHT_DESCRIPTORS	inc/scene_lights.h	/^	static const constexpr uint32_t NUM_POINT_LIGHT_DESCRIPTORS = 3;$/;"	m	class:SceneLights	access:public
SceneLights::PointLightInfo	inc/scene_lights.h	/^	struct PointLightInfo {$/;"	s	class:SceneLights	access:public
SceneLights::PointLightInfo::lightOffset	inc/scene_lights.h	/^		VkDeviceSize lightOffset;$/;"	m	struct:SceneLights::PointLightInfo	access:public
SceneLights::PointLightInfo::uboOffset	inc/scene_lights.h	/^		VkDeviceSize uboOffset;$/;"	m	struct:SceneLights::PointLightInfo	access:public
SceneLights::SceneLights	src/scene_lights.cpp	/^SceneLights::SceneLights(State& state):$/;"	f	class:SceneLights	signature:(State& state)
SceneLights::addLight	src/scene_lights.cpp	/^void SceneLights::addLight(PointLight& light) $/;"	f	class:SceneLights	signature:(PointLight& light)
SceneLights::calcAlignment	src/scene_lights.cpp	/^VkDeviceSize SceneLights::calcAlignment(uint32_t structSize) $/;"	f	class:SceneLights	signature:(uint32_t structSize)
SceneLights::createDescriptorPool	src/scene_lights.cpp	/^void SceneLights::createDescriptorPool() $/;"	f	class:SceneLights	signature:()
SceneLights::createDescriptorSets	src/scene_lights.cpp	/^void SceneLights::createDescriptorSets() $/;"	f	class:SceneLights	signature:()
SceneLights::createPointLight	src/scene_lights.cpp	/^PointLight& SceneLights::createPointLight() $/;"	f	class:SceneLights	signature:()
SceneLights::createPointLight	src/scene_lights.cpp	/^PointLight& SceneLights::createPointLight(PointLight::UBO& ubo, PointLight::LightUBO& lightUbo) $/;"	f	class:SceneLights	signature:(PointLight::UBO& ubo, PointLight::LightUBO& lightUbo)
SceneLights::createUniformBuffer	src/scene_lights.cpp	/^void SceneLights::createUniformBuffer() $/;"	f	class:SceneLights	signature:()
SceneLights::descriptors	inc/scene_lights.h	/^	std::array<VkDescriptorSet, NUM_POINT_LIGHT_DESCRIPTORS> descriptors;$/;"	m	class:SceneLights	access:private
SceneLights::draw	src/scene_lights.cpp	/^void SceneLights::draw(VkCommandBuffer& cmdBuffer)$/;"	f	class:SceneLights	signature:(VkCommandBuffer& cmdBuffer)
SceneLights::init	src/scene_lights.cpp	/^void SceneLights::init() $/;"	f	class:SceneLights	signature:()
SceneLights::lightSet	inc/scene_lights.h	/^	VkDescriptorSet lightSet;$/;"	m	class:SceneLights	access:private
SceneLights::mDescriptorPool	inc/scene_lights.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:SceneLights	access:private
SceneLights::mDynamicAlignmentSize	inc/scene_lights.h	/^	uint32_t mDynamicAlignmentSize;$/;"	m	class:SceneLights	access:private
SceneLights::mSphere	inc/scene_lights.h	/^	Sphere mSphere;$/;"	m	class:SceneLights	access:private
SceneLights::mState	inc/scene_lights.h	/^	State* mState;$/;"	m	class:SceneLights	access:private
SceneLights::mUniformBufferInfo	inc/scene_lights.h	/^	BufferInfo mUniformBufferInfo;$/;"	m	class:SceneLights	access:private
SceneLights::modelSet	inc/scene_lights.h	/^	VkDescriptorSet modelSet;$/;"	m	class:SceneLights	access:private
SceneLights::offsetLightUbos	inc/scene_lights.h	/^	VkDeviceSize offsetLightUbos;$/;"	m	class:SceneLights	access:private
SceneLights::offsetUbos	inc/scene_lights.h	/^	VkDeviceSize offsetUbos;$/;"	m	class:SceneLights	access:private
SceneLights::pointLightInfos	inc/scene_lights.h	/^	std::vector<PointLightInfo> pointLightInfos;$/;"	m	class:SceneLights	access:private
SceneLights::pointLightLightAlignment	inc/scene_lights.h	/^	VkDeviceSize pointLightLightAlignment;$/;"	m	class:SceneLights	access:private
SceneLights::pointLightLightUbos	inc/scene_lights.h	/^	std::vector<PointLight::LightUBO> pointLightLightUbos;$/;"	m	class:SceneLights	access:private
SceneLights::pointLightUboAlignment	inc/scene_lights.h	/^	VkDeviceSize pointLightUboAlignment;$/;"	m	class:SceneLights	access:private
SceneLights::pointLightUbos	inc/scene_lights.h	/^	std::vector<PointLight::UBO> pointLightUbos;$/;"	m	class:SceneLights	access:private
SceneLights::pointLights	inc/scene_lights.h	/^	std::vector<PointLight> pointLights;$/;"	m	class:SceneLights	access:private
SceneLights::sceneAlignment	inc/scene_lights.h	/^	VkDeviceSize sceneAlignment;$/;"	m	class:SceneLights	access:private
SceneLights::sceneSet	inc/scene_lights.h	/^	VkDescriptorSet sceneSet;$/;"	m	class:SceneLights	access:private
SceneLights::ubo	inc/scene_lights.h	/^	char* ubo;$/;"	m	class:SceneLights	access:private
SceneLights::update	src/scene_lights.cpp	/^void SceneLights::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:SceneLights	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
SceneLights::~SceneLights	src/scene_lights.cpp	/^SceneLights::~SceneLights() $/;"	f	class:SceneLights	signature:()
Scope	lib/vulkan/spirv.hpp	/^enum Scope {$/;"	g	namespace:spv
ScopeCrossDevice	lib/vulkan/spirv.hpp	/^    ScopeCrossDevice = 0,$/;"	e	enum:spv::Scope
ScopeDevice	lib/vulkan/spirv.hpp	/^    ScopeDevice = 1,$/;"	e	enum:spv::Scope
ScopeInvocation	lib/vulkan/spirv.hpp	/^    ScopeInvocation = 4,$/;"	e	enum:spv::Scope
ScopeMax	lib/vulkan/spirv.hpp	/^    ScopeMax = 0x7fffffff,$/;"	e	enum:spv::Scope
ScopeSubgroup	lib/vulkan/spirv.hpp	/^    ScopeSubgroup = 3,$/;"	e	enum:spv::Scope
ScopeWorkgroup	lib/vulkan/spirv.hpp	/^    ScopeWorkgroup = 2,$/;"	e	enum:spv::Scope
SeekProc	lib/__assimp/cfileio.h	/^    aiFileSeek SeekProc;$/;"	m	struct:aiFile	access:public
SeekProc	lib/assimp/cfileio.h	/^    aiFileSeek SeekProc;$/;"	m	struct:aiFile	access:public
SelectionControlDontFlattenMask	lib/vulkan/spirv.hpp	/^    SelectionControlDontFlattenMask = 0x00000002,$/;"	e	enum:spv::SelectionControlMask
SelectionControlDontFlattenShift	lib/vulkan/spirv.hpp	/^    SelectionControlDontFlattenShift = 1,$/;"	e	enum:spv::SelectionControlShift
SelectionControlFlattenMask	lib/vulkan/spirv.hpp	/^    SelectionControlFlattenMask = 0x00000001,$/;"	e	enum:spv::SelectionControlMask
SelectionControlFlattenShift	lib/vulkan/spirv.hpp	/^    SelectionControlFlattenShift = 0,$/;"	e	enum:spv::SelectionControlShift
SelectionControlMask	lib/vulkan/spirv.hpp	/^enum SelectionControlMask {$/;"	g	namespace:spv
SelectionControlMaskNone	lib/vulkan/spirv.hpp	/^    SelectionControlMaskNone = 0,$/;"	e	enum:spv::SelectionControlMask
SelectionControlMax	lib/vulkan/spirv.hpp	/^    SelectionControlMax = 0x7fffffff,$/;"	e	enum:spv::SelectionControlShift
SelectionControlShift	lib/vulkan/spirv.hpp	/^enum SelectionControlShift {$/;"	g	namespace:spv
Set	lib/__assimp/metadata.h	/^    bool Set( unsigned index, const std::string& key, const T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, const std::string& key, const T& value )
Set	lib/__assimp/types.h	/^    void Set( const char* sz) {$/;"	f	struct:aiString	access:public	signature:( const char* sz)
Set	lib/__assimp/types.h	/^    void Set( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
Set	lib/assimp/metadata.h	/^    inline void Set( unsigned index, const std::string& key, const T& value )$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, const std::string& key, const T& value )
Set	lib/assimp/types.h	/^    void Set( const char* sz) {$/;"	f	struct:aiString	access:public	signature:( const char* sz)
Set	lib/assimp/types.h	/^    void Set( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
SetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkSetEvent SetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
SetPropertyBool	lib/__assimp/Exporter.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool value)
SetPropertyBool	lib/__assimp/Importer.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool value)
SetPropertyBool	lib/assimp/Exporter.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::ExportProperties	access:public	signature:(const char* szName, bool value)
SetPropertyBool	lib/assimp/Importer.hpp	/^    bool SetPropertyBool(const char* szName, bool value)    {$/;"	f	class:Assimp::Importer	access:public	signature:(const char* szName, bool value)
ShaderCreator	/home/al/amvk/inc/creator/shader_creator.h	/^namespace ShaderCreator$/;"	n
ShaderCreator::createShaders	/home/al/amvk/inc/creator/shader_creator.h	/^inline void createShaders(State& state)$/;"	f	namespace:ShaderCreator	signature:(State& state)
ShaderInfo	/home/al/amvk/inc/state.h	/^	ShaderInfo() {}$/;"	f	struct:ShaderInfo	access:public	signature:()
ShaderInfo	/home/al/amvk/inc/state.h	/^struct ShaderInfo {$/;"	s
ShaderInfo::ShaderInfo	/home/al/amvk/inc/state.h	/^	ShaderInfo() {}$/;"	f	struct:ShaderInfo	access:public	signature:()
ShaderInfo::compute	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo compute;$/;"	m	struct:ShaderInfo	access:public
ShaderInfo::fragment	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo fragment;$/;"	m	struct:ShaderInfo	access:public
ShaderInfo::geometry	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo geometry;$/;"	m	struct:ShaderInfo	access:public
ShaderInfo::vertex	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo vertex;$/;"	m	struct:ShaderInfo	access:public
Shaders	/home/al/amvk/inc/state.h	/^struct Shaders {$/;"	s
Shaders::deferred	/home/al/amvk/inc/state.h	/^	ShaderInfo deferred;$/;"	m	struct:Shaders	access:public
Shaders::fullscreenQuad	/home/al/amvk/inc/state.h	/^	ShaderInfo fullscreenQuad;$/;"	m	struct:Shaders	access:public
Shaders::model	/home/al/amvk/inc/state.h	/^	ShaderInfo model;$/;"	m	struct:Shaders	access:public
Shaders::pointLight	/home/al/amvk/inc/state.h	/^	ShaderInfo pointLight;$/;"	m	struct:Shaders	access:public
Shaders::quad	/home/al/amvk/inc/state.h	/^	ShaderInfo quad;$/;"	m	struct:Shaders	access:public
Shaders::skinned	/home/al/amvk/inc/state.h	/^	ShaderInfo skinned;$/;"	m	struct:Shaders	access:public
Shaders::tquad	/home/al/amvk/inc/state.h	/^	ShaderInfo tquad;$/;"	m	struct:Shaders	access:public
Skinned	inc/shape/skinned.h	/^class Skinned {$/;"	c
Skinned	src/shape/skinned.cpp	/^Skinned::Skinned(State& vulkanState):$/;"	f	class:Skinned	signature:(State& vulkanState)
Skinned::DEFAULT_FLAGS	inc/shape/skinned.h	/^	static constexpr uint32_t const DEFAULT_FLAGS = $/;"	m	class:Skinned	access:public
Skinned::MAX_BONES	inc/shape/skinned.h	/^	static constexpr uint32_t const MAX_BONES = 64;$/;"	m	class:Skinned	access:public
Skinned::MAX_BONES_PER_VERTEX	inc/shape/skinned.h	/^	static constexpr uint32_t const MAX_BONES_PER_VERTEX = 4;$/;"	m	class:Skinned	access:public
Skinned::Material	inc/shape/skinned.h	/^	struct Material {$/;"	s	class:Skinned	access:public
Skinned::Material::ambientIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
Skinned::Material::diffuseIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
Skinned::Material::heightIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
Skinned::Material::specularIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
Skinned::Material::textures	inc/shape/skinned.h	/^		std::vector<MaterialTexture> textures;$/;"	m	struct:Skinned::Material	access:public
Skinned::MaterialTexture	inc/shape/skinned.h	/^	struct MaterialTexture {$/;"	s	class:Skinned	access:public
Skinned::MaterialTexture::MaterialTexture	inc/shape/skinned.h	/^		MaterialTexture():$/;"	f	struct:Skinned::MaterialTexture	access:public	signature:()
Skinned::MaterialTexture::image	inc/shape/skinned.h	/^		ImageInfo* image;$/;"	m	struct:Skinned::MaterialTexture	access:public
Skinned::MaterialTexture::index	inc/shape/skinned.h	/^		uint32_t index;$/;"	m	struct:Skinned::MaterialTexture	access:public
Skinned::MaterialTexture::type	inc/shape/skinned.h	/^		aiTextureType type;$/;"	m	struct:Skinned::MaterialTexture	access:public
Skinned::Mesh	inc/shape/skinned.h	/^	struct Mesh {$/;"	s	class:Skinned	access:public
Skinned::Mesh::Mesh	inc/shape/skinned.h	/^		Mesh(): baseVertex(0), numVertices(0), baseIndex(0), numIndices(0), materialIndex(0) {}$/;"	f	struct:Skinned::Mesh	access:public	signature:()
Skinned::Mesh::baseIndex	inc/shape/skinned.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Skinned::Mesh	access:public
Skinned::Mesh::baseVertex	inc/shape/skinned.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Skinned::Mesh	access:public
Skinned::Mesh::materialIndex	inc/shape/skinned.h	/^		uint32_t materialIndex;$/;"	m	struct:Skinned::Mesh	access:public
Skinned::Mesh::numIndices	inc/shape/skinned.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Skinned::Mesh	access:public
Skinned::Mesh::numVertices	inc/shape/skinned.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Skinned::Mesh	access:public
Skinned::ModelFlag_flipNormals	inc/shape/skinned.h	/^	static constexpr ModelFlags ModelFlag_flipNormals = 1 << 1;$/;"	m	class:Skinned	access:public
Skinned::ModelFlag_stripFullPath	inc/shape/skinned.h	/^	static constexpr ModelFlags ModelFlag_stripFullPath = 1;$/;"	m	class:Skinned	access:public
Skinned::ModelFlags	inc/shape/skinned.h	/^	typedef uint32_t ModelFlags;$/;"	t	class:Skinned	access:public
Skinned::NUM_TEXTURE_TYPES	inc/shape/skinned.h	/^	static const uint32_t NUM_TEXTURE_TYPES;$/;"	m	class:Skinned	access:public
Skinned::NUM_TEXTURE_TYPES	src/shape/skinned.cpp	/^const uint32_t Skinned::NUM_TEXTURE_TYPES = ARRAY_SIZE(Skinned_TEXTURE_TYPES);$/;"	m	class:Skinned	file:
Skinned::Skinned	src/shape/skinned.cpp	/^Skinned::Skinned(State& vulkanState):$/;"	f	class:Skinned	signature:(State& vulkanState)
Skinned::TEXTURE_TYPES	inc/shape/skinned.h	/^	static const aiTextureType* TEXTURE_TYPES;$/;"	m	class:Skinned	access:public
Skinned::TEXTURE_TYPES	src/shape/skinned.cpp	/^const aiTextureType* Skinned::TEXTURE_TYPES = Skinned_TEXTURE_TYPES;$/;"	m	class:Skinned	file:
Skinned::UBO	inc/shape/skinned.h	/^	struct UBO {$/;"	s	class:Skinned	access:public
Skinned::UBO::bones	inc/shape/skinned.h	/^		std::array<glm::mat4, MAX_BONES> bones;$/;"	m	struct:Skinned::UBO	access:public
Skinned::UBO::model	inc/shape/skinned.h	/^	    glm::mat4 model;$/;"	m	struct:Skinned::UBO	access:public
Skinned::UBO::proj	inc/shape/skinned.h	/^		glm::mat4 proj;$/;"	m	struct:Skinned::UBO	access:public
Skinned::UBO::view	inc/shape/skinned.h	/^		glm::mat4 view;$/;"	m	struct:Skinned::UBO	access:public
Skinned::Vertex	inc/shape/skinned.h	/^	struct Vertex {$/;"	s	class:Skinned	access:public
Skinned::Vertex::bitangent	inc/shape/skinned.h	/^		glm::vec3 bitangent;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::boneIndices	inc/shape/skinned.h	/^		glm::uvec4 boneIndices;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::normal	inc/shape/skinned.h	/^		glm::vec3 normal;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::pos	inc/shape/skinned.h	/^		glm::vec3 pos;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::samplerIndices	inc/shape/skinned.h	/^		glm::uvec4 samplerIndices;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::tangent	inc/shape/skinned.h	/^		glm::vec3 tangent;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::texCoord	inc/shape/skinned.h	/^		glm::vec2 texCoord;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::Vertex::weights	inc/shape/skinned.h	/^		glm::vec4 weights;$/;"	m	struct:Skinned::Vertex	access:public
Skinned::animSpeedScale	inc/shape/skinned.h	/^	float animSpeedScale;$/;"	m	class:Skinned	access:public
Skinned::convertVector	src/shape/skinned.cpp	/^void Skinned::convertVector(const aiVector3D& src, glm::vec2& dest)$/;"	f	class:Skinned	signature:(const aiVector3D& src, glm::vec2& dest)
Skinned::convertVector	src/shape/skinned.cpp	/^void Skinned::convertVector(const aiVector3D& src, glm::vec3& dest)$/;"	f	class:Skinned	signature:(const aiVector3D& src, glm::vec3& dest)
Skinned::createAnimNode	src/shape/skinned.cpp	/^void Skinned::createAnimNode(aiNode* node, AnimNode* parent)$/;"	f	class:Skinned	signature:(aiNode* node, AnimNode* parent)
Skinned::createCommonBuffer	src/shape/skinned.cpp	/^void Skinned::createCommonBuffer(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Skinned	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
Skinned::createDescriptorPool	src/shape/skinned.cpp	/^void Skinned::createDescriptorPool() $/;"	f	class:Skinned	signature:()
Skinned::createDescriptorSet	src/shape/skinned.cpp	/^void Skinned::createDescriptorSet()$/;"	f	class:Skinned	signature:()
Skinned::draw	src/shape/skinned.cpp	/^void Skinned::draw(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)$/;"	f	class:Skinned	signature:(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)
Skinned::importer	inc/shape/skinned.h	/^    Assimp::Importer importer;    $/;"	m	class:Skinned	access:protected
Skinned::indexBufferOffset	inc/shape/skinned.h	/^				 indexBufferOffset;$/;"	m	class:Skinned	access:public
Skinned::init	src/shape/skinned.cpp	/^void Skinned::init(const char* modelPath, unsigned int pFlags, ModelFlags modelFlags)$/;"	f	class:Skinned	signature:(const char* modelPath, unsigned int pFlags, ModelFlags modelFlags)
Skinned::init	src/shape/skinned.cpp	/^void Skinned::init(std::string modelPath, unsigned int pFlags, ModelFlags modelFlags) $/;"	f	class:Skinned	signature:(std::string modelPath, unsigned int pFlags, ModelFlags modelFlags)
Skinned::mAnimNodeRoot	inc/shape/skinned.h	/^    AnimNode* mAnimNodeRoot;$/;"	m	class:Skinned	access:protected
Skinned::mBoneTransforms	inc/shape/skinned.h	/^	std::vector<aiMatrix4x4> mBoneTransforms;$/;"	m	class:Skinned	access:protected
Skinned::mCommonBufferInfo	inc/shape/skinned.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Skinned	access:protected
Skinned::mDescriptorPool	inc/shape/skinned.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:Skinned	access:protected
Skinned::mFolder	inc/shape/skinned.h	/^	std::string mPath, mFolder;$/;"	m	class:Skinned	access:protected
Skinned::mMaterialIndexToMaterial	inc/shape/skinned.h	/^	std::unordered_map<uint32_t, Material> mMaterialIndexToMaterial;$/;"	m	class:Skinned	access:protected
Skinned::mMeshes	inc/shape/skinned.h	/^	std::vector<Mesh> mMeshes;$/;"	m	class:Skinned	access:protected
Skinned::mModelFlags	inc/shape/skinned.h	/^	ModelFlags mModelFlags;$/;"	m	class:Skinned	access:protected
Skinned::mModelSpaceTransform	inc/shape/skinned.h	/^    aiMatrix4x4 mModelSpaceTransform;$/;"	m	class:Skinned	access:protected
Skinned::mNodeToBoneIndexMap	inc/shape/skinned.h	/^	std::unordered_map<aiNode*, uint32_t> mNodeToBoneIndexMap;$/;"	m	class:Skinned	access:protected
Skinned::mNumSamplerDescriptors	inc/shape/skinned.h	/^	uint32_t mNumSamplerDescriptors;$/;"	m	class:Skinned	access:protected
Skinned::mPath	inc/shape/skinned.h	/^	std::string mPath, mFolder;$/;"	m	class:Skinned	access:protected
Skinned::mSamplersDescriptorSet	inc/shape/skinned.h	/^	VkDescriptorSet mSamplersDescriptorSet;$/;"	m	class:Skinned	access:protected
Skinned::mScene	inc/shape/skinned.h	/^    const aiScene* mScene;$/;"	m	class:Skinned	access:protected
Skinned::mState	inc/shape/skinned.h	/^	State& mState;$/;"	m	class:Skinned	access:protected
Skinned::mUniformDescriptorSet	inc/shape/skinned.h	/^	VkDescriptorSet mUniformDescriptorSet;$/;"	m	class:Skinned	access:protected
Skinned::numBones	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
Skinned::numIndices	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
Skinned::numSamplers	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
Skinned::numVertices	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
Skinned::processAnimNode	src/shape/skinned.cpp	/^void Skinned::processAnimNode(float progress, aiMatrix4x4& parentTransform, AnimNode* animNode, uint32_t animationIndex)$/;"	f	class:Skinned	signature:(float progress, aiMatrix4x4& parentTransform, AnimNode* animNode, uint32_t animationIndex)
Skinned::processMeshBones	src/shape/skinned.cpp	/^void Skinned::processMeshBones($/;"	f	class:Skinned	signature:( aiNode* node, std::unordered_map<std::string, uint32_t>& boneNameToIndexMap, std::vector<Vertex>& vertices, std::vector<uint32_t>& vertexWeightIndices, aiMesh& mesh, Mesh& meshInfo)
Skinned::processMeshIndices	src/shape/skinned.cpp	/^void Skinned::processMeshIndices(std::vector<uint32_t>& indices, aiMesh& mesh, Mesh& meshInfo)$/;"	f	class:Skinned	signature:(std::vector<uint32_t>& indices, aiMesh& mesh, Mesh& meshInfo)
Skinned::processMeshMaterials	src/shape/skinned.cpp	/^void Skinned::processMeshMaterials(aiMesh& mesh, Mesh& meshInfo) $/;"	f	class:Skinned	signature:(aiMesh& mesh, Mesh& meshInfo)
Skinned::processMeshVertices	src/shape/skinned.cpp	/^void Skinned::processMeshVertices(std::vector<Vertex>& vertices, aiMesh& mesh, Mesh& meshInfo)$/;"	f	class:Skinned	signature:(std::vector<Vertex>& vertices, aiMesh& mesh, Mesh& meshInfo)
Skinned::processModel	src/shape/skinned.cpp	/^void Skinned::processModel(const aiScene& scene) $/;"	f	class:Skinned	signature:(const aiScene& scene)
Skinned::throwError	src/shape/skinned.cpp	/^void Skinned::throwError(const char* error) $/;"	f	class:Skinned	signature:(const char* error)
Skinned::throwError	src/shape/skinned.cpp	/^void Skinned::throwError(std::string& error) $/;"	f	class:Skinned	signature:(std::string& error)
Skinned::ubo	inc/shape/skinned.h	/^	UBO ubo;$/;"	m	class:Skinned	access:public
Skinned::uniformBufferOffset	inc/shape/skinned.h	/^	VkDeviceSize uniformBufferOffset,  $/;"	m	class:Skinned	access:public
Skinned::update	src/shape/skinned.cpp	/^void Skinned::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera, uint32_t animationIndex \/* = 0 *\/)$/;"	f	class:Skinned	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera, uint32_t animationIndex )
Skinned::vertexBufferOffset	inc/shape/skinned.h	/^				 vertexBufferOffset, $/;"	m	class:Skinned	access:public
Skinned::~Skinned	src/shape/skinned.cpp	/^Skinned::~Skinned() $/;"	f	class:Skinned	signature:()
Skinned_TEXTURE_TYPES	src/shape/skinned.cpp	/^static const aiTextureType Skinned_TEXTURE_TYPES[] ={$/;"	v	file:
SourceLanguage	lib/vulkan/spirv.hpp	/^enum SourceLanguage {$/;"	g	namespace:spv
SourceLanguageESSL	lib/vulkan/spirv.hpp	/^    SourceLanguageESSL = 1,$/;"	e	enum:spv::SourceLanguage
SourceLanguageGLSL	lib/vulkan/spirv.hpp	/^    SourceLanguageGLSL = 2,$/;"	e	enum:spv::SourceLanguage
SourceLanguageMax	lib/vulkan/spirv.hpp	/^    SourceLanguageMax = 0x7fffffff,$/;"	e	enum:spv::SourceLanguage
SourceLanguageOpenCL_C	lib/vulkan/spirv.hpp	/^    SourceLanguageOpenCL_C = 3,$/;"	e	enum:spv::SourceLanguage
SourceLanguageOpenCL_CPP	lib/vulkan/spirv.hpp	/^    SourceLanguageOpenCL_CPP = 4,$/;"	e	enum:spv::SourceLanguage
SourceLanguageUnknown	lib/vulkan/spirv.hpp	/^    SourceLanguageUnknown = 0,$/;"	e	enum:spv::SourceLanguage
Sphere	inc/shape/sphere.h	/^class Sphere {$/;"	c
Sphere	src/shape/sphere.cpp	/^Sphere::Sphere(State& state):$/;"	f	class:Sphere	signature:(State& state)
Sphere::Sphere	src/shape/sphere.cpp	/^Sphere::Sphere(State& state):$/;"	f	class:Sphere	signature:(State& state)
Sphere::Vertex	inc/shape/sphere.h	/^	struct Vertex {$/;"	s	class:Sphere	access:public
Sphere::Vertex::position	inc/shape/sphere.h	/^		glm::vec3 position;$/;"	m	struct:Sphere::Vertex	access:public
Sphere::createBuffers	src/shape/sphere.cpp	/^void Sphere::createBuffers(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Sphere	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
Sphere::getRadius	src/shape/sphere.cpp	/^float Sphere::getRadius() const $/;"	f	class:Sphere	signature:() const
Sphere::indexBufferOffset	inc/shape/sphere.h	/^	VkDeviceSize vertexBufferOffset, indexBufferOffset;$/;"	m	class:Sphere	access:public
Sphere::init	src/shape/sphere.cpp	/^void Sphere::init(uint32_t numStacks, uint32_t numSlices, float radius \/* = 1.0f *\/)$/;"	f	class:Sphere	signature:(uint32_t numStacks, uint32_t numSlices, float radius )
Sphere::mCommonBufferInfo	inc/shape/sphere.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Sphere	access:public
Sphere::mRadius	inc/shape/sphere.h	/^	float mRadius;$/;"	m	class:Sphere	access:private
Sphere::mState	inc/shape/sphere.h	/^	State& mState;$/;"	m	class:Sphere	access:private
Sphere::numIndices	inc/shape/sphere.h	/^	uint32_t numIndices;$/;"	m	class:Sphere	access:public
Sphere::vertexBufferOffset	inc/shape/sphere.h	/^	VkDeviceSize vertexBufferOffset, indexBufferOffset;$/;"	m	class:Sphere	access:public
SpvAccessQualifier	lib/vulkan/spirv.h	/^} SpvAccessQualifier;$/;"	t	typeref:enum:SpvAccessQualifier_
SpvAccessQualifierMax	lib/vulkan/spirv.h	/^    SpvAccessQualifierMax = 0x7fffffff,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierReadOnly	lib/vulkan/spirv.h	/^    SpvAccessQualifierReadOnly = 0,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierReadWrite	lib/vulkan/spirv.h	/^    SpvAccessQualifierReadWrite = 2,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierWriteOnly	lib/vulkan/spirv.h	/^    SpvAccessQualifierWriteOnly = 1,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifier_	lib/vulkan/spirv.h	/^typedef enum SpvAccessQualifier_ {$/;"	g
SpvAddressingModel	lib/vulkan/spirv.h	/^} SpvAddressingModel;$/;"	t	typeref:enum:SpvAddressingModel_
SpvAddressingModelLogical	lib/vulkan/spirv.h	/^    SpvAddressingModelLogical = 0,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelMax	lib/vulkan/spirv.h	/^    SpvAddressingModelMax = 0x7fffffff,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysical32	lib/vulkan/spirv.h	/^    SpvAddressingModelPhysical32 = 1,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysical64	lib/vulkan/spirv.h	/^    SpvAddressingModelPhysical64 = 2,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModel_	lib/vulkan/spirv.h	/^typedef enum SpvAddressingModel_ {$/;"	g
SpvBuiltIn	lib/vulkan/spirv.h	/^} SpvBuiltIn;$/;"	t	typeref:enum:SpvBuiltIn_
SpvBuiltInClipDistance	lib/vulkan/spirv.h	/^    SpvBuiltInClipDistance = 3,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInCullDistance	lib/vulkan/spirv.h	/^    SpvBuiltInCullDistance = 4,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInEnqueuedWorkgroupSize	lib/vulkan/spirv.h	/^    SpvBuiltInEnqueuedWorkgroupSize = 32,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragCoord	lib/vulkan/spirv.h	/^    SpvBuiltInFragCoord = 15,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragDepth	lib/vulkan/spirv.h	/^    SpvBuiltInFragDepth = 22,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFrontFacing	lib/vulkan/spirv.h	/^    SpvBuiltInFrontFacing = 17,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalInvocationId	lib/vulkan/spirv.h	/^    SpvBuiltInGlobalInvocationId = 28,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalLinearId	lib/vulkan/spirv.h	/^    SpvBuiltInGlobalLinearId = 34,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalOffset	lib/vulkan/spirv.h	/^    SpvBuiltInGlobalOffset = 33,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalSize	lib/vulkan/spirv.h	/^    SpvBuiltInGlobalSize = 31,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInHelperInvocation	lib/vulkan/spirv.h	/^    SpvBuiltInHelperInvocation = 23,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceId	lib/vulkan/spirv.h	/^    SpvBuiltInInstanceId = 6,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceIndex	lib/vulkan/spirv.h	/^    SpvBuiltInInstanceIndex = 43,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInvocationId	lib/vulkan/spirv.h	/^    SpvBuiltInInvocationId = 8,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLayer	lib/vulkan/spirv.h	/^    SpvBuiltInLayer = 9,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLocalInvocationId	lib/vulkan/spirv.h	/^    SpvBuiltInLocalInvocationId = 27,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLocalInvocationIndex	lib/vulkan/spirv.h	/^    SpvBuiltInLocalInvocationIndex = 29,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInMax	lib/vulkan/spirv.h	/^    SpvBuiltInMax = 0x7fffffff,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumEnqueuedSubgroups	lib/vulkan/spirv.h	/^    SpvBuiltInNumEnqueuedSubgroups = 39,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumSubgroups	lib/vulkan/spirv.h	/^    SpvBuiltInNumSubgroups = 38,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumWorkgroups	lib/vulkan/spirv.h	/^    SpvBuiltInNumWorkgroups = 24,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPatchVertices	lib/vulkan/spirv.h	/^    SpvBuiltInPatchVertices = 14,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPointCoord	lib/vulkan/spirv.h	/^    SpvBuiltInPointCoord = 16,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPointSize	lib/vulkan/spirv.h	/^    SpvBuiltInPointSize = 1,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPosition	lib/vulkan/spirv.h	/^    SpvBuiltInPosition = 0,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPrimitiveId	lib/vulkan/spirv.h	/^    SpvBuiltInPrimitiveId = 7,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSampleId	lib/vulkan/spirv.h	/^    SpvBuiltInSampleId = 18,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSampleMask	lib/vulkan/spirv.h	/^    SpvBuiltInSampleMask = 20,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSamplePosition	lib/vulkan/spirv.h	/^    SpvBuiltInSamplePosition = 19,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupId	lib/vulkan/spirv.h	/^    SpvBuiltInSubgroupId = 40,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLocalInvocationId	lib/vulkan/spirv.h	/^    SpvBuiltInSubgroupLocalInvocationId = 41,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupMaxSize	lib/vulkan/spirv.h	/^    SpvBuiltInSubgroupMaxSize = 37,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupSize	lib/vulkan/spirv.h	/^    SpvBuiltInSubgroupSize = 36,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessCoord	lib/vulkan/spirv.h	/^    SpvBuiltInTessCoord = 13,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessLevelInner	lib/vulkan/spirv.h	/^    SpvBuiltInTessLevelInner = 12,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessLevelOuter	lib/vulkan/spirv.h	/^    SpvBuiltInTessLevelOuter = 11,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInVertexId	lib/vulkan/spirv.h	/^    SpvBuiltInVertexId = 5,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInVertexIndex	lib/vulkan/spirv.h	/^    SpvBuiltInVertexIndex = 42,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInViewportIndex	lib/vulkan/spirv.h	/^    SpvBuiltInViewportIndex = 10,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkDim	lib/vulkan/spirv.h	/^    SpvBuiltInWorkDim = 30,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkgroupId	lib/vulkan/spirv.h	/^    SpvBuiltInWorkgroupId = 26,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkgroupSize	lib/vulkan/spirv.h	/^    SpvBuiltInWorkgroupSize = 25,$/;"	e	enum:SpvBuiltIn_
SpvBuiltIn_	lib/vulkan/spirv.h	/^typedef enum SpvBuiltIn_ {$/;"	g
SpvCapability	lib/vulkan/spirv.h	/^} SpvCapability;$/;"	t	typeref:enum:SpvCapability_
SpvCapabilityAddresses	lib/vulkan/spirv.h	/^    SpvCapabilityAddresses = 4,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicStorage	lib/vulkan/spirv.h	/^    SpvCapabilityAtomicStorage = 21,$/;"	e	enum:SpvCapability_
SpvCapabilityClipDistance	lib/vulkan/spirv.h	/^    SpvCapabilityClipDistance = 32,$/;"	e	enum:SpvCapability_
SpvCapabilityCullDistance	lib/vulkan/spirv.h	/^    SpvCapabilityCullDistance = 33,$/;"	e	enum:SpvCapability_
SpvCapabilityDerivativeControl	lib/vulkan/spirv.h	/^    SpvCapabilityDerivativeControl = 51,$/;"	e	enum:SpvCapability_
SpvCapabilityDeviceEnqueue	lib/vulkan/spirv.h	/^    SpvCapabilityDeviceEnqueue = 19,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat16	lib/vulkan/spirv.h	/^    SpvCapabilityFloat16 = 9,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat16Buffer	lib/vulkan/spirv.h	/^    SpvCapabilityFloat16Buffer = 8,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat64	lib/vulkan/spirv.h	/^    SpvCapabilityFloat64 = 10,$/;"	e	enum:SpvCapability_
SpvCapabilityGenericPointer	lib/vulkan/spirv.h	/^    SpvCapabilityGenericPointer = 38,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometry	lib/vulkan/spirv.h	/^    SpvCapabilityGeometry = 2,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometryPointSize	lib/vulkan/spirv.h	/^    SpvCapabilityGeometryPointSize = 24,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometryStreams	lib/vulkan/spirv.h	/^    SpvCapabilityGeometryStreams = 54,$/;"	e	enum:SpvCapability_
SpvCapabilityGroups	lib/vulkan/spirv.h	/^    SpvCapabilityGroups = 18,$/;"	e	enum:SpvCapability_
SpvCapabilityImage1D	lib/vulkan/spirv.h	/^    SpvCapabilityImage1D = 44,$/;"	e	enum:SpvCapability_
SpvCapabilityImageBasic	lib/vulkan/spirv.h	/^    SpvCapabilityImageBasic = 13,$/;"	e	enum:SpvCapability_
SpvCapabilityImageBuffer	lib/vulkan/spirv.h	/^    SpvCapabilityImageBuffer = 47,$/;"	e	enum:SpvCapability_
SpvCapabilityImageCubeArray	lib/vulkan/spirv.h	/^    SpvCapabilityImageCubeArray = 34,$/;"	e	enum:SpvCapability_
SpvCapabilityImageGatherExtended	lib/vulkan/spirv.h	/^    SpvCapabilityImageGatherExtended = 25,$/;"	e	enum:SpvCapability_
SpvCapabilityImageMSArray	lib/vulkan/spirv.h	/^    SpvCapabilityImageMSArray = 48,$/;"	e	enum:SpvCapability_
SpvCapabilityImageMipmap	lib/vulkan/spirv.h	/^    SpvCapabilityImageMipmap = 15,$/;"	e	enum:SpvCapability_
SpvCapabilityImageQuery	lib/vulkan/spirv.h	/^    SpvCapabilityImageQuery = 50,$/;"	e	enum:SpvCapability_
SpvCapabilityImageReadWrite	lib/vulkan/spirv.h	/^    SpvCapabilityImageReadWrite = 14,$/;"	e	enum:SpvCapability_
SpvCapabilityImageRect	lib/vulkan/spirv.h	/^    SpvCapabilityImageRect = 36,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachment	lib/vulkan/spirv.h	/^    SpvCapabilityInputAttachment = 40,$/;"	e	enum:SpvCapability_
SpvCapabilityInt16	lib/vulkan/spirv.h	/^    SpvCapabilityInt16 = 22,$/;"	e	enum:SpvCapability_
SpvCapabilityInt64	lib/vulkan/spirv.h	/^    SpvCapabilityInt64 = 11,$/;"	e	enum:SpvCapability_
SpvCapabilityInt64Atomics	lib/vulkan/spirv.h	/^    SpvCapabilityInt64Atomics = 12,$/;"	e	enum:SpvCapability_
SpvCapabilityInt8	lib/vulkan/spirv.h	/^    SpvCapabilityInt8 = 39,$/;"	e	enum:SpvCapability_
SpvCapabilityInterpolationFunction	lib/vulkan/spirv.h	/^    SpvCapabilityInterpolationFunction = 52,$/;"	e	enum:SpvCapability_
SpvCapabilityKernel	lib/vulkan/spirv.h	/^    SpvCapabilityKernel = 6,$/;"	e	enum:SpvCapability_
SpvCapabilityLinkage	lib/vulkan/spirv.h	/^    SpvCapabilityLinkage = 5,$/;"	e	enum:SpvCapability_
SpvCapabilityLiteralSampler	lib/vulkan/spirv.h	/^    SpvCapabilityLiteralSampler = 20,$/;"	e	enum:SpvCapability_
SpvCapabilityMatrix	lib/vulkan/spirv.h	/^    SpvCapabilityMatrix = 0,$/;"	e	enum:SpvCapability_
SpvCapabilityMax	lib/vulkan/spirv.h	/^    SpvCapabilityMax = 0x7fffffff,$/;"	e	enum:SpvCapability_
SpvCapabilityMinLod	lib/vulkan/spirv.h	/^    SpvCapabilityMinLod = 42,$/;"	e	enum:SpvCapability_
SpvCapabilityMultiViewport	lib/vulkan/spirv.h	/^    SpvCapabilityMultiViewport = 57,$/;"	e	enum:SpvCapability_
SpvCapabilityNamedBarrier	lib/vulkan/spirv.h	/^    SpvCapabilityNamedBarrier = 59,$/;"	e	enum:SpvCapability_
SpvCapabilityPipeStorage	lib/vulkan/spirv.h	/^    SpvCapabilityPipeStorage = 60,$/;"	e	enum:SpvCapability_
SpvCapabilityPipes	lib/vulkan/spirv.h	/^    SpvCapabilityPipes = 17,$/;"	e	enum:SpvCapability_
SpvCapabilitySampleRateShading	lib/vulkan/spirv.h	/^    SpvCapabilitySampleRateShading = 35,$/;"	e	enum:SpvCapability_
SpvCapabilitySampled1D	lib/vulkan/spirv.h	/^    SpvCapabilitySampled1D = 43,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledBuffer	lib/vulkan/spirv.h	/^    SpvCapabilitySampledBuffer = 46,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledCubeArray	lib/vulkan/spirv.h	/^    SpvCapabilitySampledCubeArray = 45,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledImageArrayDynamicIndexing	lib/vulkan/spirv.h	/^    SpvCapabilitySampledImageArrayDynamicIndexing = 29,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledRect	lib/vulkan/spirv.h	/^    SpvCapabilitySampledRect = 37,$/;"	e	enum:SpvCapability_
SpvCapabilityShader	lib/vulkan/spirv.h	/^    SpvCapabilityShader = 1,$/;"	e	enum:SpvCapability_
SpvCapabilitySparseResidency	lib/vulkan/spirv.h	/^    SpvCapabilitySparseResidency = 41,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBufferArrayDynamicIndexing	lib/vulkan/spirv.h	/^    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageArrayDynamicIndexing	lib/vulkan/spirv.h	/^    SpvCapabilityStorageImageArrayDynamicIndexing = 31,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageExtendedFormats	lib/vulkan/spirv.h	/^    SpvCapabilityStorageImageExtendedFormats = 49,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageMultisample	lib/vulkan/spirv.h	/^    SpvCapabilityStorageImageMultisample = 27,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageReadWithoutFormat	lib/vulkan/spirv.h	/^    SpvCapabilityStorageImageReadWithoutFormat = 55,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageWriteWithoutFormat	lib/vulkan/spirv.h	/^    SpvCapabilityStorageImageWriteWithoutFormat = 56,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupDispatch	lib/vulkan/spirv.h	/^    SpvCapabilitySubgroupDispatch = 58,$/;"	e	enum:SpvCapability_
SpvCapabilityTessellation	lib/vulkan/spirv.h	/^    SpvCapabilityTessellation = 3,$/;"	e	enum:SpvCapability_
SpvCapabilityTessellationPointSize	lib/vulkan/spirv.h	/^    SpvCapabilityTessellationPointSize = 23,$/;"	e	enum:SpvCapability_
SpvCapabilityTransformFeedback	lib/vulkan/spirv.h	/^    SpvCapabilityTransformFeedback = 53,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformBufferArrayDynamicIndexing	lib/vulkan/spirv.h	/^    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,$/;"	e	enum:SpvCapability_
SpvCapabilityVector16	lib/vulkan/spirv.h	/^    SpvCapabilityVector16 = 7,$/;"	e	enum:SpvCapability_
SpvCapability_	lib/vulkan/spirv.h	/^typedef enum SpvCapability_ {$/;"	g
SpvDecoration	lib/vulkan/spirv.h	/^} SpvDecoration;$/;"	t	typeref:enum:SpvDecoration_
SpvDecorationAliased	lib/vulkan/spirv.h	/^    SpvDecorationAliased = 20,$/;"	e	enum:SpvDecoration_
SpvDecorationAlignment	lib/vulkan/spirv.h	/^    SpvDecorationAlignment = 44,$/;"	e	enum:SpvDecoration_
SpvDecorationArrayStride	lib/vulkan/spirv.h	/^    SpvDecorationArrayStride = 6,$/;"	e	enum:SpvDecoration_
SpvDecorationBinding	lib/vulkan/spirv.h	/^    SpvDecorationBinding = 33,$/;"	e	enum:SpvDecoration_
SpvDecorationBlock	lib/vulkan/spirv.h	/^    SpvDecorationBlock = 2,$/;"	e	enum:SpvDecoration_
SpvDecorationBufferBlock	lib/vulkan/spirv.h	/^    SpvDecorationBufferBlock = 3,$/;"	e	enum:SpvDecoration_
SpvDecorationBuiltIn	lib/vulkan/spirv.h	/^    SpvDecorationBuiltIn = 11,$/;"	e	enum:SpvDecoration_
SpvDecorationCPacked	lib/vulkan/spirv.h	/^    SpvDecorationCPacked = 10,$/;"	e	enum:SpvDecoration_
SpvDecorationCentroid	lib/vulkan/spirv.h	/^    SpvDecorationCentroid = 16,$/;"	e	enum:SpvDecoration_
SpvDecorationCoherent	lib/vulkan/spirv.h	/^    SpvDecorationCoherent = 23,$/;"	e	enum:SpvDecoration_
SpvDecorationColMajor	lib/vulkan/spirv.h	/^    SpvDecorationColMajor = 5,$/;"	e	enum:SpvDecoration_
SpvDecorationComponent	lib/vulkan/spirv.h	/^    SpvDecorationComponent = 31,$/;"	e	enum:SpvDecoration_
SpvDecorationConstant	lib/vulkan/spirv.h	/^    SpvDecorationConstant = 22,$/;"	e	enum:SpvDecoration_
SpvDecorationDescriptorSet	lib/vulkan/spirv.h	/^    SpvDecorationDescriptorSet = 34,$/;"	e	enum:SpvDecoration_
SpvDecorationFPFastMathMode	lib/vulkan/spirv.h	/^    SpvDecorationFPFastMathMode = 40,$/;"	e	enum:SpvDecoration_
SpvDecorationFPRoundingMode	lib/vulkan/spirv.h	/^    SpvDecorationFPRoundingMode = 39,$/;"	e	enum:SpvDecoration_
SpvDecorationFlat	lib/vulkan/spirv.h	/^    SpvDecorationFlat = 14,$/;"	e	enum:SpvDecoration_
SpvDecorationFuncParamAttr	lib/vulkan/spirv.h	/^    SpvDecorationFuncParamAttr = 38,$/;"	e	enum:SpvDecoration_
SpvDecorationGLSLPacked	lib/vulkan/spirv.h	/^    SpvDecorationGLSLPacked = 9,$/;"	e	enum:SpvDecoration_
SpvDecorationGLSLShared	lib/vulkan/spirv.h	/^    SpvDecorationGLSLShared = 8,$/;"	e	enum:SpvDecoration_
SpvDecorationIndex	lib/vulkan/spirv.h	/^    SpvDecorationIndex = 32,$/;"	e	enum:SpvDecoration_
SpvDecorationInputAttachmentIndex	lib/vulkan/spirv.h	/^    SpvDecorationInputAttachmentIndex = 43,$/;"	e	enum:SpvDecoration_
SpvDecorationInvariant	lib/vulkan/spirv.h	/^    SpvDecorationInvariant = 18,$/;"	e	enum:SpvDecoration_
SpvDecorationLinkageAttributes	lib/vulkan/spirv.h	/^    SpvDecorationLinkageAttributes = 41,$/;"	e	enum:SpvDecoration_
SpvDecorationLocation	lib/vulkan/spirv.h	/^    SpvDecorationLocation = 30,$/;"	e	enum:SpvDecoration_
SpvDecorationMatrixStride	lib/vulkan/spirv.h	/^    SpvDecorationMatrixStride = 7,$/;"	e	enum:SpvDecoration_
SpvDecorationMax	lib/vulkan/spirv.h	/^    SpvDecorationMax = 0x7fffffff,$/;"	e	enum:SpvDecoration_
SpvDecorationMaxByteOffset	lib/vulkan/spirv.h	/^    SpvDecorationMaxByteOffset = 45,$/;"	e	enum:SpvDecoration_
SpvDecorationNoContraction	lib/vulkan/spirv.h	/^    SpvDecorationNoContraction = 42,$/;"	e	enum:SpvDecoration_
SpvDecorationNoPerspective	lib/vulkan/spirv.h	/^    SpvDecorationNoPerspective = 13,$/;"	e	enum:SpvDecoration_
SpvDecorationNonReadable	lib/vulkan/spirv.h	/^    SpvDecorationNonReadable = 25,$/;"	e	enum:SpvDecoration_
SpvDecorationNonWritable	lib/vulkan/spirv.h	/^    SpvDecorationNonWritable = 24,$/;"	e	enum:SpvDecoration_
SpvDecorationOffset	lib/vulkan/spirv.h	/^    SpvDecorationOffset = 35,$/;"	e	enum:SpvDecoration_
SpvDecorationPatch	lib/vulkan/spirv.h	/^    SpvDecorationPatch = 15,$/;"	e	enum:SpvDecoration_
SpvDecorationRelaxedPrecision	lib/vulkan/spirv.h	/^    SpvDecorationRelaxedPrecision = 0,$/;"	e	enum:SpvDecoration_
SpvDecorationRestrict	lib/vulkan/spirv.h	/^    SpvDecorationRestrict = 19,$/;"	e	enum:SpvDecoration_
SpvDecorationRowMajor	lib/vulkan/spirv.h	/^    SpvDecorationRowMajor = 4,$/;"	e	enum:SpvDecoration_
SpvDecorationSample	lib/vulkan/spirv.h	/^    SpvDecorationSample = 17,$/;"	e	enum:SpvDecoration_
SpvDecorationSaturatedConversion	lib/vulkan/spirv.h	/^    SpvDecorationSaturatedConversion = 28,$/;"	e	enum:SpvDecoration_
SpvDecorationSpecId	lib/vulkan/spirv.h	/^    SpvDecorationSpecId = 1,$/;"	e	enum:SpvDecoration_
SpvDecorationStream	lib/vulkan/spirv.h	/^    SpvDecorationStream = 29,$/;"	e	enum:SpvDecoration_
SpvDecorationUniform	lib/vulkan/spirv.h	/^    SpvDecorationUniform = 26,$/;"	e	enum:SpvDecoration_
SpvDecorationVolatile	lib/vulkan/spirv.h	/^    SpvDecorationVolatile = 21,$/;"	e	enum:SpvDecoration_
SpvDecorationXfbBuffer	lib/vulkan/spirv.h	/^    SpvDecorationXfbBuffer = 36,$/;"	e	enum:SpvDecoration_
SpvDecorationXfbStride	lib/vulkan/spirv.h	/^    SpvDecorationXfbStride = 37,$/;"	e	enum:SpvDecoration_
SpvDecoration_	lib/vulkan/spirv.h	/^typedef enum SpvDecoration_ {$/;"	g
SpvDim	lib/vulkan/spirv.h	/^} SpvDim;$/;"	t	typeref:enum:SpvDim_
SpvDim1D	lib/vulkan/spirv.h	/^    SpvDim1D = 0,$/;"	e	enum:SpvDim_
SpvDim2D	lib/vulkan/spirv.h	/^    SpvDim2D = 1,$/;"	e	enum:SpvDim_
SpvDim3D	lib/vulkan/spirv.h	/^    SpvDim3D = 2,$/;"	e	enum:SpvDim_
SpvDimBuffer	lib/vulkan/spirv.h	/^    SpvDimBuffer = 5,$/;"	e	enum:SpvDim_
SpvDimCube	lib/vulkan/spirv.h	/^    SpvDimCube = 3,$/;"	e	enum:SpvDim_
SpvDimMax	lib/vulkan/spirv.h	/^    SpvDimMax = 0x7fffffff,$/;"	e	enum:SpvDim_
SpvDimRect	lib/vulkan/spirv.h	/^    SpvDimRect = 4,$/;"	e	enum:SpvDim_
SpvDimSubpassData	lib/vulkan/spirv.h	/^    SpvDimSubpassData = 6,$/;"	e	enum:SpvDim_
SpvDim_	lib/vulkan/spirv.h	/^typedef enum SpvDim_ {$/;"	g
SpvExecutionMode	lib/vulkan/spirv.h	/^} SpvExecutionMode;$/;"	t	typeref:enum:SpvExecutionMode_
SpvExecutionModeContractionOff	lib/vulkan/spirv.h	/^    SpvExecutionModeContractionOff = 31,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthGreater	lib/vulkan/spirv.h	/^    SpvExecutionModeDepthGreater = 14,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthLess	lib/vulkan/spirv.h	/^    SpvExecutionModeDepthLess = 15,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthReplacing	lib/vulkan/spirv.h	/^    SpvExecutionModeDepthReplacing = 12,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthUnchanged	lib/vulkan/spirv.h	/^    SpvExecutionModeDepthUnchanged = 16,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeEarlyFragmentTests	lib/vulkan/spirv.h	/^    SpvExecutionModeEarlyFragmentTests = 9,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeFinalizer	lib/vulkan/spirv.h	/^    SpvExecutionModeFinalizer = 34,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInitializer	lib/vulkan/spirv.h	/^    SpvExecutionModeInitializer = 33,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputLines	lib/vulkan/spirv.h	/^    SpvExecutionModeInputLines = 20,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputLinesAdjacency	lib/vulkan/spirv.h	/^    SpvExecutionModeInputLinesAdjacency = 21,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputPoints	lib/vulkan/spirv.h	/^    SpvExecutionModeInputPoints = 19,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputTrianglesAdjacency	lib/vulkan/spirv.h	/^    SpvExecutionModeInputTrianglesAdjacency = 23,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInvocations	lib/vulkan/spirv.h	/^    SpvExecutionModeInvocations = 0,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeIsolines	lib/vulkan/spirv.h	/^    SpvExecutionModeIsolines = 25,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSize	lib/vulkan/spirv.h	/^    SpvExecutionModeLocalSize = 17,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSizeHint	lib/vulkan/spirv.h	/^    SpvExecutionModeLocalSizeHint = 18,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeMax	lib/vulkan/spirv.h	/^    SpvExecutionModeMax = 0x7fffffff,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOriginLowerLeft	lib/vulkan/spirv.h	/^    SpvExecutionModeOriginLowerLeft = 8,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOriginUpperLeft	lib/vulkan/spirv.h	/^    SpvExecutionModeOriginUpperLeft = 7,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputLineStrip	lib/vulkan/spirv.h	/^    SpvExecutionModeOutputLineStrip = 28,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputPoints	lib/vulkan/spirv.h	/^    SpvExecutionModeOutputPoints = 27,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputTriangleStrip	lib/vulkan/spirv.h	/^    SpvExecutionModeOutputTriangleStrip = 29,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputVertices	lib/vulkan/spirv.h	/^    SpvExecutionModeOutputVertices = 26,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePixelCenterInteger	lib/vulkan/spirv.h	/^    SpvExecutionModePixelCenterInteger = 6,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePointMode	lib/vulkan/spirv.h	/^    SpvExecutionModePointMode = 10,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeQuads	lib/vulkan/spirv.h	/^    SpvExecutionModeQuads = 24,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingEqual	lib/vulkan/spirv.h	/^    SpvExecutionModeSpacingEqual = 1,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingFractionalEven	lib/vulkan/spirv.h	/^    SpvExecutionModeSpacingFractionalEven = 2,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingFractionalOdd	lib/vulkan/spirv.h	/^    SpvExecutionModeSpacingFractionalOdd = 3,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupSize	lib/vulkan/spirv.h	/^    SpvExecutionModeSubgroupSize = 35,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupsPerWorkgroup	lib/vulkan/spirv.h	/^    SpvExecutionModeSubgroupsPerWorkgroup = 36,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeTriangles	lib/vulkan/spirv.h	/^    SpvExecutionModeTriangles = 22,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVecTypeHint	lib/vulkan/spirv.h	/^    SpvExecutionModeVecTypeHint = 30,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVertexOrderCcw	lib/vulkan/spirv.h	/^    SpvExecutionModeVertexOrderCcw = 5,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVertexOrderCw	lib/vulkan/spirv.h	/^    SpvExecutionModeVertexOrderCw = 4,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeXfb	lib/vulkan/spirv.h	/^    SpvExecutionModeXfb = 11,$/;"	e	enum:SpvExecutionMode_
SpvExecutionMode_	lib/vulkan/spirv.h	/^typedef enum SpvExecutionMode_ {$/;"	g
SpvExecutionModel	lib/vulkan/spirv.h	/^} SpvExecutionModel;$/;"	t	typeref:enum:SpvExecutionModel_
SpvExecutionModelFragment	lib/vulkan/spirv.h	/^    SpvExecutionModelFragment = 4,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelGLCompute	lib/vulkan/spirv.h	/^    SpvExecutionModelGLCompute = 5,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelGeometry	lib/vulkan/spirv.h	/^    SpvExecutionModelGeometry = 3,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelKernel	lib/vulkan/spirv.h	/^    SpvExecutionModelKernel = 6,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelMax	lib/vulkan/spirv.h	/^    SpvExecutionModelMax = 0x7fffffff,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelTessellationControl	lib/vulkan/spirv.h	/^    SpvExecutionModelTessellationControl = 1,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelTessellationEvaluation	lib/vulkan/spirv.h	/^    SpvExecutionModelTessellationEvaluation = 2,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelVertex	lib/vulkan/spirv.h	/^    SpvExecutionModelVertex = 0,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModel_	lib/vulkan/spirv.h	/^typedef enum SpvExecutionModel_ {$/;"	g
SpvFPFastMathModeAllowRecipMask	lib/vulkan/spirv.h	/^    SpvFPFastMathModeAllowRecipMask = 0x00000008,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeAllowRecipShift	lib/vulkan/spirv.h	/^    SpvFPFastMathModeAllowRecipShift = 3,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeFastMask	lib/vulkan/spirv.h	/^    SpvFPFastMathModeFastMask = 0x00000010,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeFastShift	lib/vulkan/spirv.h	/^    SpvFPFastMathModeFastShift = 4,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeMask	lib/vulkan/spirv.h	/^} SpvFPFastMathModeMask;$/;"	t	typeref:enum:SpvFPFastMathModeMask_
SpvFPFastMathModeMaskNone	lib/vulkan/spirv.h	/^    SpvFPFastMathModeMaskNone = 0,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeMask_	lib/vulkan/spirv.h	/^typedef enum SpvFPFastMathModeMask_ {$/;"	g
SpvFPFastMathModeMax	lib/vulkan/spirv.h	/^    SpvFPFastMathModeMax = 0x7fffffff,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNSZMask	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNSZMask = 0x00000004,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNSZShift	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNSZShift = 2,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNotInfMask	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNotInfMask = 0x00000002,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNotInfShift	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNotInfShift = 1,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNotNaNMask	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNotNaNMask = 0x00000001,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNotNaNShift	lib/vulkan/spirv.h	/^    SpvFPFastMathModeNotNaNShift = 0,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeShift	lib/vulkan/spirv.h	/^} SpvFPFastMathModeShift;$/;"	t	typeref:enum:SpvFPFastMathModeShift_
SpvFPFastMathModeShift_	lib/vulkan/spirv.h	/^typedef enum SpvFPFastMathModeShift_ {$/;"	g
SpvFPRoundingMode	lib/vulkan/spirv.h	/^} SpvFPRoundingMode;$/;"	t	typeref:enum:SpvFPRoundingMode_
SpvFPRoundingModeMax	lib/vulkan/spirv.h	/^    SpvFPRoundingModeMax = 0x7fffffff,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTE	lib/vulkan/spirv.h	/^    SpvFPRoundingModeRTE = 0,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTN	lib/vulkan/spirv.h	/^    SpvFPRoundingModeRTN = 3,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTP	lib/vulkan/spirv.h	/^    SpvFPRoundingModeRTP = 2,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTZ	lib/vulkan/spirv.h	/^    SpvFPRoundingModeRTZ = 1,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingMode_	lib/vulkan/spirv.h	/^typedef enum SpvFPRoundingMode_ {$/;"	g
SpvFunctionControlConstMask	lib/vulkan/spirv.h	/^    SpvFunctionControlConstMask = 0x00000008,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlConstShift	lib/vulkan/spirv.h	/^    SpvFunctionControlConstShift = 3,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlDontInlineMask	lib/vulkan/spirv.h	/^    SpvFunctionControlDontInlineMask = 0x00000002,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlDontInlineShift	lib/vulkan/spirv.h	/^    SpvFunctionControlDontInlineShift = 1,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlInlineMask	lib/vulkan/spirv.h	/^    SpvFunctionControlInlineMask = 0x00000001,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlInlineShift	lib/vulkan/spirv.h	/^    SpvFunctionControlInlineShift = 0,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlMask	lib/vulkan/spirv.h	/^} SpvFunctionControlMask;$/;"	t	typeref:enum:SpvFunctionControlMask_
SpvFunctionControlMaskNone	lib/vulkan/spirv.h	/^    SpvFunctionControlMaskNone = 0,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlMask_	lib/vulkan/spirv.h	/^typedef enum SpvFunctionControlMask_ {$/;"	g
SpvFunctionControlMax	lib/vulkan/spirv.h	/^    SpvFunctionControlMax = 0x7fffffff,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlPureMask	lib/vulkan/spirv.h	/^    SpvFunctionControlPureMask = 0x00000004,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlPureShift	lib/vulkan/spirv.h	/^    SpvFunctionControlPureShift = 2,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlShift	lib/vulkan/spirv.h	/^} SpvFunctionControlShift;$/;"	t	typeref:enum:SpvFunctionControlShift_
SpvFunctionControlShift_	lib/vulkan/spirv.h	/^typedef enum SpvFunctionControlShift_ {$/;"	g
SpvFunctionParameterAttribute	lib/vulkan/spirv.h	/^} SpvFunctionParameterAttribute;$/;"	t	typeref:enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeByVal	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeByVal = 2,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeMax	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeMax = 0x7fffffff,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoAlias	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeNoAlias = 4,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoCapture	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeNoCapture = 5,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoReadWrite	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeNoReadWrite = 7,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoWrite	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeNoWrite = 6,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeSext	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeSext = 1,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeSret	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeSret = 3,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeZext	lib/vulkan/spirv.h	/^    SpvFunctionParameterAttributeZext = 0,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttribute_	lib/vulkan/spirv.h	/^typedef enum SpvFunctionParameterAttribute_ {$/;"	g
SpvGroupOperation	lib/vulkan/spirv.h	/^} SpvGroupOperation;$/;"	t	typeref:enum:SpvGroupOperation_
SpvGroupOperationExclusiveScan	lib/vulkan/spirv.h	/^    SpvGroupOperationExclusiveScan = 2,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationInclusiveScan	lib/vulkan/spirv.h	/^    SpvGroupOperationInclusiveScan = 1,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationMax	lib/vulkan/spirv.h	/^    SpvGroupOperationMax = 0x7fffffff,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationReduce	lib/vulkan/spirv.h	/^    SpvGroupOperationReduce = 0,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperation_	lib/vulkan/spirv.h	/^typedef enum SpvGroupOperation_ {$/;"	g
SpvId	lib/vulkan/spirv.h	/^typedef unsigned int SpvId;$/;"	t
SpvImageChannelDataType	lib/vulkan/spirv.h	/^} SpvImageChannelDataType;$/;"	t	typeref:enum:SpvImageChannelDataType_
SpvImageChannelDataTypeFloat	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeFloat = 14,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeHalfFloat	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeHalfFloat = 13,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeMax	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeMax = 0x7fffffff,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt16	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeSignedInt16 = 8,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt32	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeSignedInt32 = 9,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt8	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeSignedInt8 = 7,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSnormInt16	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeSnormInt16 = 1,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSnormInt8	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeSnormInt8 = 0,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt101010	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormInt101010 = 6,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt101010_2	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormInt101010_2 = 16,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt16	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormInt16 = 3,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt24	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormInt24 = 15,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt8	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormInt8 = 2,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormShort555	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormShort555 = 5,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormShort565	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnormShort565 = 4,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt16	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnsignedInt16 = 11,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt32	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnsignedInt32 = 12,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt8	lib/vulkan/spirv.h	/^    SpvImageChannelDataTypeUnsignedInt8 = 10,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataType_	lib/vulkan/spirv.h	/^typedef enum SpvImageChannelDataType_ {$/;"	g
SpvImageChannelOrder	lib/vulkan/spirv.h	/^} SpvImageChannelOrder;$/;"	t	typeref:enum:SpvImageChannelOrder_
SpvImageChannelOrderA	lib/vulkan/spirv.h	/^    SpvImageChannelOrderA = 1,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderABGR	lib/vulkan/spirv.h	/^    SpvImageChannelOrderABGR = 19,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderARGB	lib/vulkan/spirv.h	/^    SpvImageChannelOrderARGB = 7,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderBGRA	lib/vulkan/spirv.h	/^    SpvImageChannelOrderBGRA = 6,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderDepth	lib/vulkan/spirv.h	/^    SpvImageChannelOrderDepth = 13,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderDepthStencil	lib/vulkan/spirv.h	/^    SpvImageChannelOrderDepthStencil = 14,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderIntensity	lib/vulkan/spirv.h	/^    SpvImageChannelOrderIntensity = 8,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderLuminance	lib/vulkan/spirv.h	/^    SpvImageChannelOrderLuminance = 9,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderMax	lib/vulkan/spirv.h	/^    SpvImageChannelOrderMax = 0x7fffffff,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderR	lib/vulkan/spirv.h	/^    SpvImageChannelOrderR = 0,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRA	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRA = 3,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRG	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRG = 2,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGB	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRGB = 4,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGBA	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRGBA = 5,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGBx	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRGBx = 12,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGx	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRGx = 11,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRx	lib/vulkan/spirv.h	/^    SpvImageChannelOrderRx = 10,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrder_	lib/vulkan/spirv.h	/^typedef enum SpvImageChannelOrder_ {$/;"	g
SpvImageChannelOrdersBGRA	lib/vulkan/spirv.h	/^    SpvImageChannelOrdersBGRA = 18,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGB	lib/vulkan/spirv.h	/^    SpvImageChannelOrdersRGB = 15,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGBA	lib/vulkan/spirv.h	/^    SpvImageChannelOrdersRGBA = 17,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGBx	lib/vulkan/spirv.h	/^    SpvImageChannelOrdersRGBx = 16,$/;"	e	enum:SpvImageChannelOrder_
SpvImageFormat	lib/vulkan/spirv.h	/^} SpvImageFormat;$/;"	t	typeref:enum:SpvImageFormat_
SpvImageFormatMax	lib/vulkan/spirv.h	/^    SpvImageFormatMax = 0x7fffffff,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR11fG11fB10f	lib/vulkan/spirv.h	/^    SpvImageFormatR11fG11fB10f = 8,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16	lib/vulkan/spirv.h	/^    SpvImageFormatR16 = 14,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatR16Snorm = 19,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16f	lib/vulkan/spirv.h	/^    SpvImageFormatR16f = 9,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16i	lib/vulkan/spirv.h	/^    SpvImageFormatR16i = 28,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16ui	lib/vulkan/spirv.h	/^    SpvImageFormatR16ui = 38,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32f	lib/vulkan/spirv.h	/^    SpvImageFormatR32f = 3,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32i	lib/vulkan/spirv.h	/^    SpvImageFormatR32i = 24,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32ui	lib/vulkan/spirv.h	/^    SpvImageFormatR32ui = 33,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8	lib/vulkan/spirv.h	/^    SpvImageFormatR8 = 15,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatR8Snorm = 20,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8i	lib/vulkan/spirv.h	/^    SpvImageFormatR8i = 29,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8ui	lib/vulkan/spirv.h	/^    SpvImageFormatR8ui = 39,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16	lib/vulkan/spirv.h	/^    SpvImageFormatRg16 = 12,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatRg16Snorm = 17,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16f	lib/vulkan/spirv.h	/^    SpvImageFormatRg16f = 7,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16i	lib/vulkan/spirv.h	/^    SpvImageFormatRg16i = 26,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16ui	lib/vulkan/spirv.h	/^    SpvImageFormatRg16ui = 36,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32f	lib/vulkan/spirv.h	/^    SpvImageFormatRg32f = 6,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32i	lib/vulkan/spirv.h	/^    SpvImageFormatRg32i = 25,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32ui	lib/vulkan/spirv.h	/^    SpvImageFormatRg32ui = 35,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8	lib/vulkan/spirv.h	/^    SpvImageFormatRg8 = 13,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatRg8Snorm = 18,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8i	lib/vulkan/spirv.h	/^    SpvImageFormatRg8i = 27,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8ui	lib/vulkan/spirv.h	/^    SpvImageFormatRg8ui = 37,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgb10A2	lib/vulkan/spirv.h	/^    SpvImageFormatRgb10A2 = 11,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgb10a2ui	lib/vulkan/spirv.h	/^    SpvImageFormatRgb10a2ui = 34,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16	lib/vulkan/spirv.h	/^    SpvImageFormatRgba16 = 10,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatRgba16Snorm = 16,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16f	lib/vulkan/spirv.h	/^    SpvImageFormatRgba16f = 2,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16i	lib/vulkan/spirv.h	/^    SpvImageFormatRgba16i = 22,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16ui	lib/vulkan/spirv.h	/^    SpvImageFormatRgba16ui = 31,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32f	lib/vulkan/spirv.h	/^    SpvImageFormatRgba32f = 1,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32i	lib/vulkan/spirv.h	/^    SpvImageFormatRgba32i = 21,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32ui	lib/vulkan/spirv.h	/^    SpvImageFormatRgba32ui = 30,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8	lib/vulkan/spirv.h	/^    SpvImageFormatRgba8 = 4,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8Snorm	lib/vulkan/spirv.h	/^    SpvImageFormatRgba8Snorm = 5,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8i	lib/vulkan/spirv.h	/^    SpvImageFormatRgba8i = 23,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8ui	lib/vulkan/spirv.h	/^    SpvImageFormatRgba8ui = 32,$/;"	e	enum:SpvImageFormat_
SpvImageFormatUnknown	lib/vulkan/spirv.h	/^    SpvImageFormatUnknown = 0,$/;"	e	enum:SpvImageFormat_
SpvImageFormat_	lib/vulkan/spirv.h	/^typedef enum SpvImageFormat_ {$/;"	g
SpvImageOperandsBiasMask	lib/vulkan/spirv.h	/^    SpvImageOperandsBiasMask = 0x00000001,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsBiasShift	lib/vulkan/spirv.h	/^    SpvImageOperandsBiasShift = 0,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsConstOffsetMask	lib/vulkan/spirv.h	/^    SpvImageOperandsConstOffsetMask = 0x00000008,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsConstOffsetShift	lib/vulkan/spirv.h	/^    SpvImageOperandsConstOffsetShift = 3,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsConstOffsetsMask	lib/vulkan/spirv.h	/^    SpvImageOperandsConstOffsetsMask = 0x00000020,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsConstOffsetsShift	lib/vulkan/spirv.h	/^    SpvImageOperandsConstOffsetsShift = 5,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsGradMask	lib/vulkan/spirv.h	/^    SpvImageOperandsGradMask = 0x00000004,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsGradShift	lib/vulkan/spirv.h	/^    SpvImageOperandsGradShift = 2,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsLodMask	lib/vulkan/spirv.h	/^    SpvImageOperandsLodMask = 0x00000002,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsLodShift	lib/vulkan/spirv.h	/^    SpvImageOperandsLodShift = 1,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMask	lib/vulkan/spirv.h	/^} SpvImageOperandsMask;$/;"	t	typeref:enum:SpvImageOperandsMask_
SpvImageOperandsMaskNone	lib/vulkan/spirv.h	/^    SpvImageOperandsMaskNone = 0,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMask_	lib/vulkan/spirv.h	/^typedef enum SpvImageOperandsMask_ {$/;"	g
SpvImageOperandsMax	lib/vulkan/spirv.h	/^    SpvImageOperandsMax = 0x7fffffff,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMinLodMask	lib/vulkan/spirv.h	/^    SpvImageOperandsMinLodMask = 0x00000080,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMinLodShift	lib/vulkan/spirv.h	/^    SpvImageOperandsMinLodShift = 7,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsOffsetMask	lib/vulkan/spirv.h	/^    SpvImageOperandsOffsetMask = 0x00000010,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsOffsetShift	lib/vulkan/spirv.h	/^    SpvImageOperandsOffsetShift = 4,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsSampleMask	lib/vulkan/spirv.h	/^    SpvImageOperandsSampleMask = 0x00000040,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsSampleShift	lib/vulkan/spirv.h	/^    SpvImageOperandsSampleShift = 6,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsShift	lib/vulkan/spirv.h	/^} SpvImageOperandsShift;$/;"	t	typeref:enum:SpvImageOperandsShift_
SpvImageOperandsShift_	lib/vulkan/spirv.h	/^typedef enum SpvImageOperandsShift_ {$/;"	g
SpvKernelEnqueueFlags	lib/vulkan/spirv.h	/^} SpvKernelEnqueueFlags;$/;"	t	typeref:enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsMax	lib/vulkan/spirv.h	/^    SpvKernelEnqueueFlagsMax = 0x7fffffff,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsNoWait	lib/vulkan/spirv.h	/^    SpvKernelEnqueueFlagsNoWait = 0,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsWaitKernel	lib/vulkan/spirv.h	/^    SpvKernelEnqueueFlagsWaitKernel = 1,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsWaitWorkGroup	lib/vulkan/spirv.h	/^    SpvKernelEnqueueFlagsWaitWorkGroup = 2,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlags_	lib/vulkan/spirv.h	/^typedef enum SpvKernelEnqueueFlags_ {$/;"	g
SpvKernelProfilingInfoCmdExecTimeMask	lib/vulkan/spirv.h	/^    SpvKernelProfilingInfoCmdExecTimeMask = 0x00000001,$/;"	e	enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoCmdExecTimeShift	lib/vulkan/spirv.h	/^    SpvKernelProfilingInfoCmdExecTimeShift = 0,$/;"	e	enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoMask	lib/vulkan/spirv.h	/^} SpvKernelProfilingInfoMask;$/;"	t	typeref:enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoMaskNone	lib/vulkan/spirv.h	/^    SpvKernelProfilingInfoMaskNone = 0,$/;"	e	enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoMask_	lib/vulkan/spirv.h	/^typedef enum SpvKernelProfilingInfoMask_ {$/;"	g
SpvKernelProfilingInfoMax	lib/vulkan/spirv.h	/^    SpvKernelProfilingInfoMax = 0x7fffffff,$/;"	e	enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoShift	lib/vulkan/spirv.h	/^} SpvKernelProfilingInfoShift;$/;"	t	typeref:enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoShift_	lib/vulkan/spirv.h	/^typedef enum SpvKernelProfilingInfoShift_ {$/;"	g
SpvLinkageType	lib/vulkan/spirv.h	/^} SpvLinkageType;$/;"	t	typeref:enum:SpvLinkageType_
SpvLinkageTypeExport	lib/vulkan/spirv.h	/^    SpvLinkageTypeExport = 0,$/;"	e	enum:SpvLinkageType_
SpvLinkageTypeImport	lib/vulkan/spirv.h	/^    SpvLinkageTypeImport = 1,$/;"	e	enum:SpvLinkageType_
SpvLinkageTypeMax	lib/vulkan/spirv.h	/^    SpvLinkageTypeMax = 0x7fffffff,$/;"	e	enum:SpvLinkageType_
SpvLinkageType_	lib/vulkan/spirv.h	/^typedef enum SpvLinkageType_ {$/;"	g
SpvLoopControlDependencyInfiniteMask	lib/vulkan/spirv.h	/^    SpvLoopControlDependencyInfiniteMask = 0x00000004,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDependencyInfiniteShift	lib/vulkan/spirv.h	/^    SpvLoopControlDependencyInfiniteShift = 2,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlDependencyLengthMask	lib/vulkan/spirv.h	/^    SpvLoopControlDependencyLengthMask = 0x00000008,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDependencyLengthShift	lib/vulkan/spirv.h	/^    SpvLoopControlDependencyLengthShift = 3,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlDontUnrollMask	lib/vulkan/spirv.h	/^    SpvLoopControlDontUnrollMask = 0x00000002,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDontUnrollShift	lib/vulkan/spirv.h	/^    SpvLoopControlDontUnrollShift = 1,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMask	lib/vulkan/spirv.h	/^} SpvLoopControlMask;$/;"	t	typeref:enum:SpvLoopControlMask_
SpvLoopControlMaskNone	lib/vulkan/spirv.h	/^    SpvLoopControlMaskNone = 0,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMask_	lib/vulkan/spirv.h	/^typedef enum SpvLoopControlMask_ {$/;"	g
SpvLoopControlMax	lib/vulkan/spirv.h	/^    SpvLoopControlMax = 0x7fffffff,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlShift	lib/vulkan/spirv.h	/^} SpvLoopControlShift;$/;"	t	typeref:enum:SpvLoopControlShift_
SpvLoopControlShift_	lib/vulkan/spirv.h	/^typedef enum SpvLoopControlShift_ {$/;"	g
SpvLoopControlUnrollMask	lib/vulkan/spirv.h	/^    SpvLoopControlUnrollMask = 0x00000001,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlUnrollShift	lib/vulkan/spirv.h	/^    SpvLoopControlUnrollShift = 0,$/;"	e	enum:SpvLoopControlShift_
SpvMagicNumber	lib/vulkan/spirv.h	/^static const unsigned int SpvMagicNumber = 0x07230203;$/;"	v
SpvMemoryAccessAlignedMask	lib/vulkan/spirv.h	/^    SpvMemoryAccessAlignedMask = 0x00000002,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessAlignedShift	lib/vulkan/spirv.h	/^    SpvMemoryAccessAlignedShift = 1,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMask	lib/vulkan/spirv.h	/^} SpvMemoryAccessMask;$/;"	t	typeref:enum:SpvMemoryAccessMask_
SpvMemoryAccessMaskNone	lib/vulkan/spirv.h	/^    SpvMemoryAccessMaskNone = 0,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMask_	lib/vulkan/spirv.h	/^typedef enum SpvMemoryAccessMask_ {$/;"	g
SpvMemoryAccessMax	lib/vulkan/spirv.h	/^    SpvMemoryAccessMax = 0x7fffffff,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessNontemporalMask	lib/vulkan/spirv.h	/^    SpvMemoryAccessNontemporalMask = 0x00000004,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessNontemporalShift	lib/vulkan/spirv.h	/^    SpvMemoryAccessNontemporalShift = 2,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessShift	lib/vulkan/spirv.h	/^} SpvMemoryAccessShift;$/;"	t	typeref:enum:SpvMemoryAccessShift_
SpvMemoryAccessShift_	lib/vulkan/spirv.h	/^typedef enum SpvMemoryAccessShift_ {$/;"	g
SpvMemoryAccessVolatileMask	lib/vulkan/spirv.h	/^    SpvMemoryAccessVolatileMask = 0x00000001,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessVolatileShift	lib/vulkan/spirv.h	/^    SpvMemoryAccessVolatileShift = 0,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryModel	lib/vulkan/spirv.h	/^} SpvMemoryModel;$/;"	t	typeref:enum:SpvMemoryModel_
SpvMemoryModelGLSL450	lib/vulkan/spirv.h	/^    SpvMemoryModelGLSL450 = 1,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelMax	lib/vulkan/spirv.h	/^    SpvMemoryModelMax = 0x7fffffff,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelOpenCL	lib/vulkan/spirv.h	/^    SpvMemoryModelOpenCL = 2,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelSimple	lib/vulkan/spirv.h	/^    SpvMemoryModelSimple = 0,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModel_	lib/vulkan/spirv.h	/^typedef enum SpvMemoryModel_ {$/;"	g
SpvMemorySemanticsAcquireMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAcquireMask = 0x00000002,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAcquireReleaseMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAcquireReleaseMask = 0x00000008,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAcquireReleaseShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAcquireReleaseShift = 3,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsAcquireShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAcquireShift = 1,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsAtomicCounterMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAtomicCounterMemoryMask = 0x00000400,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAtomicCounterMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsAtomicCounterMemoryShift = 10,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsCrossWorkgroupMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsCrossWorkgroupMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsImageMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsImageMemoryMask = 0x00000800,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsImageMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsImageMemoryShift = 11,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMask	lib/vulkan/spirv.h	/^} SpvMemorySemanticsMask;$/;"	t	typeref:enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMaskNone	lib/vulkan/spirv.h	/^    SpvMemorySemanticsMaskNone = 0,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMask_	lib/vulkan/spirv.h	/^typedef enum SpvMemorySemanticsMask_ {$/;"	g
SpvMemorySemanticsMax	lib/vulkan/spirv.h	/^    SpvMemorySemanticsMax = 0x7fffffff,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsReleaseMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsReleaseMask = 0x00000004,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsReleaseShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsReleaseShift = 2,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsSequentiallyConsistentMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsSequentiallyConsistentMask = 0x00000010,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsSequentiallyConsistentShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsSequentiallyConsistentShift = 4,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsShift	lib/vulkan/spirv.h	/^} SpvMemorySemanticsShift;$/;"	t	typeref:enum:SpvMemorySemanticsShift_
SpvMemorySemanticsShift_	lib/vulkan/spirv.h	/^typedef enum SpvMemorySemanticsShift_ {$/;"	g
SpvMemorySemanticsSubgroupMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsSubgroupMemoryMask = 0x00000080,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsSubgroupMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsSubgroupMemoryShift = 7,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsUniformMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsUniformMemoryMask = 0x00000040,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsUniformMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsUniformMemoryShift = 6,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsWorkgroupMemoryMask	lib/vulkan/spirv.h	/^    SpvMemorySemanticsWorkgroupMemoryMask = 0x00000100,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsWorkgroupMemoryShift	lib/vulkan/spirv.h	/^    SpvMemorySemanticsWorkgroupMemoryShift = 8,$/;"	e	enum:SpvMemorySemanticsShift_
SpvOp	lib/vulkan/spirv.h	/^} SpvOp;$/;"	t	typeref:enum:SpvOp_
SpvOpAccessChain	lib/vulkan/spirv.h	/^    SpvOpAccessChain = 65,$/;"	e	enum:SpvOp_
SpvOpAll	lib/vulkan/spirv.h	/^    SpvOpAll = 155,$/;"	e	enum:SpvOp_
SpvOpAny	lib/vulkan/spirv.h	/^    SpvOpAny = 154,$/;"	e	enum:SpvOp_
SpvOpArrayLength	lib/vulkan/spirv.h	/^    SpvOpArrayLength = 68,$/;"	e	enum:SpvOp_
SpvOpAtomicAnd	lib/vulkan/spirv.h	/^    SpvOpAtomicAnd = 240,$/;"	e	enum:SpvOp_
SpvOpAtomicCompareExchange	lib/vulkan/spirv.h	/^    SpvOpAtomicCompareExchange = 230,$/;"	e	enum:SpvOp_
SpvOpAtomicCompareExchangeWeak	lib/vulkan/spirv.h	/^    SpvOpAtomicCompareExchangeWeak = 231,$/;"	e	enum:SpvOp_
SpvOpAtomicExchange	lib/vulkan/spirv.h	/^    SpvOpAtomicExchange = 229,$/;"	e	enum:SpvOp_
SpvOpAtomicFlagClear	lib/vulkan/spirv.h	/^    SpvOpAtomicFlagClear = 319,$/;"	e	enum:SpvOp_
SpvOpAtomicFlagTestAndSet	lib/vulkan/spirv.h	/^    SpvOpAtomicFlagTestAndSet = 318,$/;"	e	enum:SpvOp_
SpvOpAtomicIAdd	lib/vulkan/spirv.h	/^    SpvOpAtomicIAdd = 234,$/;"	e	enum:SpvOp_
SpvOpAtomicIDecrement	lib/vulkan/spirv.h	/^    SpvOpAtomicIDecrement = 233,$/;"	e	enum:SpvOp_
SpvOpAtomicIIncrement	lib/vulkan/spirv.h	/^    SpvOpAtomicIIncrement = 232,$/;"	e	enum:SpvOp_
SpvOpAtomicISub	lib/vulkan/spirv.h	/^    SpvOpAtomicISub = 235,$/;"	e	enum:SpvOp_
SpvOpAtomicLoad	lib/vulkan/spirv.h	/^    SpvOpAtomicLoad = 227,$/;"	e	enum:SpvOp_
SpvOpAtomicOr	lib/vulkan/spirv.h	/^    SpvOpAtomicOr = 241,$/;"	e	enum:SpvOp_
SpvOpAtomicSMax	lib/vulkan/spirv.h	/^    SpvOpAtomicSMax = 238,$/;"	e	enum:SpvOp_
SpvOpAtomicSMin	lib/vulkan/spirv.h	/^    SpvOpAtomicSMin = 236,$/;"	e	enum:SpvOp_
SpvOpAtomicStore	lib/vulkan/spirv.h	/^    SpvOpAtomicStore = 228,$/;"	e	enum:SpvOp_
SpvOpAtomicUMax	lib/vulkan/spirv.h	/^    SpvOpAtomicUMax = 239,$/;"	e	enum:SpvOp_
SpvOpAtomicUMin	lib/vulkan/spirv.h	/^    SpvOpAtomicUMin = 237,$/;"	e	enum:SpvOp_
SpvOpAtomicXor	lib/vulkan/spirv.h	/^    SpvOpAtomicXor = 242,$/;"	e	enum:SpvOp_
SpvOpBitCount	lib/vulkan/spirv.h	/^    SpvOpBitCount = 205,$/;"	e	enum:SpvOp_
SpvOpBitFieldInsert	lib/vulkan/spirv.h	/^    SpvOpBitFieldInsert = 201,$/;"	e	enum:SpvOp_
SpvOpBitFieldSExtract	lib/vulkan/spirv.h	/^    SpvOpBitFieldSExtract = 202,$/;"	e	enum:SpvOp_
SpvOpBitFieldUExtract	lib/vulkan/spirv.h	/^    SpvOpBitFieldUExtract = 203,$/;"	e	enum:SpvOp_
SpvOpBitReverse	lib/vulkan/spirv.h	/^    SpvOpBitReverse = 204,$/;"	e	enum:SpvOp_
SpvOpBitcast	lib/vulkan/spirv.h	/^    SpvOpBitcast = 124,$/;"	e	enum:SpvOp_
SpvOpBitwiseAnd	lib/vulkan/spirv.h	/^    SpvOpBitwiseAnd = 199,$/;"	e	enum:SpvOp_
SpvOpBitwiseOr	lib/vulkan/spirv.h	/^    SpvOpBitwiseOr = 197,$/;"	e	enum:SpvOp_
SpvOpBitwiseXor	lib/vulkan/spirv.h	/^    SpvOpBitwiseXor = 198,$/;"	e	enum:SpvOp_
SpvOpBranch	lib/vulkan/spirv.h	/^    SpvOpBranch = 249,$/;"	e	enum:SpvOp_
SpvOpBranchConditional	lib/vulkan/spirv.h	/^    SpvOpBranchConditional = 250,$/;"	e	enum:SpvOp_
SpvOpBuildNDRange	lib/vulkan/spirv.h	/^    SpvOpBuildNDRange = 304,$/;"	e	enum:SpvOp_
SpvOpCapability	lib/vulkan/spirv.h	/^    SpvOpCapability = 17,$/;"	e	enum:SpvOp_
SpvOpCaptureEventProfilingInfo	lib/vulkan/spirv.h	/^    SpvOpCaptureEventProfilingInfo = 302,$/;"	e	enum:SpvOp_
SpvOpCodeMask	lib/vulkan/spirv.h	/^static const unsigned int SpvOpCodeMask = 0xffff;$/;"	v
SpvOpCommitReadPipe	lib/vulkan/spirv.h	/^    SpvOpCommitReadPipe = 280,$/;"	e	enum:SpvOp_
SpvOpCommitWritePipe	lib/vulkan/spirv.h	/^    SpvOpCommitWritePipe = 281,$/;"	e	enum:SpvOp_
SpvOpCompositeConstruct	lib/vulkan/spirv.h	/^    SpvOpCompositeConstruct = 80,$/;"	e	enum:SpvOp_
SpvOpCompositeExtract	lib/vulkan/spirv.h	/^    SpvOpCompositeExtract = 81,$/;"	e	enum:SpvOp_
SpvOpCompositeInsert	lib/vulkan/spirv.h	/^    SpvOpCompositeInsert = 82,$/;"	e	enum:SpvOp_
SpvOpConstant	lib/vulkan/spirv.h	/^    SpvOpConstant = 43,$/;"	e	enum:SpvOp_
SpvOpConstantComposite	lib/vulkan/spirv.h	/^    SpvOpConstantComposite = 44,$/;"	e	enum:SpvOp_
SpvOpConstantFalse	lib/vulkan/spirv.h	/^    SpvOpConstantFalse = 42,$/;"	e	enum:SpvOp_
SpvOpConstantNull	lib/vulkan/spirv.h	/^    SpvOpConstantNull = 46,$/;"	e	enum:SpvOp_
SpvOpConstantPipeStorage	lib/vulkan/spirv.h	/^    SpvOpConstantPipeStorage = 323,$/;"	e	enum:SpvOp_
SpvOpConstantSampler	lib/vulkan/spirv.h	/^    SpvOpConstantSampler = 45,$/;"	e	enum:SpvOp_
SpvOpConstantTrue	lib/vulkan/spirv.h	/^    SpvOpConstantTrue = 41,$/;"	e	enum:SpvOp_
SpvOpControlBarrier	lib/vulkan/spirv.h	/^    SpvOpControlBarrier = 224,$/;"	e	enum:SpvOp_
SpvOpConvertFToS	lib/vulkan/spirv.h	/^    SpvOpConvertFToS = 110,$/;"	e	enum:SpvOp_
SpvOpConvertFToU	lib/vulkan/spirv.h	/^    SpvOpConvertFToU = 109,$/;"	e	enum:SpvOp_
SpvOpConvertPtrToU	lib/vulkan/spirv.h	/^    SpvOpConvertPtrToU = 117,$/;"	e	enum:SpvOp_
SpvOpConvertSToF	lib/vulkan/spirv.h	/^    SpvOpConvertSToF = 111,$/;"	e	enum:SpvOp_
SpvOpConvertUToF	lib/vulkan/spirv.h	/^    SpvOpConvertUToF = 112,$/;"	e	enum:SpvOp_
SpvOpConvertUToPtr	lib/vulkan/spirv.h	/^    SpvOpConvertUToPtr = 120,$/;"	e	enum:SpvOp_
SpvOpCopyMemory	lib/vulkan/spirv.h	/^    SpvOpCopyMemory = 63,$/;"	e	enum:SpvOp_
SpvOpCopyMemorySized	lib/vulkan/spirv.h	/^    SpvOpCopyMemorySized = 64,$/;"	e	enum:SpvOp_
SpvOpCopyObject	lib/vulkan/spirv.h	/^    SpvOpCopyObject = 83,$/;"	e	enum:SpvOp_
SpvOpCreatePipeFromPipeStorage	lib/vulkan/spirv.h	/^    SpvOpCreatePipeFromPipeStorage = 324,$/;"	e	enum:SpvOp_
SpvOpCreateUserEvent	lib/vulkan/spirv.h	/^    SpvOpCreateUserEvent = 299,$/;"	e	enum:SpvOp_
SpvOpDPdx	lib/vulkan/spirv.h	/^    SpvOpDPdx = 207,$/;"	e	enum:SpvOp_
SpvOpDPdxCoarse	lib/vulkan/spirv.h	/^    SpvOpDPdxCoarse = 213,$/;"	e	enum:SpvOp_
SpvOpDPdxFine	lib/vulkan/spirv.h	/^    SpvOpDPdxFine = 210,$/;"	e	enum:SpvOp_
SpvOpDPdy	lib/vulkan/spirv.h	/^    SpvOpDPdy = 208,$/;"	e	enum:SpvOp_
SpvOpDPdyCoarse	lib/vulkan/spirv.h	/^    SpvOpDPdyCoarse = 214,$/;"	e	enum:SpvOp_
SpvOpDPdyFine	lib/vulkan/spirv.h	/^    SpvOpDPdyFine = 211,$/;"	e	enum:SpvOp_
SpvOpDecorate	lib/vulkan/spirv.h	/^    SpvOpDecorate = 71,$/;"	e	enum:SpvOp_
SpvOpDecorationGroup	lib/vulkan/spirv.h	/^    SpvOpDecorationGroup = 73,$/;"	e	enum:SpvOp_
SpvOpDot	lib/vulkan/spirv.h	/^    SpvOpDot = 148,$/;"	e	enum:SpvOp_
SpvOpEmitStreamVertex	lib/vulkan/spirv.h	/^    SpvOpEmitStreamVertex = 220,$/;"	e	enum:SpvOp_
SpvOpEmitVertex	lib/vulkan/spirv.h	/^    SpvOpEmitVertex = 218,$/;"	e	enum:SpvOp_
SpvOpEndPrimitive	lib/vulkan/spirv.h	/^    SpvOpEndPrimitive = 219,$/;"	e	enum:SpvOp_
SpvOpEndStreamPrimitive	lib/vulkan/spirv.h	/^    SpvOpEndStreamPrimitive = 221,$/;"	e	enum:SpvOp_
SpvOpEnqueueKernel	lib/vulkan/spirv.h	/^    SpvOpEnqueueKernel = 292,$/;"	e	enum:SpvOp_
SpvOpEnqueueMarker	lib/vulkan/spirv.h	/^    SpvOpEnqueueMarker = 291,$/;"	e	enum:SpvOp_
SpvOpEntryPoint	lib/vulkan/spirv.h	/^    SpvOpEntryPoint = 15,$/;"	e	enum:SpvOp_
SpvOpExecutionMode	lib/vulkan/spirv.h	/^    SpvOpExecutionMode = 16,$/;"	e	enum:SpvOp_
SpvOpExtInst	lib/vulkan/spirv.h	/^    SpvOpExtInst = 12,$/;"	e	enum:SpvOp_
SpvOpExtInstImport	lib/vulkan/spirv.h	/^    SpvOpExtInstImport = 11,$/;"	e	enum:SpvOp_
SpvOpExtension	lib/vulkan/spirv.h	/^    SpvOpExtension = 10,$/;"	e	enum:SpvOp_
SpvOpFAdd	lib/vulkan/spirv.h	/^    SpvOpFAdd = 129,$/;"	e	enum:SpvOp_
SpvOpFConvert	lib/vulkan/spirv.h	/^    SpvOpFConvert = 115,$/;"	e	enum:SpvOp_
SpvOpFDiv	lib/vulkan/spirv.h	/^    SpvOpFDiv = 136,$/;"	e	enum:SpvOp_
SpvOpFMod	lib/vulkan/spirv.h	/^    SpvOpFMod = 141,$/;"	e	enum:SpvOp_
SpvOpFMul	lib/vulkan/spirv.h	/^    SpvOpFMul = 133,$/;"	e	enum:SpvOp_
SpvOpFNegate	lib/vulkan/spirv.h	/^    SpvOpFNegate = 127,$/;"	e	enum:SpvOp_
SpvOpFOrdEqual	lib/vulkan/spirv.h	/^    SpvOpFOrdEqual = 180,$/;"	e	enum:SpvOp_
SpvOpFOrdGreaterThan	lib/vulkan/spirv.h	/^    SpvOpFOrdGreaterThan = 186,$/;"	e	enum:SpvOp_
SpvOpFOrdGreaterThanEqual	lib/vulkan/spirv.h	/^    SpvOpFOrdGreaterThanEqual = 190,$/;"	e	enum:SpvOp_
SpvOpFOrdLessThan	lib/vulkan/spirv.h	/^    SpvOpFOrdLessThan = 184,$/;"	e	enum:SpvOp_
SpvOpFOrdLessThanEqual	lib/vulkan/spirv.h	/^    SpvOpFOrdLessThanEqual = 188,$/;"	e	enum:SpvOp_
SpvOpFOrdNotEqual	lib/vulkan/spirv.h	/^    SpvOpFOrdNotEqual = 182,$/;"	e	enum:SpvOp_
SpvOpFRem	lib/vulkan/spirv.h	/^    SpvOpFRem = 140,$/;"	e	enum:SpvOp_
SpvOpFSub	lib/vulkan/spirv.h	/^    SpvOpFSub = 131,$/;"	e	enum:SpvOp_
SpvOpFUnordEqual	lib/vulkan/spirv.h	/^    SpvOpFUnordEqual = 181,$/;"	e	enum:SpvOp_
SpvOpFUnordGreaterThan	lib/vulkan/spirv.h	/^    SpvOpFUnordGreaterThan = 187,$/;"	e	enum:SpvOp_
SpvOpFUnordGreaterThanEqual	lib/vulkan/spirv.h	/^    SpvOpFUnordGreaterThanEqual = 191,$/;"	e	enum:SpvOp_
SpvOpFUnordLessThan	lib/vulkan/spirv.h	/^    SpvOpFUnordLessThan = 185,$/;"	e	enum:SpvOp_
SpvOpFUnordLessThanEqual	lib/vulkan/spirv.h	/^    SpvOpFUnordLessThanEqual = 189,$/;"	e	enum:SpvOp_
SpvOpFUnordNotEqual	lib/vulkan/spirv.h	/^    SpvOpFUnordNotEqual = 183,$/;"	e	enum:SpvOp_
SpvOpFunction	lib/vulkan/spirv.h	/^    SpvOpFunction = 54,$/;"	e	enum:SpvOp_
SpvOpFunctionCall	lib/vulkan/spirv.h	/^    SpvOpFunctionCall = 57,$/;"	e	enum:SpvOp_
SpvOpFunctionEnd	lib/vulkan/spirv.h	/^    SpvOpFunctionEnd = 56,$/;"	e	enum:SpvOp_
SpvOpFunctionParameter	lib/vulkan/spirv.h	/^    SpvOpFunctionParameter = 55,$/;"	e	enum:SpvOp_
SpvOpFwidth	lib/vulkan/spirv.h	/^    SpvOpFwidth = 209,$/;"	e	enum:SpvOp_
SpvOpFwidthCoarse	lib/vulkan/spirv.h	/^    SpvOpFwidthCoarse = 215,$/;"	e	enum:SpvOp_
SpvOpFwidthFine	lib/vulkan/spirv.h	/^    SpvOpFwidthFine = 212,$/;"	e	enum:SpvOp_
SpvOpGenericCastToPtr	lib/vulkan/spirv.h	/^    SpvOpGenericCastToPtr = 122,$/;"	e	enum:SpvOp_
SpvOpGenericCastToPtrExplicit	lib/vulkan/spirv.h	/^    SpvOpGenericCastToPtrExplicit = 123,$/;"	e	enum:SpvOp_
SpvOpGenericPtrMemSemantics	lib/vulkan/spirv.h	/^    SpvOpGenericPtrMemSemantics = 69,$/;"	e	enum:SpvOp_
SpvOpGetDefaultQueue	lib/vulkan/spirv.h	/^    SpvOpGetDefaultQueue = 303,$/;"	e	enum:SpvOp_
SpvOpGetKernelLocalSizeForSubgroupCount	lib/vulkan/spirv.h	/^    SpvOpGetKernelLocalSizeForSubgroupCount = 325,$/;"	e	enum:SpvOp_
SpvOpGetKernelMaxNumSubgroups	lib/vulkan/spirv.h	/^    SpvOpGetKernelMaxNumSubgroups = 326,$/;"	e	enum:SpvOp_
SpvOpGetKernelNDrangeMaxSubGroupSize	lib/vulkan/spirv.h	/^    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,$/;"	e	enum:SpvOp_
SpvOpGetKernelNDrangeSubGroupCount	lib/vulkan/spirv.h	/^    SpvOpGetKernelNDrangeSubGroupCount = 293,$/;"	e	enum:SpvOp_
SpvOpGetKernelPreferredWorkGroupSizeMultiple	lib/vulkan/spirv.h	/^    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,$/;"	e	enum:SpvOp_
SpvOpGetKernelWorkGroupSize	lib/vulkan/spirv.h	/^    SpvOpGetKernelWorkGroupSize = 295,$/;"	e	enum:SpvOp_
SpvOpGetMaxPipePackets	lib/vulkan/spirv.h	/^    SpvOpGetMaxPipePackets = 284,$/;"	e	enum:SpvOp_
SpvOpGetNumPipePackets	lib/vulkan/spirv.h	/^    SpvOpGetNumPipePackets = 283,$/;"	e	enum:SpvOp_
SpvOpGroupAll	lib/vulkan/spirv.h	/^    SpvOpGroupAll = 261,$/;"	e	enum:SpvOp_
SpvOpGroupAny	lib/vulkan/spirv.h	/^    SpvOpGroupAny = 262,$/;"	e	enum:SpvOp_
SpvOpGroupAsyncCopy	lib/vulkan/spirv.h	/^    SpvOpGroupAsyncCopy = 259,$/;"	e	enum:SpvOp_
SpvOpGroupBroadcast	lib/vulkan/spirv.h	/^    SpvOpGroupBroadcast = 263,$/;"	e	enum:SpvOp_
SpvOpGroupCommitReadPipe	lib/vulkan/spirv.h	/^    SpvOpGroupCommitReadPipe = 287,$/;"	e	enum:SpvOp_
SpvOpGroupCommitWritePipe	lib/vulkan/spirv.h	/^    SpvOpGroupCommitWritePipe = 288,$/;"	e	enum:SpvOp_
SpvOpGroupDecorate	lib/vulkan/spirv.h	/^    SpvOpGroupDecorate = 74,$/;"	e	enum:SpvOp_
SpvOpGroupFAdd	lib/vulkan/spirv.h	/^    SpvOpGroupFAdd = 265,$/;"	e	enum:SpvOp_
SpvOpGroupFMax	lib/vulkan/spirv.h	/^    SpvOpGroupFMax = 269,$/;"	e	enum:SpvOp_
SpvOpGroupFMin	lib/vulkan/spirv.h	/^    SpvOpGroupFMin = 266,$/;"	e	enum:SpvOp_
SpvOpGroupIAdd	lib/vulkan/spirv.h	/^    SpvOpGroupIAdd = 264,$/;"	e	enum:SpvOp_
SpvOpGroupMemberDecorate	lib/vulkan/spirv.h	/^    SpvOpGroupMemberDecorate = 75,$/;"	e	enum:SpvOp_
SpvOpGroupReserveReadPipePackets	lib/vulkan/spirv.h	/^    SpvOpGroupReserveReadPipePackets = 285,$/;"	e	enum:SpvOp_
SpvOpGroupReserveWritePipePackets	lib/vulkan/spirv.h	/^    SpvOpGroupReserveWritePipePackets = 286,$/;"	e	enum:SpvOp_
SpvOpGroupSMax	lib/vulkan/spirv.h	/^    SpvOpGroupSMax = 271,$/;"	e	enum:SpvOp_
SpvOpGroupSMin	lib/vulkan/spirv.h	/^    SpvOpGroupSMin = 268,$/;"	e	enum:SpvOp_
SpvOpGroupUMax	lib/vulkan/spirv.h	/^    SpvOpGroupUMax = 270,$/;"	e	enum:SpvOp_
SpvOpGroupUMin	lib/vulkan/spirv.h	/^    SpvOpGroupUMin = 267,$/;"	e	enum:SpvOp_
SpvOpGroupWaitEvents	lib/vulkan/spirv.h	/^    SpvOpGroupWaitEvents = 260,$/;"	e	enum:SpvOp_
SpvOpIAdd	lib/vulkan/spirv.h	/^    SpvOpIAdd = 128,$/;"	e	enum:SpvOp_
SpvOpIAddCarry	lib/vulkan/spirv.h	/^    SpvOpIAddCarry = 149,$/;"	e	enum:SpvOp_
SpvOpIEqual	lib/vulkan/spirv.h	/^    SpvOpIEqual = 170,$/;"	e	enum:SpvOp_
SpvOpIMul	lib/vulkan/spirv.h	/^    SpvOpIMul = 132,$/;"	e	enum:SpvOp_
SpvOpINotEqual	lib/vulkan/spirv.h	/^    SpvOpINotEqual = 171,$/;"	e	enum:SpvOp_
SpvOpISub	lib/vulkan/spirv.h	/^    SpvOpISub = 130,$/;"	e	enum:SpvOp_
SpvOpISubBorrow	lib/vulkan/spirv.h	/^    SpvOpISubBorrow = 150,$/;"	e	enum:SpvOp_
SpvOpImage	lib/vulkan/spirv.h	/^    SpvOpImage = 100,$/;"	e	enum:SpvOp_
SpvOpImageDrefGather	lib/vulkan/spirv.h	/^    SpvOpImageDrefGather = 97,$/;"	e	enum:SpvOp_
SpvOpImageFetch	lib/vulkan/spirv.h	/^    SpvOpImageFetch = 95,$/;"	e	enum:SpvOp_
SpvOpImageGather	lib/vulkan/spirv.h	/^    SpvOpImageGather = 96,$/;"	e	enum:SpvOp_
SpvOpImageQueryFormat	lib/vulkan/spirv.h	/^    SpvOpImageQueryFormat = 101,$/;"	e	enum:SpvOp_
SpvOpImageQueryLevels	lib/vulkan/spirv.h	/^    SpvOpImageQueryLevels = 106,$/;"	e	enum:SpvOp_
SpvOpImageQueryLod	lib/vulkan/spirv.h	/^    SpvOpImageQueryLod = 105,$/;"	e	enum:SpvOp_
SpvOpImageQueryOrder	lib/vulkan/spirv.h	/^    SpvOpImageQueryOrder = 102,$/;"	e	enum:SpvOp_
SpvOpImageQuerySamples	lib/vulkan/spirv.h	/^    SpvOpImageQuerySamples = 107,$/;"	e	enum:SpvOp_
SpvOpImageQuerySize	lib/vulkan/spirv.h	/^    SpvOpImageQuerySize = 104,$/;"	e	enum:SpvOp_
SpvOpImageQuerySizeLod	lib/vulkan/spirv.h	/^    SpvOpImageQuerySizeLod = 103,$/;"	e	enum:SpvOp_
SpvOpImageRead	lib/vulkan/spirv.h	/^    SpvOpImageRead = 98,$/;"	e	enum:SpvOp_
SpvOpImageSampleDrefExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleDrefExplicitLod = 90,$/;"	e	enum:SpvOp_
SpvOpImageSampleDrefImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleDrefImplicitLod = 89,$/;"	e	enum:SpvOp_
SpvOpImageSampleExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleExplicitLod = 88,$/;"	e	enum:SpvOp_
SpvOpImageSampleImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleImplicitLod = 87,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjDrefExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleProjDrefExplicitLod = 94,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjDrefImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleProjDrefImplicitLod = 93,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleProjExplicitLod = 92,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSampleProjImplicitLod = 91,$/;"	e	enum:SpvOp_
SpvOpImageSparseDrefGather	lib/vulkan/spirv.h	/^    SpvOpImageSparseDrefGather = 315,$/;"	e	enum:SpvOp_
SpvOpImageSparseFetch	lib/vulkan/spirv.h	/^    SpvOpImageSparseFetch = 313,$/;"	e	enum:SpvOp_
SpvOpImageSparseGather	lib/vulkan/spirv.h	/^    SpvOpImageSparseGather = 314,$/;"	e	enum:SpvOp_
SpvOpImageSparseRead	lib/vulkan/spirv.h	/^    SpvOpImageSparseRead = 320,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleDrefExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleDrefExplicitLod = 308,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleDrefImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleDrefImplicitLod = 307,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleExplicitLod = 306,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleImplicitLod = 305,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjDrefExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleProjDrefExplicitLod = 312,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjDrefImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleProjDrefImplicitLod = 311,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjExplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleProjExplicitLod = 310,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjImplicitLod	lib/vulkan/spirv.h	/^    SpvOpImageSparseSampleProjImplicitLod = 309,$/;"	e	enum:SpvOp_
SpvOpImageSparseTexelsResident	lib/vulkan/spirv.h	/^    SpvOpImageSparseTexelsResident = 316,$/;"	e	enum:SpvOp_
SpvOpImageTexelPointer	lib/vulkan/spirv.h	/^    SpvOpImageTexelPointer = 60,$/;"	e	enum:SpvOp_
SpvOpImageWrite	lib/vulkan/spirv.h	/^    SpvOpImageWrite = 99,$/;"	e	enum:SpvOp_
SpvOpInBoundsAccessChain	lib/vulkan/spirv.h	/^    SpvOpInBoundsAccessChain = 66,$/;"	e	enum:SpvOp_
SpvOpInBoundsPtrAccessChain	lib/vulkan/spirv.h	/^    SpvOpInBoundsPtrAccessChain = 70,$/;"	e	enum:SpvOp_
SpvOpIsFinite	lib/vulkan/spirv.h	/^    SpvOpIsFinite = 158,$/;"	e	enum:SpvOp_
SpvOpIsInf	lib/vulkan/spirv.h	/^    SpvOpIsInf = 157,$/;"	e	enum:SpvOp_
SpvOpIsNan	lib/vulkan/spirv.h	/^    SpvOpIsNan = 156,$/;"	e	enum:SpvOp_
SpvOpIsNormal	lib/vulkan/spirv.h	/^    SpvOpIsNormal = 159,$/;"	e	enum:SpvOp_
SpvOpIsValidEvent	lib/vulkan/spirv.h	/^    SpvOpIsValidEvent = 300,$/;"	e	enum:SpvOp_
SpvOpIsValidReserveId	lib/vulkan/spirv.h	/^    SpvOpIsValidReserveId = 282,$/;"	e	enum:SpvOp_
SpvOpKill	lib/vulkan/spirv.h	/^    SpvOpKill = 252,$/;"	e	enum:SpvOp_
SpvOpLabel	lib/vulkan/spirv.h	/^    SpvOpLabel = 248,$/;"	e	enum:SpvOp_
SpvOpLessOrGreater	lib/vulkan/spirv.h	/^    SpvOpLessOrGreater = 161,$/;"	e	enum:SpvOp_
SpvOpLifetimeStart	lib/vulkan/spirv.h	/^    SpvOpLifetimeStart = 256,$/;"	e	enum:SpvOp_
SpvOpLifetimeStop	lib/vulkan/spirv.h	/^    SpvOpLifetimeStop = 257,$/;"	e	enum:SpvOp_
SpvOpLine	lib/vulkan/spirv.h	/^    SpvOpLine = 8,$/;"	e	enum:SpvOp_
SpvOpLoad	lib/vulkan/spirv.h	/^    SpvOpLoad = 61,$/;"	e	enum:SpvOp_
SpvOpLogicalAnd	lib/vulkan/spirv.h	/^    SpvOpLogicalAnd = 167,$/;"	e	enum:SpvOp_
SpvOpLogicalEqual	lib/vulkan/spirv.h	/^    SpvOpLogicalEqual = 164,$/;"	e	enum:SpvOp_
SpvOpLogicalNot	lib/vulkan/spirv.h	/^    SpvOpLogicalNot = 168,$/;"	e	enum:SpvOp_
SpvOpLogicalNotEqual	lib/vulkan/spirv.h	/^    SpvOpLogicalNotEqual = 165,$/;"	e	enum:SpvOp_
SpvOpLogicalOr	lib/vulkan/spirv.h	/^    SpvOpLogicalOr = 166,$/;"	e	enum:SpvOp_
SpvOpLoopMerge	lib/vulkan/spirv.h	/^    SpvOpLoopMerge = 246,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesMatrix	lib/vulkan/spirv.h	/^    SpvOpMatrixTimesMatrix = 146,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesScalar	lib/vulkan/spirv.h	/^    SpvOpMatrixTimesScalar = 143,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesVector	lib/vulkan/spirv.h	/^    SpvOpMatrixTimesVector = 145,$/;"	e	enum:SpvOp_
SpvOpMax	lib/vulkan/spirv.h	/^    SpvOpMax = 0x7fffffff,$/;"	e	enum:SpvOp_
SpvOpMemberDecorate	lib/vulkan/spirv.h	/^    SpvOpMemberDecorate = 72,$/;"	e	enum:SpvOp_
SpvOpMemberName	lib/vulkan/spirv.h	/^    SpvOpMemberName = 6,$/;"	e	enum:SpvOp_
SpvOpMemoryBarrier	lib/vulkan/spirv.h	/^    SpvOpMemoryBarrier = 225,$/;"	e	enum:SpvOp_
SpvOpMemoryModel	lib/vulkan/spirv.h	/^    SpvOpMemoryModel = 14,$/;"	e	enum:SpvOp_
SpvOpMemoryNamedBarrier	lib/vulkan/spirv.h	/^    SpvOpMemoryNamedBarrier = 329,$/;"	e	enum:SpvOp_
SpvOpModuleProcessed	lib/vulkan/spirv.h	/^    SpvOpModuleProcessed = 330,$/;"	e	enum:SpvOp_
SpvOpName	lib/vulkan/spirv.h	/^    SpvOpName = 5,$/;"	e	enum:SpvOp_
SpvOpNamedBarrierInitialize	lib/vulkan/spirv.h	/^    SpvOpNamedBarrierInitialize = 328,$/;"	e	enum:SpvOp_
SpvOpNoLine	lib/vulkan/spirv.h	/^    SpvOpNoLine = 317,$/;"	e	enum:SpvOp_
SpvOpNop	lib/vulkan/spirv.h	/^    SpvOpNop = 0,$/;"	e	enum:SpvOp_
SpvOpNot	lib/vulkan/spirv.h	/^    SpvOpNot = 200,$/;"	e	enum:SpvOp_
SpvOpOrdered	lib/vulkan/spirv.h	/^    SpvOpOrdered = 162,$/;"	e	enum:SpvOp_
SpvOpOuterProduct	lib/vulkan/spirv.h	/^    SpvOpOuterProduct = 147,$/;"	e	enum:SpvOp_
SpvOpPhi	lib/vulkan/spirv.h	/^    SpvOpPhi = 245,$/;"	e	enum:SpvOp_
SpvOpPtrAccessChain	lib/vulkan/spirv.h	/^    SpvOpPtrAccessChain = 67,$/;"	e	enum:SpvOp_
SpvOpPtrCastToGeneric	lib/vulkan/spirv.h	/^    SpvOpPtrCastToGeneric = 121,$/;"	e	enum:SpvOp_
SpvOpQuantizeToF16	lib/vulkan/spirv.h	/^    SpvOpQuantizeToF16 = 116,$/;"	e	enum:SpvOp_
SpvOpReadPipe	lib/vulkan/spirv.h	/^    SpvOpReadPipe = 274,$/;"	e	enum:SpvOp_
SpvOpReleaseEvent	lib/vulkan/spirv.h	/^    SpvOpReleaseEvent = 298,$/;"	e	enum:SpvOp_
SpvOpReserveReadPipePackets	lib/vulkan/spirv.h	/^    SpvOpReserveReadPipePackets = 278,$/;"	e	enum:SpvOp_
SpvOpReserveWritePipePackets	lib/vulkan/spirv.h	/^    SpvOpReserveWritePipePackets = 279,$/;"	e	enum:SpvOp_
SpvOpReservedReadPipe	lib/vulkan/spirv.h	/^    SpvOpReservedReadPipe = 276,$/;"	e	enum:SpvOp_
SpvOpReservedWritePipe	lib/vulkan/spirv.h	/^    SpvOpReservedWritePipe = 277,$/;"	e	enum:SpvOp_
SpvOpRetainEvent	lib/vulkan/spirv.h	/^    SpvOpRetainEvent = 297,$/;"	e	enum:SpvOp_
SpvOpReturn	lib/vulkan/spirv.h	/^    SpvOpReturn = 253,$/;"	e	enum:SpvOp_
SpvOpReturnValue	lib/vulkan/spirv.h	/^    SpvOpReturnValue = 254,$/;"	e	enum:SpvOp_
SpvOpSConvert	lib/vulkan/spirv.h	/^    SpvOpSConvert = 114,$/;"	e	enum:SpvOp_
SpvOpSDiv	lib/vulkan/spirv.h	/^    SpvOpSDiv = 135,$/;"	e	enum:SpvOp_
SpvOpSGreaterThan	lib/vulkan/spirv.h	/^    SpvOpSGreaterThan = 173,$/;"	e	enum:SpvOp_
SpvOpSGreaterThanEqual	lib/vulkan/spirv.h	/^    SpvOpSGreaterThanEqual = 175,$/;"	e	enum:SpvOp_
SpvOpSLessThan	lib/vulkan/spirv.h	/^    SpvOpSLessThan = 177,$/;"	e	enum:SpvOp_
SpvOpSLessThanEqual	lib/vulkan/spirv.h	/^    SpvOpSLessThanEqual = 179,$/;"	e	enum:SpvOp_
SpvOpSMod	lib/vulkan/spirv.h	/^    SpvOpSMod = 139,$/;"	e	enum:SpvOp_
SpvOpSMulExtended	lib/vulkan/spirv.h	/^    SpvOpSMulExtended = 152,$/;"	e	enum:SpvOp_
SpvOpSNegate	lib/vulkan/spirv.h	/^    SpvOpSNegate = 126,$/;"	e	enum:SpvOp_
SpvOpSRem	lib/vulkan/spirv.h	/^    SpvOpSRem = 138,$/;"	e	enum:SpvOp_
SpvOpSampledImage	lib/vulkan/spirv.h	/^    SpvOpSampledImage = 86,$/;"	e	enum:SpvOp_
SpvOpSatConvertSToU	lib/vulkan/spirv.h	/^    SpvOpSatConvertSToU = 118,$/;"	e	enum:SpvOp_
SpvOpSatConvertUToS	lib/vulkan/spirv.h	/^    SpvOpSatConvertUToS = 119,$/;"	e	enum:SpvOp_
SpvOpSelect	lib/vulkan/spirv.h	/^    SpvOpSelect = 169,$/;"	e	enum:SpvOp_
SpvOpSelectionMerge	lib/vulkan/spirv.h	/^    SpvOpSelectionMerge = 247,$/;"	e	enum:SpvOp_
SpvOpSetUserEventStatus	lib/vulkan/spirv.h	/^    SpvOpSetUserEventStatus = 301,$/;"	e	enum:SpvOp_
SpvOpShiftLeftLogical	lib/vulkan/spirv.h	/^    SpvOpShiftLeftLogical = 196,$/;"	e	enum:SpvOp_
SpvOpShiftRightArithmetic	lib/vulkan/spirv.h	/^    SpvOpShiftRightArithmetic = 195,$/;"	e	enum:SpvOp_
SpvOpShiftRightLogical	lib/vulkan/spirv.h	/^    SpvOpShiftRightLogical = 194,$/;"	e	enum:SpvOp_
SpvOpSignBitSet	lib/vulkan/spirv.h	/^    SpvOpSignBitSet = 160,$/;"	e	enum:SpvOp_
SpvOpSizeOf	lib/vulkan/spirv.h	/^    SpvOpSizeOf = 321,$/;"	e	enum:SpvOp_
SpvOpSource	lib/vulkan/spirv.h	/^    SpvOpSource = 3,$/;"	e	enum:SpvOp_
SpvOpSourceContinued	lib/vulkan/spirv.h	/^    SpvOpSourceContinued = 2,$/;"	e	enum:SpvOp_
SpvOpSourceExtension	lib/vulkan/spirv.h	/^    SpvOpSourceExtension = 4,$/;"	e	enum:SpvOp_
SpvOpSpecConstant	lib/vulkan/spirv.h	/^    SpvOpSpecConstant = 50,$/;"	e	enum:SpvOp_
SpvOpSpecConstantComposite	lib/vulkan/spirv.h	/^    SpvOpSpecConstantComposite = 51,$/;"	e	enum:SpvOp_
SpvOpSpecConstantFalse	lib/vulkan/spirv.h	/^    SpvOpSpecConstantFalse = 49,$/;"	e	enum:SpvOp_
SpvOpSpecConstantOp	lib/vulkan/spirv.h	/^    SpvOpSpecConstantOp = 52,$/;"	e	enum:SpvOp_
SpvOpSpecConstantTrue	lib/vulkan/spirv.h	/^    SpvOpSpecConstantTrue = 48,$/;"	e	enum:SpvOp_
SpvOpStore	lib/vulkan/spirv.h	/^    SpvOpStore = 62,$/;"	e	enum:SpvOp_
SpvOpString	lib/vulkan/spirv.h	/^    SpvOpString = 7,$/;"	e	enum:SpvOp_
SpvOpSwitch	lib/vulkan/spirv.h	/^    SpvOpSwitch = 251,$/;"	e	enum:SpvOp_
SpvOpTranspose	lib/vulkan/spirv.h	/^    SpvOpTranspose = 84,$/;"	e	enum:SpvOp_
SpvOpTypeArray	lib/vulkan/spirv.h	/^    SpvOpTypeArray = 28,$/;"	e	enum:SpvOp_
SpvOpTypeBool	lib/vulkan/spirv.h	/^    SpvOpTypeBool = 20,$/;"	e	enum:SpvOp_
SpvOpTypeDeviceEvent	lib/vulkan/spirv.h	/^    SpvOpTypeDeviceEvent = 35,$/;"	e	enum:SpvOp_
SpvOpTypeEvent	lib/vulkan/spirv.h	/^    SpvOpTypeEvent = 34,$/;"	e	enum:SpvOp_
SpvOpTypeFloat	lib/vulkan/spirv.h	/^    SpvOpTypeFloat = 22,$/;"	e	enum:SpvOp_
SpvOpTypeForwardPointer	lib/vulkan/spirv.h	/^    SpvOpTypeForwardPointer = 39,$/;"	e	enum:SpvOp_
SpvOpTypeFunction	lib/vulkan/spirv.h	/^    SpvOpTypeFunction = 33,$/;"	e	enum:SpvOp_
SpvOpTypeImage	lib/vulkan/spirv.h	/^    SpvOpTypeImage = 25,$/;"	e	enum:SpvOp_
SpvOpTypeInt	lib/vulkan/spirv.h	/^    SpvOpTypeInt = 21,$/;"	e	enum:SpvOp_
SpvOpTypeMatrix	lib/vulkan/spirv.h	/^    SpvOpTypeMatrix = 24,$/;"	e	enum:SpvOp_
SpvOpTypeNamedBarrier	lib/vulkan/spirv.h	/^    SpvOpTypeNamedBarrier = 327,$/;"	e	enum:SpvOp_
SpvOpTypeOpaque	lib/vulkan/spirv.h	/^    SpvOpTypeOpaque = 31,$/;"	e	enum:SpvOp_
SpvOpTypePipe	lib/vulkan/spirv.h	/^    SpvOpTypePipe = 38,$/;"	e	enum:SpvOp_
SpvOpTypePipeStorage	lib/vulkan/spirv.h	/^    SpvOpTypePipeStorage = 322,$/;"	e	enum:SpvOp_
SpvOpTypePointer	lib/vulkan/spirv.h	/^    SpvOpTypePointer = 32,$/;"	e	enum:SpvOp_
SpvOpTypeQueue	lib/vulkan/spirv.h	/^    SpvOpTypeQueue = 37,$/;"	e	enum:SpvOp_
SpvOpTypeReserveId	lib/vulkan/spirv.h	/^    SpvOpTypeReserveId = 36,$/;"	e	enum:SpvOp_
SpvOpTypeRuntimeArray	lib/vulkan/spirv.h	/^    SpvOpTypeRuntimeArray = 29,$/;"	e	enum:SpvOp_
SpvOpTypeSampledImage	lib/vulkan/spirv.h	/^    SpvOpTypeSampledImage = 27,$/;"	e	enum:SpvOp_
SpvOpTypeSampler	lib/vulkan/spirv.h	/^    SpvOpTypeSampler = 26,$/;"	e	enum:SpvOp_
SpvOpTypeStruct	lib/vulkan/spirv.h	/^    SpvOpTypeStruct = 30,$/;"	e	enum:SpvOp_
SpvOpTypeVector	lib/vulkan/spirv.h	/^    SpvOpTypeVector = 23,$/;"	e	enum:SpvOp_
SpvOpTypeVoid	lib/vulkan/spirv.h	/^    SpvOpTypeVoid = 19,$/;"	e	enum:SpvOp_
SpvOpUConvert	lib/vulkan/spirv.h	/^    SpvOpUConvert = 113,$/;"	e	enum:SpvOp_
SpvOpUDiv	lib/vulkan/spirv.h	/^    SpvOpUDiv = 134,$/;"	e	enum:SpvOp_
SpvOpUGreaterThan	lib/vulkan/spirv.h	/^    SpvOpUGreaterThan = 172,$/;"	e	enum:SpvOp_
SpvOpUGreaterThanEqual	lib/vulkan/spirv.h	/^    SpvOpUGreaterThanEqual = 174,$/;"	e	enum:SpvOp_
SpvOpULessThan	lib/vulkan/spirv.h	/^    SpvOpULessThan = 176,$/;"	e	enum:SpvOp_
SpvOpULessThanEqual	lib/vulkan/spirv.h	/^    SpvOpULessThanEqual = 178,$/;"	e	enum:SpvOp_
SpvOpUMod	lib/vulkan/spirv.h	/^    SpvOpUMod = 137,$/;"	e	enum:SpvOp_
SpvOpUMulExtended	lib/vulkan/spirv.h	/^    SpvOpUMulExtended = 151,$/;"	e	enum:SpvOp_
SpvOpUndef	lib/vulkan/spirv.h	/^    SpvOpUndef = 1,$/;"	e	enum:SpvOp_
SpvOpUnordered	lib/vulkan/spirv.h	/^    SpvOpUnordered = 163,$/;"	e	enum:SpvOp_
SpvOpUnreachable	lib/vulkan/spirv.h	/^    SpvOpUnreachable = 255,$/;"	e	enum:SpvOp_
SpvOpVariable	lib/vulkan/spirv.h	/^    SpvOpVariable = 59,$/;"	e	enum:SpvOp_
SpvOpVectorExtractDynamic	lib/vulkan/spirv.h	/^    SpvOpVectorExtractDynamic = 77,$/;"	e	enum:SpvOp_
SpvOpVectorInsertDynamic	lib/vulkan/spirv.h	/^    SpvOpVectorInsertDynamic = 78,$/;"	e	enum:SpvOp_
SpvOpVectorShuffle	lib/vulkan/spirv.h	/^    SpvOpVectorShuffle = 79,$/;"	e	enum:SpvOp_
SpvOpVectorTimesMatrix	lib/vulkan/spirv.h	/^    SpvOpVectorTimesMatrix = 144,$/;"	e	enum:SpvOp_
SpvOpVectorTimesScalar	lib/vulkan/spirv.h	/^    SpvOpVectorTimesScalar = 142,$/;"	e	enum:SpvOp_
SpvOpWritePipe	lib/vulkan/spirv.h	/^    SpvOpWritePipe = 275,$/;"	e	enum:SpvOp_
SpvOp_	lib/vulkan/spirv.h	/^typedef enum SpvOp_ {$/;"	g
SpvRevision	lib/vulkan/spirv.h	/^static const unsigned int SpvRevision = 2;$/;"	v
SpvSamplerAddressingMode	lib/vulkan/spirv.h	/^} SpvSamplerAddressingMode;$/;"	t	typeref:enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeClamp	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeClamp = 2,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeClampToEdge	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeClampToEdge = 1,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeMax	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeMax = 0x7fffffff,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeNone	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeNone = 0,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeRepeat	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeRepeat = 3,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeRepeatMirrored	lib/vulkan/spirv.h	/^    SpvSamplerAddressingModeRepeatMirrored = 4,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingMode_	lib/vulkan/spirv.h	/^typedef enum SpvSamplerAddressingMode_ {$/;"	g
SpvSamplerFilterMode	lib/vulkan/spirv.h	/^} SpvSamplerFilterMode;$/;"	t	typeref:enum:SpvSamplerFilterMode_
SpvSamplerFilterModeLinear	lib/vulkan/spirv.h	/^    SpvSamplerFilterModeLinear = 1,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterModeMax	lib/vulkan/spirv.h	/^    SpvSamplerFilterModeMax = 0x7fffffff,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterModeNearest	lib/vulkan/spirv.h	/^    SpvSamplerFilterModeNearest = 0,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterMode_	lib/vulkan/spirv.h	/^typedef enum SpvSamplerFilterMode_ {$/;"	g
SpvScope	lib/vulkan/spirv.h	/^} SpvScope;$/;"	t	typeref:enum:SpvScope_
SpvScopeCrossDevice	lib/vulkan/spirv.h	/^    SpvScopeCrossDevice = 0,$/;"	e	enum:SpvScope_
SpvScopeDevice	lib/vulkan/spirv.h	/^    SpvScopeDevice = 1,$/;"	e	enum:SpvScope_
SpvScopeInvocation	lib/vulkan/spirv.h	/^    SpvScopeInvocation = 4,$/;"	e	enum:SpvScope_
SpvScopeMax	lib/vulkan/spirv.h	/^    SpvScopeMax = 0x7fffffff,$/;"	e	enum:SpvScope_
SpvScopeSubgroup	lib/vulkan/spirv.h	/^    SpvScopeSubgroup = 3,$/;"	e	enum:SpvScope_
SpvScopeWorkgroup	lib/vulkan/spirv.h	/^    SpvScopeWorkgroup = 2,$/;"	e	enum:SpvScope_
SpvScope_	lib/vulkan/spirv.h	/^typedef enum SpvScope_ {$/;"	g
SpvSelectionControlDontFlattenMask	lib/vulkan/spirv.h	/^    SpvSelectionControlDontFlattenMask = 0x00000002,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlDontFlattenShift	lib/vulkan/spirv.h	/^    SpvSelectionControlDontFlattenShift = 1,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlFlattenMask	lib/vulkan/spirv.h	/^    SpvSelectionControlFlattenMask = 0x00000001,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlFlattenShift	lib/vulkan/spirv.h	/^    SpvSelectionControlFlattenShift = 0,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlMask	lib/vulkan/spirv.h	/^} SpvSelectionControlMask;$/;"	t	typeref:enum:SpvSelectionControlMask_
SpvSelectionControlMaskNone	lib/vulkan/spirv.h	/^    SpvSelectionControlMaskNone = 0,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlMask_	lib/vulkan/spirv.h	/^typedef enum SpvSelectionControlMask_ {$/;"	g
SpvSelectionControlMax	lib/vulkan/spirv.h	/^    SpvSelectionControlMax = 0x7fffffff,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlShift	lib/vulkan/spirv.h	/^} SpvSelectionControlShift;$/;"	t	typeref:enum:SpvSelectionControlShift_
SpvSelectionControlShift_	lib/vulkan/spirv.h	/^typedef enum SpvSelectionControlShift_ {$/;"	g
SpvSourceLanguage	lib/vulkan/spirv.h	/^} SpvSourceLanguage;$/;"	t	typeref:enum:SpvSourceLanguage_
SpvSourceLanguageESSL	lib/vulkan/spirv.h	/^    SpvSourceLanguageESSL = 1,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageGLSL	lib/vulkan/spirv.h	/^    SpvSourceLanguageGLSL = 2,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageMax	lib/vulkan/spirv.h	/^    SpvSourceLanguageMax = 0x7fffffff,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageOpenCL_C	lib/vulkan/spirv.h	/^    SpvSourceLanguageOpenCL_C = 3,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageOpenCL_CPP	lib/vulkan/spirv.h	/^    SpvSourceLanguageOpenCL_CPP = 4,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageUnknown	lib/vulkan/spirv.h	/^    SpvSourceLanguageUnknown = 0,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguage_	lib/vulkan/spirv.h	/^typedef enum SpvSourceLanguage_ {$/;"	g
SpvStorageClass	lib/vulkan/spirv.h	/^} SpvStorageClass;$/;"	t	typeref:enum:SpvStorageClass_
SpvStorageClassAtomicCounter	lib/vulkan/spirv.h	/^    SpvStorageClassAtomicCounter = 10,$/;"	e	enum:SpvStorageClass_
SpvStorageClassCrossWorkgroup	lib/vulkan/spirv.h	/^    SpvStorageClassCrossWorkgroup = 5,$/;"	e	enum:SpvStorageClass_
SpvStorageClassFunction	lib/vulkan/spirv.h	/^    SpvStorageClassFunction = 7,$/;"	e	enum:SpvStorageClass_
SpvStorageClassGeneric	lib/vulkan/spirv.h	/^    SpvStorageClassGeneric = 8,$/;"	e	enum:SpvStorageClass_
SpvStorageClassImage	lib/vulkan/spirv.h	/^    SpvStorageClassImage = 11,$/;"	e	enum:SpvStorageClass_
SpvStorageClassInput	lib/vulkan/spirv.h	/^    SpvStorageClassInput = 1,$/;"	e	enum:SpvStorageClass_
SpvStorageClassMax	lib/vulkan/spirv.h	/^    SpvStorageClassMax = 0x7fffffff,$/;"	e	enum:SpvStorageClass_
SpvStorageClassOutput	lib/vulkan/spirv.h	/^    SpvStorageClassOutput = 3,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPrivate	lib/vulkan/spirv.h	/^    SpvStorageClassPrivate = 6,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPushConstant	lib/vulkan/spirv.h	/^    SpvStorageClassPushConstant = 9,$/;"	e	enum:SpvStorageClass_
SpvStorageClassUniform	lib/vulkan/spirv.h	/^    SpvStorageClassUniform = 2,$/;"	e	enum:SpvStorageClass_
SpvStorageClassUniformConstant	lib/vulkan/spirv.h	/^    SpvStorageClassUniformConstant = 0,$/;"	e	enum:SpvStorageClass_
SpvStorageClassWorkgroup	lib/vulkan/spirv.h	/^    SpvStorageClassWorkgroup = 4,$/;"	e	enum:SpvStorageClass_
SpvStorageClass_	lib/vulkan/spirv.h	/^typedef enum SpvStorageClass_ {$/;"	g
SpvVersion	lib/vulkan/spirv.h	/^static const unsigned int SpvVersion = 0x00010100;$/;"	v
SpvWordCountShift	lib/vulkan/spirv.h	/^static const unsigned int SpvWordCountShift = 16;$/;"	v
StackSize	lib/__assimp/IOSystem.hpp	/^inline size_t IOSystem::StackSize() const {$/;"	f	class:Assimp::IOSystem	signature:() const
StackSize	lib/assimp/IOSystem.hpp	/^inline size_t IOSystem::StackSize() const {$/;"	f	class:Assimp::IOSystem	signature:() const
State	/home/al/amvk/inc/state.h	/^	State():$/;"	f	struct:State	access:public	signature:()
State	/home/al/amvk/inc/state.h	/^struct State {$/;"	s
State::State	/home/al/amvk/inc/state.h	/^	State():$/;"	f	struct:State	access:public	signature:()
State::UBO	/home/al/amvk/inc/state.h	/^	struct UBO {$/;"	s	struct:State	access:public
State::UBO::proj	/home/al/amvk/inc/state.h	/^		glm::mat4 proj;$/;"	m	struct:State::UBO	access:public
State::UBO::view	/home/al/amvk/inc/state.h	/^		glm::mat4 view;$/;"	m	struct:State::UBO	access:public
State::commandPool	/home/al/amvk/inc/state.h	/^	VkCommandPool commandPool;$/;"	m	struct:State	access:public
State::computeQueue	/home/al/amvk/inc/state.h	/^	VkQueue computeQueue;$/;"	m	struct:State	access:public
State::computeQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t computeQueueIndex;$/;"	m	struct:State	access:public
State::depthFormat	/home/al/amvk/inc/state.h	/^	VkFormat depthFormat;$/;"	m	struct:State	access:public
State::descriptorPool	/home/al/amvk/inc/state.h	/^	VkDescriptorPool descriptorPool;$/;"	m	struct:State	access:public
State::descriptorSetLayouts	/home/al/amvk/inc/state.h	/^	DescriptorSetLayouts descriptorSetLayouts;$/;"	m	struct:State	access:public
State::device	/home/al/amvk/inc/state.h	/^	VkDevice device;$/;"	m	struct:State	access:public
State::deviceInfo	/home/al/amvk/inc/state.h	/^	DeviceInfo deviceInfo;$/;"	m	struct:State	access:public
State::graphicsQueue	/home/al/amvk/inc/state.h	/^	VkQueue graphicsQueue;$/;"	m	struct:State	access:public
State::graphicsQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t graphicsQueueIndex;$/;"	m	struct:State	access:public
State::instance	/home/al/amvk/inc/state.h	/^	VkInstance instance;$/;"	m	struct:State	access:public
State::physicalDevice	/home/al/amvk/inc/state.h	/^	VkPhysicalDevice physicalDevice;$/;"	m	struct:State	access:public
State::pipelines	/home/al/amvk/inc/state.h	/^	Pipelines pipelines;$/;"	m	struct:State	access:public
State::presentQueue	/home/al/amvk/inc/state.h	/^	VkQueue presentQueue;$/;"	m	struct:State	access:public
State::presentQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t presentQueueIndex;$/;"	m	struct:State	access:public
State::renderPass	/home/al/amvk/inc/state.h	/^	VkRenderPass renderPass;$/;"	m	struct:State	access:public
State::shaders	/home/al/amvk/inc/state.h	/^	Shaders shaders;$/;"	m	struct:State	access:public
State::surface	/home/al/amvk/inc/state.h	/^	VkSurfaceKHR surface;$/;"	m	struct:State	access:public
State::swapChain	/home/al/amvk/inc/state.h	/^	VkSwapchainKHR swapChain;$/;"	m	struct:State	access:public
State::swapChainExtent	/home/al/amvk/inc/state.h	/^	VkExtent2D swapChainExtent;$/;"	m	struct:State	access:public
State::swapChainImageFormat	/home/al/amvk/inc/state.h	/^	VkFormat swapChainImageFormat;$/;"	m	struct:State	access:public
State::transferQueue	/home/al/amvk/inc/state.h	/^	VkQueue transferQueue;$/;"	m	struct:State	access:public
State::transferQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t transferQueueIndex;$/;"	m	struct:State	access:public
State::ubo	/home/al/amvk/inc/state.h	/^	UBO ubo;$/;"	m	struct:State	access:public
State::vulkanState	/home/al/amvk/inc/state.h	/^	State(State const& vulkanState) = delete;$/;"	m	struct:State	access:public
State::vulkanState	/home/al/amvk/inc/state.h	/^    State& operator=(State const& vulkanState) = delete;$/;"	m	struct:State	access:public
StorageClass	lib/vulkan/spirv.hpp	/^enum StorageClass {$/;"	g	namespace:spv
StorageClassAtomicCounter	lib/vulkan/spirv.hpp	/^    StorageClassAtomicCounter = 10,$/;"	e	enum:spv::StorageClass
StorageClassCrossWorkgroup	lib/vulkan/spirv.hpp	/^    StorageClassCrossWorkgroup = 5,$/;"	e	enum:spv::StorageClass
StorageClassFunction	lib/vulkan/spirv.hpp	/^    StorageClassFunction = 7,$/;"	e	enum:spv::StorageClass
StorageClassGeneric	lib/vulkan/spirv.hpp	/^    StorageClassGeneric = 8,$/;"	e	enum:spv::StorageClass
StorageClassImage	lib/vulkan/spirv.hpp	/^    StorageClassImage = 11,$/;"	e	enum:spv::StorageClass
StorageClassInput	lib/vulkan/spirv.hpp	/^    StorageClassInput = 1,$/;"	e	enum:spv::StorageClass
StorageClassMax	lib/vulkan/spirv.hpp	/^    StorageClassMax = 0x7fffffff,$/;"	e	enum:spv::StorageClass
StorageClassOutput	lib/vulkan/spirv.hpp	/^    StorageClassOutput = 3,$/;"	e	enum:spv::StorageClass
StorageClassPrivate	lib/vulkan/spirv.hpp	/^    StorageClassPrivate = 6,$/;"	e	enum:spv::StorageClass
StorageClassPushConstant	lib/vulkan/spirv.hpp	/^    StorageClassPushConstant = 9,$/;"	e	enum:spv::StorageClass
StorageClassUniform	lib/vulkan/spirv.hpp	/^    StorageClassUniform = 2,$/;"	e	enum:spv::StorageClass
StorageClassUniformConstant	lib/vulkan/spirv.hpp	/^    StorageClassUniformConstant = 0,$/;"	e	enum:spv::StorageClass
StorageClassWorkgroup	lib/vulkan/spirv.hpp	/^    StorageClassWorkgroup = 4,$/;"	e	enum:spv::StorageClass
StreamArray	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*> StreamArray;$/;"	t	class:Assimp::DefaultLogger	access:private
StreamArray	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*> StreamArray;$/;"	t	class:Assimp::DefaultLogger	access:private
StreamIt	lib/__assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::iterator StreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
StreamIt	lib/assimp/DefaultLogger.hpp	/^    typedef std::vector<LogStreamInfo*>::iterator StreamIt;$/;"	t	class:Assimp::DefaultLogger	access:private
StringPropertyMap	lib/__assimp/Exporter.hpp	/^    typedef std::map<KeyType, std::string> StringPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
StringPropertyMap	lib/assimp/Exporter.hpp	/^    typedef std::map<KeyType, std::string> StringPropertyMap;$/;"	t	class:Assimp::ExportProperties	access:public
Stub	lib/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2	access:public
SurfaceInfo	/home/al/amvk/inc/state.h	/^struct SurfaceInfo {$/;"	s
SwapchainManager	inc/swapchain_manager.h	/^class SwapchainManager {$/;"	c
SwapchainManager	src/swapchain_manager.cpp	/^SwapchainManager::SwapchainManager(State& vulkanState, Window& window):$/;"	f	class:SwapchainManager	signature:(State& vulkanState, Window& window)
SwapchainManager::SwapchainManager	src/swapchain_manager.cpp	/^SwapchainManager::SwapchainManager(State& vulkanState, Window& window):$/;"	f	class:SwapchainManager	signature:(State& vulkanState, Window& window)
SwapchainManager::cmdBuffers	inc/swapchain_manager.h	/^	std::vector<VkCommandBuffer> cmdBuffers;$/;"	m	class:SwapchainManager	access:public
SwapchainManager::createCommandBuffers	src/swapchain_manager.cpp	/^void SwapchainManager::createCommandBuffers()$/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createCommandPool	src/swapchain_manager.cpp	/^void SwapchainManager::createCommandPool()$/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createDepthResources	src/swapchain_manager.cpp	/^void SwapchainManager::createDepthResources() $/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createFramebuffers	src/swapchain_manager.cpp	/^void SwapchainManager::createFramebuffers(VkRenderPass renderPass)$/;"	f	class:SwapchainManager	signature:(VkRenderPass renderPass)
SwapchainManager::createImageViews	src/swapchain_manager.cpp	/^void SwapchainManager::createImageViews() $/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createRenderPass	src/swapchain_manager.cpp	/^void SwapchainManager::createRenderPass()$/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createSurface	src/swapchain_manager.cpp	/^void SwapchainManager::createSurface()$/;"	f	class:SwapchainManager	signature:()
SwapchainManager::createSwapChain	src/swapchain_manager.cpp	/^void SwapchainManager::createSwapChain()$/;"	f	class:SwapchainManager	signature:()
SwapchainManager::framebuffers	inc/swapchain_manager.h	/^	std::vector<VkFramebuffer> framebuffers;$/;"	m	class:SwapchainManager	access:public
SwapchainManager::getExtent	src/swapchain_manager.cpp	/^VkExtent2D SwapchainManager::getExtent(VkSurfaceCapabilitiesKHR& surfaceCapabilities) const$/;"	f	class:SwapchainManager	signature:(VkSurfaceCapabilitiesKHR& surfaceCapabilities) const
SwapchainManager::getHeight	src/swapchain_manager.cpp	/^uint32_t SwapchainManager::getHeight() const$/;"	f	class:SwapchainManager	signature:() const
SwapchainManager::getPresentMode	src/swapchain_manager.cpp	/^VkPresentModeKHR SwapchainManager::getPresentMode(const std::vector<VkPresentModeKHR>& presentModes) const$/;"	f	class:SwapchainManager	signature:(const std::vector<VkPresentModeKHR>& presentModes) const
SwapchainManager::getSurfaceFormat	src/swapchain_manager.cpp	/^VkSurfaceFormatKHR SwapchainManager::getSurfaceFormat(const std::vector<VkSurfaceFormatKHR>& surfaceFormats) const $/;"	f	class:SwapchainManager	signature:(const std::vector<VkSurfaceFormatKHR>& surfaceFormats) const
SwapchainManager::getWidth	src/swapchain_manager.cpp	/^uint32_t SwapchainManager::getWidth() const$/;"	f	class:SwapchainManager	signature:() const
SwapchainManager::mDepthImageDesc	inc/swapchain_manager.h	/^	ImageInfo mDepthImageDesc;$/;"	m	class:SwapchainManager	access:private
SwapchainManager::mState	inc/swapchain_manager.h	/^	State& mState;$/;"	m	class:SwapchainManager	access:private
SwapchainManager::mSwapChainImageViews	inc/swapchain_manager.h	/^	std::vector<VkImageView> mSwapChainImageViews;$/;"	m	class:SwapchainManager	access:private
SwapchainManager::mSwapChainImages	inc/swapchain_manager.h	/^	std::vector<VkImage> mSwapChainImages;$/;"	m	class:SwapchainManager	access:private
SwapchainManager::mWindow	inc/swapchain_manager.h	/^	Window& mWindow;$/;"	m	class:SwapchainManager	access:private
SwapchainManager::~SwapchainManager	src/swapchain_manager.cpp	/^SwapchainManager::~SwapchainManager() $/;"	f	class:SwapchainManager	signature:()
TARGET	Makefile	/^TARGET=$(BIN_DIR)\/myengine$/;"	m
TESTUMAX	lib/__assimp/Compiler/pstdint.h	826;"	d
TESTUMAX	lib/assimp/Compiler/pstdint.h	797;"	d
TEXTURE_TYPES	inc/shape/model.h	/^	static const aiTextureType* TEXTURE_TYPES;$/;"	m	class:Model	access:public
TEXTURE_TYPES	inc/shape/skinned.h	/^	static const aiTextureType* TEXTURE_TYPES;$/;"	m	class:Skinned	access:public
TEXTURE_TYPES	src/shape/model.cpp	/^const aiTextureType* Model::TEXTURE_TYPES = Model_TEXTURE_TYPES;$/;"	m	class:Model	file:
TEXTURE_TYPES	src/shape/skinned.cpp	/^const aiTextureType* Skinned::TEXTURE_TYPES = Skinned_TEXTURE_TYPES;$/;"	m	class:Skinned	file:
TQuad	inc/shape/tquad.h	/^class TQuad {$/;"	c
TQuad	src/shape/tquad.cpp	/^TQuad::TQuad(State& vulkanState):$/;"	f	class:TQuad	signature:(State& vulkanState)
TQuad::PushConstants	inc/shape/tquad.h	/^	struct PushConstants {$/;"	s	class:TQuad	access:public
TQuad::PushConstants::model	inc/shape/tquad.h	/^	    glm::mat4 model;$/;"	m	struct:TQuad::PushConstants	access:public
TQuad::TQuad	src/shape/tquad.cpp	/^TQuad::TQuad(State& vulkanState):$/;"	f	class:TQuad	signature:(State& vulkanState)
TQuad::UBO	inc/shape/tquad.h	/^	struct UBO {$/;"	s	class:TQuad	access:public
TQuad::UBO::model	inc/shape/tquad.h	/^	    glm::mat4 model;$/;"	m	struct:TQuad::UBO	access:public
TQuad::UBO::proj	inc/shape/tquad.h	/^		glm::mat4 proj;$/;"	m	struct:TQuad::UBO	access:public
TQuad::UBO::view	inc/shape/tquad.h	/^		glm::mat4 view;$/;"	m	struct:TQuad::UBO	access:public
TQuad::Vertex	inc/shape/tquad.h	/^	struct Vertex {$/;"	s	class:TQuad	access:public
TQuad::Vertex::color	inc/shape/tquad.h	/^		glm::vec3 color;$/;"	m	struct:TQuad::Vertex	access:public
TQuad::Vertex::pos	inc/shape/tquad.h	/^		glm::vec3 pos;$/;"	m	struct:TQuad::Vertex	access:public
TQuad::Vertex::texCoord	inc/shape/tquad.h	/^		glm::vec2 texCoord;$/;"	m	struct:TQuad::Vertex	access:public
TQuad::createBuffers	src/shape/tquad.cpp	/^void TQuad::createBuffers()$/;"	f	class:TQuad	signature:()
TQuad::createDescriptorSet	src/shape/tquad.cpp	/^void TQuad::createDescriptorSet()$/;"	f	class:TQuad	signature:()
TQuad::createIndexBuffer	src/shape/tquad.cpp	/^void TQuad::createIndexBuffer()$/;"	f	class:TQuad	signature:()
TQuad::createUniformBuffer	src/shape/tquad.cpp	/^void TQuad::createUniformBuffer()$/;"	f	class:TQuad	signature:()
TQuad::createVertexBuffer	src/shape/tquad.cpp	/^void TQuad::createVertexBuffer()$/;"	f	class:TQuad	signature:()
TQuad::draw	src/shape/tquad.cpp	/^void TQuad::draw(VkCommandBuffer& commandBuffer)$/;"	f	class:TQuad	signature:(VkCommandBuffer& commandBuffer)
TQuad::init	src/shape/tquad.cpp	/^void TQuad::init()$/;"	f	class:TQuad	signature:()
TQuad::mCommonBufferInfo	inc/shape/tquad.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:TQuad	access:public
TQuad::mIndexBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
TQuad::mIndexBufferOffset	inc/shape/tquad.h	/^				 mIndexBufferOffset, $/;"	m	class:TQuad	access:public
TQuad::mState	inc/shape/tquad.h	/^	State& mState;$/;"	m	class:TQuad	access:public
TQuad::mTextureDesc	inc/shape/tquad.h	/^	ImageInfo *mTextureDesc;$/;"	m	class:TQuad	access:public
TQuad::mUniformBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
TQuad::mUniformBufferOffset	inc/shape/tquad.h	/^				 mUniformBufferOffset;$/;"	m	class:TQuad	access:public
TQuad::mUniformStagingBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
TQuad::mVertexBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
TQuad::mVertexBufferOffset	inc/shape/tquad.h	/^	VkDeviceSize mVertexBufferOffset, $/;"	m	class:TQuad	access:public
TQuad::mVkDescriptorSet	inc/shape/tquad.h	/^	VkDescriptorSet mVkDescriptorSet;$/;"	m	class:TQuad	access:public
TQuad::numIndices	inc/shape/tquad.h	/^	uint32_t numIndices;$/;"	m	class:TQuad	access:public
TQuad::update	src/shape/tquad.cpp	/^void TQuad::update(VkCommandBuffer& commandBuffer, const Timer& timer, Camera& camera)$/;"	f	class:TQuad	signature:(VkCommandBuffer& commandBuffer, const Timer& timer, Camera& camera)
TQuad::~TQuad	src/shape/tquad.cpp	/^TQuad::~TQuad()$/;"	f	class:TQuad	signature:()
Task	inc/task_manager.h	/^class Task {$/;"	c
Task::~Task	inc/task_manager.h	/^	virtual ~Task() {}$/;"	f	class:Task	access:public	signature:()
TaskManager	inc/task_manager.h	/^class TaskManager {$/;"	c
TaskManager	src/task_manager.cpp	/^TaskManager::TaskManager(): mNumThreads(std::thread::hardware_concurrency())$/;"	f	class:TaskManager	signature:()
TaskManager::TaskManager	src/task_manager.cpp	/^TaskManager::TaskManager(): mNumThreads(std::thread::hardware_concurrency())$/;"	f	class:TaskManager	signature:()
TaskManager::mCondition	inc/task_manager.h	/^	std::condition_variable mCondition;$/;"	m	class:TaskManager	access:private
TaskManager::mContinue	inc/task_manager.h	/^	std::atomic_bool mContinue;$/;"	m	class:TaskManager	access:private
TaskManager::mNumThreads	inc/task_manager.h	/^	size_t mNumThreads;$/;"	m	class:TaskManager	access:private
TaskManager::mPool	inc/task_manager.h	/^	std::vector<std::thread> mPool;$/;"	m	class:TaskManager	access:private
TaskManager::mTasks	inc/task_manager.h	/^	std::queue<Task*> mTasks;$/;"	m	class:TaskManager	access:private
TaskManager::mTasksMutex	inc/task_manager.h	/^	std::mutex mTasksMutex;$/;"	m	class:TaskManager	access:private
TaskManager::submit	src/task_manager.cpp	/^void TaskManager::submit(Task& task) {$/;"	f	class:TaskManager	signature:(Task& task)
TaskManager::submit	src/task_manager.cpp	/^void TaskManager::submit(Task* task) {$/;"	f	class:TaskManager	signature:(Task* task)
TaskManager::~TaskManager	src/task_manager.cpp	/^TaskManager::~TaskManager() $/;"	f	class:TaskManager	signature:()
TellProc	lib/__assimp/cfileio.h	/^    aiFileTellProc TellProc;$/;"	m	struct:aiFile	access:public
TellProc	lib/assimp/cfileio.h	/^    aiFileTellProc TellProc;$/;"	m	struct:aiFile	access:public
TextureData	inc/texture_data.h	/^class TextureData {$/;"	c
TextureData	src/texture_data.cpp	/^TextureData::TextureData():$/;"	f	class:TextureData	signature:()
TextureData::TextureData	src/texture_data.cpp	/^TextureData::TextureData():$/;"	f	class:TextureData	signature:()
TextureData::channels	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
TextureData::getChannels	src/texture_data.cpp	/^int TextureData::getChannels() const$/;"	f	class:TextureData	signature:() const
TextureData::getHeight	src/texture_data.cpp	/^int TextureData::getHeight() const $/;"	f	class:TextureData	signature:() const
TextureData::getPixels	src/texture_data.cpp	/^stbi_uc* TextureData::getPixels()$/;"	f	class:TextureData	signature:()
TextureData::getSize	src/texture_data.cpp	/^uint64_t TextureData::getSize() const $/;"	f	class:TextureData	signature:() const
TextureData::getWidth	src/texture_data.cpp	/^int TextureData::getWidth() const $/;"	f	class:TextureData	signature:() const
TextureData::height	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
TextureData::load	src/texture_data.cpp	/^stbi_uc* TextureData::load(const char* resource, int reqComp)$/;"	f	class:TextureData	signature:(const char* resource, int reqComp)
TextureData::pixels	inc/texture_data.h	/^	stbi_uc* pixels; $/;"	m	class:TextureData	access:public
TextureData::size	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
TextureData::width	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
TextureData::~TextureData	src/texture_data.cpp	/^TextureData::~TextureData()$/;"	f	class:TextureData	signature:()
TextureDesc	inc/texture_data.h	/^struct TextureDesc {$/;"	s
TextureDesc	src/texture_data.cpp	/^TextureDesc::TextureDesc(const char* filename, int reqComp): $/;"	f	class:TextureDesc	signature:(const char* filename, int reqComp)
TextureDesc	src/texture_data.cpp	/^TextureDesc::TextureDesc(std::string filename, int reqComp):$/;"	f	class:TextureDesc	signature:(std::string filename, int reqComp)
TextureDesc::TextureDesc	src/texture_data.cpp	/^TextureDesc::TextureDesc(const char* filename, int reqComp): $/;"	f	class:TextureDesc	signature:(const char* filename, int reqComp)
TextureDesc::TextureDesc	src/texture_data.cpp	/^TextureDesc::TextureDesc(std::string filename, int reqComp):$/;"	f	class:TextureDesc	signature:(std::string filename, int reqComp)
TextureDesc::filename	inc/texture_data.h	/^	std::string filename;$/;"	m	struct:TextureDesc	access:public
TextureDesc::operator ==	src/texture_data.cpp	/^bool TextureDesc::operator==(const TextureDesc &other) const$/;"	f	class:TextureDesc	signature:(const TextureDesc &other) const
TextureDesc::reqComp	inc/texture_data.h	/^	int reqComp;$/;"	m	struct:TextureDesc	access:public
TextureManager	inc/texture_manager.h	/^class TextureManager {$/;"	c
TextureManager	src/texture_manager.cpp	/^TextureManager::TextureManager()$/;"	f	class:TextureManager	signature:()
TextureManager::TextureManager	src/texture_manager.cpp	/^TextureManager::TextureManager()$/;"	f	class:TextureManager	signature:()
TextureManager::getInstance	src/texture_manager.cpp	/^TextureManager& TextureManager::getInstance() $/;"	f	class:TextureManager	signature:()
TextureManager::load	src/texture_manager.cpp	/^ImageInfo* TextureManager::load($/;"	f	class:TextureManager	signature:( State& state, const VkCommandPool& cmdPool, const VkQueue& cmdQueue, const TextureDesc& textureDesc)
TextureManager::lock	inc/texture_manager.h	/^	std::mutex lock;$/;"	m	class:TextureManager	access:private
TextureManager::mPool	inc/texture_manager.h	/^	std::unordered_map<TextureDesc, ImageInfo*> mPool; $/;"	m	class:TextureManager	access:private
TextureManager::textureManager	inc/texture_manager.h	/^	TextureManager(const TextureManager& textureManager) = delete;$/;"	m	class:TextureManager	access:public
TextureManager::textureManager	inc/texture_manager.h	/^	void operator=(const TextureManager& textureManager) = delete;$/;"	m	class:TextureManager	access:public
TextureManager::~TextureManager	src/texture_manager.cpp	/^TextureManager::~TextureManager()$/;"	f	class:TextureManager	signature:()
TiledRenderer	/home/al/amvk/inc/tiled_renderer.h	/^class TiledRenderer {$/;"	c
Timer	inc/timer.h	/^class Timer {$/;"	c
Timer	src/timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::FPS	src/timer.cpp	/^uint32_t Timer::FPS() const$/;"	f	class:Timer	signature:() const
Timer::Timer	src/timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::dt	src/timer.cpp	/^double Timer::dt() const$/;"	f	class:Timer	signature:() const
Timer::mDt	inc/timer.h	/^	double mDt;$/;"	m	class:Timer	access:private
Timer::mFPS	inc/timer.h	/^	uint32_t mFPS;$/;"	m	class:Timer	access:private
Timer::mFrameTime	inc/timer.h	/^	double mFrameTime;$/;"	m	class:Timer	access:private
Timer::mNumFrames	inc/timer.h	/^	uint32_t mNumFrames;$/;"	m	class:Timer	access:private
Timer::mPrevTime	inc/timer.h	/^	std::chrono::high_resolution_clock::time_point mPrevTime;$/;"	m	class:Timer	access:private
Timer::mStartTime	inc/timer.h	/^	std::chrono::high_resolution_clock::time_point mStartTime;$/;"	m	class:Timer	access:private
Timer::mTotalTime	inc/timer.h	/^	double mTotalTime;$/;"	m	class:Timer	access:private
Timer::tick	src/timer.cpp	/^double Timer::tick()$/;"	f	class:Timer	signature:()
Timer::total	src/timer.cpp	/^double Timer::total() const $/;"	f	class:Timer	signature:() const
UBO	/home/al/amvk/inc/state.h	/^	struct UBO {$/;"	s	struct:State	access:public
UBO	inc/shape/model.h	/^	struct UBO {$/;"	s	class:Model	access:public
UBO	inc/shape/point_light.h	/^	struct UBO {$/;"	s	class:PointLight	access:public
UBO	inc/shape/skinned.h	/^	struct UBO {$/;"	s	class:Skinned	access:public
UBO	inc/shape/tquad.h	/^	struct UBO {$/;"	s	class:TQuad	access:public
UINT16_C	lib/__assimp/Compiler/pstdint.h	311;"	d
UINT16_C	lib/__assimp/Compiler/pstdint.h	403;"	d
UINT16_C	lib/__assimp/Compiler/pstdint.h	406;"	d
UINT16_C	lib/assimp/Compiler/pstdint.h	264;"	d
UINT16_C	lib/assimp/Compiler/pstdint.h	432;"	d
UINT16_C	lib/assimp/Compiler/pstdint.h	435;"	d
UINT16_MAX	lib/__assimp/Compiler/pstdint.h	395;"	d
UINT16_MAX	lib/assimp/Compiler/pstdint.h	424;"	d
UINT32_C	lib/__assimp/Compiler/pstdint.h	305;"	d
UINT32_C	lib/__assimp/Compiler/pstdint.h	445;"	d
UINT32_C	lib/__assimp/Compiler/pstdint.h	454;"	d
UINT32_C	lib/__assimp/Compiler/pstdint.h	457;"	d
UINT32_C	lib/assimp/Compiler/pstdint.h	258;"	d
UINT32_C	lib/assimp/Compiler/pstdint.h	450;"	d
UINT32_C	lib/assimp/Compiler/pstdint.h	459;"	d
UINT32_C	lib/assimp/Compiler/pstdint.h	462;"	d
UINT32_MAX	lib/__assimp/Compiler/pstdint.h	326;"	d
UINT32_MAX	lib/__assimp/Compiler/pstdint.h	440;"	d
UINT32_MAX	lib/assimp/Compiler/pstdint.h	279;"	d
UINT32_MAX	lib/assimp/Compiler/pstdint.h	445;"	d
UINT64_C	lib/__assimp/Compiler/pstdint.h	299;"	d
UINT64_C	lib/__assimp/Compiler/pstdint.h	509;"	d
UINT64_C	lib/__assimp/Compiler/pstdint.h	522;"	d
UINT64_C	lib/__assimp/Compiler/pstdint.h	531;"	d
UINT64_C	lib/__assimp/Compiler/pstdint.h	540;"	d
UINT64_C	lib/assimp/Compiler/pstdint.h	252;"	d
UINT64_C	lib/assimp/Compiler/pstdint.h	485;"	d
UINT64_C	lib/assimp/Compiler/pstdint.h	499;"	d
UINT64_C	lib/assimp/Compiler/pstdint.h	507;"	d
UINT64_C	lib/assimp/Compiler/pstdint.h	515;"	d
UINT64_MAX	lib/__assimp/Compiler/pstdint.h	320;"	d
UINT64_MAX	lib/__assimp/Compiler/pstdint.h	562;"	d
UINT64_MAX	lib/assimp/Compiler/pstdint.h	273;"	d
UINT64_MAX	lib/assimp/Compiler/pstdint.h	537;"	d
UINT8_C	lib/__assimp/Compiler/pstdint.h	317;"	d
UINT8_C	lib/__assimp/Compiler/pstdint.h	373;"	d
UINT8_C	lib/assimp/Compiler/pstdint.h	270;"	d
UINT8_C	lib/assimp/Compiler/pstdint.h	417;"	d
UINT8_MAX	lib/__assimp/Compiler/pstdint.h	368;"	d
UINT8_MAX	lib/assimp/Compiler/pstdint.h	412;"	d
UINTMAX_C	lib/__assimp/Compiler/pstdint.h	618;"	d
UINTMAX_C	lib/__assimp/Compiler/pstdint.h	634;"	d
UINTMAX_C	lib/assimp/Compiler/pstdint.h	582;"	d
UINTMAX_C	lib/assimp/Compiler/pstdint.h	598;"	d
UINTMAX_MAX	lib/__assimp/Compiler/pstdint.h	617;"	d
UINTMAX_MAX	lib/__assimp/Compiler/pstdint.h	633;"	d
UINTMAX_MAX	lib/assimp/Compiler/pstdint.h	581;"	d
UINTMAX_MAX	lib/assimp/Compiler/pstdint.h	597;"	d
UINTPTR_C	lib/__assimp/Compiler/pstdint.h	785;"	d
UINTPTR_C	lib/assimp/Compiler/pstdint.h	749;"	d
UINTPTR_MAX	lib/__assimp/Compiler/pstdint.h	773;"	d
UINTPTR_MAX	lib/assimp/Compiler/pstdint.h	737;"	d
UINT_FAST16_MAX	lib/__assimp/Compiler/pstdint.h	702;"	d
UINT_FAST16_MAX	lib/assimp/Compiler/pstdint.h	668;"	d
UINT_FAST32_MAX	lib/__assimp/Compiler/pstdint.h	704;"	d
UINT_FAST32_MAX	lib/assimp/Compiler/pstdint.h	670;"	d
UINT_FAST64_MAX	lib/__assimp/Compiler/pstdint.h	712;"	d
UINT_FAST64_MAX	lib/assimp/Compiler/pstdint.h	678;"	d
UINT_FAST8_MAX	lib/__assimp/Compiler/pstdint.h	700;"	d
UINT_FAST8_MAX	lib/assimp/Compiler/pstdint.h	666;"	d
UINT_LEAST16_MAX	lib/__assimp/Compiler/pstdint.h	665;"	d
UINT_LEAST16_MAX	lib/assimp/Compiler/pstdint.h	629;"	d
UINT_LEAST32_MAX	lib/__assimp/Compiler/pstdint.h	667;"	d
UINT_LEAST32_MAX	lib/assimp/Compiler/pstdint.h	631;"	d
UINT_LEAST64_MAX	lib/__assimp/Compiler/pstdint.h	676;"	d
UINT_LEAST64_MAX	lib/assimp/Compiler/pstdint.h	640;"	d
UINT_LEAST8_MAX	lib/__assimp/Compiler/pstdint.h	663;"	d
UINT_LEAST8_MAX	lib/assimp/Compiler/pstdint.h	627;"	d
UINT_MAX	lib/__assimp/Defines.h	47;"	d
ULONG_LONG_MAX	lib/__assimp/Compiler/pstdint.h	552;"	d
ULONG_LONG_MAX	lib/assimp/Compiler/pstdint.h	527;"	d
UP	inc/camera.h	/^    const static glm::vec3 UP, RIGHT;$/;"	m	class:Camera	access:private
UP	src/camera.cpp	/^const glm::vec3 Camera::UP = glm::vec3(0.0f, 1.0f, 0.0f);$/;"	m	class:Camera	file:
UnmapMemory	lib/vulkan/vk_layer.h	/^    PFN_vkUnmapMemory UnmapMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
UpdateDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkUpdateDescriptorSets UpdateDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
UpdateFileRead	lib/__assimp/ProgressHandler.hpp	/^    virtual void UpdateFileRead(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
UpdateFileRead	lib/assimp/ProgressHandler.hpp	/^    virtual void UpdateFileRead(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
UpdatePostProcess	lib/__assimp/ProgressHandler.hpp	/^    virtual void UpdatePostProcess(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
UpdatePostProcess	lib/assimp/ProgressHandler.hpp	/^    virtual void UpdatePostProcess(int currentStep \/*= 0*\/, int numberOfSteps \/*= 0*\/) {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:(int currentStep , int numberOfSteps )
UserData	lib/__assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFile	access:public
UserData	lib/__assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFileIO	access:public
UserData	lib/assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFile	access:public
UserData	lib/assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFileIO	access:public
VERBOSE	lib/__assimp/Logger.hpp	/^        VERBOSE     \/\/!< Debug infos will be logged, too$/;"	e	enum:Assimp::Logger::LogSeverity
VERBOSE	lib/assimp/Logger.hpp	/^        VERBOSE     \/\/!< Debug infos will be logged, too$/;"	e	enum:Assimp::Logger::LogSeverity
VKAPI_ATTR	lib/vulkan/vk_platform.h	51;"	d
VKAPI_ATTR	lib/vulkan/vk_platform.h	61;"	d
VKAPI_ATTR	lib/vulkan/vk_platform.h	66;"	d
VKAPI_CALL	lib/vulkan/vk_platform.h	52;"	d
VKAPI_CALL	lib/vulkan/vk_platform.h	62;"	d
VKAPI_CALL	lib/vulkan/vk_platform.h	67;"	d
VKAPI_PTR	lib/vulkan/vk_platform.h	53;"	d
VKAPI_PTR	lib/vulkan/vk_platform.h	63;"	d
VKAPI_PTR	lib/vulkan/vk_platform.h	68;"	d
VKICD_H	lib/vulkan/vk_icd.h	24;"	d
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_HOST_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_HOST_READ_BIT = 0x00002000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_HOST_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_HOST_WRITE_BIT = 0x00004000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INDEX_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_INDEX_READ_BIT = 0x00000002,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INDIRECT_COMMAND_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_MEMORY_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_MEMORY_READ_BIT = 0x00008000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_MEMORY_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_SHADER_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_SHADER_READ_BIT = 0x00000020,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_SHADER_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_TRANSFER_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_TRANSFER_WRITE_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_UNIFORM_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,$/;"	e	enum:VkAccessFlagBits
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT	lib/vulkan/vulkan.h	/^    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,$/;"	e	enum:VkAccessFlagBits
VK_AMD_GCN_SHADER_EXTENSION_NAME	lib/vulkan/vulkan.h	3930;"	d
VK_AMD_GCN_SHADER_SPEC_VERSION	lib/vulkan/vulkan.h	3929;"	d
VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME	lib/vulkan/vulkan.h	3841;"	d
VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION	lib/vulkan/vulkan.h	3840;"	d
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME	lib/vulkan/vulkan.h	3868;"	d
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION	lib/vulkan/vulkan.h	3867;"	d
VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME	lib/vulkan/vulkan.h	3863;"	d
VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION	lib/vulkan/vulkan.h	3862;"	d
VK_AMD_gcn_shader	lib/vulkan/vulkan.h	3928;"	d
VK_AMD_rasterization_order	lib/vulkan/vulkan.h	3839;"	d
VK_AMD_shader_explicit_vertex_parameter	lib/vulkan/vulkan.h	3866;"	d
VK_AMD_shader_trinary_minmax	lib/vulkan/vulkan.h	3861;"	d
VK_API_VERSION_1_0	lib/vulkan/vulkan.h	40;"	d
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentDescriptionFlagBits
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,$/;"	e	enum:VkAttachmentDescriptionFlagBits
VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VK_ATTACHMENT_LOAD_OP_LOAD,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_CLEAR	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_DONT_CARE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_END_RANGE = VK_ATTACHMENT_LOAD_OP_DONT_CARE,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_LOAD	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_LOAD = 0,$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_LOAD_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = (VK_ATTACHMENT_LOAD_OP_DONT_CARE - VK_ATTACHMENT_LOAD_OP_LOAD + 1),$/;"	e	enum:VkAttachmentLoadOp
VK_ATTACHMENT_STORE_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VK_ATTACHMENT_STORE_OP_STORE,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_DONT_CARE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_END_RANGE = VK_ATTACHMENT_STORE_OP_DONT_CARE,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_RANGE_SIZE = (VK_ATTACHMENT_STORE_OP_DONT_CARE - VK_ATTACHMENT_STORE_OP_STORE + 1),$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_STORE_OP_STORE	lib/vulkan/vulkan.h	/^    VK_ATTACHMENT_STORE_OP_STORE = 0,$/;"	e	enum:VkAttachmentStoreOp
VK_ATTACHMENT_UNUSED	lib/vulkan/vulkan.h	99;"	d
VK_BLEND_FACTOR_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_BEGIN_RANGE = VK_BLEND_FACTOR_ZERO,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_CONSTANT_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_CONSTANT_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_DST_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_DST_ALPHA = 8,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_DST_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_DST_COLOR = 4,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_END_RANGE	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_END_RANGE = VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE = 1,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_RANGE_SIZE = (VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA - VK_BLEND_FACTOR_ZERO + 1),$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC1_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC1_ALPHA = 17,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC1_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC1_COLOR = 15,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_ALPHA	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_ALPHA = 6,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_SRC_COLOR	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_SRC_COLOR = 2,$/;"	e	enum:VkBlendFactor
VK_BLEND_FACTOR_ZERO	lib/vulkan/vulkan.h	/^    VK_BLEND_FACTOR_ZERO = 0,$/;"	e	enum:VkBlendFactor
VK_BLEND_OP_ADD	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_ADD = 0,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_BEGIN_RANGE = VK_BLEND_OP_ADD,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_END_RANGE = VK_BLEND_OP_MAX,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MAX	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_MAX = 4,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBlendOp
VK_BLEND_OP_MIN	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_MIN = 3,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_RANGE_SIZE = (VK_BLEND_OP_MAX - VK_BLEND_OP_ADD + 1),$/;"	e	enum:VkBlendOp
VK_BLEND_OP_REVERSE_SUBTRACT	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_REVERSE_SUBTRACT = 2,$/;"	e	enum:VkBlendOp
VK_BLEND_OP_SUBTRACT	lib/vulkan/vulkan.h	/^    VK_BLEND_OP_SUBTRACT = 1,$/;"	e	enum:VkBlendOp
VK_BORDER_COLOR_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_BEGIN_RANGE = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_END_RANGE	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_END_RANGE = VK_BORDER_COLOR_INT_OPAQUE_WHITE,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_OPAQUE_BLACK	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_OPAQUE_WHITE	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBorderColor
VK_BORDER_COLOR_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_BORDER_COLOR_RANGE_SIZE = (VK_BORDER_COLOR_INT_OPAQUE_WHITE - VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK + 1),$/;"	e	enum:VkBorderColor
VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_BINDING_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,$/;"	e	enum:VkBufferCreateFlagBits
VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_INDEX_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_TRANSFER_DST_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_TRANSFER_SRC_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,$/;"	e	enum:VkBufferUsageFlagBits
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,$/;"	e	enum:VkBufferUsageFlagBits
VK_CALL_IPROC	inc/vulkan_utils.h	28;"	d
VK_CHECK_RESULT	inc/vulkan_utils.h	21;"	d
VK_COLORSPACE_SRGB_NONLINEAR_KHR	lib/vulkan/vulkan.h	3178;"	d
VK_COLOR_COMPONENT_A_BIT	lib/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_A_BIT = 0x00000008,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_B_BIT	lib/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_B_BIT = 0x00000004,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_G_BIT	lib/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_G_BIT = 0x00000002,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_COMPONENT_R_BIT	lib/vulkan/vulkan.h	/^    VK_COLOR_COMPONENT_R_BIT = 0x00000001,$/;"	e	enum:VkColorComponentFlagBits
VK_COLOR_SPACE_BEGIN_RANGE_KHR	lib/vulkan/vulkan.h	/^    VK_COLOR_SPACE_BEGIN_RANGE_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_END_RANGE_KHR	lib/vulkan/vulkan.h	/^    VK_COLOR_SPACE_END_RANGE_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_MAX_ENUM_KHR	lib/vulkan/vulkan.h	/^    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_RANGE_SIZE_KHR	lib/vulkan/vulkan.h	/^    VK_COLOR_SPACE_RANGE_SIZE_KHR = (VK_COLOR_SPACE_SRGB_NONLINEAR_KHR - VK_COLOR_SPACE_SRGB_NONLINEAR_KHR + 1),$/;"	e	enum:VkColorSpaceKHR
VK_COLOR_SPACE_SRGB_NONLINEAR_KHR	lib/vulkan/vulkan.h	/^    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,$/;"	e	enum:VkColorSpaceKHR
VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VK_COMMAND_BUFFER_LEVEL_PRIMARY,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_END_RANGE	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_END_RANGE = VK_COMMAND_BUFFER_LEVEL_SECONDARY,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_PRIMARY	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = (VK_COMMAND_BUFFER_LEVEL_SECONDARY - VK_COMMAND_BUFFER_LEVEL_PRIMARY + 1),$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_LEVEL_SECONDARY	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,$/;"	e	enum:VkCommandBufferLevel
VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferResetFlagBits
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,$/;"	e	enum:VkCommandBufferResetFlagBits
VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,$/;"	e	enum:VkCommandBufferUsageFlagBits
VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,$/;"	e	enum:VkCommandPoolCreateFlagBits
VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCommandPoolResetFlagBits
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT	lib/vulkan/vulkan.h	/^    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,$/;"	e	enum:VkCommandPoolResetFlagBits
VK_COMPARE_OP_ALWAYS	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_ALWAYS = 7,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_BEGIN_RANGE = VK_COMPARE_OP_NEVER,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_END_RANGE = VK_COMPARE_OP_ALWAYS,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_EQUAL	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_EQUAL = 2,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_GREATER	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_GREATER = 4,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_GREATER_OR_EQUAL	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_LESS	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_LESS = 1,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_LESS_OR_EQUAL	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_LESS_OR_EQUAL = 3,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_NEVER	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_NEVER = 0,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_NOT_EQUAL	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_NOT_EQUAL = 5,$/;"	e	enum:VkCompareOp
VK_COMPARE_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_COMPARE_OP_RANGE_SIZE = (VK_COMPARE_OP_ALWAYS - VK_COMPARE_OP_NEVER + 1),$/;"	e	enum:VkCompareOp
VK_COMPONENT_SWIZZLE_A	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_A = 6,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_B	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_B = 5,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VK_COMPONENT_SWIZZLE_IDENTITY,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_END_RANGE = VK_COMPONENT_SWIZZLE_A,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_G	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_G = 4,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_IDENTITY	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_IDENTITY = 0,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_ONE	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_ONE = 2,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_R	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_R = 3,$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_RANGE_SIZE = (VK_COMPONENT_SWIZZLE_A - VK_COMPONENT_SWIZZLE_IDENTITY + 1),$/;"	e	enum:VkComponentSwizzle
VK_COMPONENT_SWIZZLE_ZERO	lib/vulkan/vulkan.h	/^    VK_COMPONENT_SWIZZLE_ZERO = 1,$/;"	e	enum:VkComponentSwizzle
VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR	lib/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,$/;"	e	enum:VkCompositeAlphaFlagBitsKHR
VK_CULL_MODE_BACK_BIT	lib/vulkan/vulkan.h	/^    VK_CULL_MODE_BACK_BIT = 0x00000002,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FRONT_AND_BACK	lib/vulkan/vulkan.h	/^    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_FRONT_BIT	lib/vulkan/vulkan.h	/^    VK_CULL_MODE_FRONT_BIT = 0x00000001,$/;"	e	enum:VkCullModeFlagBits
VK_CULL_MODE_NONE	lib/vulkan/vulkan.h	/^    VK_CULL_MODE_NONE = 0,$/;"	e	enum:VkCullModeFlagBits
VK_DEBUG_REPORT_DEBUG_BIT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_BEGIN_RANGE_EXT = VK_DEBUG_REPORT_ERROR_NONE_EXT,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_BIT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_END_RANGE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_END_RANGE_EXT = VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_NONE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_ERROR_RANGE_SIZE_EXT = (VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT - VK_DEBUG_REPORT_ERROR_NONE_EXT + 1),$/;"	e	enum:VkDebugReportErrorEXT
VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_INFORMATION_BIT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = (VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT - VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT + 1),$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,$/;"	e	enum:VkDebugReportObjectTypeEXT
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEBUG_REPORT_WARNING_BIT_EXT	lib/vulkan/vulkan.h	/^    VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,$/;"	e	enum:VkDebugReportFlagBitsEXT
VK_DEFINE_HANDLE	lib/vulkan/vulkan.h	53;"	d
VK_DEFINE_NON_DISPATCHABLE_HANDLE	lib/vulkan/vulkan.h	57;"	d
VK_DEFINE_NON_DISPATCHABLE_HANDLE	lib/vulkan/vulkan.h	59;"	d
VK_DEPENDENCY_BY_REGION_BIT	lib/vulkan/vulkan.h	/^    VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,$/;"	e	enum:VkDependencyFlagBits
VK_DEPENDENCY_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDependencyFlagBits
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDescriptorPoolCreateFlagBits
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,$/;"	e	enum:VkDescriptorPoolCreateFlagBits
VK_DESCRIPTOR_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VK_DESCRIPTOR_TYPE_SAMPLER,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_END_RANGE = VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_RANGE_SIZE = (VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT - VK_DESCRIPTOR_TYPE_SAMPLER + 1),$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_SAMPLER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_SAMPLER = 0,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,$/;"	e	enum:VkDescriptorType
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER	lib/vulkan/vulkan.h	/^    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,$/;"	e	enum:VkDescriptorType
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR	lib/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,$/;"	e	enum:VkDisplayPlaneAlphaFlagBitsKHR
VK_DYNAMIC_STATE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_BEGIN_RANGE = VK_DYNAMIC_STATE_VIEWPORT,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_BLEND_CONSTANTS	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_DEPTH_BIAS	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_DEPTH_BOUNDS	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_END_RANGE = VK_DYNAMIC_STATE_STENCIL_REFERENCE,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_LINE_WIDTH	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_LINE_WIDTH = 2,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_RANGE_SIZE = (VK_DYNAMIC_STATE_STENCIL_REFERENCE - VK_DYNAMIC_STATE_VIEWPORT + 1),$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_SCISSOR	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_SCISSOR = 1,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_REFERENCE	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,$/;"	e	enum:VkDynamicState
VK_DYNAMIC_STATE_VIEWPORT	lib/vulkan/vulkan.h	/^    VK_DYNAMIC_STATE_VIEWPORT = 0,$/;"	e	enum:VkDynamicState
VK_ERROR_DEVICE_LOST	lib/vulkan/vulkan.h	/^    VK_ERROR_DEVICE_LOST = -4,$/;"	e	enum:VkResult
VK_ERROR_EXTENSION_NOT_PRESENT	lib/vulkan/vulkan.h	/^    VK_ERROR_EXTENSION_NOT_PRESENT = -7,$/;"	e	enum:VkResult
VK_ERROR_FEATURE_NOT_PRESENT	lib/vulkan/vulkan.h	/^    VK_ERROR_FEATURE_NOT_PRESENT = -8,$/;"	e	enum:VkResult
VK_ERROR_FORMAT_NOT_SUPPORTED	lib/vulkan/vulkan.h	/^    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR	lib/vulkan/vulkan.h	/^    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,$/;"	e	enum:VkResult
VK_ERROR_INCOMPATIBLE_DRIVER	lib/vulkan/vulkan.h	/^    VK_ERROR_INCOMPATIBLE_DRIVER = -9,$/;"	e	enum:VkResult
VK_ERROR_INITIALIZATION_FAILED	lib/vulkan/vulkan.h	/^    VK_ERROR_INITIALIZATION_FAILED = -3,$/;"	e	enum:VkResult
VK_ERROR_INVALID_SHADER_NV	lib/vulkan/vulkan.h	/^    VK_ERROR_INVALID_SHADER_NV = -1000012000,$/;"	e	enum:VkResult
VK_ERROR_LAYER_NOT_PRESENT	lib/vulkan/vulkan.h	/^    VK_ERROR_LAYER_NOT_PRESENT = -6,$/;"	e	enum:VkResult
VK_ERROR_MEMORY_MAP_FAILED	lib/vulkan/vulkan.h	/^    VK_ERROR_MEMORY_MAP_FAILED = -5,$/;"	e	enum:VkResult
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR	lib/vulkan/vulkan.h	/^    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DATE_KHR	lib/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_DEVICE_MEMORY	lib/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,$/;"	e	enum:VkResult
VK_ERROR_OUT_OF_HOST_MEMORY	lib/vulkan/vulkan.h	/^    VK_ERROR_OUT_OF_HOST_MEMORY = -1,$/;"	e	enum:VkResult
VK_ERROR_SURFACE_LOST_KHR	lib/vulkan/vulkan.h	/^    VK_ERROR_SURFACE_LOST_KHR = -1000000000,$/;"	e	enum:VkResult
VK_ERROR_TOO_MANY_OBJECTS	lib/vulkan/vulkan.h	/^    VK_ERROR_TOO_MANY_OBJECTS = -10,$/;"	e	enum:VkResult
VK_ERROR_VALIDATION_FAILED_EXT	lib/vulkan/vulkan.h	/^    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,$/;"	e	enum:VkResult
VK_EVENT_RESET	lib/vulkan/vulkan.h	/^    VK_EVENT_RESET = 4,$/;"	e	enum:VkResult
VK_EVENT_SET	lib/vulkan/vulkan.h	/^    VK_EVENT_SET = 3,$/;"	e	enum:VkResult
VK_EXT_DEBUG_MARKER_EXTENSION_NAME	lib/vulkan/vulkan.h	3873;"	d
VK_EXT_DEBUG_MARKER_SPEC_VERSION	lib/vulkan/vulkan.h	3872;"	d
VK_EXT_DEBUG_REPORT_EXTENSION_NAME	lib/vulkan/vulkan.h	3722;"	d
VK_EXT_DEBUG_REPORT_SPEC_VERSION	lib/vulkan/vulkan.h	3721;"	d
VK_EXT_debug_marker	lib/vulkan/vulkan.h	3871;"	d
VK_EXT_debug_report	lib/vulkan/vulkan.h	3718;"	d
VK_FALSE	lib/vulkan/vulkan.h	101;"	d
VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFenceCreateFlagBits
VK_FENCE_CREATE_SIGNALED_BIT	lib/vulkan/vulkan.h	/^    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,$/;"	e	enum:VkFenceCreateFlagBits
VK_FILTER_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_FILTER_BEGIN_RANGE = VK_FILTER_NEAREST,$/;"	e	enum:VkFilter
VK_FILTER_CUBIC_IMG	lib/vulkan/vulkan.h	/^    VK_FILTER_CUBIC_IMG = 1000015000,$/;"	e	enum:VkFilter
VK_FILTER_END_RANGE	lib/vulkan/vulkan.h	/^    VK_FILTER_END_RANGE = VK_FILTER_LINEAR,$/;"	e	enum:VkFilter
VK_FILTER_LINEAR	lib/vulkan/vulkan.h	/^    VK_FILTER_LINEAR = 1,$/;"	e	enum:VkFilter
VK_FILTER_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_FILTER_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFilter
VK_FILTER_NEAREST	lib/vulkan/vulkan.h	/^    VK_FILTER_NEAREST = 0,$/;"	e	enum:VkFilter
VK_FILTER_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_FILTER_RANGE_SIZE = (VK_FILTER_LINEAR - VK_FILTER_NEAREST + 1),$/;"	e	enum:VkFilter
VK_FORMAT_A1R5G5B5_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_SSCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_UINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_UNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,$/;"	e	enum:VkFormat
VK_FORMAT_A2B10G10R10_USCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_SSCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_UINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_UNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,$/;"	e	enum:VkFormat
VK_FORMAT_A2R10G10B10_USCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SRGB_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_SSCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_UINT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_UNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,$/;"	e	enum:VkFormat
VK_FORMAT_A8B8G8R8_USCALED_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x10_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x10_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x5_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x5_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x6_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x6_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x8_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_10x8_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x10_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x10_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x12_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_12x12_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_4x4_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_4x4_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x4_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x4_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x5_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_5x5_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x5_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x5_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x6_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_6x6_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x5_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x5_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x6_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x6_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x8_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,$/;"	e	enum:VkFormat
VK_FORMAT_ASTC_8x8_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,$/;"	e	enum:VkFormat
VK_FORMAT_B10G11R11_UFLOAT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,$/;"	e	enum:VkFormat
VK_FORMAT_B4G4R4A4_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,$/;"	e	enum:VkFormat
VK_FORMAT_B5G5R5A1_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,$/;"	e	enum:VkFormat
VK_FORMAT_B5G6R5_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SINT = 49,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SNORM = 45,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SRGB = 50,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_SSCALED = 47,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_UINT = 48,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_UNORM = 44,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8A8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8A8_USCALED = 46,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SINT = 35,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SNORM = 31,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SRGB = 36,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_SSCALED = 33,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_UINT = 34,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_UNORM = 30,$/;"	e	enum:VkFormat
VK_FORMAT_B8G8R8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_B8G8R8_USCALED = 32,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGBA_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGBA_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGB_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,$/;"	e	enum:VkFormat
VK_FORMAT_BC1_RGB_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,$/;"	e	enum:VkFormat
VK_FORMAT_BC2_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC2_SRGB_BLOCK = 136,$/;"	e	enum:VkFormat
VK_FORMAT_BC2_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC2_UNORM_BLOCK = 135,$/;"	e	enum:VkFormat
VK_FORMAT_BC3_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC3_SRGB_BLOCK = 138,$/;"	e	enum:VkFormat
VK_FORMAT_BC3_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC3_UNORM_BLOCK = 137,$/;"	e	enum:VkFormat
VK_FORMAT_BC4_SNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC4_SNORM_BLOCK = 140,$/;"	e	enum:VkFormat
VK_FORMAT_BC4_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC4_UNORM_BLOCK = 139,$/;"	e	enum:VkFormat
VK_FORMAT_BC5_SNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC5_SNORM_BLOCK = 142,$/;"	e	enum:VkFormat
VK_FORMAT_BC5_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC5_UNORM_BLOCK = 141,$/;"	e	enum:VkFormat
VK_FORMAT_BC6H_SFLOAT_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,$/;"	e	enum:VkFormat
VK_FORMAT_BC6H_UFLOAT_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,$/;"	e	enum:VkFormat
VK_FORMAT_BC7_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC7_SRGB_BLOCK = 146,$/;"	e	enum:VkFormat
VK_FORMAT_BC7_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_BC7_UNORM_BLOCK = 145,$/;"	e	enum:VkFormat
VK_FORMAT_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_FORMAT_BEGIN_RANGE = VK_FORMAT_UNDEFINED,$/;"	e	enum:VkFormat
VK_FORMAT_D16_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_D16_UNORM = 124,$/;"	e	enum:VkFormat
VK_FORMAT_D16_UNORM_S8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_D16_UNORM_S8_UINT = 128,$/;"	e	enum:VkFormat
VK_FORMAT_D24_UNORM_S8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_D24_UNORM_S8_UINT = 129,$/;"	e	enum:VkFormat
VK_FORMAT_D32_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_D32_SFLOAT = 126,$/;"	e	enum:VkFormat
VK_FORMAT_D32_SFLOAT_S8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,$/;"	e	enum:VkFormat
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11G11_SNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11G11_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11_SNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,$/;"	e	enum:VkFormat
VK_FORMAT_EAC_R11_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,$/;"	e	enum:VkFormat
VK_FORMAT_END_RANGE	lib/vulkan/vulkan.h	/^    VK_FORMAT_END_RANGE = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,$/;"	e	enum:VkFormat
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK	lib/vulkan/vulkan.h	/^    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,$/;"	e	enum:VkFormat
VK_FORMAT_FEATURE_BLIT_DST_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_BLIT_SRC_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT	lib/vulkan/vulkan.h	/^    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,$/;"	e	enum:VkFormatFeatureFlagBits
VK_FORMAT_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SFLOAT = 97,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SINT = 96,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SNORM = 92,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_SSCALED = 94,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_UINT = 95,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_UNORM = 91,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16A16_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16A16_USCALED = 93,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SFLOAT = 90,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SINT = 89,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SNORM = 85,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_SSCALED = 87,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_UINT = 88,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_UNORM = 84,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16B16_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16B16_USCALED = 86,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SFLOAT = 83,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SINT = 82,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SNORM = 78,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_SSCALED = 80,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_UINT = 81,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_UNORM = 77,$/;"	e	enum:VkFormat
VK_FORMAT_R16G16_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16G16_USCALED = 79,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_SFLOAT = 76,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_SINT = 75,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_SNORM = 71,$/;"	e	enum:VkFormat
VK_FORMAT_R16_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_SSCALED = 73,$/;"	e	enum:VkFormat
VK_FORMAT_R16_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_UINT = 74,$/;"	e	enum:VkFormat
VK_FORMAT_R16_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_UNORM = 70,$/;"	e	enum:VkFormat
VK_FORMAT_R16_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R16_USCALED = 72,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_SFLOAT = 109,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_SINT = 108,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32A32_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32A32_UINT = 107,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_SFLOAT = 106,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_SINT = 105,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32B32_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32B32_UINT = 104,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_SFLOAT = 103,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_SINT = 102,$/;"	e	enum:VkFormat
VK_FORMAT_R32G32_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32G32_UINT = 101,$/;"	e	enum:VkFormat
VK_FORMAT_R32_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32_SFLOAT = 100,$/;"	e	enum:VkFormat
VK_FORMAT_R32_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32_SINT = 99,$/;"	e	enum:VkFormat
VK_FORMAT_R32_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R32_UINT = 98,$/;"	e	enum:VkFormat
VK_FORMAT_R4G4B4A4_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,$/;"	e	enum:VkFormat
VK_FORMAT_R4G4_UNORM_PACK8	lib/vulkan/vulkan.h	/^    VK_FORMAT_R4G4_UNORM_PACK8 = 1,$/;"	e	enum:VkFormat
VK_FORMAT_R5G5B5A1_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,$/;"	e	enum:VkFormat
VK_FORMAT_R5G6B5_UNORM_PACK16	lib/vulkan/vulkan.h	/^    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_SFLOAT = 121,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_SINT = 120,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64A64_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64A64_UINT = 119,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_SFLOAT = 118,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_SINT = 117,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64B64_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64B64_UINT = 116,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_SFLOAT = 115,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_SINT = 114,$/;"	e	enum:VkFormat
VK_FORMAT_R64G64_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64G64_UINT = 113,$/;"	e	enum:VkFormat
VK_FORMAT_R64_SFLOAT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64_SFLOAT = 112,$/;"	e	enum:VkFormat
VK_FORMAT_R64_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64_SINT = 111,$/;"	e	enum:VkFormat
VK_FORMAT_R64_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R64_UINT = 110,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SINT = 42,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SNORM = 38,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SRGB = 43,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_SSCALED = 40,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_UINT = 41,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_UNORM = 37,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8A8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8A8_USCALED = 39,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SINT = 28,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SNORM = 24,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SRGB = 29,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_SSCALED = 26,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_UINT = 27,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_UNORM = 23,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8B8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8B8_USCALED = 25,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SINT = 21,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SNORM = 17,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SRGB = 22,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_SSCALED = 19,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_UINT = 20,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_UNORM = 16,$/;"	e	enum:VkFormat
VK_FORMAT_R8G8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8G8_USCALED = 18,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_SINT = 14,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_SNORM = 10,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SRGB	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_SRGB = 15,$/;"	e	enum:VkFormat
VK_FORMAT_R8_SSCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_SSCALED = 12,$/;"	e	enum:VkFormat
VK_FORMAT_R8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_UINT = 13,$/;"	e	enum:VkFormat
VK_FORMAT_R8_UNORM	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_UNORM = 9,$/;"	e	enum:VkFormat
VK_FORMAT_R8_USCALED	lib/vulkan/vulkan.h	/^    VK_FORMAT_R8_USCALED = 11,$/;"	e	enum:VkFormat
VK_FORMAT_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1),$/;"	e	enum:VkFormat
VK_FORMAT_S8_UINT	lib/vulkan/vulkan.h	/^    VK_FORMAT_S8_UINT = 127,$/;"	e	enum:VkFormat
VK_FORMAT_UNDEFINED	lib/vulkan/vulkan.h	/^    VK_FORMAT_UNDEFINED = 0,$/;"	e	enum:VkFormat
VK_FORMAT_X8_D24_UNORM_PACK32	lib/vulkan/vulkan.h	/^    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,$/;"	e	enum:VkFormat
VK_FRONT_FACE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_BEGIN_RANGE = VK_FRONT_FACE_COUNTER_CLOCKWISE,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_CLOCKWISE	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_CLOCKWISE = 1,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_COUNTER_CLOCKWISE	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_END_RANGE = VK_FRONT_FACE_CLOCKWISE,$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkFrontFace
VK_FRONT_FACE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_FRONT_FACE_RANGE_SIZE = (VK_FRONT_FACE_CLOCKWISE - VK_FRONT_FACE_COUNTER_CLOCKWISE + 1),$/;"	e	enum:VkFrontFace
VK_HEADER_VERSION	lib/vulkan/vulkan.h	46;"	d
VK_ICD_WSI_PLATFORM_DISPLAY	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_DISPLAY$/;"	e	enum:__anon76
VK_ICD_WSI_PLATFORM_MIR	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_MIR,$/;"	e	enum:__anon76
VK_ICD_WSI_PLATFORM_WAYLAND	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_WAYLAND,$/;"	e	enum:__anon76
VK_ICD_WSI_PLATFORM_WIN32	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_WIN32,$/;"	e	enum:__anon76
VK_ICD_WSI_PLATFORM_XCB	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_XCB,$/;"	e	enum:__anon76
VK_ICD_WSI_PLATFORM_XLIB	lib/vulkan/vk_icd.h	/^    VK_ICD_WSI_PLATFORM_XLIB,$/;"	e	enum:__anon76
VK_IMAGE_ASPECT_COLOR_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_DEPTH_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_METADATA_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_ASPECT_STENCIL_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,$/;"	e	enum:VkImageAspectFlagBits
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_BINDING_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,$/;"	e	enum:VkImageCreateFlagBits
VK_IMAGE_LAYOUT_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_BEGIN_RANGE = VK_IMAGE_LAYOUT_UNDEFINED,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_END_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_END_RANGE = VK_IMAGE_LAYOUT_PREINITIALIZED,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_GENERAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_GENERAL = 1,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_PREINITIALIZED	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_RANGE_SIZE = (VK_IMAGE_LAYOUT_PREINITIALIZED - VK_IMAGE_LAYOUT_UNDEFINED + 1),$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,$/;"	e	enum:VkImageLayout
VK_IMAGE_LAYOUT_UNDEFINED	lib/vulkan/vulkan.h	/^    VK_IMAGE_LAYOUT_UNDEFINED = 0,$/;"	e	enum:VkImageLayout
VK_IMAGE_TILING_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_BEGIN_RANGE = VK_IMAGE_TILING_OPTIMAL,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_END_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_END_RANGE = VK_IMAGE_TILING_LINEAR,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_LINEAR	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_LINEAR = 1,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_OPTIMAL	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_OPTIMAL = 0,$/;"	e	enum:VkImageTiling
VK_IMAGE_TILING_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TILING_RANGE_SIZE = (VK_IMAGE_TILING_LINEAR - VK_IMAGE_TILING_OPTIMAL + 1),$/;"	e	enum:VkImageTiling
VK_IMAGE_TYPE_1D	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_1D = 0,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_2D	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_2D = 1,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_3D	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_3D = 2,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_BEGIN_RANGE = VK_IMAGE_TYPE_1D,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_END_RANGE = VK_IMAGE_TYPE_3D,$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageType
VK_IMAGE_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_IMAGE_TYPE_RANGE_SIZE = (VK_IMAGE_TYPE_3D - VK_IMAGE_TYPE_1D + 1),$/;"	e	enum:VkImageType
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_SAMPLED_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_STORAGE_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSFER_DST_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSFER_SRC_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT	lib/vulkan/vulkan.h	/^    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,$/;"	e	enum:VkImageUsageFlagBits
VK_IMAGE_VIEW_TYPE_1D	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_1D = 0,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_1D_ARRAY	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_2D	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_2D = 1,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_2D_ARRAY	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_3D	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_3D = 2,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VK_IMAGE_VIEW_TYPE_1D,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_CUBE	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_CUBE = 3,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_END_RANGE = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkImageViewType
VK_IMAGE_VIEW_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_IMAGE_VIEW_TYPE_RANGE_SIZE = (VK_IMAGE_VIEW_TYPE_CUBE_ARRAY - VK_IMAGE_VIEW_TYPE_1D + 1),$/;"	e	enum:VkImageViewType
VK_IMG_FILTER_CUBIC_EXTENSION_NAME	lib/vulkan/vulkan.h	3836;"	d
VK_IMG_FILTER_CUBIC_SPEC_VERSION	lib/vulkan/vulkan.h	3835;"	d
VK_IMG_filter_cubic	lib/vulkan/vulkan.h	3834;"	d
VK_INCOMPLETE	lib/vulkan/vulkan.h	/^    VK_INCOMPLETE = 5,$/;"	e	enum:VkResult
VK_INDEX_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_BEGIN_RANGE = VK_INDEX_TYPE_UINT16,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_END_RANGE = VK_INDEX_TYPE_UINT32,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_RANGE_SIZE = (VK_INDEX_TYPE_UINT32 - VK_INDEX_TYPE_UINT16 + 1),$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_UINT16	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_UINT16 = 0,$/;"	e	enum:VkIndexType
VK_INDEX_TYPE_UINT32	lib/vulkan/vulkan.h	/^    VK_INDEX_TYPE_UINT32 = 1,$/;"	e	enum:VkIndexType
VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE	lib/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkInternalAllocationType
VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = (VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE - VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE + 1),$/;"	e	enum:VkInternalAllocationType
VK_KHR_ANDROID_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3656;"	d
VK_KHR_ANDROID_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3655;"	d
VK_KHR_DISPLAY_EXTENSION_NAME	lib/vulkan/vulkan.h	3362;"	d
VK_KHR_DISPLAY_SPEC_VERSION	lib/vulkan/vulkan.h	3361;"	d
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME	lib/vulkan/vulkan.h	3487;"	d
VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION	lib/vulkan/vulkan.h	3486;"	d
VK_KHR_MIR_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3621;"	d
VK_KHR_MIR_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3620;"	d
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME	lib/vulkan/vulkan.h	3715;"	d
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION	lib/vulkan/vulkan.h	3714;"	d
VK_KHR_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3177;"	d
VK_KHR_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3176;"	d
VK_KHR_SWAPCHAIN_EXTENSION_NAME	lib/vulkan/vulkan.h	3283;"	d
VK_KHR_SWAPCHAIN_SPEC_VERSION	lib/vulkan/vulkan.h	3282;"	d
VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3586;"	d
VK_KHR_WAYLAND_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3585;"	d
VK_KHR_WIN32_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3684;"	d
VK_KHR_WIN32_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3683;"	d
VK_KHR_XCB_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3550;"	d
VK_KHR_XCB_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3549;"	d
VK_KHR_XLIB_SURFACE_EXTENSION_NAME	lib/vulkan/vulkan.h	3514;"	d
VK_KHR_XLIB_SURFACE_SPEC_VERSION	lib/vulkan/vulkan.h	3513;"	d
VK_KHR_android_surface	lib/vulkan/vulkan.h	3652;"	d
VK_KHR_display	lib/vulkan/vulkan.h	3357;"	d
VK_KHR_display_swapchain	lib/vulkan/vulkan.h	3485;"	d
VK_KHR_mir_surface	lib/vulkan/vulkan.h	3617;"	d
VK_KHR_sampler_mirror_clamp_to_edge	lib/vulkan/vulkan.h	3713;"	d
VK_KHR_surface	lib/vulkan/vulkan.h	3173;"	d
VK_KHR_swapchain	lib/vulkan/vulkan.h	3279;"	d
VK_KHR_wayland_surface	lib/vulkan/vulkan.h	3582;"	d
VK_KHR_win32_surface	lib/vulkan/vulkan.h	3680;"	d
VK_KHR_xcb_surface	lib/vulkan/vulkan.h	3546;"	d
VK_KHR_xlib_surface	lib/vulkan/vulkan.h	3510;"	d
VK_LAYER_EXPORT	lib/vulkan/vk_layer.h	31;"	d
VK_LAYER_EXPORT	lib/vulkan/vk_layer.h	33;"	d
VK_LAYER_EXPORT	lib/vulkan/vk_layer.h	35;"	d
VK_LAYER_LINK_INFO	lib/vulkan/vk_layer.h	/^    VK_LAYER_LINK_INFO = 0,$/;"	e	enum:VkLayerFunction_
VK_LOADER_DATA	lib/vulkan/vk_icd.h	/^} VK_LOADER_DATA;$/;"	t	typeref:union:__anon75
VK_LOADER_DATA_CALLBACK	lib/vulkan/vk_layer.h	/^    VK_LOADER_DATA_CALLBACK = 1$/;"	e	enum:VkLayerFunction_
VK_LOD_CLAMP_NONE	lib/vulkan/vulkan.h	95;"	d
VK_LOGIC_OP_AND	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND = 1,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_AND_INVERTED	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND_INVERTED = 4,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_AND_REVERSE	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_AND_REVERSE = 2,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_BEGIN_RANGE = VK_LOGIC_OP_CLEAR,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_CLEAR	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_CLEAR = 0,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_COPY	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_COPY = 3,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_COPY_INVERTED	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_COPY_INVERTED = 12,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_END_RANGE = VK_LOGIC_OP_SET,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_EQUIVALENT	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_EQUIVALENT = 9,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_INVERT	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_INVERT = 10,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NAND	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_NAND = 14,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NOR	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_NOR = 8,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_NO_OP	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_NO_OP = 5,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR = 7,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR_INVERTED	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR_INVERTED = 13,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_OR_REVERSE	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_OR_REVERSE = 11,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_RANGE_SIZE = (VK_LOGIC_OP_SET - VK_LOGIC_OP_CLEAR + 1),$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_SET	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_SET = 15,$/;"	e	enum:VkLogicOp
VK_LOGIC_OP_XOR	lib/vulkan/vulkan.h	/^    VK_LOGIC_OP_XOR = 6,$/;"	e	enum:VkLogicOp
VK_MAKE_VERSION	lib/vulkan/vulkan.h	33;"	d
VK_MAX_DESCRIPTION_SIZE	lib/vulkan/vulkan.h	109;"	d
VK_MAX_EXTENSION_NAME_SIZE	lib/vulkan/vulkan.h	108;"	d
VK_MAX_MEMORY_HEAPS	lib/vulkan/vulkan.h	107;"	d
VK_MAX_MEMORY_TYPES	lib/vulkan/vulkan.h	106;"	d
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE	lib/vulkan/vulkan.h	104;"	d
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,$/;"	e	enum:VkMemoryHeapFlagBits
VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkMemoryHeapFlagBits
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_CACHED_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT	lib/vulkan/vulkan.h	/^    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,$/;"	e	enum:VkMemoryPropertyFlagBits
VK_NOT_READY	lib/vulkan/vulkan.h	/^    VK_NOT_READY = 1,$/;"	e	enum:VkResult
VK_NULL_HANDLE	lib/vulkan/vulkan.h	49;"	d
VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME	lib/vulkan/vulkan.h	3935;"	d
VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION	lib/vulkan/vulkan.h	3934;"	d
VK_NV_GLSL_SHADER_EXTENSION_NAME	lib/vulkan/vulkan.h	3831;"	d
VK_NV_GLSL_SHADER_SPEC_VERSION	lib/vulkan/vulkan.h	3830;"	d
VK_NV_dedicated_allocation	lib/vulkan/vulkan.h	3933;"	d
VK_NV_glsl_shader	lib/vulkan/vulkan.h	3829;"	d
VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VK_PHYSICAL_DEVICE_TYPE_OTHER,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_CPU	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VK_PHYSICAL_DEVICE_TYPE_CPU,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_OTHER	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = (VK_PHYSICAL_DEVICE_TYPE_CPU - VK_PHYSICAL_DEVICE_TYPE_OTHER + 1),$/;"	e	enum:VkPhysicalDeviceType
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU	lib/vulkan/vulkan.h	/^    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,$/;"	e	enum:VkPhysicalDeviceType
VK_PIPELINE_BIND_POINT_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VK_PIPELINE_BIND_POINT_GRAPHICS,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_COMPUTE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_COMPUTE = 1,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_END_RANGE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_END_RANGE = VK_PIPELINE_BIND_POINT_COMPUTE,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_GRAPHICS	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_BIND_POINT_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_BIND_POINT_RANGE_SIZE = (VK_PIPELINE_BIND_POINT_COMPUTE - VK_PIPELINE_BIND_POINT_GRAPHICS + 1),$/;"	e	enum:VkPipelineBindPoint
VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_ONE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = (VK_PIPELINE_CACHE_HEADER_VERSION_ONE - VK_PIPELINE_CACHE_HEADER_VERSION_ONE + 1),$/;"	e	enum:VkPipelineCacheHeaderVersion
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_DERIVATIVE_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineCreateFlagBits
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_HOST_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_TRANSFER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,$/;"	e	enum:VkPipelineStageFlagBits
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT	lib/vulkan/vulkan.h	/^    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,$/;"	e	enum:VkPipelineStageFlagBits
VK_PLATFORM_H_	lib/vulkan/vk_platform.h	22;"	d
VK_POLYGON_MODE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_BEGIN_RANGE = VK_POLYGON_MODE_FILL,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_END_RANGE = VK_POLYGON_MODE_POINT,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_FILL	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_FILL = 0,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_LINE	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_LINE = 1,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_POINT	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_POINT = 2,$/;"	e	enum:VkPolygonMode
VK_POLYGON_MODE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_POLYGON_MODE_RANGE_SIZE = (VK_POLYGON_MODE_POINT - VK_POLYGON_MODE_FILL + 1),$/;"	e	enum:VkPolygonMode
VK_PRESENT_MODE_BEGIN_RANGE_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_BEGIN_RANGE_KHR = VK_PRESENT_MODE_IMMEDIATE_KHR,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_END_RANGE_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_END_RANGE_KHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_FIFO_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_FIFO_KHR = 2,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_FIFO_RELAXED_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_IMMEDIATE_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_MAILBOX_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_MAILBOX_KHR = 1,$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_MAX_ENUM_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkPresentModeKHR
VK_PRESENT_MODE_RANGE_SIZE_KHR	lib/vulkan/vulkan.h	/^    VK_PRESENT_MODE_RANGE_SIZE_KHR = (VK_PRESENT_MODE_FIFO_RELAXED_KHR - VK_PRESENT_MODE_IMMEDIATE_KHR + 1),$/;"	e	enum:VkPresentModeKHR
VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_END_RANGE	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_END_RANGE = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_LIST	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_POINT_LIST	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = (VK_PRIMITIVE_TOPOLOGY_PATCH_LIST - VK_PRIMITIVE_TOPOLOGY_POINT_LIST + 1),$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,$/;"	e	enum:VkPrimitiveTopology
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY	lib/vulkan/vulkan.h	/^    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,$/;"	e	enum:VkPrimitiveTopology
VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryControlFlagBits
VK_QUERY_CONTROL_PRECISE_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,$/;"	e	enum:VkQueryControlFlagBits
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,$/;"	e	enum:VkQueryPipelineStatisticFlagBits
VK_QUERY_RESULT_64_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_RESULT_64_BIT = 0x00000001,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_PARTIAL_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_WAIT_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_RESULT_WAIT_BIT = 0x00000002,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT	lib/vulkan/vulkan.h	/^    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,$/;"	e	enum:VkQueryResultFlagBits
VK_QUERY_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_BEGIN_RANGE = VK_QUERY_TYPE_OCCLUSION,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_END_RANGE = VK_QUERY_TYPE_TIMESTAMP,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_OCCLUSION	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_OCCLUSION = 0,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_PIPELINE_STATISTICS	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_RANGE_SIZE = (VK_QUERY_TYPE_TIMESTAMP - VK_QUERY_TYPE_OCCLUSION + 1),$/;"	e	enum:VkQueryType
VK_QUERY_TYPE_TIMESTAMP	lib/vulkan/vulkan.h	/^    VK_QUERY_TYPE_TIMESTAMP = 2,$/;"	e	enum:VkQueryType
VK_QUEUE_COMPUTE_BIT	lib/vulkan/vulkan.h	/^    VK_QUEUE_COMPUTE_BIT = 0x00000002,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_FAMILY_IGNORED	lib/vulkan/vulkan.h	102;"	d
VK_QUEUE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_GRAPHICS_BIT	lib/vulkan/vulkan.h	/^    VK_QUEUE_GRAPHICS_BIT = 0x00000001,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_SPARSE_BINDING_BIT	lib/vulkan/vulkan.h	/^    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,$/;"	e	enum:VkQueueFlagBits
VK_QUEUE_TRANSFER_BIT	lib/vulkan/vulkan.h	/^    VK_QUEUE_TRANSFER_BIT = 0x00000004,$/;"	e	enum:VkQueueFlagBits
VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD = VK_RASTERIZATION_ORDER_STRICT_AMD,$/;"	e	enum:VkRasterizationOrderAMD
VK_RASTERIZATION_ORDER_END_RANGE_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_END_RANGE_AMD = VK_RASTERIZATION_ORDER_RELAXED_AMD,$/;"	e	enum:VkRasterizationOrderAMD
VK_RASTERIZATION_ORDER_MAX_ENUM_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF$/;"	e	enum:VkRasterizationOrderAMD
VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD = (VK_RASTERIZATION_ORDER_RELAXED_AMD - VK_RASTERIZATION_ORDER_STRICT_AMD + 1),$/;"	e	enum:VkRasterizationOrderAMD
VK_RASTERIZATION_ORDER_RELAXED_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,$/;"	e	enum:VkRasterizationOrderAMD
VK_RASTERIZATION_ORDER_STRICT_AMD	lib/vulkan/vulkan.h	/^    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,$/;"	e	enum:VkRasterizationOrderAMD
VK_REMAINING_ARRAY_LAYERS	lib/vulkan/vulkan.h	97;"	d
VK_REMAINING_MIP_LEVELS	lib/vulkan/vulkan.h	96;"	d
VK_RESULT_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_RESULT_BEGIN_RANGE = VK_ERROR_FORMAT_NOT_SUPPORTED,$/;"	e	enum:VkResult
VK_RESULT_END_RANGE	lib/vulkan/vulkan.h	/^    VK_RESULT_END_RANGE = VK_INCOMPLETE,$/;"	e	enum:VkResult
VK_RESULT_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_RESULT_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkResult
VK_RESULT_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_RESULT_RANGE_SIZE = (VK_INCOMPLETE - VK_ERROR_FORMAT_NOT_SUPPORTED + 1),$/;"	e	enum:VkResult
VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VK_SAMPLER_ADDRESS_MODE_REPEAT,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_END_RANGE = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = (VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER - VK_SAMPLER_ADDRESS_MODE_REPEAT + 1),$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_ADDRESS_MODE_REPEAT	lib/vulkan/vulkan.h	/^    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,$/;"	e	enum:VkSamplerAddressMode
VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VK_SAMPLER_MIPMAP_MODE_NEAREST,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_END_RANGE = VK_SAMPLER_MIPMAP_MODE_LINEAR,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_LINEAR	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_NEAREST	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = (VK_SAMPLER_MIPMAP_MODE_LINEAR - VK_SAMPLER_MIPMAP_MODE_NEAREST + 1),$/;"	e	enum:VkSamplerMipmapMode
VK_SAMPLE_COUNT_16_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_16_BIT = 0x00000010,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_1_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_1_BIT = 0x00000001,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_2_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_2_BIT = 0x00000002,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_32_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_32_BIT = 0x00000020,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_4_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_4_BIT = 0x00000004,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_64_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_64_BIT = 0x00000040,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_8_BIT	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_8_BIT = 0x00000008,$/;"	e	enum:VkSampleCountFlagBits
VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSampleCountFlagBits
VK_SDK_PLATFORM_H	lib/vulkan/vk_sdk_platform.h	23;"	d
VK_SHADER_STAGE_ALL	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_ALL_GRAPHICS	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_COMPUTE_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_FRAGMENT_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_GEOMETRY_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,$/;"	e	enum:VkShaderStageFlagBits
VK_SHADER_STAGE_VERTEX_BIT	lib/vulkan/vulkan.h	/^    VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,$/;"	e	enum:VkShaderStageFlagBits
VK_SHARING_MODE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_BEGIN_RANGE = VK_SHARING_MODE_EXCLUSIVE,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_CONCURRENT	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_CONCURRENT = 1,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_END_RANGE = VK_SHARING_MODE_CONCURRENT,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_EXCLUSIVE	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_EXCLUSIVE = 0,$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSharingMode
VK_SHARING_MODE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_SHARING_MODE_RANGE_SIZE = (VK_SHARING_MODE_CONCURRENT - VK_SHARING_MODE_EXCLUSIVE + 1),$/;"	e	enum:VkSharingMode
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT	lib/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT	lib/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT	lib/vulkan/vulkan.h	/^    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,$/;"	e	enum:VkSparseImageFormatFlagBits
VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSparseMemoryBindFlagBits
VK_SPARSE_MEMORY_BIND_METADATA_BIT	lib/vulkan/vulkan.h	/^    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,$/;"	e	enum:VkSparseMemoryBindFlagBits
VK_STENCIL_FACE_BACK_BIT	lib/vulkan/vulkan.h	/^    VK_STENCIL_FACE_BACK_BIT = 0x00000002,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FACE_FRONT_BIT	lib/vulkan/vulkan.h	/^    VK_STENCIL_FACE_FRONT_BIT = 0x00000001,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_FRONT_AND_BACK	lib/vulkan/vulkan.h	/^    VK_STENCIL_FRONT_AND_BACK = 0x00000003,$/;"	e	enum:VkStencilFaceFlagBits
VK_STENCIL_OP_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_BEGIN_RANGE = VK_STENCIL_OP_KEEP,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_DECREMENT_AND_CLAMP	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_DECREMENT_AND_WRAP	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_END_RANGE	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_END_RANGE = VK_STENCIL_OP_DECREMENT_AND_WRAP,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INCREMENT_AND_CLAMP	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INCREMENT_AND_WRAP	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_INVERT	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_INVERT = 5,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_KEEP	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_KEEP = 0,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_RANGE_SIZE = (VK_STENCIL_OP_DECREMENT_AND_WRAP - VK_STENCIL_OP_KEEP + 1),$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_REPLACE	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_REPLACE = 2,$/;"	e	enum:VkStencilOp
VK_STENCIL_OP_ZERO	lib/vulkan/vulkan.h	/^    VK_STENCIL_OP_ZERO = 1,$/;"	e	enum:VkStencilOp
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_APPLICATION_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BEGIN_RANGE = VK_STRUCTURE_TYPE_APPLICATION_INFO,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT	lib/vulkan/vulkan.h	3723;"	d
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_END_RANGE = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MEMORY_BARRIER	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RANGE_SIZE = (VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO - VK_STRUCTURE_TYPE_APPLICATION_INFO + 1),$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SUBMIT_INFO	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,$/;"	e	enum:VkStructureType
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR	lib/vulkan/vulkan.h	/^    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,$/;"	e	enum:VkStructureType
VK_SUBOPTIMAL_KHR	lib/vulkan/vulkan.h	/^    VK_SUBOPTIMAL_KHR = 1000001003,$/;"	e	enum:VkResult
VK_SUBPASS_CONTENTS_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_BEGIN_RANGE = VK_SUBPASS_CONTENTS_INLINE,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_END_RANGE	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_END_RANGE = VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_INLINE	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_INLINE = 0,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_RANGE_SIZE = (VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS - VK_SUBPASS_CONTENTS_INLINE + 1),$/;"	e	enum:VkSubpassContents
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS	lib/vulkan/vulkan.h	/^    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,$/;"	e	enum:VkSubpassContents
VK_SUBPASS_EXTERNAL	lib/vulkan/vulkan.h	103;"	d
VK_SUCCESS	lib/vulkan/vulkan.h	/^    VK_SUCCESS = 0,$/;"	e	enum:VkResult
VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR	lib/vulkan/vulkan.h	/^    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,$/;"	e	enum:VkSurfaceTransformFlagBitsKHR
VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_CACHE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,$/;"	e	enum:VkSystemAllocationScope
VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = (VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE - VK_SYSTEM_ALLOCATION_SCOPE_COMMAND + 1),$/;"	e	enum:VkSystemAllocationScope
VK_THROW_RESULT_ERROR	inc/vulkan_utils.h	12;"	d
VK_TIMEOUT	lib/vulkan/vulkan.h	/^    VK_TIMEOUT = 2,$/;"	e	enum:VkResult
VK_TRUE	lib/vulkan/vulkan.h	100;"	d
VK_UUID_SIZE	lib/vulkan/vulkan.h	105;"	d
VK_VERSION_1_0	lib/vulkan/vulkan.h	30;"	d
VK_VERSION_MAJOR	lib/vulkan/vulkan.h	42;"	d
VK_VERSION_MINOR	lib/vulkan/vulkan.h	43;"	d
VK_VERSION_PATCH	lib/vulkan/vulkan.h	44;"	d
VK_VERTEX_INPUT_RATE_BEGIN_RANGE	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VK_VERTEX_INPUT_RATE_VERTEX,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_END_RANGE	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_END_RANGE = VK_VERTEX_INPUT_RATE_INSTANCE,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_INSTANCE	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_INSTANCE = 1,$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_MAX_ENUM	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_RANGE_SIZE	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_RANGE_SIZE = (VK_VERTEX_INPUT_RATE_INSTANCE - VK_VERTEX_INPUT_RATE_VERTEX + 1),$/;"	e	enum:VkVertexInputRate
VK_VERTEX_INPUT_RATE_VERTEX	lib/vulkan/vulkan.h	/^    VK_VERTEX_INPUT_RATE_VERTEX = 0,$/;"	e	enum:VkVertexInputRate
VK_WHOLE_SIZE	lib/vulkan/vulkan.h	98;"	d
VPATH	Makefile	/^VPATH=\\$/;"	m
VULKAN_H_	lib/vulkan/vulkan.h	2;"	d
VULKAN_IMAGE_INFO	inc/image_info.h	2;"	d
VULKAN_LIB_PATH	Makefile	/^VULKAN_LIB_PATH := $(VULKAN_SDK_DIR)\/lib$/;"	m
VULKAN_SDK_DIR	Makefile	/^VULKAN_SDK_DIR := \/home\/al\/VulkanSDK\/1.0.39.1\/x86_64$/;"	m
Version	lib/vulkan/spirv.hpp	/^static const unsigned int Version = 0x00010100;$/;"	m	namespace:spv
Vertex	inc/shape/model.h	/^	struct Vertex {$/;"	s	class:Model	access:public
Vertex	inc/shape/skinned.h	/^	struct Vertex {$/;"	s	class:Skinned	access:public
Vertex	inc/shape/sphere.h	/^	struct Vertex {$/;"	s	class:Sphere	access:public
Vertex	inc/shape/tquad.h	/^	struct Vertex {$/;"	s	class:TQuad	access:public
VkAccessFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkAccessFlagBits {$/;"	g
VkAccessFlagBits	lib/vulkan/vulkan.h	/^} VkAccessFlagBits;$/;"	t	typeref:enum:VkAccessFlagBits
VkAccessFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkAccessFlags;$/;"	t
VkAllocationCallbacks	lib/vulkan/vulkan.h	/^typedef struct VkAllocationCallbacks {$/;"	s
VkAllocationCallbacks	lib/vulkan/vulkan.h	/^} VkAllocationCallbacks;$/;"	t	typeref:struct:VkAllocationCallbacks
VkAllocationCallbacks::pUserData	lib/vulkan/vulkan.h	/^    void*                                   pUserData;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAllocationCallbacks::pfnAllocation	lib/vulkan/vulkan.h	/^    PFN_vkAllocationFunction                pfnAllocation;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAllocationCallbacks::pfnFree	lib/vulkan/vulkan.h	/^    PFN_vkFreeFunction                      pfnFree;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAllocationCallbacks::pfnInternalAllocation	lib/vulkan/vulkan.h	/^    PFN_vkInternalAllocationNotification    pfnInternalAllocation;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAllocationCallbacks::pfnInternalFree	lib/vulkan/vulkan.h	/^    PFN_vkInternalFreeNotification          pfnInternalFree;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAllocationCallbacks::pfnReallocation	lib/vulkan/vulkan.h	/^    PFN_vkReallocationFunction              pfnReallocation;$/;"	m	struct:VkAllocationCallbacks	access:public
VkAndroidSurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkAndroidSurfaceCreateFlagsKHR;$/;"	t
VkAndroidSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkAndroidSurfaceCreateInfoKHR {$/;"	s
VkAndroidSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkAndroidSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkAndroidSurfaceCreateInfoKHR
VkAndroidSurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkAndroidSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
VkAndroidSurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
VkAndroidSurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
VkAndroidSurfaceCreateInfoKHR::window	lib/vulkan/vulkan.h	/^    ANativeWindow*                    window;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
VkApplicationInfo	lib/vulkan/vulkan.h	/^typedef struct VkApplicationInfo {$/;"	s
VkApplicationInfo	lib/vulkan/vulkan.h	/^} VkApplicationInfo;$/;"	t	typeref:struct:VkApplicationInfo
VkApplicationInfo::apiVersion	lib/vulkan/vulkan.h	/^    uint32_t           apiVersion;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::applicationVersion	lib/vulkan/vulkan.h	/^    uint32_t           applicationVersion;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::engineVersion	lib/vulkan/vulkan.h	/^    uint32_t           engineVersion;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::pApplicationName	lib/vulkan/vulkan.h	/^    const char*        pApplicationName;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::pEngineName	lib/vulkan/vulkan.h	/^    const char*        pEngineName;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkApplicationInfo	access:public
VkApplicationInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkApplicationInfo	access:public
VkAttachmentDescription	lib/vulkan/vulkan.h	/^typedef struct VkAttachmentDescription {$/;"	s
VkAttachmentDescription	lib/vulkan/vulkan.h	/^} VkAttachmentDescription;$/;"	t	typeref:struct:VkAttachmentDescription
VkAttachmentDescription::finalLayout	lib/vulkan/vulkan.h	/^    VkImageLayout                   finalLayout;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::flags	lib/vulkan/vulkan.h	/^    VkAttachmentDescriptionFlags    flags;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::format	lib/vulkan/vulkan.h	/^    VkFormat                        format;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::initialLayout	lib/vulkan/vulkan.h	/^    VkImageLayout                   initialLayout;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::loadOp	lib/vulkan/vulkan.h	/^    VkAttachmentLoadOp              loadOp;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::samples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits           samples;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::stencilLoadOp	lib/vulkan/vulkan.h	/^    VkAttachmentLoadOp              stencilLoadOp;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::stencilStoreOp	lib/vulkan/vulkan.h	/^    VkAttachmentStoreOp             stencilStoreOp;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescription::storeOp	lib/vulkan/vulkan.h	/^    VkAttachmentStoreOp             storeOp;$/;"	m	struct:VkAttachmentDescription	access:public
VkAttachmentDescriptionFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkAttachmentDescriptionFlagBits {$/;"	g
VkAttachmentDescriptionFlagBits	lib/vulkan/vulkan.h	/^} VkAttachmentDescriptionFlagBits;$/;"	t	typeref:enum:VkAttachmentDescriptionFlagBits
VkAttachmentDescriptionFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkAttachmentDescriptionFlags;$/;"	t
VkAttachmentLoadOp	lib/vulkan/vulkan.h	/^typedef enum VkAttachmentLoadOp {$/;"	g
VkAttachmentLoadOp	lib/vulkan/vulkan.h	/^} VkAttachmentLoadOp;$/;"	t	typeref:enum:VkAttachmentLoadOp
VkAttachmentReference	lib/vulkan/vulkan.h	/^typedef struct VkAttachmentReference {$/;"	s
VkAttachmentReference	lib/vulkan/vulkan.h	/^} VkAttachmentReference;$/;"	t	typeref:struct:VkAttachmentReference
VkAttachmentReference::attachment	lib/vulkan/vulkan.h	/^    uint32_t         attachment;$/;"	m	struct:VkAttachmentReference	access:public
VkAttachmentReference::layout	lib/vulkan/vulkan.h	/^    VkImageLayout    layout;$/;"	m	struct:VkAttachmentReference	access:public
VkAttachmentStoreOp	lib/vulkan/vulkan.h	/^typedef enum VkAttachmentStoreOp {$/;"	g
VkAttachmentStoreOp	lib/vulkan/vulkan.h	/^} VkAttachmentStoreOp;$/;"	t	typeref:enum:VkAttachmentStoreOp
VkBindSparseInfo	lib/vulkan/vulkan.h	/^typedef struct VkBindSparseInfo {$/;"	s
VkBindSparseInfo	lib/vulkan/vulkan.h	/^} VkBindSparseInfo;$/;"	t	typeref:struct:VkBindSparseInfo
VkBindSparseInfo::bufferBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    bufferBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::imageBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    imageBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::imageOpaqueBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    imageOpaqueBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pBufferBinds	lib/vulkan/vulkan.h	/^    const VkSparseBufferMemoryBindInfo*         pBufferBinds;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pImageBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageMemoryBindInfo*          pImageBinds;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pImageOpaqueBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pSignalSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*                          pSignalSemaphores;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*                          pWaitSemaphores;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::signalSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                                    signalSemaphoreCount;$/;"	m	struct:VkBindSparseInfo	access:public
VkBindSparseInfo::waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                                    waitSemaphoreCount;$/;"	m	struct:VkBindSparseInfo	access:public
VkBlendFactor	lib/vulkan/vulkan.h	/^typedef enum VkBlendFactor {$/;"	g
VkBlendFactor	lib/vulkan/vulkan.h	/^} VkBlendFactor;$/;"	t	typeref:enum:VkBlendFactor
VkBlendOp	lib/vulkan/vulkan.h	/^typedef enum VkBlendOp {$/;"	g
VkBlendOp	lib/vulkan/vulkan.h	/^} VkBlendOp;$/;"	t	typeref:enum:VkBlendOp
VkBool32	lib/vulkan/vulkan.h	/^typedef uint32_t VkBool32;$/;"	t
VkBorderColor	lib/vulkan/vulkan.h	/^typedef enum VkBorderColor {$/;"	g
VkBorderColor	lib/vulkan/vulkan.h	/^} VkBorderColor;$/;"	t	typeref:enum:VkBorderColor
VkBufferCopy	lib/vulkan/vulkan.h	/^typedef struct VkBufferCopy {$/;"	s
VkBufferCopy	lib/vulkan/vulkan.h	/^} VkBufferCopy;$/;"	t	typeref:struct:VkBufferCopy
VkBufferCopy::dstOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize    dstOffset;$/;"	m	struct:VkBufferCopy	access:public
VkBufferCopy::size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkBufferCopy	access:public
VkBufferCopy::srcOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize    srcOffset;$/;"	m	struct:VkBufferCopy	access:public
VkBufferCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkBufferCreateFlagBits {$/;"	g
VkBufferCreateFlagBits	lib/vulkan/vulkan.h	/^} VkBufferCreateFlagBits;$/;"	t	typeref:enum:VkBufferCreateFlagBits
VkBufferCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkBufferCreateFlags;$/;"	t
VkBufferCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkBufferCreateInfo {$/;"	s
VkBufferCreateInfo	lib/vulkan/vulkan.h	/^} VkBufferCreateInfo;$/;"	t	typeref:struct:VkBufferCreateInfo
VkBufferCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkBufferCreateFlags    flags;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*        pQueueFamilyIndices;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t               queueFamilyIndexCount;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::sharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode          sharingMode;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::size	lib/vulkan/vulkan.h	/^    VkDeviceSize           size;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferCreateInfo::usage	lib/vulkan/vulkan.h	/^    VkBufferUsageFlags     usage;$/;"	m	struct:VkBufferCreateInfo	access:public
VkBufferImageCopy	lib/vulkan/vulkan.h	/^typedef struct VkBufferImageCopy {$/;"	s
VkBufferImageCopy	lib/vulkan/vulkan.h	/^} VkBufferImageCopy;$/;"	t	typeref:struct:VkBufferImageCopy
VkBufferImageCopy::bufferImageHeight	lib/vulkan/vulkan.h	/^    uint32_t                    bufferImageHeight;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferImageCopy::bufferOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize                bufferOffset;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferImageCopy::bufferRowLength	lib/vulkan/vulkan.h	/^    uint32_t                    bufferRowLength;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferImageCopy::imageExtent	lib/vulkan/vulkan.h	/^    VkExtent3D                  imageExtent;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferImageCopy::imageOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  imageOffset;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferImageCopy::imageSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    imageSubresource;$/;"	m	struct:VkBufferImageCopy	access:public
VkBufferMemoryBarrier	lib/vulkan/vulkan.h	/^typedef struct VkBufferMemoryBarrier {$/;"	s
VkBufferMemoryBarrier	lib/vulkan/vulkan.h	/^} VkBufferMemoryBarrier;$/;"	t	typeref:struct:VkBufferMemoryBarrier
VkBufferMemoryBarrier::buffer	lib/vulkan/vulkan.h	/^    VkBuffer           buffer;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::dstQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t           dstQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::offset	lib/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::size	lib/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferMemoryBarrier::srcQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t           srcQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier	access:public
VkBufferUsageFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkBufferUsageFlagBits {$/;"	g
VkBufferUsageFlagBits	lib/vulkan/vulkan.h	/^} VkBufferUsageFlagBits;$/;"	t	typeref:enum:VkBufferUsageFlagBits
VkBufferUsageFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkBufferUsageFlags;$/;"	t
VkBufferViewCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkBufferViewCreateFlags;$/;"	t
VkBufferViewCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkBufferViewCreateInfo {$/;"	s
VkBufferViewCreateInfo	lib/vulkan/vulkan.h	/^} VkBufferViewCreateInfo;$/;"	t	typeref:struct:VkBufferViewCreateInfo
VkBufferViewCreateInfo::buffer	lib/vulkan/vulkan.h	/^    VkBuffer                   buffer;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkBufferViewCreateFlags    flags;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::format	lib/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::offset	lib/vulkan/vulkan.h	/^    VkDeviceSize               offset;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::range	lib/vulkan/vulkan.h	/^    VkDeviceSize               range;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkBufferViewCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkBufferViewCreateInfo	access:public
VkClearAttachment	lib/vulkan/vulkan.h	/^typedef struct VkClearAttachment {$/;"	s
VkClearAttachment	lib/vulkan/vulkan.h	/^} VkClearAttachment;$/;"	t	typeref:struct:VkClearAttachment
VkClearAttachment::aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkClearAttachment	access:public
VkClearAttachment::clearValue	lib/vulkan/vulkan.h	/^    VkClearValue          clearValue;$/;"	m	struct:VkClearAttachment	access:public
VkClearAttachment::colorAttachment	lib/vulkan/vulkan.h	/^    uint32_t              colorAttachment;$/;"	m	struct:VkClearAttachment	access:public
VkClearColorValue	lib/vulkan/vulkan.h	/^typedef union VkClearColorValue {$/;"	u
VkClearColorValue	lib/vulkan/vulkan.h	/^} VkClearColorValue;$/;"	t	typeref:union:VkClearColorValue
VkClearColorValue::float32	lib/vulkan/vulkan.h	/^    float       float32[4];$/;"	m	union:VkClearColorValue	access:public
VkClearColorValue::int32	lib/vulkan/vulkan.h	/^    int32_t     int32[4];$/;"	m	union:VkClearColorValue	access:public
VkClearColorValue::uint32	lib/vulkan/vulkan.h	/^    uint32_t    uint32[4];$/;"	m	union:VkClearColorValue	access:public
VkClearDepthStencilValue	lib/vulkan/vulkan.h	/^typedef struct VkClearDepthStencilValue {$/;"	s
VkClearDepthStencilValue	lib/vulkan/vulkan.h	/^} VkClearDepthStencilValue;$/;"	t	typeref:struct:VkClearDepthStencilValue
VkClearDepthStencilValue::depth	lib/vulkan/vulkan.h	/^    float       depth;$/;"	m	struct:VkClearDepthStencilValue	access:public
VkClearDepthStencilValue::stencil	lib/vulkan/vulkan.h	/^    uint32_t    stencil;$/;"	m	struct:VkClearDepthStencilValue	access:public
VkClearRect	lib/vulkan/vulkan.h	/^typedef struct VkClearRect {$/;"	s
VkClearRect	lib/vulkan/vulkan.h	/^} VkClearRect;$/;"	t	typeref:struct:VkClearRect
VkClearRect::baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t    baseArrayLayer;$/;"	m	struct:VkClearRect	access:public
VkClearRect::layerCount	lib/vulkan/vulkan.h	/^    uint32_t    layerCount;$/;"	m	struct:VkClearRect	access:public
VkClearRect::rect	lib/vulkan/vulkan.h	/^    VkRect2D    rect;$/;"	m	struct:VkClearRect	access:public
VkClearValue	lib/vulkan/vulkan.h	/^typedef union VkClearValue {$/;"	u
VkClearValue	lib/vulkan/vulkan.h	/^} VkClearValue;$/;"	t	typeref:union:VkClearValue
VkClearValue::color	lib/vulkan/vulkan.h	/^    VkClearColorValue           color;$/;"	m	union:VkClearValue	access:public
VkClearValue::depthStencil	lib/vulkan/vulkan.h	/^    VkClearDepthStencilValue    depthStencil;$/;"	m	union:VkClearValue	access:public
VkColorComponentFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkColorComponentFlagBits {$/;"	g
VkColorComponentFlagBits	lib/vulkan/vulkan.h	/^} VkColorComponentFlagBits;$/;"	t	typeref:enum:VkColorComponentFlagBits
VkColorComponentFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkColorComponentFlags;$/;"	t
VkColorSpaceKHR	lib/vulkan/vulkan.h	/^typedef enum VkColorSpaceKHR {$/;"	g
VkColorSpaceKHR	lib/vulkan/vulkan.h	/^} VkColorSpaceKHR;$/;"	t	typeref:enum:VkColorSpaceKHR
VkCommandBufferAllocateInfo	lib/vulkan/vulkan.h	/^typedef struct VkCommandBufferAllocateInfo {$/;"	s
VkCommandBufferAllocateInfo	lib/vulkan/vulkan.h	/^} VkCommandBufferAllocateInfo;$/;"	t	typeref:struct:VkCommandBufferAllocateInfo
VkCommandBufferAllocateInfo::commandBufferCount	lib/vulkan/vulkan.h	/^    uint32_t                commandBufferCount;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
VkCommandBufferAllocateInfo::commandPool	lib/vulkan/vulkan.h	/^    VkCommandPool           commandPool;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
VkCommandBufferAllocateInfo::level	lib/vulkan/vulkan.h	/^    VkCommandBufferLevel    level;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
VkCommandBufferAllocateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
VkCommandBufferAllocateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
VkCommandBufferBeginInfo	lib/vulkan/vulkan.h	/^typedef struct VkCommandBufferBeginInfo {$/;"	s
VkCommandBufferBeginInfo	lib/vulkan/vulkan.h	/^} VkCommandBufferBeginInfo;$/;"	t	typeref:struct:VkCommandBufferBeginInfo
VkCommandBufferBeginInfo::flags	lib/vulkan/vulkan.h	/^    VkCommandBufferUsageFlags                flags;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
VkCommandBufferBeginInfo::pInheritanceInfo	lib/vulkan/vulkan.h	/^    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
VkCommandBufferBeginInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
VkCommandBufferBeginInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
VkCommandBufferInheritanceInfo	lib/vulkan/vulkan.h	/^typedef struct VkCommandBufferInheritanceInfo {$/;"	s
VkCommandBufferInheritanceInfo	lib/vulkan/vulkan.h	/^} VkCommandBufferInheritanceInfo;$/;"	t	typeref:struct:VkCommandBufferInheritanceInfo
VkCommandBufferInheritanceInfo::framebuffer	lib/vulkan/vulkan.h	/^    VkFramebuffer                    framebuffer;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::occlusionQueryEnable	lib/vulkan/vulkan.h	/^    VkBool32                         occlusionQueryEnable;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::pipelineStatistics	lib/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::queryFlags	lib/vulkan/vulkan.h	/^    VkQueryControlFlags              queryFlags;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                     renderPass;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferInheritanceInfo::subpass	lib/vulkan/vulkan.h	/^    uint32_t                         subpass;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
VkCommandBufferLevel	lib/vulkan/vulkan.h	/^typedef enum VkCommandBufferLevel {$/;"	g
VkCommandBufferLevel	lib/vulkan/vulkan.h	/^} VkCommandBufferLevel;$/;"	t	typeref:enum:VkCommandBufferLevel
VkCommandBufferResetFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkCommandBufferResetFlagBits {$/;"	g
VkCommandBufferResetFlagBits	lib/vulkan/vulkan.h	/^} VkCommandBufferResetFlagBits;$/;"	t	typeref:enum:VkCommandBufferResetFlagBits
VkCommandBufferResetFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkCommandBufferResetFlags;$/;"	t
VkCommandBufferUsageFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkCommandBufferUsageFlagBits {$/;"	g
VkCommandBufferUsageFlagBits	lib/vulkan/vulkan.h	/^} VkCommandBufferUsageFlagBits;$/;"	t	typeref:enum:VkCommandBufferUsageFlagBits
VkCommandBufferUsageFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkCommandBufferUsageFlags;$/;"	t
VkCommandPoolCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkCommandPoolCreateFlagBits {$/;"	g
VkCommandPoolCreateFlagBits	lib/vulkan/vulkan.h	/^} VkCommandPoolCreateFlagBits;$/;"	t	typeref:enum:VkCommandPoolCreateFlagBits
VkCommandPoolCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkCommandPoolCreateFlags;$/;"	t
VkCommandPoolCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkCommandPoolCreateInfo {$/;"	s
VkCommandPoolCreateInfo	lib/vulkan/vulkan.h	/^} VkCommandPoolCreateInfo;$/;"	t	typeref:struct:VkCommandPoolCreateInfo
VkCommandPoolCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkCommandPoolCreateFlags    flags;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
VkCommandPoolCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
VkCommandPoolCreateInfo::queueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
VkCommandPoolCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
VkCommandPoolResetFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkCommandPoolResetFlagBits {$/;"	g
VkCommandPoolResetFlagBits	lib/vulkan/vulkan.h	/^} VkCommandPoolResetFlagBits;$/;"	t	typeref:enum:VkCommandPoolResetFlagBits
VkCommandPoolResetFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkCommandPoolResetFlags;$/;"	t
VkCompareOp	lib/vulkan/vulkan.h	/^typedef enum VkCompareOp {$/;"	g
VkCompareOp	lib/vulkan/vulkan.h	/^} VkCompareOp;$/;"	t	typeref:enum:VkCompareOp
VkComponentMapping	lib/vulkan/vulkan.h	/^typedef struct VkComponentMapping {$/;"	s
VkComponentMapping	lib/vulkan/vulkan.h	/^} VkComponentMapping;$/;"	t	typeref:struct:VkComponentMapping
VkComponentMapping::a	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    a;$/;"	m	struct:VkComponentMapping	access:public
VkComponentMapping::b	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    b;$/;"	m	struct:VkComponentMapping	access:public
VkComponentMapping::g	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    g;$/;"	m	struct:VkComponentMapping	access:public
VkComponentMapping::r	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    r;$/;"	m	struct:VkComponentMapping	access:public
VkComponentSwizzle	lib/vulkan/vulkan.h	/^typedef enum VkComponentSwizzle {$/;"	g
VkComponentSwizzle	lib/vulkan/vulkan.h	/^} VkComponentSwizzle;$/;"	t	typeref:enum:VkComponentSwizzle
VkCompositeAlphaFlagBitsKHR	lib/vulkan/vulkan.h	/^typedef enum VkCompositeAlphaFlagBitsKHR {$/;"	g
VkCompositeAlphaFlagBitsKHR	lib/vulkan/vulkan.h	/^} VkCompositeAlphaFlagBitsKHR;$/;"	t	typeref:enum:VkCompositeAlphaFlagBitsKHR
VkCompositeAlphaFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkCompositeAlphaFlagsKHR;$/;"	t
VkComputePipelineCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkComputePipelineCreateInfo {$/;"	s
VkComputePipelineCreateInfo	lib/vulkan/vulkan.h	/^} VkComputePipelineCreateInfo;$/;"	t	typeref:struct:VkComputePipelineCreateInfo
VkComputePipelineCreateInfo::basePipelineHandle	lib/vulkan/vulkan.h	/^    VkPipeline                         basePipelineHandle;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::basePipelineIndex	lib/vulkan/vulkan.h	/^    int32_t                            basePipelineIndex;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineCreateFlags              flags;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::layout	lib/vulkan/vulkan.h	/^    VkPipelineLayout                   layout;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkComputePipelineCreateInfo::stage	lib/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateInfo    stage;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
VkCopyDescriptorSet	lib/vulkan/vulkan.h	/^typedef struct VkCopyDescriptorSet {$/;"	s
VkCopyDescriptorSet	lib/vulkan/vulkan.h	/^} VkCopyDescriptorSet;$/;"	t	typeref:struct:VkCopyDescriptorSet
VkCopyDescriptorSet::descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t           descriptorCount;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::dstArrayElement	lib/vulkan/vulkan.h	/^    uint32_t           dstArrayElement;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::dstBinding	lib/vulkan/vulkan.h	/^    uint32_t           dstBinding;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::dstSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet    dstSet;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::srcArrayElement	lib/vulkan/vulkan.h	/^    uint32_t           srcArrayElement;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::srcBinding	lib/vulkan/vulkan.h	/^    uint32_t           srcBinding;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCopyDescriptorSet::srcSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet    srcSet;$/;"	m	struct:VkCopyDescriptorSet	access:public
VkCullModeFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkCullModeFlagBits {$/;"	g
VkCullModeFlagBits	lib/vulkan/vulkan.h	/^} VkCullModeFlagBits;$/;"	t	typeref:enum:VkCullModeFlagBits
VkCullModeFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkCullModeFlags;$/;"	t
VkDebugMarkerMarkerInfoEXT	lib/vulkan/vulkan.h	/^typedef struct VkDebugMarkerMarkerInfoEXT {$/;"	s
VkDebugMarkerMarkerInfoEXT	lib/vulkan/vulkan.h	/^} VkDebugMarkerMarkerInfoEXT;$/;"	t	typeref:struct:VkDebugMarkerMarkerInfoEXT
VkDebugMarkerMarkerInfoEXT::color	lib/vulkan/vulkan.h	/^    float              color[4];$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
VkDebugMarkerMarkerInfoEXT::pMarkerName	lib/vulkan/vulkan.h	/^    const char*        pMarkerName;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
VkDebugMarkerMarkerInfoEXT::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
VkDebugMarkerMarkerInfoEXT::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
VkDebugMarkerObjectNameInfoEXT	lib/vulkan/vulkan.h	/^typedef struct VkDebugMarkerObjectNameInfoEXT {$/;"	s
VkDebugMarkerObjectNameInfoEXT	lib/vulkan/vulkan.h	/^} VkDebugMarkerObjectNameInfoEXT;$/;"	t	typeref:struct:VkDebugMarkerObjectNameInfoEXT
VkDebugMarkerObjectNameInfoEXT::object	lib/vulkan/vulkan.h	/^    uint64_t                      object;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
VkDebugMarkerObjectNameInfoEXT::objectType	lib/vulkan/vulkan.h	/^    VkDebugReportObjectTypeEXT    objectType;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
VkDebugMarkerObjectNameInfoEXT::pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
VkDebugMarkerObjectNameInfoEXT::pObjectName	lib/vulkan/vulkan.h	/^    const char*                   pObjectName;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
VkDebugMarkerObjectNameInfoEXT::sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT	lib/vulkan/vulkan.h	/^typedef struct VkDebugMarkerObjectTagInfoEXT {$/;"	s
VkDebugMarkerObjectTagInfoEXT	lib/vulkan/vulkan.h	/^} VkDebugMarkerObjectTagInfoEXT;$/;"	t	typeref:struct:VkDebugMarkerObjectTagInfoEXT
VkDebugMarkerObjectTagInfoEXT::object	lib/vulkan/vulkan.h	/^    uint64_t                      object;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::objectType	lib/vulkan/vulkan.h	/^    VkDebugReportObjectTypeEXT    objectType;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::pTag	lib/vulkan/vulkan.h	/^    const void*                   pTag;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::tagName	lib/vulkan/vulkan.h	/^    uint64_t                      tagName;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugMarkerObjectTagInfoEXT::tagSize	lib/vulkan/vulkan.h	/^    size_t                        tagSize;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
VkDebugReportCallbackCreateInfoEXT	lib/vulkan/vulkan.h	/^typedef struct VkDebugReportCallbackCreateInfoEXT {$/;"	s
VkDebugReportCallbackCreateInfoEXT	lib/vulkan/vulkan.h	/^} VkDebugReportCallbackCreateInfoEXT;$/;"	t	typeref:struct:VkDebugReportCallbackCreateInfoEXT
VkDebugReportCallbackCreateInfoEXT::flags	lib/vulkan/vulkan.h	/^    VkDebugReportFlagsEXT           flags;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
VkDebugReportCallbackCreateInfoEXT::pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
VkDebugReportCallbackCreateInfoEXT::pUserData	lib/vulkan/vulkan.h	/^    void*                           pUserData;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
VkDebugReportCallbackCreateInfoEXT::pfnCallback	lib/vulkan/vulkan.h	/^    PFN_vkDebugReportCallbackEXT    pfnCallback;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
VkDebugReportCallbackCreateInfoEXT::sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
VkDebugReportErrorEXT	lib/vulkan/vulkan.h	/^typedef enum VkDebugReportErrorEXT {$/;"	g
VkDebugReportErrorEXT	lib/vulkan/vulkan.h	/^} VkDebugReportErrorEXT;$/;"	t	typeref:enum:VkDebugReportErrorEXT
VkDebugReportFlagBitsEXT	lib/vulkan/vulkan.h	/^typedef enum VkDebugReportFlagBitsEXT {$/;"	g
VkDebugReportFlagBitsEXT	lib/vulkan/vulkan.h	/^} VkDebugReportFlagBitsEXT;$/;"	t	typeref:enum:VkDebugReportFlagBitsEXT
VkDebugReportFlagsEXT	lib/vulkan/vulkan.h	/^typedef VkFlags VkDebugReportFlagsEXT;$/;"	t
VkDebugReportObjectTypeEXT	lib/vulkan/vulkan.h	/^typedef enum VkDebugReportObjectTypeEXT {$/;"	g
VkDebugReportObjectTypeEXT	lib/vulkan/vulkan.h	/^} VkDebugReportObjectTypeEXT;$/;"	t	typeref:enum:VkDebugReportObjectTypeEXT
VkDedicatedAllocationBufferCreateInfoNV	lib/vulkan/vulkan.h	/^typedef struct VkDedicatedAllocationBufferCreateInfoNV {$/;"	s
VkDedicatedAllocationBufferCreateInfoNV	lib/vulkan/vulkan.h	/^} VkDedicatedAllocationBufferCreateInfoNV;$/;"	t	typeref:struct:VkDedicatedAllocationBufferCreateInfoNV
VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation	lib/vulkan/vulkan.h	/^    VkBool32           dedicatedAllocation;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
VkDedicatedAllocationBufferCreateInfoNV::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
VkDedicatedAllocationBufferCreateInfoNV::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
VkDedicatedAllocationImageCreateInfoNV	lib/vulkan/vulkan.h	/^typedef struct VkDedicatedAllocationImageCreateInfoNV {$/;"	s
VkDedicatedAllocationImageCreateInfoNV	lib/vulkan/vulkan.h	/^} VkDedicatedAllocationImageCreateInfoNV;$/;"	t	typeref:struct:VkDedicatedAllocationImageCreateInfoNV
VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation	lib/vulkan/vulkan.h	/^    VkBool32           dedicatedAllocation;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
VkDedicatedAllocationImageCreateInfoNV::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
VkDedicatedAllocationImageCreateInfoNV::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
VkDedicatedAllocationMemoryAllocateInfoNV	lib/vulkan/vulkan.h	/^typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {$/;"	s
VkDedicatedAllocationMemoryAllocateInfoNV	lib/vulkan/vulkan.h	/^} VkDedicatedAllocationMemoryAllocateInfoNV;$/;"	t	typeref:struct:VkDedicatedAllocationMemoryAllocateInfoNV
VkDedicatedAllocationMemoryAllocateInfoNV::buffer	lib/vulkan/vulkan.h	/^    VkBuffer           buffer;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
VkDedicatedAllocationMemoryAllocateInfoNV::image	lib/vulkan/vulkan.h	/^    VkImage            image;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
VkDedicatedAllocationMemoryAllocateInfoNV::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
VkDedicatedAllocationMemoryAllocateInfoNV::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
VkDependencyFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkDependencyFlagBits {$/;"	g
VkDependencyFlagBits	lib/vulkan/vulkan.h	/^} VkDependencyFlagBits;$/;"	t	typeref:enum:VkDependencyFlagBits
VkDependencyFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDependencyFlags;$/;"	t
VkDescriptorBufferInfo	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorBufferInfo {$/;"	s
VkDescriptorBufferInfo	lib/vulkan/vulkan.h	/^} VkDescriptorBufferInfo;$/;"	t	typeref:struct:VkDescriptorBufferInfo
VkDescriptorBufferInfo::buffer	lib/vulkan/vulkan.h	/^    VkBuffer        buffer;$/;"	m	struct:VkDescriptorBufferInfo	access:public
VkDescriptorBufferInfo::offset	lib/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkDescriptorBufferInfo	access:public
VkDescriptorBufferInfo::range	lib/vulkan/vulkan.h	/^    VkDeviceSize    range;$/;"	m	struct:VkDescriptorBufferInfo	access:public
VkDescriptorImageInfo	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorImageInfo {$/;"	s
VkDescriptorImageInfo	lib/vulkan/vulkan.h	/^} VkDescriptorImageInfo;$/;"	t	typeref:struct:VkDescriptorImageInfo
VkDescriptorImageInfo::imageLayout	lib/vulkan/vulkan.h	/^    VkImageLayout    imageLayout;$/;"	m	struct:VkDescriptorImageInfo	access:public
VkDescriptorImageInfo::imageView	lib/vulkan/vulkan.h	/^    VkImageView      imageView;$/;"	m	struct:VkDescriptorImageInfo	access:public
VkDescriptorImageInfo::sampler	lib/vulkan/vulkan.h	/^    VkSampler        sampler;$/;"	m	struct:VkDescriptorImageInfo	access:public
VkDescriptorPoolCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkDescriptorPoolCreateFlagBits {$/;"	g
VkDescriptorPoolCreateFlagBits	lib/vulkan/vulkan.h	/^} VkDescriptorPoolCreateFlagBits;$/;"	t	typeref:enum:VkDescriptorPoolCreateFlagBits
VkDescriptorPoolCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorPoolCreateFlags;$/;"	t
VkDescriptorPoolCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorPoolCreateInfo {$/;"	s
VkDescriptorPoolCreateInfo	lib/vulkan/vulkan.h	/^} VkDescriptorPoolCreateInfo;$/;"	t	typeref:struct:VkDescriptorPoolCreateInfo
VkDescriptorPoolCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkDescriptorPoolCreateFlags    flags;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolCreateInfo::maxSets	lib/vulkan/vulkan.h	/^    uint32_t                       maxSets;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolCreateInfo::pPoolSizes	lib/vulkan/vulkan.h	/^    const VkDescriptorPoolSize*    pPoolSizes;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolCreateInfo::poolSizeCount	lib/vulkan/vulkan.h	/^    uint32_t                       poolSizeCount;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
VkDescriptorPoolResetFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorPoolResetFlags;$/;"	t
VkDescriptorPoolSize	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorPoolSize {$/;"	s
VkDescriptorPoolSize	lib/vulkan/vulkan.h	/^} VkDescriptorPoolSize;$/;"	t	typeref:struct:VkDescriptorPoolSize
VkDescriptorPoolSize::descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t            descriptorCount;$/;"	m	struct:VkDescriptorPoolSize	access:public
VkDescriptorPoolSize::type	lib/vulkan/vulkan.h	/^    VkDescriptorType    type;$/;"	m	struct:VkDescriptorPoolSize	access:public
VkDescriptorSetAllocateInfo	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorSetAllocateInfo {$/;"	s
VkDescriptorSetAllocateInfo	lib/vulkan/vulkan.h	/^} VkDescriptorSetAllocateInfo;$/;"	t	typeref:struct:VkDescriptorSetAllocateInfo
VkDescriptorSetAllocateInfo::descriptorPool	lib/vulkan/vulkan.h	/^    VkDescriptorPool                descriptorPool;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
VkDescriptorSetAllocateInfo::descriptorSetCount	lib/vulkan/vulkan.h	/^    uint32_t                        descriptorSetCount;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
VkDescriptorSetAllocateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
VkDescriptorSetAllocateInfo::pSetLayouts	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
VkDescriptorSetAllocateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
VkDescriptorSetLayoutBinding	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorSetLayoutBinding {$/;"	s
VkDescriptorSetLayoutBinding	lib/vulkan/vulkan.h	/^} VkDescriptorSetLayoutBinding;$/;"	t	typeref:struct:VkDescriptorSetLayoutBinding
VkDescriptorSetLayoutBinding::binding	lib/vulkan/vulkan.h	/^    uint32_t              binding;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
VkDescriptorSetLayoutBinding::descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t              descriptorCount;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
VkDescriptorSetLayoutBinding::descriptorType	lib/vulkan/vulkan.h	/^    VkDescriptorType      descriptorType;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
VkDescriptorSetLayoutBinding::pImmutableSamplers	lib/vulkan/vulkan.h	/^    const VkSampler*      pImmutableSamplers;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
VkDescriptorSetLayoutBinding::stageFlags	lib/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
VkDescriptorSetLayoutCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDescriptorSetLayoutCreateFlags;$/;"	t
VkDescriptorSetLayoutCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkDescriptorSetLayoutCreateInfo {$/;"	s
VkDescriptorSetLayoutCreateInfo	lib/vulkan/vulkan.h	/^} VkDescriptorSetLayoutCreateInfo;$/;"	t	typeref:struct:VkDescriptorSetLayoutCreateInfo
VkDescriptorSetLayoutCreateInfo::bindingCount	lib/vulkan/vulkan.h	/^    uint32_t                               bindingCount;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
VkDescriptorSetLayoutCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkDescriptorSetLayoutCreateFlags       flags;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
VkDescriptorSetLayoutCreateInfo::pBindings	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayoutBinding*    pBindings;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
VkDescriptorSetLayoutCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                            pNext;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
VkDescriptorSetLayoutCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                        sType;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
VkDescriptorType	lib/vulkan/vulkan.h	/^typedef enum VkDescriptorType {$/;"	g
VkDescriptorType	lib/vulkan/vulkan.h	/^} VkDescriptorType;$/;"	t	typeref:enum:VkDescriptorType
VkDeviceCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDeviceCreateFlags;$/;"	t
VkDeviceCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkDeviceCreateInfo {$/;"	s
VkDeviceCreateInfo	lib/vulkan/vulkan.h	/^} VkDeviceCreateInfo;$/;"	t	typeref:struct:VkDeviceCreateInfo
VkDeviceCreateInfo::enabledExtensionCount	lib/vulkan/vulkan.h	/^    uint32_t                           enabledExtensionCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::enabledLayerCount	lib/vulkan/vulkan.h	/^    uint32_t                           enabledLayerCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkDeviceCreateFlags                flags;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::pEnabledFeatures	lib/vulkan/vulkan.h	/^    const VkPhysicalDeviceFeatures*    pEnabledFeatures;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::pQueueCreateInfos	lib/vulkan/vulkan.h	/^    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::ppEnabledExtensionNames	lib/vulkan/vulkan.h	/^    const char* const*                 ppEnabledExtensionNames;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::ppEnabledLayerNames	lib/vulkan/vulkan.h	/^    const char* const*                 ppEnabledLayerNames;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::queueCreateInfoCount	lib/vulkan/vulkan.h	/^    uint32_t                           queueCreateInfoCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkDeviceCreateInfo	access:public
VkDeviceQueueCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkDeviceQueueCreateFlags;$/;"	t
VkDeviceQueueCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkDeviceQueueCreateInfo {$/;"	s
VkDeviceQueueCreateInfo	lib/vulkan/vulkan.h	/^} VkDeviceQueueCreateInfo;$/;"	t	typeref:struct:VkDeviceQueueCreateInfo
VkDeviceQueueCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkDeviceQueueCreateFlags    flags;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceQueueCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceQueueCreateInfo::pQueuePriorities	lib/vulkan/vulkan.h	/^    const float*                pQueuePriorities;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceQueueCreateInfo::queueCount	lib/vulkan/vulkan.h	/^    uint32_t                    queueCount;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceQueueCreateInfo::queueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceQueueCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
VkDeviceSize	lib/vulkan/vulkan.h	/^typedef uint64_t VkDeviceSize;$/;"	t
VkDispatchIndirectCommand	lib/vulkan/vulkan.h	/^typedef struct VkDispatchIndirectCommand {$/;"	s
VkDispatchIndirectCommand	lib/vulkan/vulkan.h	/^} VkDispatchIndirectCommand;$/;"	t	typeref:struct:VkDispatchIndirectCommand
VkDispatchIndirectCommand::x	lib/vulkan/vulkan.h	/^    uint32_t    x;$/;"	m	struct:VkDispatchIndirectCommand	access:public
VkDispatchIndirectCommand::y	lib/vulkan/vulkan.h	/^    uint32_t    y;$/;"	m	struct:VkDispatchIndirectCommand	access:public
VkDispatchIndirectCommand::z	lib/vulkan/vulkan.h	/^    uint32_t    z;$/;"	m	struct:VkDispatchIndirectCommand	access:public
VkDisplayModeCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkDisplayModeCreateFlagsKHR;$/;"	t
VkDisplayModeCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayModeCreateInfoKHR {$/;"	s
VkDisplayModeCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkDisplayModeCreateInfoKHR;$/;"	t	typeref:struct:VkDisplayModeCreateInfoKHR
VkDisplayModeCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkDisplayModeCreateFlagsKHR    flags;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
VkDisplayModeCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
VkDisplayModeCreateInfoKHR::parameters	lib/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR     parameters;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
VkDisplayModeCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
VkDisplayModeParametersKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayModeParametersKHR {$/;"	s
VkDisplayModeParametersKHR	lib/vulkan/vulkan.h	/^} VkDisplayModeParametersKHR;$/;"	t	typeref:struct:VkDisplayModeParametersKHR
VkDisplayModeParametersKHR::refreshRate	lib/vulkan/vulkan.h	/^    uint32_t      refreshRate;$/;"	m	struct:VkDisplayModeParametersKHR	access:public
VkDisplayModeParametersKHR::visibleRegion	lib/vulkan/vulkan.h	/^    VkExtent2D    visibleRegion;$/;"	m	struct:VkDisplayModeParametersKHR	access:public
VkDisplayModePropertiesKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayModePropertiesKHR {$/;"	s
VkDisplayModePropertiesKHR	lib/vulkan/vulkan.h	/^} VkDisplayModePropertiesKHR;$/;"	t	typeref:struct:VkDisplayModePropertiesKHR
VkDisplayModePropertiesKHR::displayMode	lib/vulkan/vulkan.h	/^    VkDisplayModeKHR              displayMode;$/;"	m	struct:VkDisplayModePropertiesKHR	access:public
VkDisplayModePropertiesKHR::parameters	lib/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR    parameters;$/;"	m	struct:VkDisplayModePropertiesKHR	access:public
VkDisplayPlaneAlphaFlagBitsKHR	lib/vulkan/vulkan.h	/^typedef enum VkDisplayPlaneAlphaFlagBitsKHR {$/;"	g
VkDisplayPlaneAlphaFlagBitsKHR	lib/vulkan/vulkan.h	/^} VkDisplayPlaneAlphaFlagBitsKHR;$/;"	t	typeref:enum:VkDisplayPlaneAlphaFlagBitsKHR
VkDisplayPlaneAlphaFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkDisplayPlaneAlphaFlagsKHR;$/;"	t
VkDisplayPlaneCapabilitiesKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayPlaneCapabilitiesKHR {$/;"	s
VkDisplayPlaneCapabilitiesKHR	lib/vulkan/vulkan.h	/^} VkDisplayPlaneCapabilitiesKHR;$/;"	t	typeref:struct:VkDisplayPlaneCapabilitiesKHR
VkDisplayPlaneCapabilitiesKHR::maxDstExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     maxDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::maxDstPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     maxDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::maxSrcExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     maxSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::maxSrcPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     maxSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::minDstExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     minDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::minDstPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     minDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::minSrcExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     minSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::minSrcPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     minSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlaneCapabilitiesKHR::supportedAlpha	lib/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagsKHR    supportedAlpha;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
VkDisplayPlanePropertiesKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayPlanePropertiesKHR {$/;"	s
VkDisplayPlanePropertiesKHR	lib/vulkan/vulkan.h	/^} VkDisplayPlanePropertiesKHR;$/;"	t	typeref:struct:VkDisplayPlanePropertiesKHR
VkDisplayPlanePropertiesKHR::currentDisplay	lib/vulkan/vulkan.h	/^    VkDisplayKHR    currentDisplay;$/;"	m	struct:VkDisplayPlanePropertiesKHR	access:public
VkDisplayPlanePropertiesKHR::currentStackIndex	lib/vulkan/vulkan.h	/^    uint32_t        currentStackIndex;$/;"	m	struct:VkDisplayPlanePropertiesKHR	access:public
VkDisplayPresentInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayPresentInfoKHR {$/;"	s
VkDisplayPresentInfoKHR	lib/vulkan/vulkan.h	/^} VkDisplayPresentInfoKHR;$/;"	t	typeref:struct:VkDisplayPresentInfoKHR
VkDisplayPresentInfoKHR::dstRect	lib/vulkan/vulkan.h	/^    VkRect2D           dstRect;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
VkDisplayPresentInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
VkDisplayPresentInfoKHR::persistent	lib/vulkan/vulkan.h	/^    VkBool32           persistent;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
VkDisplayPresentInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
VkDisplayPresentInfoKHR::srcRect	lib/vulkan/vulkan.h	/^    VkRect2D           srcRect;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
VkDisplayPropertiesKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplayPropertiesKHR {$/;"	s
VkDisplayPropertiesKHR	lib/vulkan/vulkan.h	/^} VkDisplayPropertiesKHR;$/;"	t	typeref:struct:VkDisplayPropertiesKHR
VkDisplayPropertiesKHR::display	lib/vulkan/vulkan.h	/^    VkDisplayKHR                  display;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::displayName	lib/vulkan/vulkan.h	/^    const char*                   displayName;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::persistentContent	lib/vulkan/vulkan.h	/^    VkBool32                      persistentContent;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::physicalDimensions	lib/vulkan/vulkan.h	/^    VkExtent2D                    physicalDimensions;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::physicalResolution	lib/vulkan/vulkan.h	/^    VkExtent2D                    physicalResolution;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::planeReorderPossible	lib/vulkan/vulkan.h	/^    VkBool32                      planeReorderPossible;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplayPropertiesKHR::supportedTransforms	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR    supportedTransforms;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
VkDisplaySurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkDisplaySurfaceCreateFlagsKHR;$/;"	t
VkDisplaySurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkDisplaySurfaceCreateInfoKHR {$/;"	s
VkDisplaySurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkDisplaySurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkDisplaySurfaceCreateInfoKHR
VkDisplaySurfaceCreateInfoKHR::alphaMode	lib/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagBitsKHR    alphaMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::displayMode	lib/vulkan/vulkan.h	/^    VkDisplayModeKHR                  displayMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkDisplaySurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::globalAlpha	lib/vulkan/vulkan.h	/^    float                             globalAlpha;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::imageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                        imageExtent;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::planeIndex	lib/vulkan/vulkan.h	/^    uint32_t                          planeIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::planeStackIndex	lib/vulkan/vulkan.h	/^    uint32_t                          planeStackIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDisplaySurfaceCreateInfoKHR::transform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR     transform;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
VkDrawIndexedIndirectCommand	lib/vulkan/vulkan.h	/^typedef struct VkDrawIndexedIndirectCommand {$/;"	s
VkDrawIndexedIndirectCommand	lib/vulkan/vulkan.h	/^} VkDrawIndexedIndirectCommand;$/;"	t	typeref:struct:VkDrawIndexedIndirectCommand
VkDrawIndexedIndirectCommand::firstIndex	lib/vulkan/vulkan.h	/^    uint32_t    firstIndex;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
VkDrawIndexedIndirectCommand::firstInstance	lib/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
VkDrawIndexedIndirectCommand::indexCount	lib/vulkan/vulkan.h	/^    uint32_t    indexCount;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
VkDrawIndexedIndirectCommand::instanceCount	lib/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
VkDrawIndexedIndirectCommand::vertexOffset	lib/vulkan/vulkan.h	/^    int32_t     vertexOffset;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
VkDrawIndirectCommand	lib/vulkan/vulkan.h	/^typedef struct VkDrawIndirectCommand {$/;"	s
VkDrawIndirectCommand	lib/vulkan/vulkan.h	/^} VkDrawIndirectCommand;$/;"	t	typeref:struct:VkDrawIndirectCommand
VkDrawIndirectCommand::firstInstance	lib/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndirectCommand	access:public
VkDrawIndirectCommand::firstVertex	lib/vulkan/vulkan.h	/^    uint32_t    firstVertex;$/;"	m	struct:VkDrawIndirectCommand	access:public
VkDrawIndirectCommand::instanceCount	lib/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndirectCommand	access:public
VkDrawIndirectCommand::vertexCount	lib/vulkan/vulkan.h	/^    uint32_t    vertexCount;$/;"	m	struct:VkDrawIndirectCommand	access:public
VkDynamicState	lib/vulkan/vulkan.h	/^typedef enum VkDynamicState {$/;"	g
VkDynamicState	lib/vulkan/vulkan.h	/^} VkDynamicState;$/;"	t	typeref:enum:VkDynamicState
VkEventCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkEventCreateFlags;$/;"	t
VkEventCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkEventCreateInfo {$/;"	s
VkEventCreateInfo	lib/vulkan/vulkan.h	/^} VkEventCreateInfo;$/;"	t	typeref:struct:VkEventCreateInfo
VkEventCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkEventCreateFlags    flags;$/;"	m	struct:VkEventCreateInfo	access:public
VkEventCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkEventCreateInfo	access:public
VkEventCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkEventCreateInfo	access:public
VkExtensionProperties	lib/vulkan/vulkan.h	/^typedef struct VkExtensionProperties {$/;"	s
VkExtensionProperties	lib/vulkan/vulkan.h	/^} VkExtensionProperties;$/;"	t	typeref:struct:VkExtensionProperties
VkExtensionProperties::extensionName	lib/vulkan/vulkan.h	/^    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkExtensionProperties	access:public
VkExtensionProperties::specVersion	lib/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkExtensionProperties	access:public
VkExtent2D	lib/vulkan/vulkan.h	/^typedef struct VkExtent2D {$/;"	s
VkExtent2D	lib/vulkan/vulkan.h	/^} VkExtent2D;$/;"	t	typeref:struct:VkExtent2D
VkExtent2D::height	lib/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent2D	access:public
VkExtent2D::width	lib/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent2D	access:public
VkExtent3D	lib/vulkan/vulkan.h	/^typedef struct VkExtent3D {$/;"	s
VkExtent3D	lib/vulkan/vulkan.h	/^} VkExtent3D;$/;"	t	typeref:struct:VkExtent3D
VkExtent3D::depth	lib/vulkan/vulkan.h	/^    uint32_t    depth;$/;"	m	struct:VkExtent3D	access:public
VkExtent3D::height	lib/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent3D	access:public
VkExtent3D::width	lib/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent3D	access:public
VkFenceCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkFenceCreateFlagBits {$/;"	g
VkFenceCreateFlagBits	lib/vulkan/vulkan.h	/^} VkFenceCreateFlagBits;$/;"	t	typeref:enum:VkFenceCreateFlagBits
VkFenceCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkFenceCreateFlags;$/;"	t
VkFenceCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkFenceCreateInfo {$/;"	s
VkFenceCreateInfo	lib/vulkan/vulkan.h	/^} VkFenceCreateInfo;$/;"	t	typeref:struct:VkFenceCreateInfo
VkFenceCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkFenceCreateFlags    flags;$/;"	m	struct:VkFenceCreateInfo	access:public
VkFenceCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkFenceCreateInfo	access:public
VkFenceCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkFenceCreateInfo	access:public
VkFilter	lib/vulkan/vulkan.h	/^typedef enum VkFilter {$/;"	g
VkFilter	lib/vulkan/vulkan.h	/^} VkFilter;$/;"	t	typeref:enum:VkFilter
VkFlags	lib/vulkan/vulkan.h	/^typedef uint32_t VkFlags;$/;"	t
VkFormat	lib/vulkan/vulkan.h	/^typedef enum VkFormat {$/;"	g
VkFormat	lib/vulkan/vulkan.h	/^} VkFormat;$/;"	t	typeref:enum:VkFormat
VkFormatFeatureFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkFormatFeatureFlagBits {$/;"	g
VkFormatFeatureFlagBits	lib/vulkan/vulkan.h	/^} VkFormatFeatureFlagBits;$/;"	t	typeref:enum:VkFormatFeatureFlagBits
VkFormatFeatureFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkFormatFeatureFlags;$/;"	t
VkFormatProperties	lib/vulkan/vulkan.h	/^typedef struct VkFormatProperties {$/;"	s
VkFormatProperties	lib/vulkan/vulkan.h	/^} VkFormatProperties;$/;"	t	typeref:struct:VkFormatProperties
VkFormatProperties::bufferFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    bufferFeatures;$/;"	m	struct:VkFormatProperties	access:public
VkFormatProperties::linearTilingFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    linearTilingFeatures;$/;"	m	struct:VkFormatProperties	access:public
VkFormatProperties::optimalTilingFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    optimalTilingFeatures;$/;"	m	struct:VkFormatProperties	access:public
VkFramebufferCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkFramebufferCreateFlags;$/;"	t
VkFramebufferCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkFramebufferCreateInfo {$/;"	s
VkFramebufferCreateInfo	lib/vulkan/vulkan.h	/^} VkFramebufferCreateInfo;$/;"	t	typeref:struct:VkFramebufferCreateInfo
VkFramebufferCreateInfo::attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                    attachmentCount;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkFramebufferCreateFlags    flags;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::height	lib/vulkan/vulkan.h	/^    uint32_t                    height;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::layers	lib/vulkan/vulkan.h	/^    uint32_t                    layers;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::pAttachments	lib/vulkan/vulkan.h	/^    const VkImageView*          pAttachments;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                renderPass;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFramebufferCreateInfo::width	lib/vulkan/vulkan.h	/^    uint32_t                    width;$/;"	m	struct:VkFramebufferCreateInfo	access:public
VkFrontFace	lib/vulkan/vulkan.h	/^typedef enum VkFrontFace {$/;"	g
VkFrontFace	lib/vulkan/vulkan.h	/^} VkFrontFace;$/;"	t	typeref:enum:VkFrontFace
VkGraphicsPipelineCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkGraphicsPipelineCreateInfo {$/;"	s
VkGraphicsPipelineCreateInfo	lib/vulkan/vulkan.h	/^} VkGraphicsPipelineCreateInfo;$/;"	t	typeref:struct:VkGraphicsPipelineCreateInfo
VkGraphicsPipelineCreateInfo::basePipelineHandle	lib/vulkan/vulkan.h	/^    VkPipeline                                       basePipelineHandle;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::basePipelineIndex	lib/vulkan/vulkan.h	/^    int32_t                                          basePipelineIndex;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineCreateFlags                            flags;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::layout	lib/vulkan/vulkan.h	/^    VkPipelineLayout                                 layout;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pColorBlendState	lib/vulkan/vulkan.h	/^    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pDepthStencilState	lib/vulkan/vulkan.h	/^    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pDynamicState	lib/vulkan/vulkan.h	/^    const VkPipelineDynamicStateCreateInfo*          pDynamicState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pInputAssemblyState	lib/vulkan/vulkan.h	/^    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pMultisampleState	lib/vulkan/vulkan.h	/^    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                      pNext;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pRasterizationState	lib/vulkan/vulkan.h	/^    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pStages	lib/vulkan/vulkan.h	/^    const VkPipelineShaderStageCreateInfo*           pStages;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pTessellationState	lib/vulkan/vulkan.h	/^    const VkPipelineTessellationStateCreateInfo*     pTessellationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pVertexInputState	lib/vulkan/vulkan.h	/^    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::pViewportState	lib/vulkan/vulkan.h	/^    const VkPipelineViewportStateCreateInfo*         pViewportState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                                     renderPass;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                                  sType;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::stageCount	lib/vulkan/vulkan.h	/^    uint32_t                                         stageCount;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkGraphicsPipelineCreateInfo::subpass	lib/vulkan/vulkan.h	/^    uint32_t                                         subpass;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
VkIcdSurfaceBase	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceBase;$/;"	t	typeref:struct:__anon77
VkIcdSurfaceDisplay	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceDisplay;$/;"	t	typeref:struct:__anon83
VkIcdSurfaceMir	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceMir;$/;"	t	typeref:struct:__anon78
VkIcdSurfaceWayland	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceWayland;$/;"	t	typeref:struct:__anon79
VkIcdSurfaceWin32	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceWin32;$/;"	t	typeref:struct:__anon80
VkIcdSurfaceXcb	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceXcb;$/;"	t	typeref:struct:__anon81
VkIcdSurfaceXlib	lib/vulkan/vk_icd.h	/^} VkIcdSurfaceXlib;$/;"	t	typeref:struct:__anon82
VkIcdWsiPlatform	lib/vulkan/vk_icd.h	/^} VkIcdWsiPlatform;$/;"	t	typeref:enum:__anon76
VkImageAspectFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkImageAspectFlagBits {$/;"	g
VkImageAspectFlagBits	lib/vulkan/vulkan.h	/^} VkImageAspectFlagBits;$/;"	t	typeref:enum:VkImageAspectFlagBits
VkImageAspectFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkImageAspectFlags;$/;"	t
VkImageBlit	lib/vulkan/vulkan.h	/^typedef struct VkImageBlit {$/;"	s
VkImageBlit	lib/vulkan/vulkan.h	/^} VkImageBlit;$/;"	t	typeref:struct:VkImageBlit
VkImageBlit::dstOffsets	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffsets[2];$/;"	m	struct:VkImageBlit	access:public
VkImageBlit::dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageBlit	access:public
VkImageBlit::srcOffsets	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffsets[2];$/;"	m	struct:VkImageBlit	access:public
VkImageBlit::srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageBlit	access:public
VkImageCopy	lib/vulkan/vulkan.h	/^typedef struct VkImageCopy {$/;"	s
VkImageCopy	lib/vulkan/vulkan.h	/^} VkImageCopy;$/;"	t	typeref:struct:VkImageCopy
VkImageCopy::dstOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageCopy	access:public
VkImageCopy::dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageCopy	access:public
VkImageCopy::extent	lib/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageCopy	access:public
VkImageCopy::srcOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageCopy	access:public
VkImageCopy::srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageCopy	access:public
VkImageCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkImageCreateFlagBits {$/;"	g
VkImageCreateFlagBits	lib/vulkan/vulkan.h	/^} VkImageCreateFlagBits;$/;"	t	typeref:enum:VkImageCreateFlagBits
VkImageCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkImageCreateFlags;$/;"	t
VkImageCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkImageCreateInfo {$/;"	s
VkImageCreateInfo	lib/vulkan/vulkan.h	/^} VkImageCreateInfo;$/;"	t	typeref:struct:VkImageCreateInfo
VkImageCreateInfo::arrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                 arrayLayers;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::extent	lib/vulkan/vulkan.h	/^    VkExtent3D               extent;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkImageCreateFlags       flags;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::format	lib/vulkan/vulkan.h	/^    VkFormat                 format;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::imageType	lib/vulkan/vulkan.h	/^    VkImageType              imageType;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::initialLayout	lib/vulkan/vulkan.h	/^    VkImageLayout            initialLayout;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::mipLevels	lib/vulkan/vulkan.h	/^    uint32_t                 mipLevels;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*          pQueueFamilyIndices;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t                 queueFamilyIndexCount;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::samples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits    samples;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::sharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode            sharingMode;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::tiling	lib/vulkan/vulkan.h	/^    VkImageTiling            tiling;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageCreateInfo::usage	lib/vulkan/vulkan.h	/^    VkImageUsageFlags        usage;$/;"	m	struct:VkImageCreateInfo	access:public
VkImageFormatProperties	lib/vulkan/vulkan.h	/^typedef struct VkImageFormatProperties {$/;"	s
VkImageFormatProperties	lib/vulkan/vulkan.h	/^} VkImageFormatProperties;$/;"	t	typeref:struct:VkImageFormatProperties
VkImageFormatProperties::maxArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxArrayLayers;$/;"	m	struct:VkImageFormatProperties	access:public
VkImageFormatProperties::maxExtent	lib/vulkan/vulkan.h	/^    VkExtent3D            maxExtent;$/;"	m	struct:VkImageFormatProperties	access:public
VkImageFormatProperties::maxMipLevels	lib/vulkan/vulkan.h	/^    uint32_t              maxMipLevels;$/;"	m	struct:VkImageFormatProperties	access:public
VkImageFormatProperties::maxResourceSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          maxResourceSize;$/;"	m	struct:VkImageFormatProperties	access:public
VkImageFormatProperties::sampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampleCounts;$/;"	m	struct:VkImageFormatProperties	access:public
VkImageLayout	lib/vulkan/vulkan.h	/^typedef enum VkImageLayout {$/;"	g
VkImageLayout	lib/vulkan/vulkan.h	/^} VkImageLayout;$/;"	t	typeref:enum:VkImageLayout
VkImageMemoryBarrier	lib/vulkan/vulkan.h	/^typedef struct VkImageMemoryBarrier {$/;"	s
VkImageMemoryBarrier	lib/vulkan/vulkan.h	/^} VkImageMemoryBarrier;$/;"	t	typeref:struct:VkImageMemoryBarrier
VkImageMemoryBarrier::dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags              dstAccessMask;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::dstQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                   dstQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::image	lib/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::newLayout	lib/vulkan/vulkan.h	/^    VkImageLayout              newLayout;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::oldLayout	lib/vulkan/vulkan.h	/^    VkImageLayout              oldLayout;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags              srcAccessMask;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::srcQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                   srcQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageMemoryBarrier::subresourceRange	lib/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageMemoryBarrier	access:public
VkImageResolve	lib/vulkan/vulkan.h	/^typedef struct VkImageResolve {$/;"	s
VkImageResolve	lib/vulkan/vulkan.h	/^} VkImageResolve;$/;"	t	typeref:struct:VkImageResolve
VkImageResolve::dstOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageResolve	access:public
VkImageResolve::dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageResolve	access:public
VkImageResolve::extent	lib/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageResolve	access:public
VkImageResolve::srcOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageResolve	access:public
VkImageResolve::srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageResolve	access:public
VkImageSubresource	lib/vulkan/vulkan.h	/^typedef struct VkImageSubresource {$/;"	s
VkImageSubresource	lib/vulkan/vulkan.h	/^} VkImageSubresource;$/;"	t	typeref:struct:VkImageSubresource
VkImageSubresource::arrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              arrayLayer;$/;"	m	struct:VkImageSubresource	access:public
VkImageSubresource::aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresource	access:public
VkImageSubresource::mipLevel	lib/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresource	access:public
VkImageSubresourceLayers	lib/vulkan/vulkan.h	/^typedef struct VkImageSubresourceLayers {$/;"	s
VkImageSubresourceLayers	lib/vulkan/vulkan.h	/^} VkImageSubresourceLayers;$/;"	t	typeref:struct:VkImageSubresourceLayers
VkImageSubresourceLayers::aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceLayers	access:public
VkImageSubresourceLayers::baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceLayers	access:public
VkImageSubresourceLayers::layerCount	lib/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceLayers	access:public
VkImageSubresourceLayers::mipLevel	lib/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresourceLayers	access:public
VkImageSubresourceRange	lib/vulkan/vulkan.h	/^typedef struct VkImageSubresourceRange {$/;"	s
VkImageSubresourceRange	lib/vulkan/vulkan.h	/^} VkImageSubresourceRange;$/;"	t	typeref:struct:VkImageSubresourceRange
VkImageSubresourceRange::aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceRange	access:public
VkImageSubresourceRange::baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceRange	access:public
VkImageSubresourceRange::baseMipLevel	lib/vulkan/vulkan.h	/^    uint32_t              baseMipLevel;$/;"	m	struct:VkImageSubresourceRange	access:public
VkImageSubresourceRange::layerCount	lib/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceRange	access:public
VkImageSubresourceRange::levelCount	lib/vulkan/vulkan.h	/^    uint32_t              levelCount;$/;"	m	struct:VkImageSubresourceRange	access:public
VkImageTiling	lib/vulkan/vulkan.h	/^typedef enum VkImageTiling {$/;"	g
VkImageTiling	lib/vulkan/vulkan.h	/^} VkImageTiling;$/;"	t	typeref:enum:VkImageTiling
VkImageType	lib/vulkan/vulkan.h	/^typedef enum VkImageType {$/;"	g
VkImageType	lib/vulkan/vulkan.h	/^} VkImageType;$/;"	t	typeref:enum:VkImageType
VkImageUsageFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkImageUsageFlagBits {$/;"	g
VkImageUsageFlagBits	lib/vulkan/vulkan.h	/^} VkImageUsageFlagBits;$/;"	t	typeref:enum:VkImageUsageFlagBits
VkImageUsageFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkImageUsageFlags;$/;"	t
VkImageViewCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkImageViewCreateFlags;$/;"	t
VkImageViewCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkImageViewCreateInfo {$/;"	s
VkImageViewCreateInfo	lib/vulkan/vulkan.h	/^} VkImageViewCreateInfo;$/;"	t	typeref:struct:VkImageViewCreateInfo
VkImageViewCreateInfo::components	lib/vulkan/vulkan.h	/^    VkComponentMapping         components;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkImageViewCreateFlags     flags;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::format	lib/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::image	lib/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::subresourceRange	lib/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewCreateInfo::viewType	lib/vulkan/vulkan.h	/^    VkImageViewType            viewType;$/;"	m	struct:VkImageViewCreateInfo	access:public
VkImageViewType	lib/vulkan/vulkan.h	/^typedef enum VkImageViewType {$/;"	g
VkImageViewType	lib/vulkan/vulkan.h	/^} VkImageViewType;$/;"	t	typeref:enum:VkImageViewType
VkIndexType	lib/vulkan/vulkan.h	/^typedef enum VkIndexType {$/;"	g
VkIndexType	lib/vulkan/vulkan.h	/^} VkIndexType;$/;"	t	typeref:enum:VkIndexType
VkInstanceCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkInstanceCreateFlags;$/;"	t
VkInstanceCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkInstanceCreateInfo {$/;"	s
VkInstanceCreateInfo	lib/vulkan/vulkan.h	/^} VkInstanceCreateInfo;$/;"	t	typeref:struct:VkInstanceCreateInfo
VkInstanceCreateInfo::enabledExtensionCount	lib/vulkan/vulkan.h	/^    uint32_t                    enabledExtensionCount;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::enabledLayerCount	lib/vulkan/vulkan.h	/^    uint32_t                    enabledLayerCount;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkInstanceCreateFlags       flags;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::pApplicationInfo	lib/vulkan/vulkan.h	/^    const VkApplicationInfo*    pApplicationInfo;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::ppEnabledExtensionNames	lib/vulkan/vulkan.h	/^    const char* const*          ppEnabledExtensionNames;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::ppEnabledLayerNames	lib/vulkan/vulkan.h	/^    const char* const*          ppEnabledLayerNames;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInstanceCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkInstanceCreateInfo	access:public
VkInternalAllocationType	lib/vulkan/vulkan.h	/^typedef enum VkInternalAllocationType {$/;"	g
VkInternalAllocationType	lib/vulkan/vulkan.h	/^} VkInternalAllocationType;$/;"	t	typeref:enum:VkInternalAllocationType
VkLayerDeviceCreateInfo	lib/vulkan/vk_layer.h	/^} VkLayerDeviceCreateInfo;$/;"	t	typeref:struct:__anon87
VkLayerDeviceInfo	lib/vulkan/vk_layer.h	/^} VkLayerDeviceInfo;$/;"	t	typeref:struct:VkLayerDeviceInfo_
VkLayerDeviceInfo_	lib/vulkan/vk_layer.h	/^typedef struct VkLayerDeviceInfo_ {$/;"	s
VkLayerDeviceInfo_::device_info	lib/vulkan/vk_layer.h	/^    void *device_info;$/;"	m	struct:VkLayerDeviceInfo_	access:public
VkLayerDeviceInfo_::pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerDeviceInfo_	access:public
VkLayerDeviceLink	lib/vulkan/vk_layer.h	/^} VkLayerDeviceLink;$/;"	t	typeref:struct:VkLayerDeviceLink_
VkLayerDeviceLink_	lib/vulkan/vk_layer.h	/^typedef struct VkLayerDeviceLink_ {$/;"	s
VkLayerDeviceLink_::pNext	lib/vulkan/vk_layer.h	/^    struct VkLayerDeviceLink_ *pNext;$/;"	m	struct:VkLayerDeviceLink_	typeref:struct:VkLayerDeviceLink_::VkLayerDeviceLink_	access:public
VkLayerDeviceLink_::pfnNextGetDeviceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceProcAddr pfnNextGetDeviceProcAddr;$/;"	m	struct:VkLayerDeviceLink_	access:public
VkLayerDeviceLink_::pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerDeviceLink_	access:public
VkLayerDispatchTable	lib/vulkan/vk_layer.h	/^} VkLayerDispatchTable;$/;"	t	typeref:struct:VkLayerDispatchTable_
VkLayerDispatchTable_	lib/vulkan/vk_layer.h	/^typedef struct VkLayerDispatchTable_ {$/;"	s
VkLayerDispatchTable_::AcquireNextImageKHR	lib/vulkan/vk_layer.h	/^    PFN_vkAcquireNextImageKHR AcquireNextImageKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::AllocateCommandBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateCommandBuffers AllocateCommandBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::AllocateDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateDescriptorSets AllocateDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::AllocateMemory	lib/vulkan/vk_layer.h	/^    PFN_vkAllocateMemory AllocateMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::BeginCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkBeginCommandBuffer BeginCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::BindBufferMemory	lib/vulkan/vk_layer.h	/^    PFN_vkBindBufferMemory BindBufferMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::BindImageMemory	lib/vulkan/vk_layer.h	/^    PFN_vkBindImageMemory BindImageMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBeginQuery	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBeginQuery CmdBeginQuery;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBeginRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBeginRenderPass CmdBeginRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBindDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindDescriptorSets CmdBindDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBindIndexBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindIndexBuffer CmdBindIndexBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBindPipeline	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindPipeline CmdBindPipeline;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBindVertexBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBindVertexBuffers CmdBindVertexBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdBlitImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdBlitImage CmdBlitImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdClearAttachments	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearAttachments CmdClearAttachments;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdClearColorImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearColorImage CmdClearColorImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdClearDepthStencilImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdClearDepthStencilImage CmdClearDepthStencilImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdCopyBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyBuffer CmdCopyBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdCopyBufferToImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyBufferToImage CmdCopyBufferToImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdCopyImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyImage CmdCopyImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdCopyImageToBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyImageToBuffer CmdCopyImageToBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdCopyQueryPoolResults	lib/vulkan/vk_layer.h	/^    PFN_vkCmdCopyQueryPoolResults CmdCopyQueryPoolResults;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDispatch	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDispatch CmdDispatch;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDispatchIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDispatchIndirect CmdDispatchIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDraw	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDraw CmdDraw;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDrawIndexed	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndexed CmdDrawIndexed;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDrawIndexedIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndexedIndirect CmdDrawIndexedIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdDrawIndirect	lib/vulkan/vk_layer.h	/^    PFN_vkCmdDrawIndirect CmdDrawIndirect;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdEndQuery	lib/vulkan/vk_layer.h	/^    PFN_vkCmdEndQuery CmdEndQuery;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdEndRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdEndRenderPass CmdEndRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdExecuteCommands	lib/vulkan/vk_layer.h	/^    PFN_vkCmdExecuteCommands CmdExecuteCommands;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdFillBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdFillBuffer CmdFillBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdNextSubpass	lib/vulkan/vk_layer.h	/^    PFN_vkCmdNextSubpass CmdNextSubpass;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdPipelineBarrier	lib/vulkan/vk_layer.h	/^    PFN_vkCmdPipelineBarrier CmdPipelineBarrier;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdPushConstants	lib/vulkan/vk_layer.h	/^    PFN_vkCmdPushConstants CmdPushConstants;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdResetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResetEvent CmdResetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdResetQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResetQueryPool CmdResetQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdResolveImage	lib/vulkan/vk_layer.h	/^    PFN_vkCmdResolveImage CmdResolveImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetBlendConstants	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetBlendConstants CmdSetBlendConstants;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetDepthBias	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetDepthBias CmdSetDepthBias;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetDepthBounds	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetDepthBounds CmdSetDepthBounds;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetEvent CmdSetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetLineWidth	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetLineWidth CmdSetLineWidth;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetScissor	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetScissor CmdSetScissor;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetStencilCompareMask	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilCompareMask CmdSetStencilCompareMask;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetStencilReference	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilReference CmdSetStencilReference;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetStencilWriteMask	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetStencilWriteMask CmdSetStencilWriteMask;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdSetViewport	lib/vulkan/vk_layer.h	/^    PFN_vkCmdSetViewport CmdSetViewport;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdUpdateBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCmdUpdateBuffer CmdUpdateBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdWaitEvents	lib/vulkan/vk_layer.h	/^    PFN_vkCmdWaitEvents CmdWaitEvents;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CmdWriteTimestamp	lib/vulkan/vk_layer.h	/^    PFN_vkCmdWriteTimestamp CmdWriteTimestamp;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCreateBuffer CreateBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateBufferView	lib/vulkan/vk_layer.h	/^    PFN_vkCreateBufferView CreateBufferView;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateCommandPool CreateCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateComputePipelines	lib/vulkan/vk_layer.h	/^    PFN_vkCreateComputePipelines CreateComputePipelines;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDescriptorPool CreateDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateDescriptorSetLayout	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDescriptorSetLayout CreateDescriptorSetLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateEvent	lib/vulkan/vk_layer.h	/^    PFN_vkCreateEvent CreateEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateFence	lib/vulkan/vk_layer.h	/^    PFN_vkCreateFence CreateFence;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateFramebuffer	lib/vulkan/vk_layer.h	/^    PFN_vkCreateFramebuffer CreateFramebuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateGraphicsPipelines	lib/vulkan/vk_layer.h	/^    PFN_vkCreateGraphicsPipelines CreateGraphicsPipelines;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateImage	lib/vulkan/vk_layer.h	/^    PFN_vkCreateImage CreateImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateImageView	lib/vulkan/vk_layer.h	/^    PFN_vkCreateImageView CreateImageView;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreatePipelineCache	lib/vulkan/vk_layer.h	/^    PFN_vkCreatePipelineCache CreatePipelineCache;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreatePipelineLayout	lib/vulkan/vk_layer.h	/^    PFN_vkCreatePipelineLayout CreatePipelineLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkCreateQueryPool CreateQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkCreateRenderPass CreateRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateSampler	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSampler CreateSampler;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateSemaphore	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSemaphore CreateSemaphore;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateShaderModule	lib/vulkan/vk_layer.h	/^    PFN_vkCreateShaderModule CreateShaderModule;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::CreateSwapchainKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateSwapchainKHR CreateSwapchainKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyBuffer DestroyBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyBufferView	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyBufferView DestroyBufferView;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyCommandPool DestroyCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDescriptorPool DestroyDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyDescriptorSetLayout	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDescriptorSetLayout DestroyDescriptorSetLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyDevice	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDevice DestroyDevice;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyEvent	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyEvent DestroyEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyFence	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyFence DestroyFence;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyFramebuffer	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyFramebuffer DestroyFramebuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyImage	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyImage DestroyImage;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyImageView	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyImageView DestroyImageView;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyPipeline	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipeline DestroyPipeline;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyPipelineCache	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipelineCache DestroyPipelineCache;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyPipelineLayout	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyPipelineLayout DestroyPipelineLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyQueryPool	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyQueryPool DestroyQueryPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyRenderPass	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyRenderPass DestroyRenderPass;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroySampler	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySampler DestroySampler;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroySemaphore	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySemaphore DestroySemaphore;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroyShaderModule	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyShaderModule DestroyShaderModule;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DestroySwapchainKHR	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySwapchainKHR DestroySwapchainKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::DeviceWaitIdle	lib/vulkan/vk_layer.h	/^    PFN_vkDeviceWaitIdle DeviceWaitIdle;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::EndCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkEndCommandBuffer EndCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::FlushMappedMemoryRanges	lib/vulkan/vk_layer.h	/^    PFN_vkFlushMappedMemoryRanges FlushMappedMemoryRanges;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::FreeCommandBuffers	lib/vulkan/vk_layer.h	/^    PFN_vkFreeCommandBuffers FreeCommandBuffers;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::FreeDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkFreeDescriptorSets FreeDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::FreeMemory	lib/vulkan/vk_layer.h	/^    PFN_vkFreeMemory FreeMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetBufferMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetBufferMemoryRequirements GetBufferMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetDeviceMemoryCommitment	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceMemoryCommitment GetDeviceMemoryCommitment;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetDeviceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceProcAddr GetDeviceProcAddr;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetDeviceQueue	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceQueue GetDeviceQueue;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetEventStatus	lib/vulkan/vk_layer.h	/^    PFN_vkGetEventStatus GetEventStatus;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetFenceStatus	lib/vulkan/vk_layer.h	/^    PFN_vkGetFenceStatus GetFenceStatus;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetImageMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetImageSparseMemoryRequirements	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetImageSubresourceLayout	lib/vulkan/vk_layer.h	/^    PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetPipelineCacheData	lib/vulkan/vk_layer.h	/^    PFN_vkGetPipelineCacheData GetPipelineCacheData;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetQueryPoolResults	lib/vulkan/vk_layer.h	/^    PFN_vkGetQueryPoolResults GetQueryPoolResults;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetRenderAreaGranularity	lib/vulkan/vk_layer.h	/^    PFN_vkGetRenderAreaGranularity GetRenderAreaGranularity;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::GetSwapchainImagesKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetSwapchainImagesKHR GetSwapchainImagesKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::InvalidateMappedMemoryRanges	lib/vulkan/vk_layer.h	/^    PFN_vkInvalidateMappedMemoryRanges InvalidateMappedMemoryRanges;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::MapMemory	lib/vulkan/vk_layer.h	/^    PFN_vkMapMemory MapMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::MergePipelineCaches	lib/vulkan/vk_layer.h	/^    PFN_vkMergePipelineCaches MergePipelineCaches;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::QueueBindSparse	lib/vulkan/vk_layer.h	/^    PFN_vkQueueBindSparse QueueBindSparse;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::QueuePresentKHR	lib/vulkan/vk_layer.h	/^    PFN_vkQueuePresentKHR QueuePresentKHR;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::QueueSubmit	lib/vulkan/vk_layer.h	/^    PFN_vkQueueSubmit QueueSubmit;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::QueueWaitIdle	lib/vulkan/vk_layer.h	/^    PFN_vkQueueWaitIdle QueueWaitIdle;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::ResetCommandBuffer	lib/vulkan/vk_layer.h	/^    PFN_vkResetCommandBuffer ResetCommandBuffer;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::ResetCommandPool	lib/vulkan/vk_layer.h	/^    PFN_vkResetCommandPool ResetCommandPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::ResetDescriptorPool	lib/vulkan/vk_layer.h	/^    PFN_vkResetDescriptorPool ResetDescriptorPool;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::ResetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkResetEvent ResetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::ResetFences	lib/vulkan/vk_layer.h	/^    PFN_vkResetFences ResetFences;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::SetEvent	lib/vulkan/vk_layer.h	/^    PFN_vkSetEvent SetEvent;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::UnmapMemory	lib/vulkan/vk_layer.h	/^    PFN_vkUnmapMemory UnmapMemory;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::UpdateDescriptorSets	lib/vulkan/vk_layer.h	/^    PFN_vkUpdateDescriptorSets UpdateDescriptorSets;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerDispatchTable_::WaitForFences	lib/vulkan/vk_layer.h	/^    PFN_vkWaitForFences WaitForFences;$/;"	m	struct:VkLayerDispatchTable_	access:public
VkLayerFunction	lib/vulkan/vk_layer.h	/^} VkLayerFunction;$/;"	t	typeref:enum:VkLayerFunction_
VkLayerFunction_	lib/vulkan/vk_layer.h	/^typedef enum VkLayerFunction_ {$/;"	g
VkLayerInstanceCreateInfo	lib/vulkan/vk_layer.h	/^} VkLayerInstanceCreateInfo;$/;"	t	typeref:struct:__anon85
VkLayerInstanceDispatchTable	lib/vulkan/vk_layer.h	/^} VkLayerInstanceDispatchTable;$/;"	t	typeref:struct:VkLayerInstanceDispatchTable_
VkLayerInstanceDispatchTable_	lib/vulkan/vk_layer.h	/^typedef struct VkLayerInstanceDispatchTable_ {$/;"	s
VkLayerInstanceDispatchTable_::CreateAndroidSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateAndroidSurfaceKHR CreateAndroidSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateDebugReportCallbackEXT	lib/vulkan/vk_layer.h	/^    PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallbackEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateDisplayModeKHR	lib/vulkan/vk_layer.h	/^        CreateDisplayModeKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateDisplayPlaneSurfaceKHR	lib/vulkan/vk_layer.h	/^        CreateDisplayPlaneSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateMirSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateMirSurfaceKHR CreateMirSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateWaylandSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateWaylandSurfaceKHR CreateWaylandSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateWin32SurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateWin32SurfaceKHR CreateWin32SurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateXcbSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateXcbSurfaceKHR CreateXcbSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::CreateXlibSurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkCreateXlibSurfaceKHR CreateXlibSurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::DebugReportMessageEXT	lib/vulkan/vk_layer.h	/^    PFN_vkDebugReportMessageEXT DebugReportMessageEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::DestroyDebugReportCallbackEXT	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallbackEXT;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::DestroyInstance	lib/vulkan/vk_layer.h	/^    PFN_vkDestroyInstance DestroyInstance;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::DestroySurfaceKHR	lib/vulkan/vk_layer.h	/^    PFN_vkDestroySurfaceKHR DestroySurfaceKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::EnumerateDeviceExtensionProperties	lib/vulkan/vk_layer.h	/^    PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::EnumerateDeviceLayerProperties	lib/vulkan/vk_layer.h	/^    PFN_vkEnumerateDeviceLayerProperties EnumerateDeviceLayerProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::EnumeratePhysicalDevices	lib/vulkan/vk_layer.h	/^    PFN_vkEnumeratePhysicalDevices EnumeratePhysicalDevices;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetDisplayModePropertiesKHR	lib/vulkan/vk_layer.h	/^        GetDisplayModePropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetDisplayPlaneCapabilitiesKHR	lib/vulkan/vk_layer.h	/^        GetDisplayPlaneCapabilitiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetDisplayPlaneSupportedDisplaysKHR	lib/vulkan/vk_layer.h	/^        GetDisplayPlaneSupportedDisplaysKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr GetInstanceProcAddr;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceDisplayPlanePropertiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceDisplayPlanePropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceDisplayPropertiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceDisplayPropertiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceFeatures	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceFeatures GetPhysicalDeviceFeatures;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceFormatProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceFormatProperties GetPhysicalDeviceFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceImageFormatProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceImageFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceMemoryProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceMemoryProperties GetPhysicalDeviceMemoryProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceMirPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceMirPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceProperties	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceProperties GetPhysicalDeviceProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceQueueFamilyProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceQueueFamilyProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceSparseImageFormatProperties	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSparseImageFormatProperties;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceSurfaceCapabilitiesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSurfaceCapabilitiesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceSurfaceFormatsKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceSurfaceFormatsKHR GetPhysicalDeviceSurfaceFormatsKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceSurfacePresentModesKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceSurfacePresentModesKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceSurfaceSupportKHR	lib/vulkan/vk_layer.h	/^    PFN_vkGetPhysicalDeviceSurfaceSupportKHR GetPhysicalDeviceSurfaceSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceWaylandPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceWaylandPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceWin32PresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceWin32PresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceXcbPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceXcbPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceDispatchTable_::GetPhysicalDeviceXlibPresentationSupportKHR	lib/vulkan/vk_layer.h	/^        GetPhysicalDeviceXlibPresentationSupportKHR;$/;"	m	struct:VkLayerInstanceDispatchTable_	access:public
VkLayerInstanceLink	lib/vulkan/vk_layer.h	/^} VkLayerInstanceLink;$/;"	t	typeref:struct:VkLayerInstanceLink_
VkLayerInstanceLink_	lib/vulkan/vk_layer.h	/^typedef struct VkLayerInstanceLink_ {$/;"	s
VkLayerInstanceLink_::pNext	lib/vulkan/vk_layer.h	/^    struct VkLayerInstanceLink_ *pNext;$/;"	m	struct:VkLayerInstanceLink_	typeref:struct:VkLayerInstanceLink_::VkLayerInstanceLink_	access:public
VkLayerInstanceLink_::pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerInstanceLink_	access:public
VkLayerProperties	lib/vulkan/vulkan.h	/^typedef struct VkLayerProperties {$/;"	s
VkLayerProperties	lib/vulkan/vulkan.h	/^} VkLayerProperties;$/;"	t	typeref:struct:VkLayerProperties
VkLayerProperties::description	lib/vulkan/vulkan.h	/^    char        description[VK_MAX_DESCRIPTION_SIZE];$/;"	m	struct:VkLayerProperties	access:public
VkLayerProperties::implementationVersion	lib/vulkan/vulkan.h	/^    uint32_t    implementationVersion;$/;"	m	struct:VkLayerProperties	access:public
VkLayerProperties::layerName	lib/vulkan/vulkan.h	/^    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkLayerProperties	access:public
VkLayerProperties::specVersion	lib/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkLayerProperties	access:public
VkLogicOp	lib/vulkan/vulkan.h	/^typedef enum VkLogicOp {$/;"	g
VkLogicOp	lib/vulkan/vulkan.h	/^} VkLogicOp;$/;"	t	typeref:enum:VkLogicOp
VkMappedMemoryRange	lib/vulkan/vulkan.h	/^typedef struct VkMappedMemoryRange {$/;"	s
VkMappedMemoryRange	lib/vulkan/vulkan.h	/^} VkMappedMemoryRange;$/;"	t	typeref:struct:VkMappedMemoryRange
VkMappedMemoryRange::memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory     memory;$/;"	m	struct:VkMappedMemoryRange	access:public
VkMappedMemoryRange::offset	lib/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkMappedMemoryRange	access:public
VkMappedMemoryRange::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMappedMemoryRange	access:public
VkMappedMemoryRange::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMappedMemoryRange	access:public
VkMappedMemoryRange::size	lib/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkMappedMemoryRange	access:public
VkMemoryAllocateInfo	lib/vulkan/vulkan.h	/^typedef struct VkMemoryAllocateInfo {$/;"	s
VkMemoryAllocateInfo	lib/vulkan/vulkan.h	/^} VkMemoryAllocateInfo;$/;"	t	typeref:struct:VkMemoryAllocateInfo
VkMemoryAllocateInfo::allocationSize	lib/vulkan/vulkan.h	/^    VkDeviceSize       allocationSize;$/;"	m	struct:VkMemoryAllocateInfo	access:public
VkMemoryAllocateInfo::memoryTypeIndex	lib/vulkan/vulkan.h	/^    uint32_t           memoryTypeIndex;$/;"	m	struct:VkMemoryAllocateInfo	access:public
VkMemoryAllocateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryAllocateInfo	access:public
VkMemoryAllocateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryAllocateInfo	access:public
VkMemoryBarrier	lib/vulkan/vulkan.h	/^typedef struct VkMemoryBarrier {$/;"	s
VkMemoryBarrier	lib/vulkan/vulkan.h	/^} VkMemoryBarrier;$/;"	t	typeref:struct:VkMemoryBarrier
VkMemoryBarrier::dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkMemoryBarrier	access:public
VkMemoryBarrier::pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryBarrier	access:public
VkMemoryBarrier::sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryBarrier	access:public
VkMemoryBarrier::srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkMemoryBarrier	access:public
VkMemoryHeap	lib/vulkan/vulkan.h	/^typedef struct VkMemoryHeap {$/;"	s
VkMemoryHeap	lib/vulkan/vulkan.h	/^} VkMemoryHeap;$/;"	t	typeref:struct:VkMemoryHeap
VkMemoryHeap::flags	lib/vulkan/vulkan.h	/^    VkMemoryHeapFlags    flags;$/;"	m	struct:VkMemoryHeap	access:public
VkMemoryHeap::size	lib/vulkan/vulkan.h	/^    VkDeviceSize         size;$/;"	m	struct:VkMemoryHeap	access:public
VkMemoryHeapFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkMemoryHeapFlagBits {$/;"	g
VkMemoryHeapFlagBits	lib/vulkan/vulkan.h	/^} VkMemoryHeapFlagBits;$/;"	t	typeref:enum:VkMemoryHeapFlagBits
VkMemoryHeapFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkMemoryHeapFlags;$/;"	t
VkMemoryMapFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkMemoryMapFlags;$/;"	t
VkMemoryPropertyFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkMemoryPropertyFlagBits {$/;"	g
VkMemoryPropertyFlagBits	lib/vulkan/vulkan.h	/^} VkMemoryPropertyFlagBits;$/;"	t	typeref:enum:VkMemoryPropertyFlagBits
VkMemoryPropertyFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkMemoryPropertyFlags;$/;"	t
VkMemoryRequirements	lib/vulkan/vulkan.h	/^typedef struct VkMemoryRequirements {$/;"	s
VkMemoryRequirements	lib/vulkan/vulkan.h	/^} VkMemoryRequirements;$/;"	t	typeref:struct:VkMemoryRequirements
VkMemoryRequirements::alignment	lib/vulkan/vulkan.h	/^    VkDeviceSize    alignment;$/;"	m	struct:VkMemoryRequirements	access:public
VkMemoryRequirements::memoryTypeBits	lib/vulkan/vulkan.h	/^    uint32_t        memoryTypeBits;$/;"	m	struct:VkMemoryRequirements	access:public
VkMemoryRequirements::size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkMemoryRequirements	access:public
VkMemoryType	lib/vulkan/vulkan.h	/^typedef struct VkMemoryType {$/;"	s
VkMemoryType	lib/vulkan/vulkan.h	/^} VkMemoryType;$/;"	t	typeref:struct:VkMemoryType
VkMemoryType::heapIndex	lib/vulkan/vulkan.h	/^    uint32_t                 heapIndex;$/;"	m	struct:VkMemoryType	access:public
VkMemoryType::propertyFlags	lib/vulkan/vulkan.h	/^    VkMemoryPropertyFlags    propertyFlags;$/;"	m	struct:VkMemoryType	access:public
VkMirSurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkMirSurfaceCreateFlagsKHR;$/;"	t
VkMirSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkMirSurfaceCreateInfoKHR {$/;"	s
VkMirSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkMirSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkMirSurfaceCreateInfoKHR
VkMirSurfaceCreateInfoKHR::connection	lib/vulkan/vulkan.h	/^    MirConnection*                connection;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
VkMirSurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkMirSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
VkMirSurfaceCreateInfoKHR::mirSurface	lib/vulkan/vulkan.h	/^    MirSurface*                   mirSurface;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
VkMirSurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
VkMirSurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
VkOffset2D	lib/vulkan/vulkan.h	/^typedef struct VkOffset2D {$/;"	s
VkOffset2D	lib/vulkan/vulkan.h	/^} VkOffset2D;$/;"	t	typeref:struct:VkOffset2D
VkOffset2D::x	lib/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset2D	access:public
VkOffset2D::y	lib/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset2D	access:public
VkOffset3D	lib/vulkan/vulkan.h	/^typedef struct VkOffset3D {$/;"	s
VkOffset3D	lib/vulkan/vulkan.h	/^} VkOffset3D;$/;"	t	typeref:struct:VkOffset3D
VkOffset3D::x	lib/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset3D	access:public
VkOffset3D::y	lib/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset3D	access:public
VkOffset3D::z	lib/vulkan/vulkan.h	/^    int32_t    z;$/;"	m	struct:VkOffset3D	access:public
VkPhysicalDeviceFeatures	lib/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceFeatures {$/;"	s
VkPhysicalDeviceFeatures	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceFeatures;$/;"	t	typeref:struct:VkPhysicalDeviceFeatures
VkPhysicalDeviceFeatures::alphaToOne	lib/vulkan/vulkan.h	/^    VkBool32    alphaToOne;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::depthBiasClamp	lib/vulkan/vulkan.h	/^    VkBool32    depthBiasClamp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::depthBounds	lib/vulkan/vulkan.h	/^    VkBool32    depthBounds;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::depthClamp	lib/vulkan/vulkan.h	/^    VkBool32    depthClamp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::drawIndirectFirstInstance	lib/vulkan/vulkan.h	/^    VkBool32    drawIndirectFirstInstance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::dualSrcBlend	lib/vulkan/vulkan.h	/^    VkBool32    dualSrcBlend;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::fillModeNonSolid	lib/vulkan/vulkan.h	/^    VkBool32    fillModeNonSolid;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::fragmentStoresAndAtomics	lib/vulkan/vulkan.h	/^    VkBool32    fragmentStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::fullDrawIndexUint32	lib/vulkan/vulkan.h	/^    VkBool32    fullDrawIndexUint32;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::geometryShader	lib/vulkan/vulkan.h	/^    VkBool32    geometryShader;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::imageCubeArray	lib/vulkan/vulkan.h	/^    VkBool32    imageCubeArray;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::independentBlend	lib/vulkan/vulkan.h	/^    VkBool32    independentBlend;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::inheritedQueries	lib/vulkan/vulkan.h	/^    VkBool32    inheritedQueries;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::largePoints	lib/vulkan/vulkan.h	/^    VkBool32    largePoints;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::logicOp	lib/vulkan/vulkan.h	/^    VkBool32    logicOp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::multiDrawIndirect	lib/vulkan/vulkan.h	/^    VkBool32    multiDrawIndirect;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::multiViewport	lib/vulkan/vulkan.h	/^    VkBool32    multiViewport;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::occlusionQueryPrecise	lib/vulkan/vulkan.h	/^    VkBool32    occlusionQueryPrecise;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::pipelineStatisticsQuery	lib/vulkan/vulkan.h	/^    VkBool32    pipelineStatisticsQuery;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::robustBufferAccess	lib/vulkan/vulkan.h	/^    VkBool32    robustBufferAccess;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sampleRateShading	lib/vulkan/vulkan.h	/^    VkBool32    sampleRateShading;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::samplerAnisotropy	lib/vulkan/vulkan.h	/^    VkBool32    samplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderClipDistance	lib/vulkan/vulkan.h	/^    VkBool32    shaderClipDistance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderCullDistance	lib/vulkan/vulkan.h	/^    VkBool32    shaderCullDistance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderFloat64	lib/vulkan/vulkan.h	/^    VkBool32    shaderFloat64;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderImageGatherExtended	lib/vulkan/vulkan.h	/^    VkBool32    shaderImageGatherExtended;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderInt16	lib/vulkan/vulkan.h	/^    VkBool32    shaderInt16;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderInt64	lib/vulkan/vulkan.h	/^    VkBool32    shaderInt64;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderResourceMinLod	lib/vulkan/vulkan.h	/^    VkBool32    shaderResourceMinLod;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderResourceResidency	lib/vulkan/vulkan.h	/^    VkBool32    shaderResourceResidency;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderSampledImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageBufferArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageImageArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageImageExtendedFormats	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageExtendedFormats;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageImageMultisample	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageMultisample;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageImageReadWithoutFormat	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageReadWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderStorageImageWriteWithoutFormat	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageWriteWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderTessellationAndGeometryPointSize	lib/vulkan/vulkan.h	/^    VkBool32    shaderTessellationAndGeometryPointSize;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderUniformBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseBinding	lib/vulkan/vulkan.h	/^    VkBool32    sparseBinding;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidency16Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency16Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidency2Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency2Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidency4Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency4Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidency8Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency8Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidencyAliased	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyAliased;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidencyBuffer	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyBuffer;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidencyImage2D	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage2D;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::sparseResidencyImage3D	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage3D;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::tessellationShader	lib/vulkan/vulkan.h	/^    VkBool32    tessellationShader;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::textureCompressionASTC_LDR	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionASTC_LDR;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::textureCompressionBC	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionBC;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::textureCompressionETC2	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionETC2;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::variableMultisampleRate	lib/vulkan/vulkan.h	/^    VkBool32    variableMultisampleRate;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::vertexPipelineStoresAndAtomics	lib/vulkan/vulkan.h	/^    VkBool32    vertexPipelineStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceFeatures::wideLines	lib/vulkan/vulkan.h	/^    VkBool32    wideLines;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
VkPhysicalDeviceLimits	lib/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceLimits {$/;"	s
VkPhysicalDeviceLimits	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceLimits;$/;"	t	typeref:struct:VkPhysicalDeviceLimits
VkPhysicalDeviceLimits::bufferImageGranularity	lib/vulkan/vulkan.h	/^    VkDeviceSize          bufferImageGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::discreteQueuePriorities	lib/vulkan/vulkan.h	/^    uint32_t              discreteQueuePriorities;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::framebufferColorSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::framebufferDepthSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::framebufferStencilSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::lineWidthGranularity	lib/vulkan/vulkan.h	/^    float                 lineWidthGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::lineWidthRange	lib/vulkan/vulkan.h	/^    float                 lineWidthRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxBoundDescriptorSets	lib/vulkan/vulkan.h	/^    uint32_t              maxBoundDescriptorSets;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxClipDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxClipDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxColorAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxColorAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxCombinedClipAndCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxComputeSharedMemorySize	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeSharedMemorySize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxComputeWorkGroupCount	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupCount[3];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxComputeWorkGroupInvocations	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupInvocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxComputeWorkGroupSize	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupSize[3];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxCullDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetSampledImages	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetSamplers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSamplers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetStorageImages	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDrawIndexedIndexValue	lib/vulkan/vulkan.h	/^    uint32_t              maxDrawIndexedIndexValue;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxDrawIndirectCount	lib/vulkan/vulkan.h	/^    uint32_t              maxDrawIndirectCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFragmentCombinedOutputResources	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentCombinedOutputResources;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFragmentDualSrcAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentDualSrcAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFragmentInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFragmentOutputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentOutputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFramebufferHeight	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferHeight;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFramebufferLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferLayers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxFramebufferWidth	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferWidth;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxGeometryInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxGeometryOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxGeometryOutputVertices	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputVertices;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxGeometryShaderInvocations	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryShaderInvocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxGeometryTotalOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxImageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxImageArrayLayers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxImageDimension1D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension1D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxImageDimension2D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension2D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxImageDimension3D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension3D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxImageDimensionCube	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimensionCube;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxInterpolationOffset	lib/vulkan/vulkan.h	/^    float                 maxInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxMemoryAllocationCount	lib/vulkan/vulkan.h	/^    uint32_t              maxMemoryAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSamplers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPerStageResources	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageResources;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxPushConstantsSize	lib/vulkan/vulkan.h	/^    uint32_t              maxPushConstantsSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxSampleMaskWords	lib/vulkan/vulkan.h	/^    uint32_t              maxSampleMaskWords;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxSamplerAllocationCount	lib/vulkan/vulkan.h	/^    uint32_t              maxSamplerAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxSamplerAnisotropy	lib/vulkan/vulkan.h	/^    float                 maxSamplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxSamplerLodBias	lib/vulkan/vulkan.h	/^    float                 maxSamplerLodBias;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxStorageBufferRange	lib/vulkan/vulkan.h	/^    uint32_t              maxStorageBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationControlPerPatchOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerPatchOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationControlPerVertexInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationControlPerVertexOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationControlTotalOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationEvaluationInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationEvaluationOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationGenerationLevel	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationGenerationLevel;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTessellationPatchSize	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationPatchSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTexelBufferElements	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelBufferElements;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTexelGatherOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxTexelOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxUniformBufferRange	lib/vulkan/vulkan.h	/^    uint32_t              maxUniformBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxVertexInputAttributeOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributeOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxVertexInputAttributes	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributes;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxVertexInputBindingStride	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindingStride;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxVertexInputBindings	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindings;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxVertexOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxViewportDimensions	lib/vulkan/vulkan.h	/^    uint32_t              maxViewportDimensions[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::maxViewports	lib/vulkan/vulkan.h	/^    uint32_t              maxViewports;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minInterpolationOffset	lib/vulkan/vulkan.h	/^    float                 minInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minMemoryMapAlignment	lib/vulkan/vulkan.h	/^    size_t                minMemoryMapAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minStorageBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minTexelBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minTexelGatherOffset	lib/vulkan/vulkan.h	/^    int32_t               minTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minTexelOffset	lib/vulkan/vulkan.h	/^    int32_t               minTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minUniformBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::mipmapPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              mipmapPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::nonCoherentAtomSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          nonCoherentAtomSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::optimalBufferCopyOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::optimalBufferCopyRowPitchAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyRowPitchAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::pointSizeGranularity	lib/vulkan/vulkan.h	/^    float                 pointSizeGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::pointSizeRange	lib/vulkan/vulkan.h	/^    float                 pointSizeRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::sampledImageColorSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::sampledImageDepthSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::sampledImageIntegerSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageIntegerSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::sampledImageStencilSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::sparseAddressSpaceSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          sparseAddressSpaceSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::standardSampleLocations	lib/vulkan/vulkan.h	/^    VkBool32              standardSampleLocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::storageImageSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    storageImageSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::strictLines	lib/vulkan/vulkan.h	/^    VkBool32              strictLines;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::subPixelInterpolationOffsetBits	lib/vulkan/vulkan.h	/^    uint32_t              subPixelInterpolationOffsetBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::subPixelPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              subPixelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::subTexelPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              subTexelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::timestampComputeAndGraphics	lib/vulkan/vulkan.h	/^    VkBool32              timestampComputeAndGraphics;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::timestampPeriod	lib/vulkan/vulkan.h	/^    float                 timestampPeriod;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::viewportBoundsRange	lib/vulkan/vulkan.h	/^    float                 viewportBoundsRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceLimits::viewportSubPixelBits	lib/vulkan/vulkan.h	/^    uint32_t              viewportSubPixelBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
VkPhysicalDeviceMemoryProperties	lib/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceMemoryProperties {$/;"	s
VkPhysicalDeviceMemoryProperties	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceMemoryProperties;$/;"	t	typeref:struct:VkPhysicalDeviceMemoryProperties
VkPhysicalDeviceMemoryProperties::memoryHeapCount	lib/vulkan/vulkan.h	/^    uint32_t        memoryHeapCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
VkPhysicalDeviceMemoryProperties::memoryHeaps	lib/vulkan/vulkan.h	/^    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
VkPhysicalDeviceMemoryProperties::memoryTypeCount	lib/vulkan/vulkan.h	/^    uint32_t        memoryTypeCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
VkPhysicalDeviceMemoryProperties::memoryTypes	lib/vulkan/vulkan.h	/^    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
VkPhysicalDeviceProperties	lib/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceProperties {$/;"	s
VkPhysicalDeviceProperties	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceProperties;$/;"	t	typeref:struct:VkPhysicalDeviceProperties
VkPhysicalDeviceProperties::apiVersion	lib/vulkan/vulkan.h	/^    uint32_t                            apiVersion;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::deviceID	lib/vulkan/vulkan.h	/^    uint32_t                            deviceID;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::deviceName	lib/vulkan/vulkan.h	/^    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::deviceType	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceType                deviceType;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::driverVersion	lib/vulkan/vulkan.h	/^    uint32_t                            driverVersion;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::limits	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceLimits              limits;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::pipelineCacheUUID	lib/vulkan/vulkan.h	/^    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::sparseProperties	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceSparseProperties    sparseProperties;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceProperties::vendorID	lib/vulkan/vulkan.h	/^    uint32_t                            vendorID;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
VkPhysicalDeviceSparseProperties	lib/vulkan/vulkan.h	/^typedef struct VkPhysicalDeviceSparseProperties {$/;"	s
VkPhysicalDeviceSparseProperties	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceSparseProperties;$/;"	t	typeref:struct:VkPhysicalDeviceSparseProperties
VkPhysicalDeviceSparseProperties::residencyAlignedMipSize	lib/vulkan/vulkan.h	/^    VkBool32    residencyAlignedMipSize;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
VkPhysicalDeviceSparseProperties::residencyNonResidentStrict	lib/vulkan/vulkan.h	/^    VkBool32    residencyNonResidentStrict;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
VkPhysicalDeviceSparseProperties::residencyStandard2DBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
VkPhysicalDeviceSparseProperties::residencyStandard2DMultisampleBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DMultisampleBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
VkPhysicalDeviceSparseProperties::residencyStandard3DBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard3DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
VkPhysicalDeviceType	lib/vulkan/vulkan.h	/^typedef enum VkPhysicalDeviceType {$/;"	g
VkPhysicalDeviceType	lib/vulkan/vulkan.h	/^} VkPhysicalDeviceType;$/;"	t	typeref:enum:VkPhysicalDeviceType
VkPipelineBindPoint	lib/vulkan/vulkan.h	/^typedef enum VkPipelineBindPoint {$/;"	g
VkPipelineBindPoint	lib/vulkan/vulkan.h	/^} VkPipelineBindPoint;$/;"	t	typeref:enum:VkPipelineBindPoint
VkPipelineCacheCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineCacheCreateFlags;$/;"	t
VkPipelineCacheCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineCacheCreateInfo {$/;"	s
VkPipelineCacheCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineCacheCreateInfo;$/;"	t	typeref:struct:VkPipelineCacheCreateInfo
VkPipelineCacheCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineCacheCreateFlags    flags;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
VkPipelineCacheCreateInfo::initialDataSize	lib/vulkan/vulkan.h	/^    size_t                        initialDataSize;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
VkPipelineCacheCreateInfo::pInitialData	lib/vulkan/vulkan.h	/^    const void*                   pInitialData;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
VkPipelineCacheCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
VkPipelineCacheCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
VkPipelineCacheHeaderVersion	lib/vulkan/vulkan.h	/^typedef enum VkPipelineCacheHeaderVersion {$/;"	g
VkPipelineCacheHeaderVersion	lib/vulkan/vulkan.h	/^} VkPipelineCacheHeaderVersion;$/;"	t	typeref:enum:VkPipelineCacheHeaderVersion
VkPipelineColorBlendAttachmentState	lib/vulkan/vulkan.h	/^typedef struct VkPipelineColorBlendAttachmentState {$/;"	s
VkPipelineColorBlendAttachmentState	lib/vulkan/vulkan.h	/^} VkPipelineColorBlendAttachmentState;$/;"	t	typeref:struct:VkPipelineColorBlendAttachmentState
VkPipelineColorBlendAttachmentState::alphaBlendOp	lib/vulkan/vulkan.h	/^    VkBlendOp                alphaBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::blendEnable	lib/vulkan/vulkan.h	/^    VkBool32                 blendEnable;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::colorBlendOp	lib/vulkan/vulkan.h	/^    VkBlendOp                colorBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::colorWriteMask	lib/vulkan/vulkan.h	/^    VkColorComponentFlags    colorWriteMask;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::dstAlphaBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            dstAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::dstColorBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            dstColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::srcAlphaBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            srcAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendAttachmentState::srcColorBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            srcColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
VkPipelineColorBlendStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineColorBlendStateCreateFlags;$/;"	t
VkPipelineColorBlendStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineColorBlendStateCreateInfo {$/;"	s
VkPipelineColorBlendStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineColorBlendStateCreateInfo;$/;"	t	typeref:struct:VkPipelineColorBlendStateCreateInfo
VkPipelineColorBlendStateCreateInfo::attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                                      attachmentCount;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::blendConstants	lib/vulkan/vulkan.h	/^    float                                         blendConstants[4];$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineColorBlendStateCreateFlags          flags;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::logicOp	lib/vulkan/vulkan.h	/^    VkLogicOp                                     logicOp;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::logicOpEnable	lib/vulkan/vulkan.h	/^    VkBool32                                      logicOpEnable;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::pAttachments	lib/vulkan/vulkan.h	/^    const VkPipelineColorBlendAttachmentState*    pAttachments;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                   pNext;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineColorBlendStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                               sType;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
VkPipelineCreateFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkPipelineCreateFlagBits {$/;"	g
VkPipelineCreateFlagBits	lib/vulkan/vulkan.h	/^} VkPipelineCreateFlagBits;$/;"	t	typeref:enum:VkPipelineCreateFlagBits
VkPipelineCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineCreateFlags;$/;"	t
VkPipelineDepthStencilStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineDepthStencilStateCreateFlags;$/;"	t
VkPipelineDepthStencilStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineDepthStencilStateCreateInfo {$/;"	s
VkPipelineDepthStencilStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineDepthStencilStateCreateInfo;$/;"	t	typeref:struct:VkPipelineDepthStencilStateCreateInfo
VkPipelineDepthStencilStateCreateInfo::back	lib/vulkan/vulkan.h	/^    VkStencilOpState                          back;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::depthBoundsTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthBoundsTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::depthCompareOp	lib/vulkan/vulkan.h	/^    VkCompareOp                               depthCompareOp;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::depthTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::depthWriteEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthWriteEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineDepthStencilStateCreateFlags    flags;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::front	lib/vulkan/vulkan.h	/^    VkStencilOpState                          front;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::maxDepthBounds	lib/vulkan/vulkan.h	/^    float                                     maxDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::minDepthBounds	lib/vulkan/vulkan.h	/^    float                                     minDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDepthStencilStateCreateInfo::stencilTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  stencilTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
VkPipelineDynamicStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineDynamicStateCreateFlags;$/;"	t
VkPipelineDynamicStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineDynamicStateCreateInfo {$/;"	s
VkPipelineDynamicStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineDynamicStateCreateInfo;$/;"	t	typeref:struct:VkPipelineDynamicStateCreateInfo
VkPipelineDynamicStateCreateInfo::dynamicStateCount	lib/vulkan/vulkan.h	/^    uint32_t                             dynamicStateCount;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
VkPipelineDynamicStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineDynamicStateCreateFlags    flags;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
VkPipelineDynamicStateCreateInfo::pDynamicStates	lib/vulkan/vulkan.h	/^    const VkDynamicState*                pDynamicStates;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
VkPipelineDynamicStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                          pNext;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
VkPipelineDynamicStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                      sType;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
VkPipelineInputAssemblyStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;$/;"	t
VkPipelineInputAssemblyStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineInputAssemblyStateCreateInfo {$/;"	s
VkPipelineInputAssemblyStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineInputAssemblyStateCreateInfo;$/;"	t	typeref:struct:VkPipelineInputAssemblyStateCreateInfo
VkPipelineInputAssemblyStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineInputAssemblyStateCreateFlags    flags;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
VkPipelineInputAssemblyStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   primitiveRestartEnable;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
VkPipelineInputAssemblyStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
VkPipelineInputAssemblyStateCreateInfo::topology	lib/vulkan/vulkan.h	/^    VkPrimitiveTopology                        topology;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
VkPipelineLayoutCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineLayoutCreateFlags;$/;"	t
VkPipelineLayoutCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineLayoutCreateInfo {$/;"	s
VkPipelineLayoutCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineLayoutCreateInfo;$/;"	t	typeref:struct:VkPipelineLayoutCreateInfo
VkPipelineLayoutCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineLayoutCreateFlags     flags;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::pPushConstantRanges	lib/vulkan/vulkan.h	/^    const VkPushConstantRange*      pPushConstantRanges;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::pSetLayouts	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::pushConstantRangeCount	lib/vulkan/vulkan.h	/^    uint32_t                        pushConstantRangeCount;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineLayoutCreateInfo::setLayoutCount	lib/vulkan/vulkan.h	/^    uint32_t                        setLayoutCount;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
VkPipelineMultisampleStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineMultisampleStateCreateFlags;$/;"	t
VkPipelineMultisampleStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineMultisampleStateCreateInfo {$/;"	s
VkPipelineMultisampleStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineMultisampleStateCreateInfo;$/;"	t	typeref:struct:VkPipelineMultisampleStateCreateInfo
VkPipelineMultisampleStateCreateInfo::alphaToCoverageEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 alphaToCoverageEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::alphaToOneEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 alphaToOneEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineMultisampleStateCreateFlags    flags;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::minSampleShading	lib/vulkan/vulkan.h	/^    float                                    minSampleShading;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::pSampleMask	lib/vulkan/vulkan.h	/^    const VkSampleMask*                      pSampleMask;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::rasterizationSamples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits                    rasterizationSamples;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineMultisampleStateCreateInfo::sampleShadingEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 sampleShadingEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
VkPipelineRasterizationStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineRasterizationStateCreateFlags;$/;"	t
VkPipelineRasterizationStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineRasterizationStateCreateInfo {$/;"	s
VkPipelineRasterizationStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineRasterizationStateCreateInfo;$/;"	t	typeref:struct:VkPipelineRasterizationStateCreateInfo
VkPipelineRasterizationStateCreateInfo::cullMode	lib/vulkan/vulkan.h	/^    VkCullModeFlags                            cullMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::depthBiasClamp	lib/vulkan/vulkan.h	/^    float                                      depthBiasClamp;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::depthBiasConstantFactor	lib/vulkan/vulkan.h	/^    float                                      depthBiasConstantFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::depthBiasEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   depthBiasEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::depthBiasSlopeFactor	lib/vulkan/vulkan.h	/^    float                                      depthBiasSlopeFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::depthClampEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   depthClampEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineRasterizationStateCreateFlags    flags;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::frontFace	lib/vulkan/vulkan.h	/^    VkFrontFace                                frontFace;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::lineWidth	lib/vulkan/vulkan.h	/^    float                                      lineWidth;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::polygonMode	lib/vulkan/vulkan.h	/^    VkPolygonMode                              polygonMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::rasterizerDiscardEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   rasterizerDiscardEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
VkPipelineRasterizationStateRasterizationOrderAMD	lib/vulkan/vulkan.h	/^typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {$/;"	s
VkPipelineRasterizationStateRasterizationOrderAMD	lib/vulkan/vulkan.h	/^} VkPipelineRasterizationStateRasterizationOrderAMD;$/;"	t	typeref:struct:VkPipelineRasterizationStateRasterizationOrderAMD
VkPipelineRasterizationStateRasterizationOrderAMD::pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
VkPipelineRasterizationStateRasterizationOrderAMD::rasterizationOrder	lib/vulkan/vulkan.h	/^    VkRasterizationOrderAMD    rasterizationOrder;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
VkPipelineRasterizationStateRasterizationOrderAMD::sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
VkPipelineShaderStageCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineShaderStageCreateFlags;$/;"	t
VkPipelineShaderStageCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineShaderStageCreateInfo {$/;"	s
VkPipelineShaderStageCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineShaderStageCreateInfo;$/;"	t	typeref:struct:VkPipelineShaderStageCreateInfo
VkPipelineShaderStageCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateFlags    flags;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::module	lib/vulkan/vulkan.h	/^    VkShaderModule                      module;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::pName	lib/vulkan/vulkan.h	/^    const char*                         pName;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                         pNext;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::pSpecializationInfo	lib/vulkan/vulkan.h	/^    const VkSpecializationInfo*         pSpecializationInfo;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                     sType;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineShaderStageCreateInfo::stage	lib/vulkan/vulkan.h	/^    VkShaderStageFlagBits               stage;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
VkPipelineStageFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkPipelineStageFlagBits {$/;"	g
VkPipelineStageFlagBits	lib/vulkan/vulkan.h	/^} VkPipelineStageFlagBits;$/;"	t	typeref:enum:VkPipelineStageFlagBits
VkPipelineStageFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineStageFlags;$/;"	t
VkPipelineTessellationStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineTessellationStateCreateFlags;$/;"	t
VkPipelineTessellationStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineTessellationStateCreateInfo {$/;"	s
VkPipelineTessellationStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineTessellationStateCreateInfo;$/;"	t	typeref:struct:VkPipelineTessellationStateCreateInfo
VkPipelineTessellationStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineTessellationStateCreateFlags    flags;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
VkPipelineTessellationStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
VkPipelineTessellationStateCreateInfo::patchControlPoints	lib/vulkan/vulkan.h	/^    uint32_t                                  patchControlPoints;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
VkPipelineTessellationStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
VkPipelineVertexInputStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineVertexInputStateCreateFlags;$/;"	t
VkPipelineVertexInputStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineVertexInputStateCreateInfo {$/;"	s
VkPipelineVertexInputStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineVertexInputStateCreateInfo;$/;"	t	typeref:struct:VkPipelineVertexInputStateCreateInfo
VkPipelineVertexInputStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineVertexInputStateCreateFlags       flags;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::pVertexAttributeDescriptions	lib/vulkan/vulkan.h	/^    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::pVertexBindingDescriptions	lib/vulkan/vulkan.h	/^    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::vertexAttributeDescriptionCount	lib/vulkan/vulkan.h	/^    uint32_t                                    vertexAttributeDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineVertexInputStateCreateInfo::vertexBindingDescriptionCount	lib/vulkan/vulkan.h	/^    uint32_t                                    vertexBindingDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
VkPipelineViewportStateCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkPipelineViewportStateCreateFlags;$/;"	t
VkPipelineViewportStateCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkPipelineViewportStateCreateInfo {$/;"	s
VkPipelineViewportStateCreateInfo	lib/vulkan/vulkan.h	/^} VkPipelineViewportStateCreateInfo;$/;"	t	typeref:struct:VkPipelineViewportStateCreateInfo
VkPipelineViewportStateCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkPipelineViewportStateCreateFlags    flags;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                           pNext;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::pScissors	lib/vulkan/vulkan.h	/^    const VkRect2D*                       pScissors;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::pViewports	lib/vulkan/vulkan.h	/^    const VkViewport*                     pViewports;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                       sType;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::scissorCount	lib/vulkan/vulkan.h	/^    uint32_t                              scissorCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPipelineViewportStateCreateInfo::viewportCount	lib/vulkan/vulkan.h	/^    uint32_t                              viewportCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
VkPolygonMode	lib/vulkan/vulkan.h	/^typedef enum VkPolygonMode {$/;"	g
VkPolygonMode	lib/vulkan/vulkan.h	/^} VkPolygonMode;$/;"	t	typeref:enum:VkPolygonMode
VkPresentInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkPresentInfoKHR {$/;"	s
VkPresentInfoKHR	lib/vulkan/vulkan.h	/^} VkPresentInfoKHR;$/;"	t	typeref:struct:VkPresentInfoKHR
VkPresentInfoKHR::pImageIndices	lib/vulkan/vulkan.h	/^    const uint32_t*          pImageIndices;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::pResults	lib/vulkan/vulkan.h	/^    VkResult*                pResults;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::pSwapchains	lib/vulkan/vulkan.h	/^    const VkSwapchainKHR*    pSwapchains;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*       pWaitSemaphores;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::swapchainCount	lib/vulkan/vulkan.h	/^    uint32_t                 swapchainCount;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentInfoKHR::waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                 waitSemaphoreCount;$/;"	m	struct:VkPresentInfoKHR	access:public
VkPresentModeKHR	lib/vulkan/vulkan.h	/^typedef enum VkPresentModeKHR {$/;"	g
VkPresentModeKHR	lib/vulkan/vulkan.h	/^} VkPresentModeKHR;$/;"	t	typeref:enum:VkPresentModeKHR
VkPrimitiveTopology	lib/vulkan/vulkan.h	/^typedef enum VkPrimitiveTopology {$/;"	g
VkPrimitiveTopology	lib/vulkan/vulkan.h	/^} VkPrimitiveTopology;$/;"	t	typeref:enum:VkPrimitiveTopology
VkPushConstantRange	lib/vulkan/vulkan.h	/^typedef struct VkPushConstantRange {$/;"	s
VkPushConstantRange	lib/vulkan/vulkan.h	/^} VkPushConstantRange;$/;"	t	typeref:struct:VkPushConstantRange
VkPushConstantRange::offset	lib/vulkan/vulkan.h	/^    uint32_t              offset;$/;"	m	struct:VkPushConstantRange	access:public
VkPushConstantRange::size	lib/vulkan/vulkan.h	/^    uint32_t              size;$/;"	m	struct:VkPushConstantRange	access:public
VkPushConstantRange::stageFlags	lib/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkPushConstantRange	access:public
VkQueryControlFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkQueryControlFlagBits {$/;"	g
VkQueryControlFlagBits	lib/vulkan/vulkan.h	/^} VkQueryControlFlagBits;$/;"	t	typeref:enum:VkQueryControlFlagBits
VkQueryControlFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkQueryControlFlags;$/;"	t
VkQueryPipelineStatisticFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkQueryPipelineStatisticFlagBits {$/;"	g
VkQueryPipelineStatisticFlagBits	lib/vulkan/vulkan.h	/^} VkQueryPipelineStatisticFlagBits;$/;"	t	typeref:enum:VkQueryPipelineStatisticFlagBits
VkQueryPipelineStatisticFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkQueryPipelineStatisticFlags;$/;"	t
VkQueryPoolCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkQueryPoolCreateFlags;$/;"	t
VkQueryPoolCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkQueryPoolCreateInfo {$/;"	s
VkQueryPoolCreateInfo	lib/vulkan/vulkan.h	/^} VkQueryPoolCreateInfo;$/;"	t	typeref:struct:VkQueryPoolCreateInfo
VkQueryPoolCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkQueryPoolCreateFlags           flags;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryPoolCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryPoolCreateInfo::pipelineStatistics	lib/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryPoolCreateInfo::queryCount	lib/vulkan/vulkan.h	/^    uint32_t                         queryCount;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryPoolCreateInfo::queryType	lib/vulkan/vulkan.h	/^    VkQueryType                      queryType;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryPoolCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
VkQueryResultFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkQueryResultFlagBits {$/;"	g
VkQueryResultFlagBits	lib/vulkan/vulkan.h	/^} VkQueryResultFlagBits;$/;"	t	typeref:enum:VkQueryResultFlagBits
VkQueryResultFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkQueryResultFlags;$/;"	t
VkQueryType	lib/vulkan/vulkan.h	/^typedef enum VkQueryType {$/;"	g
VkQueryType	lib/vulkan/vulkan.h	/^} VkQueryType;$/;"	t	typeref:enum:VkQueryType
VkQueueFamilyProperties	lib/vulkan/vulkan.h	/^typedef struct VkQueueFamilyProperties {$/;"	s
VkQueueFamilyProperties	lib/vulkan/vulkan.h	/^} VkQueueFamilyProperties;$/;"	t	typeref:struct:VkQueueFamilyProperties
VkQueueFamilyProperties::minImageTransferGranularity	lib/vulkan/vulkan.h	/^    VkExtent3D      minImageTransferGranularity;$/;"	m	struct:VkQueueFamilyProperties	access:public
VkQueueFamilyProperties::queueCount	lib/vulkan/vulkan.h	/^    uint32_t        queueCount;$/;"	m	struct:VkQueueFamilyProperties	access:public
VkQueueFamilyProperties::queueFlags	lib/vulkan/vulkan.h	/^    VkQueueFlags    queueFlags;$/;"	m	struct:VkQueueFamilyProperties	access:public
VkQueueFamilyProperties::timestampValidBits	lib/vulkan/vulkan.h	/^    uint32_t        timestampValidBits;$/;"	m	struct:VkQueueFamilyProperties	access:public
VkQueueFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkQueueFlagBits {$/;"	g
VkQueueFlagBits	lib/vulkan/vulkan.h	/^} VkQueueFlagBits;$/;"	t	typeref:enum:VkQueueFlagBits
VkQueueFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkQueueFlags;$/;"	t
VkRasterizationOrderAMD	lib/vulkan/vulkan.h	/^typedef enum VkRasterizationOrderAMD {$/;"	g
VkRasterizationOrderAMD	lib/vulkan/vulkan.h	/^} VkRasterizationOrderAMD;$/;"	t	typeref:enum:VkRasterizationOrderAMD
VkRect2D	lib/vulkan/vulkan.h	/^typedef struct VkRect2D {$/;"	s
VkRect2D	lib/vulkan/vulkan.h	/^} VkRect2D;$/;"	t	typeref:struct:VkRect2D
VkRect2D::extent	lib/vulkan/vulkan.h	/^    VkExtent2D    extent;$/;"	m	struct:VkRect2D	access:public
VkRect2D::offset	lib/vulkan/vulkan.h	/^    VkOffset2D    offset;$/;"	m	struct:VkRect2D	access:public
VkRenderPassBeginInfo	lib/vulkan/vulkan.h	/^typedef struct VkRenderPassBeginInfo {$/;"	s
VkRenderPassBeginInfo	lib/vulkan/vulkan.h	/^} VkRenderPassBeginInfo;$/;"	t	typeref:struct:VkRenderPassBeginInfo
VkRenderPassBeginInfo::clearValueCount	lib/vulkan/vulkan.h	/^    uint32_t               clearValueCount;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::framebuffer	lib/vulkan/vulkan.h	/^    VkFramebuffer          framebuffer;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::pClearValues	lib/vulkan/vulkan.h	/^    const VkClearValue*    pClearValues;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::pNext	lib/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::renderArea	lib/vulkan/vulkan.h	/^    VkRect2D               renderArea;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass           renderPass;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassBeginInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkRenderPassBeginInfo	access:public
VkRenderPassCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkRenderPassCreateFlags;$/;"	t
VkRenderPassCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkRenderPassCreateInfo {$/;"	s
VkRenderPassCreateInfo	lib/vulkan/vulkan.h	/^} VkRenderPassCreateInfo;$/;"	t	typeref:struct:VkRenderPassCreateInfo
VkRenderPassCreateInfo::attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                          attachmentCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::dependencyCount	lib/vulkan/vulkan.h	/^    uint32_t                          dependencyCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkRenderPassCreateFlags           flags;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::pAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentDescription*    pAttachments;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::pDependencies	lib/vulkan/vulkan.h	/^    const VkSubpassDependency*        pDependencies;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::pSubpasses	lib/vulkan/vulkan.h	/^    const VkSubpassDescription*       pSubpasses;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkRenderPassCreateInfo::subpassCount	lib/vulkan/vulkan.h	/^    uint32_t                          subpassCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
VkResult	lib/vulkan/vulkan.h	/^typedef enum VkResult {$/;"	g
VkResult	lib/vulkan/vulkan.h	/^} VkResult;$/;"	t	typeref:enum:VkResult
VkSampleCountFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkSampleCountFlagBits {$/;"	g
VkSampleCountFlagBits	lib/vulkan/vulkan.h	/^} VkSampleCountFlagBits;$/;"	t	typeref:enum:VkSampleCountFlagBits
VkSampleCountFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSampleCountFlags;$/;"	t
VkSampleMask	lib/vulkan/vulkan.h	/^typedef uint32_t VkSampleMask;$/;"	t
VkSamplerAddressMode	lib/vulkan/vulkan.h	/^typedef enum VkSamplerAddressMode {$/;"	g
VkSamplerAddressMode	lib/vulkan/vulkan.h	/^} VkSamplerAddressMode;$/;"	t	typeref:enum:VkSamplerAddressMode
VkSamplerCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSamplerCreateFlags;$/;"	t
VkSamplerCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkSamplerCreateInfo {$/;"	s
VkSamplerCreateInfo	lib/vulkan/vulkan.h	/^} VkSamplerCreateInfo;$/;"	t	typeref:struct:VkSamplerCreateInfo
VkSamplerCreateInfo::addressModeU	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeU;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::addressModeV	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeV;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::addressModeW	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeW;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::anisotropyEnable	lib/vulkan/vulkan.h	/^    VkBool32                anisotropyEnable;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::borderColor	lib/vulkan/vulkan.h	/^    VkBorderColor           borderColor;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::compareEnable	lib/vulkan/vulkan.h	/^    VkBool32                compareEnable;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::compareOp	lib/vulkan/vulkan.h	/^    VkCompareOp             compareOp;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkSamplerCreateFlags    flags;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::magFilter	lib/vulkan/vulkan.h	/^    VkFilter                magFilter;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::maxAnisotropy	lib/vulkan/vulkan.h	/^    float                   maxAnisotropy;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::maxLod	lib/vulkan/vulkan.h	/^    float                   maxLod;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::minFilter	lib/vulkan/vulkan.h	/^    VkFilter                minFilter;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::minLod	lib/vulkan/vulkan.h	/^    float                   minLod;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::mipLodBias	lib/vulkan/vulkan.h	/^    float                   mipLodBias;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::mipmapMode	lib/vulkan/vulkan.h	/^    VkSamplerMipmapMode     mipmapMode;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerCreateInfo::unnormalizedCoordinates	lib/vulkan/vulkan.h	/^    VkBool32                unnormalizedCoordinates;$/;"	m	struct:VkSamplerCreateInfo	access:public
VkSamplerMipmapMode	lib/vulkan/vulkan.h	/^typedef enum VkSamplerMipmapMode {$/;"	g
VkSamplerMipmapMode	lib/vulkan/vulkan.h	/^} VkSamplerMipmapMode;$/;"	t	typeref:enum:VkSamplerMipmapMode
VkSemaphoreCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSemaphoreCreateFlags;$/;"	t
VkSemaphoreCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkSemaphoreCreateInfo {$/;"	s
VkSemaphoreCreateInfo	lib/vulkan/vulkan.h	/^} VkSemaphoreCreateInfo;$/;"	t	typeref:struct:VkSemaphoreCreateInfo
VkSemaphoreCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkSemaphoreCreateFlags    flags;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
VkSemaphoreCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*               pNext;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
VkSemaphoreCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType           sType;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
VkShaderModuleCreateFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkShaderModuleCreateFlags;$/;"	t
VkShaderModuleCreateInfo	lib/vulkan/vulkan.h	/^typedef struct VkShaderModuleCreateInfo {$/;"	s
VkShaderModuleCreateInfo	lib/vulkan/vulkan.h	/^} VkShaderModuleCreateInfo;$/;"	t	typeref:struct:VkShaderModuleCreateInfo
VkShaderModuleCreateInfo::codeSize	lib/vulkan/vulkan.h	/^    size_t                       codeSize;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
VkShaderModuleCreateInfo::flags	lib/vulkan/vulkan.h	/^    VkShaderModuleCreateFlags    flags;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
VkShaderModuleCreateInfo::pCode	lib/vulkan/vulkan.h	/^    const uint32_t*              pCode;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
VkShaderModuleCreateInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                  pNext;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
VkShaderModuleCreateInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType              sType;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
VkShaderStageFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkShaderStageFlagBits {$/;"	g
VkShaderStageFlagBits	lib/vulkan/vulkan.h	/^} VkShaderStageFlagBits;$/;"	t	typeref:enum:VkShaderStageFlagBits
VkShaderStageFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkShaderStageFlags;$/;"	t
VkSharingMode	lib/vulkan/vulkan.h	/^typedef enum VkSharingMode {$/;"	g
VkSharingMode	lib/vulkan/vulkan.h	/^} VkSharingMode;$/;"	t	typeref:enum:VkSharingMode
VkSparseBufferMemoryBindInfo	lib/vulkan/vulkan.h	/^typedef struct VkSparseBufferMemoryBindInfo {$/;"	s
VkSparseBufferMemoryBindInfo	lib/vulkan/vulkan.h	/^} VkSparseBufferMemoryBindInfo;$/;"	t	typeref:struct:VkSparseBufferMemoryBindInfo
VkSparseBufferMemoryBindInfo::bindCount	lib/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
VkSparseBufferMemoryBindInfo::buffer	lib/vulkan/vulkan.h	/^    VkBuffer                     buffer;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
VkSparseBufferMemoryBindInfo::pBinds	lib/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
VkSparseImageFormatFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkSparseImageFormatFlagBits {$/;"	g
VkSparseImageFormatFlagBits	lib/vulkan/vulkan.h	/^} VkSparseImageFormatFlagBits;$/;"	t	typeref:enum:VkSparseImageFormatFlagBits
VkSparseImageFormatFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSparseImageFormatFlags;$/;"	t
VkSparseImageFormatProperties	lib/vulkan/vulkan.h	/^typedef struct VkSparseImageFormatProperties {$/;"	s
VkSparseImageFormatProperties	lib/vulkan/vulkan.h	/^} VkSparseImageFormatProperties;$/;"	t	typeref:struct:VkSparseImageFormatProperties
VkSparseImageFormatProperties::aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags          aspectMask;$/;"	m	struct:VkSparseImageFormatProperties	access:public
VkSparseImageFormatProperties::flags	lib/vulkan/vulkan.h	/^    VkSparseImageFormatFlags    flags;$/;"	m	struct:VkSparseImageFormatProperties	access:public
VkSparseImageFormatProperties::imageGranularity	lib/vulkan/vulkan.h	/^    VkExtent3D                  imageGranularity;$/;"	m	struct:VkSparseImageFormatProperties	access:public
VkSparseImageMemoryBind	lib/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryBind {$/;"	s
VkSparseImageMemoryBind	lib/vulkan/vulkan.h	/^} VkSparseImageMemoryBind;$/;"	t	typeref:struct:VkSparseImageMemoryBind
VkSparseImageMemoryBind::extent	lib/vulkan/vulkan.h	/^    VkExtent3D                 extent;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBind::flags	lib/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBind::memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBind::memoryOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBind::offset	lib/vulkan/vulkan.h	/^    VkOffset3D                 offset;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBind::subresource	lib/vulkan/vulkan.h	/^    VkImageSubresource         subresource;$/;"	m	struct:VkSparseImageMemoryBind	access:public
VkSparseImageMemoryBindInfo	lib/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryBindInfo {$/;"	s
VkSparseImageMemoryBindInfo	lib/vulkan/vulkan.h	/^} VkSparseImageMemoryBindInfo;$/;"	t	typeref:struct:VkSparseImageMemoryBindInfo
VkSparseImageMemoryBindInfo::bindCount	lib/vulkan/vulkan.h	/^    uint32_t                          bindCount;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
VkSparseImageMemoryBindInfo::image	lib/vulkan/vulkan.h	/^    VkImage                           image;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
VkSparseImageMemoryBindInfo::pBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
VkSparseImageMemoryRequirements	lib/vulkan/vulkan.h	/^typedef struct VkSparseImageMemoryRequirements {$/;"	s
VkSparseImageMemoryRequirements	lib/vulkan/vulkan.h	/^} VkSparseImageMemoryRequirements;$/;"	t	typeref:struct:VkSparseImageMemoryRequirements
VkSparseImageMemoryRequirements::formatProperties	lib/vulkan/vulkan.h	/^    VkSparseImageFormatProperties    formatProperties;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
VkSparseImageMemoryRequirements::imageMipTailFirstLod	lib/vulkan/vulkan.h	/^    uint32_t                         imageMipTailFirstLod;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
VkSparseImageMemoryRequirements::imageMipTailOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailOffset;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
VkSparseImageMemoryRequirements::imageMipTailSize	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailSize;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
VkSparseImageMemoryRequirements::imageMipTailStride	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailStride;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
VkSparseImageOpaqueMemoryBindInfo	lib/vulkan/vulkan.h	/^typedef struct VkSparseImageOpaqueMemoryBindInfo {$/;"	s
VkSparseImageOpaqueMemoryBindInfo	lib/vulkan/vulkan.h	/^} VkSparseImageOpaqueMemoryBindInfo;$/;"	t	typeref:struct:VkSparseImageOpaqueMemoryBindInfo
VkSparseImageOpaqueMemoryBindInfo::bindCount	lib/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
VkSparseImageOpaqueMemoryBindInfo::image	lib/vulkan/vulkan.h	/^    VkImage                      image;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
VkSparseImageOpaqueMemoryBindInfo::pBinds	lib/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
VkSparseMemoryBind	lib/vulkan/vulkan.h	/^typedef struct VkSparseMemoryBind {$/;"	s
VkSparseMemoryBind	lib/vulkan/vulkan.h	/^} VkSparseMemoryBind;$/;"	t	typeref:struct:VkSparseMemoryBind
VkSparseMemoryBind::flags	lib/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseMemoryBind	access:public
VkSparseMemoryBind::memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseMemoryBind	access:public
VkSparseMemoryBind::memoryOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseMemoryBind	access:public
VkSparseMemoryBind::resourceOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               resourceOffset;$/;"	m	struct:VkSparseMemoryBind	access:public
VkSparseMemoryBind::size	lib/vulkan/vulkan.h	/^    VkDeviceSize               size;$/;"	m	struct:VkSparseMemoryBind	access:public
VkSparseMemoryBindFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkSparseMemoryBindFlagBits {$/;"	g
VkSparseMemoryBindFlagBits	lib/vulkan/vulkan.h	/^} VkSparseMemoryBindFlagBits;$/;"	t	typeref:enum:VkSparseMemoryBindFlagBits
VkSparseMemoryBindFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSparseMemoryBindFlags;$/;"	t
VkSpecializationInfo	lib/vulkan/vulkan.h	/^typedef struct VkSpecializationInfo {$/;"	s
VkSpecializationInfo	lib/vulkan/vulkan.h	/^} VkSpecializationInfo;$/;"	t	typeref:struct:VkSpecializationInfo
VkSpecializationInfo::dataSize	lib/vulkan/vulkan.h	/^    size_t                             dataSize;$/;"	m	struct:VkSpecializationInfo	access:public
VkSpecializationInfo::mapEntryCount	lib/vulkan/vulkan.h	/^    uint32_t                           mapEntryCount;$/;"	m	struct:VkSpecializationInfo	access:public
VkSpecializationInfo::pData	lib/vulkan/vulkan.h	/^    const void*                        pData;$/;"	m	struct:VkSpecializationInfo	access:public
VkSpecializationInfo::pMapEntries	lib/vulkan/vulkan.h	/^    const VkSpecializationMapEntry*    pMapEntries;$/;"	m	struct:VkSpecializationInfo	access:public
VkSpecializationMapEntry	lib/vulkan/vulkan.h	/^typedef struct VkSpecializationMapEntry {$/;"	s
VkSpecializationMapEntry	lib/vulkan/vulkan.h	/^} VkSpecializationMapEntry;$/;"	t	typeref:struct:VkSpecializationMapEntry
VkSpecializationMapEntry::constantID	lib/vulkan/vulkan.h	/^    uint32_t    constantID;$/;"	m	struct:VkSpecializationMapEntry	access:public
VkSpecializationMapEntry::offset	lib/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkSpecializationMapEntry	access:public
VkSpecializationMapEntry::size	lib/vulkan/vulkan.h	/^    size_t      size;$/;"	m	struct:VkSpecializationMapEntry	access:public
VkStencilFaceFlagBits	lib/vulkan/vulkan.h	/^typedef enum VkStencilFaceFlagBits {$/;"	g
VkStencilFaceFlagBits	lib/vulkan/vulkan.h	/^} VkStencilFaceFlagBits;$/;"	t	typeref:enum:VkStencilFaceFlagBits
VkStencilFaceFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkStencilFaceFlags;$/;"	t
VkStencilOp	lib/vulkan/vulkan.h	/^typedef enum VkStencilOp {$/;"	g
VkStencilOp	lib/vulkan/vulkan.h	/^} VkStencilOp;$/;"	t	typeref:enum:VkStencilOp
VkStencilOpState	lib/vulkan/vulkan.h	/^typedef struct VkStencilOpState {$/;"	s
VkStencilOpState	lib/vulkan/vulkan.h	/^} VkStencilOpState;$/;"	t	typeref:struct:VkStencilOpState
VkStencilOpState::compareMask	lib/vulkan/vulkan.h	/^    uint32_t       compareMask;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::compareOp	lib/vulkan/vulkan.h	/^    VkCompareOp    compareOp;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::depthFailOp	lib/vulkan/vulkan.h	/^    VkStencilOp    depthFailOp;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::failOp	lib/vulkan/vulkan.h	/^    VkStencilOp    failOp;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::passOp	lib/vulkan/vulkan.h	/^    VkStencilOp    passOp;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::reference	lib/vulkan/vulkan.h	/^    uint32_t       reference;$/;"	m	struct:VkStencilOpState	access:public
VkStencilOpState::writeMask	lib/vulkan/vulkan.h	/^    uint32_t       writeMask;$/;"	m	struct:VkStencilOpState	access:public
VkStructureType	lib/vulkan/vulkan.h	/^typedef enum VkStructureType {$/;"	g
VkStructureType	lib/vulkan/vulkan.h	/^} VkStructureType;$/;"	t	typeref:enum:VkStructureType
VkSubmitInfo	lib/vulkan/vulkan.h	/^typedef struct VkSubmitInfo {$/;"	s
VkSubmitInfo	lib/vulkan/vulkan.h	/^} VkSubmitInfo;$/;"	t	typeref:struct:VkSubmitInfo
VkSubmitInfo::commandBufferCount	lib/vulkan/vulkan.h	/^    uint32_t                       commandBufferCount;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::pCommandBuffers	lib/vulkan/vulkan.h	/^    const VkCommandBuffer*         pCommandBuffers;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::pSignalSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*             pSignalSemaphores;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::pWaitDstStageMask	lib/vulkan/vulkan.h	/^    const VkPipelineStageFlags*    pWaitDstStageMask;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*             pWaitSemaphores;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::signalSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                       signalSemaphoreCount;$/;"	m	struct:VkSubmitInfo	access:public
VkSubmitInfo::waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                       waitSemaphoreCount;$/;"	m	struct:VkSubmitInfo	access:public
VkSubpassContents	lib/vulkan/vulkan.h	/^typedef enum VkSubpassContents {$/;"	g
VkSubpassContents	lib/vulkan/vulkan.h	/^} VkSubpassContents;$/;"	t	typeref:enum:VkSubpassContents
VkSubpassDependency	lib/vulkan/vulkan.h	/^typedef struct VkSubpassDependency {$/;"	s
VkSubpassDependency	lib/vulkan/vulkan.h	/^} VkSubpassDependency;$/;"	t	typeref:struct:VkSubpassDependency
VkSubpassDependency::dependencyFlags	lib/vulkan/vulkan.h	/^    VkDependencyFlags       dependencyFlags;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags           dstAccessMask;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::dstStageMask	lib/vulkan/vulkan.h	/^    VkPipelineStageFlags    dstStageMask;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::dstSubpass	lib/vulkan/vulkan.h	/^    uint32_t                dstSubpass;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags           srcAccessMask;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::srcStageMask	lib/vulkan/vulkan.h	/^    VkPipelineStageFlags    srcStageMask;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDependency::srcSubpass	lib/vulkan/vulkan.h	/^    uint32_t                srcSubpass;$/;"	m	struct:VkSubpassDependency	access:public
VkSubpassDescription	lib/vulkan/vulkan.h	/^typedef struct VkSubpassDescription {$/;"	s
VkSubpassDescription	lib/vulkan/vulkan.h	/^} VkSubpassDescription;$/;"	t	typeref:struct:VkSubpassDescription
VkSubpassDescription::colorAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        colorAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::flags	lib/vulkan/vulkan.h	/^    VkSubpassDescriptionFlags       flags;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::inputAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        inputAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pColorAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pColorAttachments;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pDepthStencilAttachment	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pDepthStencilAttachment;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pInputAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pInputAttachments;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pPreserveAttachments	lib/vulkan/vulkan.h	/^    const uint32_t*                 pPreserveAttachments;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pResolveAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pResolveAttachments;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::pipelineBindPoint	lib/vulkan/vulkan.h	/^    VkPipelineBindPoint             pipelineBindPoint;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescription::preserveAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        preserveAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
VkSubpassDescriptionFlags	lib/vulkan/vulkan.h	/^typedef VkFlags VkSubpassDescriptionFlags;$/;"	t
VkSubresourceLayout	lib/vulkan/vulkan.h	/^typedef struct VkSubresourceLayout {$/;"	s
VkSubresourceLayout	lib/vulkan/vulkan.h	/^} VkSubresourceLayout;$/;"	t	typeref:struct:VkSubresourceLayout
VkSubresourceLayout::arrayPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    arrayPitch;$/;"	m	struct:VkSubresourceLayout	access:public
VkSubresourceLayout::depthPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    depthPitch;$/;"	m	struct:VkSubresourceLayout	access:public
VkSubresourceLayout::offset	lib/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkSubresourceLayout	access:public
VkSubresourceLayout::rowPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    rowPitch;$/;"	m	struct:VkSubresourceLayout	access:public
VkSubresourceLayout::size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkSubresourceLayout	access:public
VkSurfaceCapabilitiesKHR	lib/vulkan/vulkan.h	/^typedef struct VkSurfaceCapabilitiesKHR {$/;"	s
VkSurfaceCapabilitiesKHR	lib/vulkan/vulkan.h	/^} VkSurfaceCapabilitiesKHR;$/;"	t	typeref:struct:VkSurfaceCapabilitiesKHR
VkSurfaceCapabilitiesKHR::currentExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       currentExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::currentTransform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    currentTransform;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::maxImageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                         maxImageArrayLayers;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::maxImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         maxImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::maxImageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       maxImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::minImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::minImageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       minImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::supportedCompositeAlpha	lib/vulkan/vulkan.h	/^    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::supportedTransforms	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR       supportedTransforms;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceCapabilitiesKHR::supportedUsageFlags	lib/vulkan/vulkan.h	/^    VkImageUsageFlags                supportedUsageFlags;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
VkSurfaceFormatKHR	lib/vulkan/vulkan.h	/^typedef struct VkSurfaceFormatKHR {$/;"	s
VkSurfaceFormatKHR	lib/vulkan/vulkan.h	/^} VkSurfaceFormatKHR;$/;"	t	typeref:struct:VkSurfaceFormatKHR
VkSurfaceFormatKHR::colorSpace	lib/vulkan/vulkan.h	/^    VkColorSpaceKHR    colorSpace;$/;"	m	struct:VkSurfaceFormatKHR	access:public
VkSurfaceFormatKHR::format	lib/vulkan/vulkan.h	/^    VkFormat           format;$/;"	m	struct:VkSurfaceFormatKHR	access:public
VkSurfaceTransformFlagBitsKHR	lib/vulkan/vulkan.h	/^typedef enum VkSurfaceTransformFlagBitsKHR {$/;"	g
VkSurfaceTransformFlagBitsKHR	lib/vulkan/vulkan.h	/^} VkSurfaceTransformFlagBitsKHR;$/;"	t	typeref:enum:VkSurfaceTransformFlagBitsKHR
VkSurfaceTransformFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkSurfaceTransformFlagsKHR;$/;"	t
VkSwapchainCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkSwapchainCreateFlagsKHR;$/;"	t
VkSwapchainCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkSwapchainCreateInfoKHR {$/;"	s
VkSwapchainCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkSwapchainCreateInfoKHR;$/;"	t	typeref:struct:VkSwapchainCreateInfoKHR
VkSwapchainCreateInfoKHR::clipped	lib/vulkan/vulkan.h	/^    VkBool32                         clipped;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::compositeAlpha	lib/vulkan/vulkan.h	/^    VkCompositeAlphaFlagBitsKHR      compositeAlpha;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkSwapchainCreateFlagsKHR        flags;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                         imageArrayLayers;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageColorSpace	lib/vulkan/vulkan.h	/^    VkColorSpaceKHR                  imageColorSpace;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       imageExtent;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageFormat	lib/vulkan/vulkan.h	/^    VkFormat                         imageFormat;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageSharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode                    imageSharingMode;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::imageUsage	lib/vulkan/vulkan.h	/^    VkImageUsageFlags                imageUsage;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::minImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::oldSwapchain	lib/vulkan/vulkan.h	/^    VkSwapchainKHR                   oldSwapchain;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*                  pQueueFamilyIndices;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::preTransform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    preTransform;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::presentMode	lib/vulkan/vulkan.h	/^    VkPresentModeKHR                 presentMode;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t                         queueFamilyIndexCount;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSwapchainCreateInfoKHR::surface	lib/vulkan/vulkan.h	/^    VkSurfaceKHR                     surface;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
VkSystemAllocationScope	lib/vulkan/vulkan.h	/^typedef enum VkSystemAllocationScope {$/;"	g
VkSystemAllocationScope	lib/vulkan/vulkan.h	/^} VkSystemAllocationScope;$/;"	t	typeref:enum:VkSystemAllocationScope
VkVertexInputAttributeDescription	lib/vulkan/vulkan.h	/^typedef struct VkVertexInputAttributeDescription {$/;"	s
VkVertexInputAttributeDescription	lib/vulkan/vulkan.h	/^} VkVertexInputAttributeDescription;$/;"	t	typeref:struct:VkVertexInputAttributeDescription
VkVertexInputAttributeDescription::binding	lib/vulkan/vulkan.h	/^    uint32_t    binding;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
VkVertexInputAttributeDescription::format	lib/vulkan/vulkan.h	/^    VkFormat    format;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
VkVertexInputAttributeDescription::location	lib/vulkan/vulkan.h	/^    uint32_t    location;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
VkVertexInputAttributeDescription::offset	lib/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
VkVertexInputBindingDescription	lib/vulkan/vulkan.h	/^typedef struct VkVertexInputBindingDescription {$/;"	s
VkVertexInputBindingDescription	lib/vulkan/vulkan.h	/^} VkVertexInputBindingDescription;$/;"	t	typeref:struct:VkVertexInputBindingDescription
VkVertexInputBindingDescription::binding	lib/vulkan/vulkan.h	/^    uint32_t             binding;$/;"	m	struct:VkVertexInputBindingDescription	access:public
VkVertexInputBindingDescription::inputRate	lib/vulkan/vulkan.h	/^    VkVertexInputRate    inputRate;$/;"	m	struct:VkVertexInputBindingDescription	access:public
VkVertexInputBindingDescription::stride	lib/vulkan/vulkan.h	/^    uint32_t             stride;$/;"	m	struct:VkVertexInputBindingDescription	access:public
VkVertexInputRate	lib/vulkan/vulkan.h	/^typedef enum VkVertexInputRate {$/;"	g
VkVertexInputRate	lib/vulkan/vulkan.h	/^} VkVertexInputRate;$/;"	t	typeref:enum:VkVertexInputRate
VkViewport	lib/vulkan/vulkan.h	/^typedef struct VkViewport {$/;"	s
VkViewport	lib/vulkan/vulkan.h	/^} VkViewport;$/;"	t	typeref:struct:VkViewport
VkViewport::height	lib/vulkan/vulkan.h	/^    float    height;$/;"	m	struct:VkViewport	access:public
VkViewport::maxDepth	lib/vulkan/vulkan.h	/^    float    maxDepth;$/;"	m	struct:VkViewport	access:public
VkViewport::minDepth	lib/vulkan/vulkan.h	/^    float    minDepth;$/;"	m	struct:VkViewport	access:public
VkViewport::width	lib/vulkan/vulkan.h	/^    float    width;$/;"	m	struct:VkViewport	access:public
VkViewport::x	lib/vulkan/vulkan.h	/^    float    x;$/;"	m	struct:VkViewport	access:public
VkViewport::y	lib/vulkan/vulkan.h	/^    float    y;$/;"	m	struct:VkViewport	access:public
VkWaylandSurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;$/;"	t
VkWaylandSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkWaylandSurfaceCreateInfoKHR {$/;"	s
VkWaylandSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkWaylandSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWaylandSurfaceCreateInfoKHR
VkWaylandSurfaceCreateInfoKHR::display	lib/vulkan/vulkan.h	/^    struct wl_display*                display;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_display	access:public
VkWaylandSurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkWaylandSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
VkWaylandSurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
VkWaylandSurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
VkWaylandSurfaceCreateInfoKHR::surface	lib/vulkan/vulkan.h	/^    struct wl_surface*                surface;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_surface	access:public
VkWin32SurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkWin32SurfaceCreateFlagsKHR;$/;"	t
VkWin32SurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkWin32SurfaceCreateInfoKHR {$/;"	s
VkWin32SurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkWin32SurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkWin32SurfaceCreateInfoKHR
VkWin32SurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkWin32SurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
VkWin32SurfaceCreateInfoKHR::hinstance	lib/vulkan/vulkan.h	/^    HINSTANCE                       hinstance;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
VkWin32SurfaceCreateInfoKHR::hwnd	lib/vulkan/vulkan.h	/^    HWND                            hwnd;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
VkWin32SurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
VkWin32SurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
VkWriteDescriptorSet	lib/vulkan/vulkan.h	/^typedef struct VkWriteDescriptorSet {$/;"	s
VkWriteDescriptorSet	lib/vulkan/vulkan.h	/^} VkWriteDescriptorSet;$/;"	t	typeref:struct:VkWriteDescriptorSet
VkWriteDescriptorSet::descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t                         descriptorCount;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::descriptorType	lib/vulkan/vulkan.h	/^    VkDescriptorType                 descriptorType;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::dstArrayElement	lib/vulkan/vulkan.h	/^    uint32_t                         dstArrayElement;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::dstBinding	lib/vulkan/vulkan.h	/^    uint32_t                         dstBinding;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::dstSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet                  dstSet;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::pBufferInfo	lib/vulkan/vulkan.h	/^    const VkDescriptorBufferInfo*    pBufferInfo;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::pImageInfo	lib/vulkan/vulkan.h	/^    const VkDescriptorImageInfo*     pImageInfo;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::pTexelBufferView	lib/vulkan/vulkan.h	/^    const VkBufferView*              pTexelBufferView;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkWriteDescriptorSet::sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkWriteDescriptorSet	access:public
VkXcbSurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkXcbSurfaceCreateFlagsKHR;$/;"	t
VkXcbSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkXcbSurfaceCreateInfoKHR {$/;"	s
VkXcbSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkXcbSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXcbSurfaceCreateInfoKHR
VkXcbSurfaceCreateInfoKHR::connection	lib/vulkan/vulkan.h	/^    xcb_connection_t*             connection;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
VkXcbSurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkXcbSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
VkXcbSurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
VkXcbSurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
VkXcbSurfaceCreateInfoKHR::window	lib/vulkan/vulkan.h	/^    xcb_window_t                  window;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
VkXlibSurfaceCreateFlagsKHR	lib/vulkan/vulkan.h	/^typedef VkFlags VkXlibSurfaceCreateFlagsKHR;$/;"	t
VkXlibSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^typedef struct VkXlibSurfaceCreateInfoKHR {$/;"	s
VkXlibSurfaceCreateInfoKHR	lib/vulkan/vulkan.h	/^} VkXlibSurfaceCreateInfoKHR;$/;"	t	typeref:struct:VkXlibSurfaceCreateInfoKHR
VkXlibSurfaceCreateInfoKHR::dpy	lib/vulkan/vulkan.h	/^    Display*                       dpy;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
VkXlibSurfaceCreateInfoKHR::flags	lib/vulkan/vulkan.h	/^    VkXlibSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
VkXlibSurfaceCreateInfoKHR::pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
VkXlibSurfaceCreateInfoKHR::sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
VkXlibSurfaceCreateInfoKHR::window	lib/vulkan/vulkan.h	/^    Window                         window;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
VulkanUtils	inc/vulkan_utils.h	/^class VulkanUtils {$/;"	c
VulkanUtils::getVkResultString	src/vulkan_utils.cpp	/^const char* VulkanUtils::getVkResultString(VkResult result)$/;"	f	class:VulkanUtils	signature:(VkResult result)
VulkanUtils::getVkResultString	src/vulkan_utils.cpp	/^const char* VulkanUtils::getVkResultString(int result)$/;"	f	class:VulkanUtils	signature:(int result)
WCHAR_MAX	lib/__assimp/Compiler/pstdint.h	730;"	d
WCHAR_MAX	lib/assimp/Compiler/pstdint.h	696;"	d
WCHAR_MIN	lib/__assimp/Compiler/pstdint.h	727;"	d
WCHAR_MIN	lib/assimp/Compiler/pstdint.h	693;"	d
WaitForFences	lib/vulkan/vk_layer.h	/^    PFN_vkWaitForFences WaitForFences;$/;"	m	struct:VkLayerDispatchTable_	access:public
Warn	lib/__assimp/Logger.hpp	/^        Warn        = 4,    \/\/!< Warn log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Warn	lib/assimp/Logger.hpp	/^        Warn        = 4,    \/\/!< Warn log message$/;"	e	enum:Assimp::Logger::ErrorSeverity
Window	inc/window.h	/^class Window {$/;"	c
Window	src/window.cpp	/^Window::Window():$/;"	f	class:Window	signature:()
Window	src/window.cpp	/^Window::Window(uint32_t w, uint32_t h):$/;"	f	class:Window	signature:(uint32_t w, uint32_t h)
Window::Window	src/window.cpp	/^Window::Window():$/;"	f	class:Window	signature:()
Window::Window	src/window.cpp	/^Window::Window(uint32_t w, uint32_t h):$/;"	f	class:Window	signature:(uint32_t w, uint32_t h)
Window::androidNativeWindow	inc/window.h	/^	ANativeWindow* androidNativeWindow;$/;"	m	class:Window	access:public
Window::calcAspect	src/window.cpp	/^void Window::calcAspect() $/;"	f	class:Window	signature:()
Window::getAspect	src/window.cpp	/^float Window::getAspect() const$/;"	f	class:Window	signature:() const
Window::getHeight	src/window.cpp	/^unsigned Window::getHeight() const $/;"	f	class:Window	signature:() const
Window::getInputManager	src/window.cpp	/^InputManager& Window::getInputManager()$/;"	f	class:Window	signature:()
Window::getWidth	src/window.cpp	/^unsigned Window::getWidth() const  $/;"	f	class:Window	signature:() const
Window::initWindow	src/window.cpp	/^void Window::initWindow(Engine& engine)$/;"	f	class:Window	signature:(Engine& engine)
Window::isOpen	src/window.cpp	/^bool Window::isOpen()$/;"	f	class:Window	signature:()
Window::mAspect	inc/window.h	/^	float mAspect;$/;"	m	class:Window	access:private
Window::mGlfwWindow	inc/window.h	/^	GLFWwindow* mGlfwWindow;$/;"	m	class:Window	access:public
Window::mHeight	inc/window.h	/^	unsigned mWidth, mHeight;$/;"	m	class:Window	access:private
Window::mInputManager	inc/window.h	/^	InputManager mInputManager;$/;"	m	class:Window	access:private
Window::mWidth	inc/window.h	/^	unsigned mWidth, mHeight;$/;"	m	class:Window	access:private
Window::setDimens	src/window.cpp	/^void Window::setDimens(uint32_t w, uint32_t h) $/;"	f	class:Window	signature:(uint32_t w, uint32_t h)
Window::setHeight	src/window.cpp	/^void Window::setHeight(uint32_t h) $/;"	f	class:Window	signature:(uint32_t h)
Window::setWidth	src/window.cpp	/^void Window::setWidth(uint32_t w) $/;"	f	class:Window	signature:(uint32_t w)
Window::setWindowSizeCallback	src/window.cpp	/^void Window::setWindowSizeCallback(GLFWwindowsizefun f) $/;"	f	class:Window	signature:(GLFWwindowsizefun f)
Window::~Window	src/window.cpp	/^Window::~Window() $/;"	f	class:Window	signature:()
WordCountShift	lib/vulkan/spirv.hpp	/^static const unsigned int WordCountShift = 16;$/;"	m	namespace:spv
WriteProc	lib/__assimp/cfileio.h	/^    aiFileWriteProc WriteProc;$/;"	m	struct:aiFile	access:public
WriteProc	lib/assimp/cfileio.h	/^    aiFileWriteProc WriteProc;$/;"	m	struct:aiFile	access:public
YCbCr_to_RGB_kernel	lib/stb/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon63	access:public
_AI_DLS_ENFORCE_ENUM_SIZE	lib/__assimp/types.h	/^    _AI_DLS_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiDefaultLogStream
_AI_DLS_ENFORCE_ENUM_SIZE	lib/assimp/types.h	/^    _AI_DLS_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiDefaultLogStream
_AI_ENFORCE_ENUM_SIZE	lib/__assimp/types.h	/^    _AI_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiReturn
_AI_ENFORCE_ENUM_SIZE	lib/assimp/types.h	/^    _AI_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiReturn
_AI_MATKEY_MAPPINGMODE_U_BASE	lib/__assimp/material.h	915;"	d
_AI_MATKEY_MAPPINGMODE_U_BASE	lib/assimp/material.h	897;"	d
_AI_MATKEY_MAPPINGMODE_V_BASE	lib/__assimp/material.h	916;"	d
_AI_MATKEY_MAPPINGMODE_V_BASE	lib/assimp/material.h	898;"	d
_AI_MATKEY_MAPPING_BASE	lib/__assimp/material.h	913;"	d
_AI_MATKEY_MAPPING_BASE	lib/assimp/material.h	895;"	d
_AI_MATKEY_TEXBLEND_BASE	lib/__assimp/material.h	914;"	d
_AI_MATKEY_TEXBLEND_BASE	lib/assimp/material.h	896;"	d
_AI_MATKEY_TEXFLAGS_BASE	lib/__assimp/material.h	919;"	d
_AI_MATKEY_TEXFLAGS_BASE	lib/assimp/material.h	901;"	d
_AI_MATKEY_TEXMAP_AXIS_BASE	lib/__assimp/material.h	917;"	d
_AI_MATKEY_TEXMAP_AXIS_BASE	lib/assimp/material.h	899;"	d
_AI_MATKEY_TEXOP_BASE	lib/__assimp/material.h	912;"	d
_AI_MATKEY_TEXOP_BASE	lib/assimp/material.h	894;"	d
_AI_MATKEY_TEXTURE_BASE	lib/__assimp/material.h	910;"	d
_AI_MATKEY_TEXTURE_BASE	lib/assimp/material.h	892;"	d
_AI_MATKEY_UVTRANSFORM_BASE	lib/__assimp/material.h	918;"	d
_AI_MATKEY_UVTRANSFORM_BASE	lib/assimp/material.h	900;"	d
_AI_MATKEY_UVWSRC_BASE	lib/__assimp/material.h	911;"	d
_AI_MATKEY_UVWSRC_BASE	lib/assimp/material.h	893;"	d
_AI_ORIGIN_ENFORCE_ENUM_SIZE	lib/__assimp/types.h	/^    _AI_ORIGIN_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiOrigin
_AI_ORIGIN_ENFORCE_ENUM_SIZE	lib/assimp/types.h	/^    _AI_ORIGIN_ENFORCE_ENUM_SIZE = 0x7fffffff$/;"	e	enum:aiOrigin
_GLM_SWIZZLE2_2_MEMBERS	lib/glm/detail/_swizzle.hpp	300;"	d
_GLM_SWIZZLE2_3_MEMBERS	lib/glm/detail/_swizzle.hpp	306;"	d
_GLM_SWIZZLE2_4_MEMBERS	lib/glm/detail/_swizzle.hpp	316;"	d
_GLM_SWIZZLE3_2_MEMBERS	lib/glm/detail/_swizzle.hpp	334;"	d
_GLM_SWIZZLE3_3_MEMBERS	lib/glm/detail/_swizzle.hpp	345;"	d
_GLM_SWIZZLE3_4_MEMBERS	lib/glm/detail/_swizzle.hpp	374;"	d
_GLM_SWIZZLE4_2_MEMBERS	lib/glm/detail/_swizzle.hpp	457;"	d
_GLM_SWIZZLE4_3_MEMBERS	lib/glm/detail/_swizzle.hpp	475;"	d
_GLM_SWIZZLE4_4_MEMBERS	lib/glm/detail/_swizzle.hpp	541;"	d
_GLM_SWIZZLE_FUNCTION_1_ARGS	lib/glm/detail/_swizzle.hpp	206;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS	lib/glm/detail/_swizzle.hpp	216;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	lib/glm/detail/_swizzle.hpp	241;"	d
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	lib/glm/detail/_swizzle.hpp	191;"	d
_GLM_SWIZZLE_TEMPLATE1	lib/glm/detail/_swizzle.hpp	163;"	d
_GLM_SWIZZLE_TEMPLATE2	lib/glm/detail/_swizzle.hpp	164;"	d
_GLM_SWIZZLE_TYPE1	lib/glm/detail/_swizzle.hpp	165;"	d
_GLM_SWIZZLE_TYPE2	lib/glm/detail/_swizzle.hpp	166;"	d
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	lib/glm/detail/_swizzle.hpp	171;"	d
_PSTDINT_H_INCLUDED	lib/__assimp/Compiler/pstdint.h	202;"	d
_PSTDINT_H_INCLUDED	lib/__assimp/Compiler/pstdint.h	351;"	d
_PSTDINT_H_INCLUDED	lib/__assimp/Compiler/pstdint.h	355;"	d
_PSTDINT_H_INCLUDED	lib/assimp/Compiler/pstdint.h	198;"	d
_PSTDINT_H_INCLUDED	lib/assimp/Compiler/pstdint.h	294;"	d
__AI_LIGHT_H_INC__	lib/assimp/light.h	47;"	d
__AI_METADATA_H_INC__	lib/assimp/metadata.h	46;"	d
__AI_SCENE_H_INC__	lib/assimp/scene.h	46;"	d
__BIG_ENDIAN__	lib/__assimp/defs.h	270;"	d
__BIG_ENDIAN__	lib/__assimp/defs.h	274;"	d
__BIG_ENDIAN__	lib/assimp/defs.h	252;"	d
__BIG_ENDIAN__	lib/assimp/defs.h	256;"	d
__anon59::eof	lib/stb/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon59	access:public
__anon59::read	lib/stb/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon59	access:public
__anon59::skip	lib/stb/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon59	access:public
__anon60::buffer_start	lib/stb/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon60	access:public
__anon60::buflen	lib/stb/stb_image.h	/^   int buflen;$/;"	m	struct:__anon60	access:public
__anon60::img_buffer	lib/stb/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon60	access:public
__anon60::img_buffer_end	lib/stb/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon60	access:public
__anon60::img_buffer_original	lib/stb/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon60	access:public
__anon60::img_buffer_original_end	lib/stb/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon60	access:public
__anon60::img_n	lib/stb/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon60	access:public
__anon60::img_out_n	lib/stb/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon60	access:public
__anon60::img_x	lib/stb/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon60	access:public
__anon60::img_y	lib/stb/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon60	access:public
__anon60::io	lib/stb/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon60	access:public
__anon60::io_user_data	lib/stb/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon60	access:public
__anon60::read_from_callbacks	lib/stb/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon60	access:public
__anon62::code	lib/stb/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon62	access:public
__anon62::delta	lib/stb/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon62	access:public
__anon62::fast	lib/stb/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon62	access:public
__anon62::maxcode	lib/stb/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon62	access:public
__anon62::size	lib/stb/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon62	access:public
__anon62::values	lib/stb/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon62	access:public
__anon63::YCbCr_to_RGB_kernel	lib/stb/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon63	access:public
__anon63::__anon64::coeff	lib/stb/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::coeff_h	lib/stb/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::coeff_w	lib/stb/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::data	lib/stb/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::dc_pred	lib/stb/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::h	lib/stb/stb_image.h	/^      int h,v;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::h2	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::ha	lib/stb/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::hd	lib/stb/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::id	lib/stb/stb_image.h	/^      int id;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::linebuf	lib/stb/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::raw_coeff	lib/stb/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::raw_data	lib/stb/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::tq	lib/stb/stb_image.h	/^      int tq;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::v	lib/stb/stb_image.h	/^      int h,v;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::w2	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::x	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::__anon64::y	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
__anon63::code_bits	lib/stb/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon63	access:public
__anon63::code_buffer	lib/stb/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon63	access:public
__anon63::dequant	lib/stb/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon63	access:public
__anon63::eob_run	lib/stb/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon63	access:public
__anon63::fast_ac	lib/stb/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon63	access:public
__anon63::huff_ac	lib/stb/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon63	access:public
__anon63::huff_dc	lib/stb/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon63	access:public
__anon63::idct_block_kernel	lib/stb/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon63	access:public
__anon63::img_comp	lib/stb/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon63	typeref:struct:__anon63::__anon64	access:public
__anon63::img_h_max	lib/stb/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon63	access:public
__anon63::img_mcu_h	lib/stb/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon63	access:public
__anon63::img_mcu_w	lib/stb/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon63	access:public
__anon63::img_mcu_x	lib/stb/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon63	access:public
__anon63::img_mcu_y	lib/stb/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon63	access:public
__anon63::img_v_max	lib/stb/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon63	access:public
__anon63::marker	lib/stb/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon63	access:public
__anon63::nomore	lib/stb/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon63	access:public
__anon63::order	lib/stb/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon63	access:public
__anon63::progressive	lib/stb/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon63	access:public
__anon63::resample_row_hv_2_kernel	lib/stb/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon63	access:public
__anon63::restart_interval	lib/stb/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon63	access:public
__anon63::rgb	lib/stb/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon63	access:public
__anon63::s	lib/stb/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon63	access:public
__anon63::scan_n	lib/stb/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon63	access:public
__anon63::spec_end	lib/stb/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon63	access:public
__anon63::spec_start	lib/stb/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon63	access:public
__anon63::succ_high	lib/stb/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon63	access:public
__anon63::succ_low	lib/stb/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon63	access:public
__anon63::todo	lib/stb/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon63	access:public
__anon65::hs	lib/stb/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon65	access:public
__anon65::line0	lib/stb/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon65	access:public
__anon65::line1	lib/stb/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon65	access:public
__anon65::resample	lib/stb/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon65	access:public
__anon65::vs	lib/stb/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon65	access:public
__anon65::w_lores	lib/stb/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon65	access:public
__anon65::ypos	lib/stb/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon65	access:public
__anon65::ystep	lib/stb/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon65	access:public
__anon66::fast	lib/stb/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon66	access:public
__anon66::firstcode	lib/stb/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon66	access:public
__anon66::firstsymbol	lib/stb/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon66	access:public
__anon66::maxcode	lib/stb/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon66	access:public
__anon66::size	lib/stb/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon66	access:public
__anon66::value	lib/stb/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon66	access:public
__anon67::code_buffer	lib/stb/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon67	access:public
__anon67::num_bits	lib/stb/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon67	access:public
__anon67::z_distance	lib/stb/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon67	access:public
__anon67::z_expandable	lib/stb/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon67	access:public
__anon67::z_length	lib/stb/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon67	access:public
__anon67::zbuffer	lib/stb/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon67	access:public
__anon67::zbuffer_end	lib/stb/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon67	access:public
__anon67::zout	lib/stb/stb_image.h	/^   char *zout;$/;"	m	struct:__anon67	access:public
__anon67::zout_end	lib/stb/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon67	access:public
__anon67::zout_start	lib/stb/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon67	access:public
__anon68::length	lib/stb/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon68	access:public
__anon68::type	lib/stb/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon68	access:public
__anon69::depth	lib/stb/stb_image.h	/^   int depth;$/;"	m	struct:__anon69	access:public
__anon69::expanded	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
__anon69::idata	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
__anon69::out	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
__anon69::s	lib/stb/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon69	access:public
__anon71::all_a	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
__anon71::bpp	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
__anon71::hsz	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
__anon71::ma	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
__anon71::mb	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
__anon71::mg	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
__anon71::mr	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
__anon71::offset	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
__anon72::channel	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
__anon72::size	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
__anon72::type	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
__anon73::first	lib/stb/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon73	access:public
__anon73::prefix	lib/stb/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon73	access:public
__anon73::suffix	lib/stb/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon73	access:public
__anon74::bgindex	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::codes	lib/stb/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon74	access:public
__anon74::color_table	lib/stb/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon74	access:public
__anon74::cur_x	lib/stb/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon74	access:public
__anon74::cur_y	lib/stb/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon74	access:public
__anon74::delay	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::eflags	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::flags	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::h	lib/stb/stb_image.h	/^   int w,h;$/;"	m	struct:__anon74	access:public
__anon74::lflags	lib/stb/stb_image.h	/^   int lflags;$/;"	m	struct:__anon74	access:public
__anon74::line_size	lib/stb/stb_image.h	/^   int line_size;$/;"	m	struct:__anon74	access:public
__anon74::lpal	lib/stb/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon74	access:public
__anon74::max_x	lib/stb/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon74	access:public
__anon74::max_y	lib/stb/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon74	access:public
__anon74::old_out	lib/stb/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon74	access:public
__anon74::out	lib/stb/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon74	access:public
__anon74::pal	lib/stb/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon74	access:public
__anon74::parse	lib/stb/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon74	access:public
__anon74::ratio	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::start_x	lib/stb/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon74	access:public
__anon74::start_y	lib/stb/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon74	access:public
__anon74::step	lib/stb/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon74	access:public
__anon74::transparent	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
__anon74::w	lib/stb/stb_image.h	/^   int w,h;$/;"	m	struct:__anon74	access:public
__anon75::loaderData	lib/vulkan/vk_icd.h	/^    void *loaderData;$/;"	m	union:__anon75	access:public
__anon75::loaderMagic	lib/vulkan/vk_icd.h	/^    uintptr_t loaderMagic;$/;"	m	union:__anon75	access:public
__anon77::platform	lib/vulkan/vk_icd.h	/^    VkIcdWsiPlatform platform;$/;"	m	struct:__anon77	access:public
__anon78::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon78	access:public
__anon78::connection	lib/vulkan/vk_icd.h	/^    MirConnection *connection;$/;"	m	struct:__anon78	access:public
__anon78::mirSurface	lib/vulkan/vk_icd.h	/^    MirSurface *mirSurface;$/;"	m	struct:__anon78	access:public
__anon79::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon79	access:public
__anon79::display	lib/vulkan/vk_icd.h	/^    struct wl_display *display;$/;"	m	struct:__anon79	typeref:struct:__anon79::wl_display	access:public
__anon79::surface	lib/vulkan/vk_icd.h	/^    struct wl_surface *surface;$/;"	m	struct:__anon79	typeref:struct:__anon79::wl_surface	access:public
__anon80::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon80	access:public
__anon80::hinstance	lib/vulkan/vk_icd.h	/^    HINSTANCE hinstance;$/;"	m	struct:__anon80	access:public
__anon80::hwnd	lib/vulkan/vk_icd.h	/^    HWND hwnd;$/;"	m	struct:__anon80	access:public
__anon81::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon81	access:public
__anon81::connection	lib/vulkan/vk_icd.h	/^    xcb_connection_t *connection;$/;"	m	struct:__anon81	access:public
__anon81::window	lib/vulkan/vk_icd.h	/^    xcb_window_t window;$/;"	m	struct:__anon81	access:public
__anon82::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon82	access:public
__anon82::dpy	lib/vulkan/vk_icd.h	/^    Display *dpy;$/;"	m	struct:__anon82	access:public
__anon82::window	lib/vulkan/vk_icd.h	/^    Window window;$/;"	m	struct:__anon82	access:public
__anon83::alphaMode	lib/vulkan/vk_icd.h	/^    VkDisplayPlaneAlphaFlagBitsKHR alphaMode;$/;"	m	struct:__anon83	access:public
__anon83::base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon83	access:public
__anon83::displayMode	lib/vulkan/vk_icd.h	/^    VkDisplayModeKHR displayMode;$/;"	m	struct:__anon83	access:public
__anon83::globalAlpha	lib/vulkan/vk_icd.h	/^    float globalAlpha;$/;"	m	struct:__anon83	access:public
__anon83::imageExtent	lib/vulkan/vk_icd.h	/^    VkExtent2D imageExtent;$/;"	m	struct:__anon83	access:public
__anon83::planeIndex	lib/vulkan/vk_icd.h	/^    uint32_t planeIndex;$/;"	m	struct:__anon83	access:public
__anon83::planeStackIndex	lib/vulkan/vk_icd.h	/^    uint32_t planeStackIndex;$/;"	m	struct:__anon83	access:public
__anon83::transform	lib/vulkan/vk_icd.h	/^    VkSurfaceTransformFlagBitsKHR transform;$/;"	m	struct:__anon83	access:public
__anon85::__anon86::pLayerInfo	lib/vulkan/vk_layer.h	/^        VkLayerInstanceLink *pLayerInfo;$/;"	m	union:__anon85::__anon86	access:public
__anon85::__anon86::pfnSetInstanceLoaderData	lib/vulkan/vk_layer.h	/^        PFN_vkSetInstanceLoaderData pfnSetInstanceLoaderData;$/;"	m	union:__anon85::__anon86	access:public
__anon85::function	lib/vulkan/vk_layer.h	/^    VkLayerFunction function;$/;"	m	struct:__anon85	access:public
__anon85::pNext	lib/vulkan/vk_layer.h	/^    const void *pNext;$/;"	m	struct:__anon85	access:public
__anon85::sType	lib/vulkan/vk_layer.h	/^    VkStructureType sType; \/\/ VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO$/;"	m	struct:__anon85	access:public
__anon85::u	lib/vulkan/vk_layer.h	/^    } u;$/;"	m	struct:__anon85	typeref:union:__anon85::__anon86	access:public
__anon87::__anon88::pLayerInfo	lib/vulkan/vk_layer.h	/^        VkLayerDeviceLink *pLayerInfo;$/;"	m	union:__anon87::__anon88	access:public
__anon87::__anon88::pfnSetDeviceLoaderData	lib/vulkan/vk_layer.h	/^        PFN_vkSetDeviceLoaderData pfnSetDeviceLoaderData;$/;"	m	union:__anon87::__anon88	access:public
__anon87::function	lib/vulkan/vk_layer.h	/^    VkLayerFunction function;$/;"	m	struct:__anon87	access:public
__anon87::pNext	lib/vulkan/vk_layer.h	/^    const void *pNext;$/;"	m	struct:__anon87	access:public
__anon87::sType	lib/vulkan/vk_layer.h	/^    VkStructureType sType; \/\/ VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO$/;"	m	struct:__anon87	access:public
__anon87::u	lib/vulkan/vk_layer.h	/^    } u;$/;"	m	struct:__anon87	typeref:union:__anon87::__anon88	access:public
__has_feature	lib/glm/detail/setup.hpp	763;"	d
__int8_t_defined	lib/assimp/Compiler/pstdint.h	309;"	d
__intptr_t_defined	lib/assimp/Compiler/pstdint.h	757;"	d
__uintptr_t_defined	lib/assimp/Compiler/pstdint.h	753;"	d
_aiAnimBehaviour_Force32Bit	lib/__assimp/anim.h	/^    _aiAnimBehaviour_Force32Bit = INT_MAX$/;"	e	enum:aiAnimBehaviour
_aiAnimBehaviour_Force32Bit	lib/assimp/anim.h	/^    _aiAnimBehaviour_Force32Bit = INT_MAX$/;"	e	enum:aiAnimBehaviour
_aiBlendMode_Force32Bit	lib/__assimp/material.h	/^    _aiBlendMode_Force32Bit = INT_MAX$/;"	e	enum:aiBlendMode
_aiBlendMode_Force32Bit	lib/assimp/material.h	/^    _aiBlendMode_Force32Bit = INT_MAX$/;"	e	enum:aiBlendMode
_aiComponent_Force32Bit	lib/assimp/config.h	/^    _aiComponent_Force32Bit = 0x9fffffff$/;"	e	enum:aiComponent
_aiLightSource_Force32Bit	lib/__assimp/light.h	/^    _aiLightSource_Force32Bit = INT_MAX$/;"	e	enum:aiLightSourceType
_aiLightSource_Force32Bit	lib/assimp/light.h	/^    _aiLightSource_Force32Bit = INT_MAX$/;"	e	enum:aiLightSourceType
_aiMorphingMethod_Force32Bit	lib/__assimp/mesh.h	/^    _aiMorphingMethod_Force32Bit = INT_MAX$/;"	e	enum:aiMorphingMethod
_aiPTI_Force32Bit	lib/__assimp/material.h	/^     _aiPTI_Force32Bit = INT_MAX$/;"	e	enum:aiPropertyTypeInfo
_aiPTI_Force32Bit	lib/assimp/material.h	/^     _aiPTI_Force32Bit = INT_MAX$/;"	e	enum:aiPropertyTypeInfo
_aiPrimitiveType_Force32Bit	lib/__assimp/mesh.h	/^    _aiPrimitiveType_Force32Bit = INT_MAX$/;"	e	enum:aiPrimitiveType
_aiPrimitiveType_Force32Bit	lib/assimp/mesh.h	/^    _aiPrimitiveType_Force32Bit = INT_MAX$/;"	e	enum:aiPrimitiveType
_aiShadingMode_Force32Bit	lib/__assimp/material.h	/^    _aiShadingMode_Force32Bit = INT_MAX$/;"	e	enum:aiShadingMode
_aiShadingMode_Force32Bit	lib/assimp/material.h	/^    _aiShadingMode_Force32Bit = INT_MAX$/;"	e	enum:aiShadingMode
_aiTextureFlags_Force32Bit	lib/__assimp/material.h	/^      _aiTextureFlags_Force32Bit = INT_MAX$/;"	e	enum:aiTextureFlags
_aiTextureFlags_Force32Bit	lib/assimp/material.h	/^      _aiTextureFlags_Force32Bit = INT_MAX$/;"	e	enum:aiTextureFlags
_aiTextureMapMode_Force32Bit	lib/__assimp/material.h	/^    _aiTextureMapMode_Force32Bit = INT_MAX$/;"	e	enum:aiTextureMapMode
_aiTextureMapMode_Force32Bit	lib/assimp/material.h	/^    _aiTextureMapMode_Force32Bit = INT_MAX$/;"	e	enum:aiTextureMapMode
_aiTextureMapping_Force32Bit	lib/__assimp/material.h	/^    _aiTextureMapping_Force32Bit = INT_MAX$/;"	e	enum:aiTextureMapping
_aiTextureMapping_Force32Bit	lib/assimp/material.h	/^    _aiTextureMapping_Force32Bit = INT_MAX$/;"	e	enum:aiTextureMapping
_aiTextureOp_Force32Bit	lib/__assimp/material.h	/^    _aiTextureOp_Force32Bit = INT_MAX$/;"	e	enum:aiTextureOp
_aiTextureOp_Force32Bit	lib/assimp/material.h	/^    _aiTextureOp_Force32Bit = INT_MAX$/;"	e	enum:aiTextureOp
_aiTextureType_Force32Bit	lib/__assimp/material.h	/^    _aiTextureType_Force32Bit = INT_MAX$/;"	e	enum:aiTextureType
_aiTextureType_Force32Bit	lib/assimp/material.h	/^    _aiTextureType_Force32Bit = INT_MAX$/;"	e	enum:aiTextureType
_apply_op	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(vec<N, T, P> const& that, U op)$/;"	f	struct:glm::detail::_swizzle_base2	access:protected	signature:(vec<N, T, P> const& that, U op)
_buffer	lib/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	access:protected
_swizzle	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<N, T, P, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 || E1 == E3 || E2 == E3)>$/;"	s	namespace:glm::detail	inherits:_swizzle_base2
_swizzle_base0	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<2, T, P, E0,E1,-1,-2, Aligned> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<3, T, P, E0,E1,E2,-1, Aligned> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<4, T, P, E0,E1,E2,E3, Aligned> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
_swizzle_base2	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<N, T, P, E0,E1,E2,E3, detail::is_aligned<P>::value>$/;"	s	namespace:glm::detail	inherits:_swizzle_base1
_swizzle_base2	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<N, T, P, E0,E1,E2,E3, 1> : public _swizzle_base1<N, T, P, E0,E1,E2,E3, detail::is_aligned<P>::value>$/;"	s	namespace:glm::detail	inherits:_swizzle_base1
a	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
a	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
a	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
a	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
a	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
a	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
a	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
a	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
a	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
a	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
a	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    a;$/;"	m	struct:VkComponentMapping	access:public
a1	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
a1	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
a1	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
a1	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
a1	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
a1	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
a1	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
a1	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
a2	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
a2	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
a2	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
a2	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
a2	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
a2	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
a2	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
a2	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
a3	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
a3	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
a3	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
a3	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
a3	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
a3	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
a3	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
a3	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
a4	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
a4	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
a4	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
a4	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
achFormatHint	lib/__assimp/texture.h	/^    char achFormatHint[9];\/\/ 8 for string + 1 for terminator.$/;"	m	struct:aiTexture	access:public
achFormatHint	lib/assimp/texture.h	/^    char achFormatHint[4];$/;"	m	struct:aiTexture	access:public
activity	inc/file_manager.h	/^    static ANativeActivity* activity;$/;"	m	class:FileManager	access:public
activity	src/file_manager.cpp	/^ANativeActivity* FileManager::activity = nullptr;$/;"	m	class:FileManager	file:
addLight	src/scene_lights.cpp	/^void SceneLights::addLight(PointLight& light) $/;"	f	class:SceneLights	signature:(PointLight& light)
addressModeU	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeU;$/;"	m	struct:VkSamplerCreateInfo	access:public
addressModeV	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeV;$/;"	m	struct:VkSamplerCreateInfo	access:public
addressModeW	lib/vulkan/vulkan.h	/^    VkSamplerAddressMode    addressModeW;$/;"	m	struct:VkSamplerCreateInfo	access:public
aiAnimBehaviour	lib/__assimp/anim.h	/^enum aiAnimBehaviour$/;"	g
aiAnimBehaviour	lib/assimp/anim.h	/^enum aiAnimBehaviour$/;"	g
aiAnimBehaviour_CONSTANT	lib/__assimp/anim.h	/^    aiAnimBehaviour_CONSTANT = 0x1,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_CONSTANT	lib/assimp/anim.h	/^    aiAnimBehaviour_CONSTANT = 0x1,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_DEFAULT	lib/__assimp/anim.h	/^    aiAnimBehaviour_DEFAULT  = 0x0,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_DEFAULT	lib/assimp/anim.h	/^    aiAnimBehaviour_DEFAULT  = 0x0,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_LINEAR	lib/__assimp/anim.h	/^    aiAnimBehaviour_LINEAR   = 0x2,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_LINEAR	lib/assimp/anim.h	/^    aiAnimBehaviour_LINEAR   = 0x2,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_REPEAT	lib/__assimp/anim.h	/^    aiAnimBehaviour_REPEAT   = 0x3,$/;"	e	enum:aiAnimBehaviour
aiAnimBehaviour_REPEAT	lib/assimp/anim.h	/^    aiAnimBehaviour_REPEAT   = 0x3,$/;"	e	enum:aiAnimBehaviour
aiAnimMesh	lib/__assimp/mesh.h	/^    aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimMesh	lib/__assimp/mesh.h	/^struct aiAnimMesh$/;"	s
aiAnimMesh	lib/assimp/mesh.h	/^    aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimMesh	lib/assimp/mesh.h	/^struct aiAnimMesh$/;"	s
aiAnimMesh::HasNormals	lib/__assimp/mesh.h	/^    bool HasNormals() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasNormals	lib/assimp/mesh.h	/^    bool HasNormals() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasPositions	lib/__assimp/mesh.h	/^    bool HasPositions() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasPositions	lib/assimp/mesh.h	/^    bool HasPositions() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasTangentsAndBitangents	lib/__assimp/mesh.h	/^    bool HasTangentsAndBitangents() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasTangentsAndBitangents	lib/assimp/mesh.h	/^    bool HasTangentsAndBitangents() const {$/;"	f	struct:aiAnimMesh	access:public	signature:() const
aiAnimMesh::HasTextureCoords	lib/__assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const   {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
aiAnimMesh::HasTextureCoords	lib/assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const   {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
aiAnimMesh::HasVertexColors	lib/__assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const    {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
aiAnimMesh::HasVertexColors	lib/assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const    {$/;"	f	struct:aiAnimMesh	access:public	signature:( unsigned int pIndex) const
aiAnimMesh::aiAnimMesh	lib/__assimp/mesh.h	/^    aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimMesh::aiAnimMesh	lib/assimp/mesh.h	/^    aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimMesh::mBitangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mBitangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mColors	lib/__assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mColors	lib/assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mNormals	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mNormals	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mNumVertices	lib/__assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mNumVertices	lib/assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mTangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mTangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mTextureCoords	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mTextureCoords	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mVertices	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mVertices	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::mWeight	lib/__assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiAnimMesh	access:public
aiAnimMesh::~aiAnimMesh	lib/__assimp/mesh.h	/^    ~aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimMesh::~aiAnimMesh	lib/assimp/mesh.h	/^    ~aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
aiAnimation	lib/__assimp/anim.h	/^    aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
aiAnimation	lib/__assimp/anim.h	/^struct aiAnimation {$/;"	s
aiAnimation	lib/assimp/anim.h	/^    aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
aiAnimation	lib/assimp/anim.h	/^struct aiAnimation$/;"	s
aiAnimation::aiAnimation	lib/__assimp/anim.h	/^    aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
aiAnimation::aiAnimation	lib/assimp/anim.h	/^    aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
aiAnimation::mChannels	lib/__assimp/anim.h	/^    C_STRUCT aiNodeAnim** mChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mChannels	lib/assimp/anim.h	/^    C_STRUCT aiNodeAnim** mChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mDuration	lib/__assimp/anim.h	/^    double mDuration;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mDuration	lib/assimp/anim.h	/^    double mDuration;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mMeshChannels	lib/__assimp/anim.h	/^    C_STRUCT aiMeshAnim** mMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mMeshChannels	lib/assimp/anim.h	/^    C_STRUCT aiMeshAnim** mMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mMorphMeshChannels	lib/__assimp/anim.h	/^    C_STRUCT aiMeshMorphAnim **mMorphMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mName	lib/assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mNumChannels	lib/__assimp/anim.h	/^    unsigned int mNumChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mNumChannels	lib/assimp/anim.h	/^    unsigned int mNumChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mNumMeshChannels	lib/__assimp/anim.h	/^    unsigned int mNumMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mNumMeshChannels	lib/assimp/anim.h	/^    unsigned int mNumMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mNumMorphMeshChannels	lib/__assimp/anim.h	/^    unsigned int mNumMorphMeshChannels;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mTicksPerSecond	lib/__assimp/anim.h	/^    double mTicksPerSecond;$/;"	m	struct:aiAnimation	access:public
aiAnimation::mTicksPerSecond	lib/assimp/anim.h	/^    double mTicksPerSecond;$/;"	m	struct:aiAnimation	access:public
aiAnimation::~aiAnimation	lib/__assimp/anim.h	/^    ~aiAnimation() {$/;"	f	struct:aiAnimation	access:public	signature:()
aiAnimation::~aiAnimation	lib/assimp/anim.h	/^    ~aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
aiBlendMode	lib/__assimp/material.h	/^enum aiBlendMode$/;"	g
aiBlendMode	lib/assimp/material.h	/^enum aiBlendMode$/;"	g
aiBlendMode_Additive	lib/__assimp/material.h	/^    aiBlendMode_Additive = 0x1,$/;"	e	enum:aiBlendMode
aiBlendMode_Additive	lib/assimp/material.h	/^    aiBlendMode_Additive = 0x1,$/;"	e	enum:aiBlendMode
aiBlendMode_Default	lib/__assimp/material.h	/^    aiBlendMode_Default = 0x0,$/;"	e	enum:aiBlendMode
aiBlendMode_Default	lib/assimp/material.h	/^    aiBlendMode_Default = 0x0,$/;"	e	enum:aiBlendMode
aiBone	lib/__assimp/mesh.h	/^    aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBone	lib/__assimp/mesh.h	/^    aiBone(const aiBone& other)$/;"	f	struct:aiBone	access:public	signature:(const aiBone& other)
aiBone	lib/__assimp/mesh.h	/^struct aiBone$/;"	s
aiBone	lib/assimp/mesh.h	/^    aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBone	lib/assimp/mesh.h	/^    aiBone(const aiBone& other)$/;"	f	struct:aiBone	access:public	signature:(const aiBone& other)
aiBone	lib/assimp/mesh.h	/^struct aiBone$/;"	s
aiBone::aiBone	lib/__assimp/mesh.h	/^    aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBone::aiBone	lib/__assimp/mesh.h	/^    aiBone(const aiBone& other)$/;"	f	struct:aiBone	access:public	signature:(const aiBone& other)
aiBone::aiBone	lib/assimp/mesh.h	/^    aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBone::aiBone	lib/assimp/mesh.h	/^    aiBone(const aiBone& other)$/;"	f	struct:aiBone	access:public	signature:(const aiBone& other)
aiBone::mName	lib/__assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiBone	access:public
aiBone::mName	lib/assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiBone	access:public
aiBone::mNumWeights	lib/__assimp/mesh.h	/^    unsigned int mNumWeights;$/;"	m	struct:aiBone	access:public
aiBone::mNumWeights	lib/assimp/mesh.h	/^    unsigned int mNumWeights;$/;"	m	struct:aiBone	access:public
aiBone::mOffsetMatrix	lib/__assimp/mesh.h	/^    C_STRUCT aiMatrix4x4 mOffsetMatrix;$/;"	m	struct:aiBone	access:public
aiBone::mOffsetMatrix	lib/assimp/mesh.h	/^    C_STRUCT aiMatrix4x4 mOffsetMatrix;$/;"	m	struct:aiBone	access:public
aiBone::mWeights	lib/__assimp/mesh.h	/^    C_STRUCT aiVertexWeight* mWeights;$/;"	m	struct:aiBone	access:public
aiBone::mWeights	lib/assimp/mesh.h	/^    C_STRUCT aiVertexWeight* mWeights;$/;"	m	struct:aiBone	access:public
aiBone::~aiBone	lib/__assimp/mesh.h	/^    ~aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBone::~aiBone	lib/assimp/mesh.h	/^    ~aiBone()$/;"	f	struct:aiBone	access:public	signature:()
aiBool	lib/__assimp/cimport.h	/^typedef int aiBool;$/;"	t
aiBool	lib/assimp/cimport.h	/^typedef int aiBool;$/;"	t
aiCamera	lib/__assimp/camera.h	/^    aiCamera()$/;"	f	struct:aiCamera	access:public	signature:()
aiCamera	lib/__assimp/camera.h	/^struct aiCamera$/;"	s
aiCamera	lib/assimp/camera.h	/^    aiCamera()$/;"	f	struct:aiCamera	access:public	signature:()
aiCamera	lib/assimp/camera.h	/^struct aiCamera$/;"	s
aiCamera::GetCameraMatrix	lib/__assimp/camera.h	/^    void GetCameraMatrix (aiMatrix4x4& out) const$/;"	f	struct:aiCamera	access:public	signature:(aiMatrix4x4& out) const
aiCamera::GetCameraMatrix	lib/assimp/camera.h	/^    void GetCameraMatrix (aiMatrix4x4& out) const$/;"	f	struct:aiCamera	access:public	signature:(aiMatrix4x4& out) const
aiCamera::aiCamera	lib/__assimp/camera.h	/^    aiCamera()$/;"	f	struct:aiCamera	access:public	signature:()
aiCamera::aiCamera	lib/assimp/camera.h	/^    aiCamera()$/;"	f	struct:aiCamera	access:public	signature:()
aiCamera::mAspect	lib/__assimp/camera.h	/^    float mAspect;$/;"	m	struct:aiCamera	access:public
aiCamera::mAspect	lib/assimp/camera.h	/^    float mAspect;$/;"	m	struct:aiCamera	access:public
aiCamera::mClipPlaneFar	lib/__assimp/camera.h	/^    float mClipPlaneFar;$/;"	m	struct:aiCamera	access:public
aiCamera::mClipPlaneFar	lib/assimp/camera.h	/^    float mClipPlaneFar;$/;"	m	struct:aiCamera	access:public
aiCamera::mClipPlaneNear	lib/__assimp/camera.h	/^    float mClipPlaneNear;$/;"	m	struct:aiCamera	access:public
aiCamera::mClipPlaneNear	lib/assimp/camera.h	/^    float mClipPlaneNear;$/;"	m	struct:aiCamera	access:public
aiCamera::mHorizontalFOV	lib/__assimp/camera.h	/^    float mHorizontalFOV;$/;"	m	struct:aiCamera	access:public
aiCamera::mHorizontalFOV	lib/assimp/camera.h	/^    float mHorizontalFOV;$/;"	m	struct:aiCamera	access:public
aiCamera::mLookAt	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mLookAt;$/;"	m	struct:aiCamera	access:public
aiCamera::mLookAt	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mLookAt;$/;"	m	struct:aiCamera	access:public
aiCamera::mName	lib/__assimp/camera.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiCamera	access:public
aiCamera::mName	lib/assimp/camera.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiCamera	access:public
aiCamera::mPosition	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiCamera	access:public
aiCamera::mPosition	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiCamera	access:public
aiCamera::mUp	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiCamera	access:public
aiCamera::mUp	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiCamera	access:public
aiColor3D	lib/__assimp/types.h	/^    aiColor3D () : r(0.0f), g(0.0f), b(0.0f) {}$/;"	f	struct:aiColor3D	access:public	signature:()
aiColor3D	lib/__assimp/types.h	/^    aiColor3D (ai_real _r, ai_real _g, ai_real _b) : r(_r), g(_g), b(_b) {}$/;"	f	struct:aiColor3D	access:public	signature:(ai_real _r, ai_real _g, ai_real _b)
aiColor3D	lib/__assimp/types.h	/^    aiColor3D (const aiColor3D& o) : r(o.r), g(o.g), b(o.b) {}$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& o)
aiColor3D	lib/__assimp/types.h	/^    explicit aiColor3D (ai_real _r) : r(_r), g(_r), b(_r) {}$/;"	f	struct:aiColor3D	access:public	signature:(ai_real _r)
aiColor3D	lib/__assimp/types.h	/^struct aiColor3D$/;"	s
aiColor3D	lib/assimp/types.h	/^    aiColor3D () : r(0.0f), g(0.0f), b(0.0f) {}$/;"	f	struct:aiColor3D	access:public	signature:()
aiColor3D	lib/assimp/types.h	/^    aiColor3D (const aiColor3D& o) : r(o.r), g(o.g), b(o.b) {}$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& o)
aiColor3D	lib/assimp/types.h	/^    aiColor3D (float _r, float _g, float _b) : r(_r), g(_g), b(_b) {}$/;"	f	struct:aiColor3D	access:public	signature:(float _r, float _g, float _b)
aiColor3D	lib/assimp/types.h	/^    explicit aiColor3D (float _r) : r(_r), g(_r), b(_r) {}$/;"	f	struct:aiColor3D	access:public	signature:(float _r)
aiColor3D	lib/assimp/types.h	/^struct aiColor3D$/;"	s
aiColor3D::IsBlack	lib/__assimp/types.h	/^    bool IsBlack() const {$/;"	f	struct:aiColor3D	access:public	signature:() const
aiColor3D::IsBlack	lib/assimp/types.h	/^    bool IsBlack() const {$/;"	f	struct:aiColor3D	access:public	signature:() const
aiColor3D::aiColor3D	lib/__assimp/types.h	/^    aiColor3D () : r(0.0f), g(0.0f), b(0.0f) {}$/;"	f	struct:aiColor3D	access:public	signature:()
aiColor3D::aiColor3D	lib/__assimp/types.h	/^    aiColor3D (ai_real _r, ai_real _g, ai_real _b) : r(_r), g(_g), b(_b) {}$/;"	f	struct:aiColor3D	access:public	signature:(ai_real _r, ai_real _g, ai_real _b)
aiColor3D::aiColor3D	lib/__assimp/types.h	/^    aiColor3D (const aiColor3D& o) : r(o.r), g(o.g), b(o.b) {}$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& o)
aiColor3D::aiColor3D	lib/__assimp/types.h	/^    explicit aiColor3D (ai_real _r) : r(_r), g(_r), b(_r) {}$/;"	f	struct:aiColor3D	access:public	signature:(ai_real _r)
aiColor3D::aiColor3D	lib/assimp/types.h	/^    aiColor3D () : r(0.0f), g(0.0f), b(0.0f) {}$/;"	f	struct:aiColor3D	access:public	signature:()
aiColor3D::aiColor3D	lib/assimp/types.h	/^    aiColor3D (const aiColor3D& o) : r(o.r), g(o.g), b(o.b) {}$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& o)
aiColor3D::aiColor3D	lib/assimp/types.h	/^    aiColor3D (float _r, float _g, float _b) : r(_r), g(_g), b(_b) {}$/;"	f	struct:aiColor3D	access:public	signature:(float _r, float _g, float _b)
aiColor3D::aiColor3D	lib/assimp/types.h	/^    explicit aiColor3D (float _r) : r(_r), g(_r), b(_r) {}$/;"	f	struct:aiColor3D	access:public	signature:(float _r)
aiColor3D::b	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor3D::b	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor3D::g	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor3D::g	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor3D::operator !=	lib/__assimp/types.h	/^    bool operator != (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator !=	lib/assimp/types.h	/^    bool operator != (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator *	lib/__assimp/types.h	/^    aiColor3D operator*(ai_real f) const {$/;"	f	struct:aiColor3D	access:public	signature:(ai_real f) const
aiColor3D::operator *	lib/__assimp/types.h	/^    aiColor3D operator*(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator *	lib/assimp/types.h	/^    aiColor3D operator*(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator *	lib/assimp/types.h	/^    aiColor3D operator*(float f) const {$/;"	f	struct:aiColor3D	access:public	signature:(float f) const
aiColor3D::operator +	lib/__assimp/types.h	/^    aiColor3D operator+(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator +	lib/assimp/types.h	/^    aiColor3D operator+(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator -	lib/__assimp/types.h	/^    aiColor3D operator-(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator -	lib/assimp/types.h	/^    aiColor3D operator-(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
aiColor3D::operator <	lib/__assimp/types.h	/^    bool operator < (const aiColor3D& other) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator <	lib/assimp/types.h	/^    bool operator < (const aiColor3D& other) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator ==	lib/__assimp/types.h	/^    bool operator == (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator ==	lib/assimp/types.h	/^    bool operator == (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
aiColor3D::operator []	lib/__assimp/types.h	/^    ai_real operator[](unsigned int i) const {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i) const
aiColor3D::operator []	lib/__assimp/types.h	/^    ai_real& operator[](unsigned int i) {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i)
aiColor3D::operator []	lib/assimp/types.h	/^    float operator[](unsigned int i) const {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i) const
aiColor3D::operator []	lib/assimp/types.h	/^    float& operator[](unsigned int i) {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i)
aiColor3D::r	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor3D::r	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
aiColor4D	lib/__assimp/color4.h	/^struct aiColor4D {$/;"	s
aiColor4D	lib/__assimp/color4.h	/^typedef aiColor4t<ai_real> aiColor4D;$/;"	t
aiColor4D	lib/assimp/color4.h	/^struct aiColor4D {$/;"	s
aiColor4D	lib/assimp/color4.h	/^typedef aiColor4t<float> aiColor4D;$/;"	t
aiColor4D::__anon7::__anon8::a	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
aiColor4D::__anon7::__anon8::b	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
aiColor4D::__anon7::__anon8::g	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
aiColor4D::__anon7::__anon8::r	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
aiColor4D::__anon7::c	lib/assimp/color4.h	/^        float c[ 4 ];$/;"	m	union:aiColor4D::__anon7	access:public
aiColor4D::a	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
aiColor4D::b	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
aiColor4D::g	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
aiColor4D::r	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
aiColor4t	lib/__assimp/color4.h	/^    aiColor4t () : r(), g(), b(), a() {}$/;"	f	class:aiColor4t	access:public	signature:()
aiColor4t	lib/__assimp/color4.h	/^    aiColor4t (TReal _r, TReal _g, TReal _b, TReal _a)$/;"	f	class:aiColor4t	access:public	signature:(TReal _r, TReal _g, TReal _b, TReal _a)
aiColor4t	lib/__assimp/color4.h	/^    aiColor4t (const aiColor4t& o)$/;"	f	class:aiColor4t	access:public	signature:(const aiColor4t& o)
aiColor4t	lib/__assimp/color4.h	/^    explicit aiColor4t (TReal _r) : r(_r), g(_r), b(_r), a(_r) {}$/;"	f	class:aiColor4t	access:public	signature:(TReal _r)
aiColor4t	lib/__assimp/color4.h	/^class aiColor4t$/;"	c
aiColor4t	lib/assimp/color4.h	/^    aiColor4t () : r(), g(), b(), a() {}$/;"	f	class:aiColor4t	access:public	signature:()
aiColor4t	lib/assimp/color4.h	/^    aiColor4t (TReal _r, TReal _g, TReal _b, TReal _a)$/;"	f	class:aiColor4t	access:public	signature:(TReal _r, TReal _g, TReal _b, TReal _a)
aiColor4t	lib/assimp/color4.h	/^    aiColor4t (const aiColor4t& o)$/;"	f	class:aiColor4t	access:public	signature:(const aiColor4t& o)
aiColor4t	lib/assimp/color4.h	/^    explicit aiColor4t (TReal _r) : r(_r), g(_r), b(_r), a(_r) {}$/;"	f	class:aiColor4t	access:public	signature:(TReal _r)
aiColor4t	lib/assimp/color4.h	/^class aiColor4t$/;"	c
aiColor4t::__anon5::__anon6::a	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
aiColor4t::__anon5::__anon6::b	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
aiColor4t::__anon5::__anon6::g	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
aiColor4t::__anon5::__anon6::r	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
aiColor4t::__anon5::c	lib/assimp/color4.h	/^        TReal c[ 4 ];$/;"	m	union:aiColor4t::__anon5	access:public
aiColor4t::a	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
aiColor4t::aiColor4t	lib/__assimp/color4.h	/^    aiColor4t () : r(), g(), b(), a() {}$/;"	f	class:aiColor4t	access:public	signature:()
aiColor4t::aiColor4t	lib/__assimp/color4.h	/^    aiColor4t (TReal _r, TReal _g, TReal _b, TReal _a)$/;"	f	class:aiColor4t	access:public	signature:(TReal _r, TReal _g, TReal _b, TReal _a)
aiColor4t::aiColor4t	lib/__assimp/color4.h	/^    aiColor4t (const aiColor4t& o)$/;"	f	class:aiColor4t	access:public	signature:(const aiColor4t& o)
aiColor4t::aiColor4t	lib/__assimp/color4.h	/^    explicit aiColor4t (TReal _r) : r(_r), g(_r), b(_r), a(_r) {}$/;"	f	class:aiColor4t	access:public	signature:(TReal _r)
aiColor4t::aiColor4t	lib/assimp/color4.h	/^    aiColor4t () : r(), g(), b(), a() {}$/;"	f	class:aiColor4t	access:public	signature:()
aiColor4t::aiColor4t	lib/assimp/color4.h	/^    aiColor4t (TReal _r, TReal _g, TReal _b, TReal _a)$/;"	f	class:aiColor4t	access:public	signature:(TReal _r, TReal _g, TReal _b, TReal _a)
aiColor4t::aiColor4t	lib/assimp/color4.h	/^    aiColor4t (const aiColor4t& o)$/;"	f	class:aiColor4t	access:public	signature:(const aiColor4t& o)
aiColor4t::aiColor4t	lib/assimp/color4.h	/^    explicit aiColor4t (TReal _r) : r(_r), g(_r), b(_r), a(_r) {}$/;"	f	class:aiColor4t	access:public	signature:(TReal _r)
aiColor4t::b	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
aiColor4t::g	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
aiColor4t::r	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
aiComponent	lib/assimp/config.h	/^enum aiComponent$/;"	g
aiComponent_ANIMATIONS	lib/assimp/config.h	/^    aiComponent_ANIMATIONS = 0x40,$/;"	e	enum:aiComponent
aiComponent_BONEWEIGHTS	lib/assimp/config.h	/^    aiComponent_BONEWEIGHTS = 0x20,$/;"	e	enum:aiComponent
aiComponent_CAMERAS	lib/assimp/config.h	/^    aiComponent_CAMERAS = 0x200,$/;"	e	enum:aiComponent
aiComponent_COLORS	lib/assimp/config.h	/^    aiComponent_COLORS = 0x8,$/;"	e	enum:aiComponent
aiComponent_COLORSn	lib/assimp/config.h	446;"	d
aiComponent_LIGHTS	lib/assimp/config.h	/^    aiComponent_LIGHTS = 0x100,$/;"	e	enum:aiComponent
aiComponent_MATERIALS	lib/assimp/config.h	/^    aiComponent_MATERIALS = 0x800,$/;"	e	enum:aiComponent
aiComponent_MESHES	lib/assimp/config.h	/^    aiComponent_MESHES = 0x400,$/;"	e	enum:aiComponent
aiComponent_NORMALS	lib/assimp/config.h	/^    aiComponent_NORMALS = 0x2,$/;"	e	enum:aiComponent
aiComponent_TANGENTS_AND_BITANGENTS	lib/assimp/config.h	/^    aiComponent_TANGENTS_AND_BITANGENTS = 0x4,$/;"	e	enum:aiComponent
aiComponent_TEXCOORDS	lib/assimp/config.h	/^    aiComponent_TEXCOORDS = 0x10,$/;"	e	enum:aiComponent
aiComponent_TEXCOORDSn	lib/assimp/config.h	449;"	d
aiComponent_TEXTURES	lib/assimp/config.h	/^    aiComponent_TEXTURES = 0x80,$/;"	e	enum:aiComponent
aiDefaultLogStream	lib/__assimp/types.h	/^enum aiDefaultLogStream$/;"	g
aiDefaultLogStream	lib/assimp/types.h	/^enum aiDefaultLogStream$/;"	g
aiDefaultLogStream_DEBUGGER	lib/__assimp/types.h	/^    aiDefaultLogStream_DEBUGGER = 0x8,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_DEBUGGER	lib/assimp/types.h	/^    aiDefaultLogStream_DEBUGGER = 0x8,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_FILE	lib/__assimp/types.h	/^    aiDefaultLogStream_FILE = 0x1,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_FILE	lib/assimp/types.h	/^    aiDefaultLogStream_FILE = 0x1,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_STDERR	lib/__assimp/types.h	/^    aiDefaultLogStream_STDERR = 0x4,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_STDERR	lib/assimp/types.h	/^    aiDefaultLogStream_STDERR = 0x4,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_STDOUT	lib/__assimp/types.h	/^    aiDefaultLogStream_STDOUT = 0x2,$/;"	e	enum:aiDefaultLogStream
aiDefaultLogStream_STDOUT	lib/assimp/types.h	/^    aiDefaultLogStream_STDOUT = 0x2,$/;"	e	enum:aiDefaultLogStream
aiExportDataBlob	lib/__assimp/cexport.h	/^    aiExportDataBlob() { size = 0; data = next = NULL; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportDataBlob	lib/__assimp/cexport.h	/^struct aiExportDataBlob$/;"	s
aiExportDataBlob	lib/assimp/cexport.h	/^    aiExportDataBlob() { size = 0; data = next = NULL; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportDataBlob	lib/assimp/cexport.h	/^struct aiExportDataBlob$/;"	s
aiExportDataBlob::aiExportDataBlob	lib/__assimp/cexport.h	/^    aiExportDataBlob() { size = 0; data = next = NULL; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportDataBlob::aiExportDataBlob	lib/assimp/cexport.h	/^    aiExportDataBlob() { size = 0; data = next = NULL; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportDataBlob::data	lib/__assimp/cexport.h	/^    void* data;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::data	lib/assimp/cexport.h	/^    void* data;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::name	lib/__assimp/cexport.h	/^    C_STRUCT aiString name;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::name	lib/assimp/cexport.h	/^    C_STRUCT aiString name;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::next	lib/__assimp/cexport.h	/^    C_STRUCT aiExportDataBlob * next;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::next	lib/assimp/cexport.h	/^    C_STRUCT aiExportDataBlob * next;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::size	lib/__assimp/cexport.h	/^    size_t size;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::size	lib/assimp/cexport.h	/^    size_t size;$/;"	m	struct:aiExportDataBlob	access:public
aiExportDataBlob::~aiExportDataBlob	lib/__assimp/cexport.h	/^    ~aiExportDataBlob() { delete [] static_cast<unsigned char*>( data ); delete next; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportDataBlob::~aiExportDataBlob	lib/assimp/cexport.h	/^    ~aiExportDataBlob() { delete [] static_cast<unsigned char*>( data ); delete next; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
aiExportFormatDesc	lib/__assimp/cexport.h	/^struct aiExportFormatDesc$/;"	s
aiExportFormatDesc	lib/assimp/cexport.h	/^struct aiExportFormatDesc$/;"	s
aiExportFormatDesc::description	lib/__assimp/cexport.h	/^    const char* description;$/;"	m	struct:aiExportFormatDesc	access:public
aiExportFormatDesc::description	lib/assimp/cexport.h	/^    const char* description;$/;"	m	struct:aiExportFormatDesc	access:public
aiExportFormatDesc::fileExtension	lib/__assimp/cexport.h	/^    const char* fileExtension;$/;"	m	struct:aiExportFormatDesc	access:public
aiExportFormatDesc::fileExtension	lib/assimp/cexport.h	/^    const char* fileExtension;$/;"	m	struct:aiExportFormatDesc	access:public
aiExportFormatDesc::id	lib/__assimp/cexport.h	/^    const char* id;$/;"	m	struct:aiExportFormatDesc	access:public
aiExportFormatDesc::id	lib/assimp/cexport.h	/^    const char* id;$/;"	m	struct:aiExportFormatDesc	access:public
aiFace	lib/__assimp/mesh.h	/^    aiFace( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace	lib/__assimp/mesh.h	/^    aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFace	lib/__assimp/mesh.h	/^struct aiFace$/;"	s
aiFace	lib/assimp/mesh.h	/^    aiFace( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace	lib/assimp/mesh.h	/^    aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFace	lib/assimp/mesh.h	/^struct aiFace$/;"	s
aiFace::aiFace	lib/__assimp/mesh.h	/^    aiFace( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace::aiFace	lib/__assimp/mesh.h	/^    aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFace::aiFace	lib/assimp/mesh.h	/^    aiFace( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace::aiFace	lib/assimp/mesh.h	/^    aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFace::mIndices	lib/__assimp/mesh.h	/^    unsigned int* mIndices;$/;"	m	struct:aiFace	access:public
aiFace::mIndices	lib/assimp/mesh.h	/^    unsigned int* mIndices;$/;"	m	struct:aiFace	access:public
aiFace::mNumIndices	lib/__assimp/mesh.h	/^    unsigned int mNumIndices;$/;"	m	struct:aiFace	access:public
aiFace::mNumIndices	lib/assimp/mesh.h	/^    unsigned int mNumIndices;$/;"	m	struct:aiFace	access:public
aiFace::operator !=	lib/__assimp/mesh.h	/^    bool operator != (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
aiFace::operator !=	lib/assimp/mesh.h	/^    bool operator != (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
aiFace::operator =	lib/__assimp/mesh.h	/^    aiFace& operator = ( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace::operator =	lib/assimp/mesh.h	/^    aiFace& operator = ( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
aiFace::operator ==	lib/__assimp/mesh.h	/^    bool operator== (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
aiFace::operator ==	lib/assimp/mesh.h	/^    bool operator== (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
aiFace::~aiFace	lib/__assimp/mesh.h	/^    ~aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFace::~aiFace	lib/assimp/mesh.h	/^    ~aiFace()$/;"	f	struct:aiFace	access:public	signature:()
aiFile	lib/__assimp/cfileio.h	/^struct aiFile$/;"	s
aiFile	lib/assimp/cfileio.h	/^struct aiFile$/;"	s
aiFile::FileSizeProc	lib/__assimp/cfileio.h	/^    aiFileTellProc FileSizeProc;$/;"	m	struct:aiFile	access:public
aiFile::FileSizeProc	lib/assimp/cfileio.h	/^    aiFileTellProc FileSizeProc;$/;"	m	struct:aiFile	access:public
aiFile::FlushProc	lib/__assimp/cfileio.h	/^    aiFileFlushProc FlushProc;$/;"	m	struct:aiFile	access:public
aiFile::FlushProc	lib/assimp/cfileio.h	/^    aiFileFlushProc FlushProc;$/;"	m	struct:aiFile	access:public
aiFile::ReadProc	lib/__assimp/cfileio.h	/^    aiFileReadProc ReadProc;$/;"	m	struct:aiFile	access:public
aiFile::ReadProc	lib/assimp/cfileio.h	/^    aiFileReadProc ReadProc;$/;"	m	struct:aiFile	access:public
aiFile::SeekProc	lib/__assimp/cfileio.h	/^    aiFileSeek SeekProc;$/;"	m	struct:aiFile	access:public
aiFile::SeekProc	lib/assimp/cfileio.h	/^    aiFileSeek SeekProc;$/;"	m	struct:aiFile	access:public
aiFile::TellProc	lib/__assimp/cfileio.h	/^    aiFileTellProc TellProc;$/;"	m	struct:aiFile	access:public
aiFile::TellProc	lib/assimp/cfileio.h	/^    aiFileTellProc TellProc;$/;"	m	struct:aiFile	access:public
aiFile::UserData	lib/__assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFile	access:public
aiFile::UserData	lib/assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFile	access:public
aiFile::WriteProc	lib/__assimp/cfileio.h	/^    aiFileWriteProc WriteProc;$/;"	m	struct:aiFile	access:public
aiFile::WriteProc	lib/assimp/cfileio.h	/^    aiFileWriteProc WriteProc;$/;"	m	struct:aiFile	access:public
aiFileCloseProc	lib/__assimp/cfileio.h	/^typedef void             (*aiFileCloseProc) (C_STRUCT aiFileIO*, C_STRUCT aiFile*);$/;"	t
aiFileCloseProc	lib/assimp/cfileio.h	/^typedef void    (*aiFileCloseProc) (C_STRUCT aiFileIO*, C_STRUCT aiFile*);$/;"	t
aiFileFlushProc	lib/__assimp/cfileio.h	/^typedef void            (*aiFileFlushProc) (C_STRUCT aiFile*);$/;"	t
aiFileFlushProc	lib/assimp/cfileio.h	/^typedef void     (*aiFileFlushProc) (C_STRUCT aiFile*);$/;"	t
aiFileIO	lib/__assimp/cfileio.h	/^struct aiFileIO$/;"	s
aiFileIO	lib/assimp/cfileio.h	/^struct aiFileIO$/;"	s
aiFileIO::CloseProc	lib/__assimp/cfileio.h	/^    aiFileCloseProc CloseProc;$/;"	m	struct:aiFileIO	access:public
aiFileIO::CloseProc	lib/assimp/cfileio.h	/^    aiFileCloseProc CloseProc;$/;"	m	struct:aiFileIO	access:public
aiFileIO::OpenProc	lib/__assimp/cfileio.h	/^    aiFileOpenProc OpenProc;$/;"	m	struct:aiFileIO	access:public
aiFileIO::OpenProc	lib/assimp/cfileio.h	/^    aiFileOpenProc OpenProc;$/;"	m	struct:aiFileIO	access:public
aiFileIO::UserData	lib/__assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFileIO	access:public
aiFileIO::UserData	lib/assimp/cfileio.h	/^    aiUserData UserData;$/;"	m	struct:aiFileIO	access:public
aiFileOpenProc	lib/__assimp/cfileio.h	/^typedef C_STRUCT aiFile* (*aiFileOpenProc)  (C_STRUCT aiFileIO*, const char*, const char*);$/;"	t
aiFileOpenProc	lib/assimp/cfileio.h	/^typedef aiFile* (*aiFileOpenProc)  (C_STRUCT aiFileIO*, const char*, const char*);$/;"	t
aiFileReadProc	lib/__assimp/cfileio.h	/^typedef size_t          (*aiFileReadProc)  (C_STRUCT aiFile*,   char*, size_t,size_t);$/;"	t
aiFileReadProc	lib/assimp/cfileio.h	/^typedef size_t   (*aiFileReadProc)  (C_STRUCT aiFile*,   char*, size_t,size_t);$/;"	t
aiFileSeek	lib/__assimp/cfileio.h	/^typedef C_ENUM aiReturn (*aiFileSeek)      (C_STRUCT aiFile*, size_t, C_ENUM aiOrigin);$/;"	t
aiFileSeek	lib/assimp/cfileio.h	/^typedef aiReturn (*aiFileSeek)(C_STRUCT aiFile*, size_t, aiOrigin);$/;"	t
aiFileTellProc	lib/__assimp/cfileio.h	/^typedef size_t          (*aiFileTellProc)  (C_STRUCT aiFile*);$/;"	t
aiFileTellProc	lib/assimp/cfileio.h	/^typedef size_t   (*aiFileTellProc)  (C_STRUCT aiFile*);$/;"	t
aiFileWriteProc	lib/__assimp/cfileio.h	/^typedef size_t          (*aiFileWriteProc) (C_STRUCT aiFile*,   const char*, size_t, size_t);$/;"	t
aiFileWriteProc	lib/assimp/cfileio.h	/^typedef size_t   (*aiFileWriteProc) (C_STRUCT aiFile*,   const char*, size_t, size_t);$/;"	t
aiGetMaterialFloat	lib/__assimp/material.h	/^inline aiReturn aiGetMaterialFloat(const aiMaterial* pMat,$/;"	f	signature:(const aiMaterial* pMat, const char* pKey, unsigned int type, unsigned int index, ai_real* pOut)
aiGetMaterialFloat	lib/__assimp/material.h	1406;"	d
aiGetMaterialFloat	lib/assimp/material.h	/^inline aiReturn aiGetMaterialFloat(const aiMaterial* pMat,$/;"	f	signature:(const aiMaterial* pMat, const char* pKey, unsigned int type, unsigned int index, float* pOut)
aiGetMaterialFloat	lib/assimp/material.h	1388;"	d
aiGetMaterialInteger	lib/__assimp/material.h	/^inline aiReturn aiGetMaterialInteger(const C_STRUCT aiMaterial* pMat,$/;"	f	signature:(const C_STRUCT aiMaterial* pMat, const char* pKey, unsigned int type, unsigned int index, int* pOut)
aiGetMaterialInteger	lib/__assimp/material.h	1444;"	d
aiGetMaterialInteger	lib/assimp/material.h	/^inline aiReturn aiGetMaterialInteger(const C_STRUCT aiMaterial* pMat,$/;"	f	signature:(const C_STRUCT aiMaterial* pMat, const char* pKey, unsigned int type, unsigned int index, int* pOut)
aiGetMaterialInteger	lib/assimp/material.h	1426;"	d
aiImporterDesc	lib/__assimp/importerdesc.h	/^struct aiImporterDesc$/;"	s
aiImporterDesc	lib/assimp/importerdesc.h	/^struct aiImporterDesc$/;"	s
aiImporterDesc::mAuthor	lib/__assimp/importerdesc.h	/^    const char* mAuthor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mAuthor	lib/assimp/importerdesc.h	/^    const char* mAuthor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mComments	lib/__assimp/importerdesc.h	/^    const char* mComments;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mComments	lib/assimp/importerdesc.h	/^    const char* mComments;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mFileExtensions	lib/__assimp/importerdesc.h	/^    const char* mFileExtensions;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mFileExtensions	lib/assimp/importerdesc.h	/^    const char* mFileExtensions;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mFlags	lib/__assimp/importerdesc.h	/^    unsigned int mFlags;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mFlags	lib/assimp/importerdesc.h	/^    unsigned int mFlags;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaintainer	lib/__assimp/importerdesc.h	/^    const char* mMaintainer;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaintainer	lib/assimp/importerdesc.h	/^    const char* mMaintainer;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaxMajor	lib/__assimp/importerdesc.h	/^    unsigned int mMaxMajor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaxMajor	lib/assimp/importerdesc.h	/^    unsigned int mMaxMajor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaxMinor	lib/__assimp/importerdesc.h	/^    unsigned int mMaxMinor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMaxMinor	lib/assimp/importerdesc.h	/^    unsigned int mMaxMinor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMinMajor	lib/__assimp/importerdesc.h	/^    unsigned int mMinMajor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMinMajor	lib/assimp/importerdesc.h	/^    unsigned int mMinMajor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMinMinor	lib/__assimp/importerdesc.h	/^    unsigned int mMinMinor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mMinMinor	lib/assimp/importerdesc.h	/^    unsigned int mMinMinor;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mName	lib/__assimp/importerdesc.h	/^    const char* mName;$/;"	m	struct:aiImporterDesc	access:public
aiImporterDesc::mName	lib/assimp/importerdesc.h	/^    const char* mName;$/;"	m	struct:aiImporterDesc	access:public
aiImporterFlags	lib/__assimp/importerdesc.h	/^enum aiImporterFlags$/;"	g
aiImporterFlags	lib/assimp/importerdesc.h	/^enum aiImporterFlags$/;"	g
aiImporterFlags_Experimental	lib/__assimp/importerdesc.h	/^    aiImporterFlags_Experimental = 0x10$/;"	e	enum:aiImporterFlags
aiImporterFlags_Experimental	lib/assimp/importerdesc.h	/^    aiImporterFlags_Experimental = 0x10$/;"	e	enum:aiImporterFlags
aiImporterFlags_LimitedSupport	lib/__assimp/importerdesc.h	/^    aiImporterFlags_LimitedSupport = 0x8,$/;"	e	enum:aiImporterFlags
aiImporterFlags_LimitedSupport	lib/assimp/importerdesc.h	/^    aiImporterFlags_LimitedSupport = 0x8,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportBinaryFlavour	lib/__assimp/importerdesc.h	/^    aiImporterFlags_SupportBinaryFlavour = 0x2,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportBinaryFlavour	lib/assimp/importerdesc.h	/^    aiImporterFlags_SupportBinaryFlavour = 0x2,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportCompressedFlavour	lib/__assimp/importerdesc.h	/^    aiImporterFlags_SupportCompressedFlavour = 0x4,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportCompressedFlavour	lib/assimp/importerdesc.h	/^    aiImporterFlags_SupportCompressedFlavour = 0x4,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportTextFlavour	lib/__assimp/importerdesc.h	/^    aiImporterFlags_SupportTextFlavour = 0x1,$/;"	e	enum:aiImporterFlags
aiImporterFlags_SupportTextFlavour	lib/assimp/importerdesc.h	/^    aiImporterFlags_SupportTextFlavour = 0x1,$/;"	e	enum:aiImporterFlags
aiLight	lib/__assimp/light.h	/^    aiLight()$/;"	f	struct:aiLight	access:public	signature:()
aiLight	lib/__assimp/light.h	/^struct aiLight$/;"	s
aiLight	lib/assimp/light.h	/^    aiLight()$/;"	f	struct:aiLight	access:public	signature:()
aiLight	lib/assimp/light.h	/^struct aiLight$/;"	s
aiLight::aiLight	lib/__assimp/light.h	/^    aiLight()$/;"	f	struct:aiLight	access:public	signature:()
aiLight::aiLight	lib/assimp/light.h	/^    aiLight()$/;"	f	struct:aiLight	access:public	signature:()
aiLight::mAngleInnerCone	lib/__assimp/light.h	/^    float mAngleInnerCone;$/;"	m	struct:aiLight	access:public
aiLight::mAngleInnerCone	lib/assimp/light.h	/^    float mAngleInnerCone;$/;"	m	struct:aiLight	access:public
aiLight::mAngleOuterCone	lib/__assimp/light.h	/^    float mAngleOuterCone;$/;"	m	struct:aiLight	access:public
aiLight::mAngleOuterCone	lib/assimp/light.h	/^    float mAngleOuterCone;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationConstant	lib/__assimp/light.h	/^    float mAttenuationConstant;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationConstant	lib/assimp/light.h	/^    float mAttenuationConstant;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationLinear	lib/__assimp/light.h	/^    float mAttenuationLinear;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationLinear	lib/assimp/light.h	/^    float mAttenuationLinear;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationQuadratic	lib/__assimp/light.h	/^    float mAttenuationQuadratic;$/;"	m	struct:aiLight	access:public
aiLight::mAttenuationQuadratic	lib/assimp/light.h	/^    float mAttenuationQuadratic;$/;"	m	struct:aiLight	access:public
aiLight::mColorAmbient	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorAmbient;$/;"	m	struct:aiLight	access:public
aiLight::mColorAmbient	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorAmbient;$/;"	m	struct:aiLight	access:public
aiLight::mColorDiffuse	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorDiffuse;$/;"	m	struct:aiLight	access:public
aiLight::mColorDiffuse	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorDiffuse;$/;"	m	struct:aiLight	access:public
aiLight::mColorSpecular	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorSpecular;$/;"	m	struct:aiLight	access:public
aiLight::mColorSpecular	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorSpecular;$/;"	m	struct:aiLight	access:public
aiLight::mDirection	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mDirection;$/;"	m	struct:aiLight	access:public
aiLight::mDirection	lib/assimp/light.h	/^    C_STRUCT aiVector3D mDirection;$/;"	m	struct:aiLight	access:public
aiLight::mName	lib/__assimp/light.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiLight	access:public
aiLight::mName	lib/assimp/light.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiLight	access:public
aiLight::mPosition	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiLight	access:public
aiLight::mPosition	lib/assimp/light.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiLight	access:public
aiLight::mSize	lib/__assimp/light.h	/^    C_STRUCT aiVector2D mSize;$/;"	m	struct:aiLight	access:public
aiLight::mType	lib/__assimp/light.h	/^    C_ENUM aiLightSourceType mType;$/;"	m	struct:aiLight	access:public
aiLight::mType	lib/assimp/light.h	/^    C_ENUM aiLightSourceType mType;$/;"	m	struct:aiLight	access:public
aiLight::mUp	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiLight	access:public
aiLightSourceType	lib/__assimp/light.h	/^enum aiLightSourceType$/;"	g
aiLightSourceType	lib/assimp/light.h	/^enum aiLightSourceType$/;"	g
aiLightSource_AMBIENT	lib/__assimp/light.h	/^    aiLightSource_AMBIENT       = 0x4,$/;"	e	enum:aiLightSourceType
aiLightSource_AMBIENT	lib/assimp/light.h	/^    aiLightSource_AMBIENT       = 0x4,$/;"	e	enum:aiLightSourceType
aiLightSource_AREA	lib/__assimp/light.h	/^    aiLightSource_AREA          = 0x5,$/;"	e	enum:aiLightSourceType
aiLightSource_DIRECTIONAL	lib/__assimp/light.h	/^    aiLightSource_DIRECTIONAL   = 0x1,$/;"	e	enum:aiLightSourceType
aiLightSource_DIRECTIONAL	lib/assimp/light.h	/^    aiLightSource_DIRECTIONAL   = 0x1,$/;"	e	enum:aiLightSourceType
aiLightSource_POINT	lib/__assimp/light.h	/^    aiLightSource_POINT         = 0x2,$/;"	e	enum:aiLightSourceType
aiLightSource_POINT	lib/assimp/light.h	/^    aiLightSource_POINT         = 0x2,$/;"	e	enum:aiLightSourceType
aiLightSource_SPOT	lib/__assimp/light.h	/^    aiLightSource_SPOT          = 0x3,$/;"	e	enum:aiLightSourceType
aiLightSource_SPOT	lib/assimp/light.h	/^    aiLightSource_SPOT          = 0x3,$/;"	e	enum:aiLightSourceType
aiLightSource_UNDEFINED	lib/__assimp/light.h	/^    aiLightSource_UNDEFINED     = 0x0,$/;"	e	enum:aiLightSourceType
aiLightSource_UNDEFINED	lib/assimp/light.h	/^    aiLightSource_UNDEFINED     = 0x0,$/;"	e	enum:aiLightSourceType
aiLogStream	lib/__assimp/cimport.h	/^struct aiLogStream$/;"	s
aiLogStream	lib/assimp/cimport.h	/^struct aiLogStream$/;"	s
aiLogStream::callback	lib/__assimp/cimport.h	/^    aiLogStreamCallback callback;$/;"	m	struct:aiLogStream	access:public
aiLogStream::callback	lib/assimp/cimport.h	/^    aiLogStreamCallback callback;$/;"	m	struct:aiLogStream	access:public
aiLogStream::user	lib/__assimp/cimport.h	/^    char* user;$/;"	m	struct:aiLogStream	access:public
aiLogStream::user	lib/assimp/cimport.h	/^    char* user;$/;"	m	struct:aiLogStream	access:public
aiLogStreamCallback	lib/__assimp/cimport.h	/^typedef void (*aiLogStreamCallback)(const char* \/* message *\/, char* \/* user *\/);$/;"	t
aiLogStreamCallback	lib/assimp/cimport.h	/^typedef void (*aiLogStreamCallback)(const char* \/* message *\/, char* \/* user *\/);$/;"	t
aiMaterial	lib/__assimp/material.h	/^struct ASSIMP_API aiMaterial$/;"	s
aiMaterial	lib/assimp/material.h	/^struct ASSIMP_API aiMaterial$/;"	s
aiMaterial::mNumAllocated	lib/__assimp/material.h	/^    unsigned int mNumAllocated;$/;"	m	struct:aiMaterial	access:public
aiMaterial::mNumAllocated	lib/assimp/material.h	/^    unsigned int mNumAllocated;$/;"	m	struct:aiMaterial	access:public
aiMaterial::mNumProperties	lib/__assimp/material.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMaterial	access:public
aiMaterial::mNumProperties	lib/assimp/material.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMaterial	access:public
aiMaterial::mProperties	lib/__assimp/material.h	/^    C_STRUCT aiMaterialProperty** mProperties;$/;"	m	struct:aiMaterial	access:public
aiMaterial::mProperties	lib/assimp/material.h	/^    C_STRUCT aiMaterialProperty** mProperties;$/;"	m	struct:aiMaterial	access:public
aiMaterialProperty	lib/__assimp/material.h	/^    aiMaterialProperty()$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMaterialProperty	lib/__assimp/material.h	/^struct aiMaterialProperty$/;"	s
aiMaterialProperty	lib/assimp/material.h	/^    aiMaterialProperty()$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMaterialProperty	lib/assimp/material.h	/^struct aiMaterialProperty$/;"	s
aiMaterialProperty::aiMaterialProperty	lib/__assimp/material.h	/^    aiMaterialProperty()$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMaterialProperty::aiMaterialProperty	lib/assimp/material.h	/^    aiMaterialProperty()$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMaterialProperty::mData	lib/__assimp/material.h	/^    char* mData;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mData	lib/assimp/material.h	/^    char* mData;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mDataLength	lib/__assimp/material.h	/^    unsigned int mDataLength;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mDataLength	lib/assimp/material.h	/^    unsigned int mDataLength;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mIndex	lib/__assimp/material.h	/^    unsigned int mIndex;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mIndex	lib/assimp/material.h	/^    unsigned int mIndex;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mKey	lib/__assimp/material.h	/^    C_STRUCT aiString mKey;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mKey	lib/assimp/material.h	/^    C_STRUCT aiString mKey;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mSemantic	lib/__assimp/material.h	/^    unsigned int mSemantic;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mSemantic	lib/assimp/material.h	/^    unsigned int mSemantic;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mType	lib/__assimp/material.h	/^    C_ENUM aiPropertyTypeInfo mType;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::mType	lib/assimp/material.h	/^    C_ENUM aiPropertyTypeInfo mType;$/;"	m	struct:aiMaterialProperty	access:public
aiMaterialProperty::~aiMaterialProperty	lib/__assimp/material.h	/^    ~aiMaterialProperty()   {$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMaterialProperty::~aiMaterialProperty	lib/assimp/material.h	/^    ~aiMaterialProperty()   {$/;"	f	struct:aiMaterialProperty	access:public	signature:()
aiMatrix3x3	lib/__assimp/matrix3x3.h	/^struct aiMatrix3x3 {$/;"	s
aiMatrix3x3	lib/__assimp/matrix3x3.h	/^typedef aiMatrix3x3t<ai_real> aiMatrix3x3;$/;"	t
aiMatrix3x3	lib/assimp/matrix3x3.h	/^struct aiMatrix3x3 {$/;"	s
aiMatrix3x3	lib/assimp/matrix3x3.h	/^typedef aiMatrix3x3t<float> aiMatrix3x3;$/;"	t
aiMatrix3x3::__anon15::__anon16::a1	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::a2	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::a3	lib/assimp/matrix3x3.h	/^            float a1, a2, a3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::b1	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::b2	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::b3	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::c1	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::c2	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::__anon16::c3	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
aiMatrix3x3::__anon15::m	lib/assimp/matrix3x3.h	/^        float m[ 3 ][ 3 ];$/;"	m	union:aiMatrix3x3::__anon15	access:public
aiMatrix3x3::__anon15::mData	lib/assimp/matrix3x3.h	/^        float mData[ 9 ];$/;"	m	union:aiMatrix3x3::__anon15	access:public
aiMatrix3x3::a1	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::a2	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::a3	lib/__assimp/matrix3x3.h	/^    ai_real a1, a2, a3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::b1	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::b2	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::b3	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::c1	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::c2	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3::c3	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
aiMatrix3x3t	lib/__assimp/matrix3x3.h	/^    aiMatrix3x3t (  TReal _a1, TReal _a2, TReal _a3,$/;"	f	class:aiMatrix3x3t	access:public	signature:( TReal _a1, TReal _a2, TReal _a3, TReal _b1, TReal _b2, TReal _b3, TReal _c1, TReal _c2, TReal _c3)
aiMatrix3x3t	lib/__assimp/matrix3x3.h	/^    aiMatrix3x3t () :$/;"	f	class:aiMatrix3x3t	access:public	signature:()
aiMatrix3x3t	lib/__assimp/matrix3x3.h	/^class aiMatrix3x3t$/;"	c
aiMatrix3x3t	lib/assimp/matrix3x3.h	/^    aiMatrix3x3t (  TReal _a1, TReal _a2, TReal _a3,$/;"	f	class:aiMatrix3x3t	access:public	signature:( TReal _a1, TReal _a2, TReal _a3, TReal _b1, TReal _b2, TReal _b3, TReal _c1, TReal _c2, TReal _c3)
aiMatrix3x3t	lib/assimp/matrix3x3.h	/^    aiMatrix3x3t () :$/;"	f	class:aiMatrix3x3t	access:public	signature:()
aiMatrix3x3t	lib/assimp/matrix3x3.h	/^class aiMatrix3x3t$/;"	c
aiMatrix3x3t::__anon13::__anon14::a1	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::a2	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::a3	lib/assimp/matrix3x3.h	/^            TReal a1, a2, a3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::b1	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::b2	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::b3	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::c1	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::c2	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::__anon14::c3	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
aiMatrix3x3t::__anon13::m	lib/assimp/matrix3x3.h	/^        TReal m[ 3 ][ 3 ];$/;"	m	union:aiMatrix3x3t::__anon13	access:public
aiMatrix3x3t::__anon13::mData	lib/assimp/matrix3x3.h	/^        TReal mData[ 9 ];$/;"	m	union:aiMatrix3x3t::__anon13	access:public
aiMatrix3x3t::a1	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::a2	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::a3	lib/__assimp/matrix3x3.h	/^    TReal a1, a2, a3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::aiMatrix3x3t	lib/__assimp/matrix3x3.h	/^    aiMatrix3x3t (  TReal _a1, TReal _a2, TReal _a3,$/;"	f	class:aiMatrix3x3t	access:public	signature:( TReal _a1, TReal _a2, TReal _a3, TReal _b1, TReal _b2, TReal _b3, TReal _c1, TReal _c2, TReal _c3)
aiMatrix3x3t::aiMatrix3x3t	lib/__assimp/matrix3x3.h	/^    aiMatrix3x3t () :$/;"	f	class:aiMatrix3x3t	access:public	signature:()
aiMatrix3x3t::aiMatrix3x3t	lib/assimp/matrix3x3.h	/^    aiMatrix3x3t (  TReal _a1, TReal _a2, TReal _a3,$/;"	f	class:aiMatrix3x3t	access:public	signature:( TReal _a1, TReal _a2, TReal _a3, TReal _b1, TReal _b2, TReal _b3, TReal _c1, TReal _c2, TReal _c3)
aiMatrix3x3t::aiMatrix3x3t	lib/assimp/matrix3x3.h	/^    aiMatrix3x3t () :$/;"	f	class:aiMatrix3x3t	access:public	signature:()
aiMatrix3x3t::b1	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::b2	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::b3	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::c1	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::c2	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix3x3t::c3	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
aiMatrix4x4	lib/__assimp/matrix4x4.h	/^struct aiMatrix4x4 {$/;"	s
aiMatrix4x4	lib/__assimp/matrix4x4.h	/^typedef aiMatrix4x4t<ai_real> aiMatrix4x4;$/;"	t
aiMatrix4x4	lib/assimp/matrix4x4.h	/^struct aiMatrix4x4 {$/;"	s
aiMatrix4x4	lib/assimp/matrix4x4.h	/^typedef aiMatrix4x4t<float> aiMatrix4x4;$/;"	t
aiMatrix4x4::__anon3::__anon4::a1	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::a2	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::a3	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::a4	lib/assimp/matrix4x4.h	/^            float a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::b1	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::b2	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::b3	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::b4	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::c1	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::c2	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::c3	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::c4	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::d1	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::d2	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::d3	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::__anon4::d4	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
aiMatrix4x4::__anon3::m	lib/assimp/matrix4x4.h	/^        float m[ 4 ][ 4 ];$/;"	m	union:aiMatrix4x4::__anon3	access:public
aiMatrix4x4::__anon3::mData	lib/assimp/matrix4x4.h	/^        float mData[ 16 ];$/;"	m	union:aiMatrix4x4::__anon3	access:public
aiMatrix4x4::a1	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::a2	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::a3	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::a4	lib/__assimp/matrix4x4.h	/^    ai_real a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::b1	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::b2	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::b3	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::b4	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::c1	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::c2	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::c3	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::c4	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::d1	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::d2	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::d3	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4::d4	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
aiMatrix4x4t	lib/__assimp/matrix4x4.h	/^class aiMatrix4x4t$/;"	c
aiMatrix4x4t	lib/assimp/matrix4x4.h	/^class aiMatrix4x4t$/;"	c
aiMatrix4x4t::__anon1::__anon2::a1	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::a2	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::a3	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::a4	lib/assimp/matrix4x4.h	/^            TReal a1, a2, a3, a4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::b1	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::b2	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::b3	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::b4	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::c1	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::c2	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::c3	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::c4	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::d1	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::d2	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::d3	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::__anon2::d4	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
aiMatrix4x4t::__anon1::m	lib/assimp/matrix4x4.h	/^        TReal m[ 4 ][ 4 ];$/;"	m	union:aiMatrix4x4t::__anon1	access:public
aiMatrix4x4t::__anon1::mData	lib/assimp/matrix4x4.h	/^        TReal mData[ 16 ];$/;"	m	union:aiMatrix4x4t::__anon1	access:public
aiMatrix4x4t::a1	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::a2	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::a3	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::a4	lib/__assimp/matrix4x4.h	/^    TReal a1, a2, a3, a4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::b1	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::b2	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::b3	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::b4	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::c1	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::c2	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::c3	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::c4	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::d1	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::d2	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::d3	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
aiMatrix4x4t::d4	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
aiMemoryInfo	lib/__assimp/types.h	/^    aiMemoryInfo()$/;"	f	struct:aiMemoryInfo	access:public	signature:()
aiMemoryInfo	lib/__assimp/types.h	/^struct aiMemoryInfo$/;"	s
aiMemoryInfo	lib/assimp/types.h	/^    aiMemoryInfo()$/;"	f	struct:aiMemoryInfo	access:public	signature:()
aiMemoryInfo	lib/assimp/types.h	/^struct aiMemoryInfo$/;"	s
aiMemoryInfo::aiMemoryInfo	lib/__assimp/types.h	/^    aiMemoryInfo()$/;"	f	struct:aiMemoryInfo	access:public	signature:()
aiMemoryInfo::aiMemoryInfo	lib/assimp/types.h	/^    aiMemoryInfo()$/;"	f	struct:aiMemoryInfo	access:public	signature:()
aiMemoryInfo::animations	lib/__assimp/types.h	/^    unsigned int animations;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::animations	lib/assimp/types.h	/^    unsigned int animations;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::cameras	lib/__assimp/types.h	/^    unsigned int cameras;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::cameras	lib/assimp/types.h	/^    unsigned int cameras;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::lights	lib/__assimp/types.h	/^    unsigned int lights;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::lights	lib/assimp/types.h	/^    unsigned int lights;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::materials	lib/__assimp/types.h	/^    unsigned int materials;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::materials	lib/assimp/types.h	/^    unsigned int materials;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::meshes	lib/__assimp/types.h	/^    unsigned int meshes;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::meshes	lib/assimp/types.h	/^    unsigned int meshes;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::nodes	lib/__assimp/types.h	/^    unsigned int nodes;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::nodes	lib/assimp/types.h	/^    unsigned int nodes;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::textures	lib/__assimp/types.h	/^    unsigned int textures;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::textures	lib/assimp/types.h	/^    unsigned int textures;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::total	lib/__assimp/types.h	/^    unsigned int total;$/;"	m	struct:aiMemoryInfo	access:public
aiMemoryInfo::total	lib/assimp/types.h	/^    unsigned int total;$/;"	m	struct:aiMemoryInfo	access:public
aiMesh	lib/__assimp/mesh.h	/^    aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMesh	lib/__assimp/mesh.h	/^struct aiMesh$/;"	s
aiMesh	lib/assimp/mesh.h	/^    aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMesh	lib/assimp/mesh.h	/^struct aiMesh$/;"	s
aiMesh::GetNumColorChannels	lib/__assimp/mesh.h	/^    unsigned int GetNumColorChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::GetNumColorChannels	lib/assimp/mesh.h	/^    unsigned int GetNumColorChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::GetNumUVChannels	lib/__assimp/mesh.h	/^    unsigned int GetNumUVChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::GetNumUVChannels	lib/assimp/mesh.h	/^    unsigned int GetNumUVChannels() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasBones	lib/__assimp/mesh.h	/^    inline bool HasBones() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasBones	lib/assimp/mesh.h	/^    inline bool HasBones() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasFaces	lib/__assimp/mesh.h	/^    bool HasFaces() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasFaces	lib/assimp/mesh.h	/^    bool HasFaces() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasNormals	lib/__assimp/mesh.h	/^    bool HasNormals() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasNormals	lib/assimp/mesh.h	/^    bool HasNormals() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasPositions	lib/__assimp/mesh.h	/^    bool HasPositions() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasPositions	lib/assimp/mesh.h	/^    bool HasPositions() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasTangentsAndBitangents	lib/__assimp/mesh.h	/^    bool HasTangentsAndBitangents() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasTangentsAndBitangents	lib/assimp/mesh.h	/^    bool HasTangentsAndBitangents() const$/;"	f	struct:aiMesh	access:public	signature:() const
aiMesh::HasTextureCoords	lib/__assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
aiMesh::HasTextureCoords	lib/assimp/mesh.h	/^    bool HasTextureCoords( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
aiMesh::HasVertexColors	lib/__assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
aiMesh::HasVertexColors	lib/assimp/mesh.h	/^    bool HasVertexColors( unsigned int pIndex) const$/;"	f	struct:aiMesh	access:public	signature:( unsigned int pIndex) const
aiMesh::aiMesh	lib/__assimp/mesh.h	/^    aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMesh::aiMesh	lib/assimp/mesh.h	/^    aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMesh::mAnimMeshes	lib/__assimp/mesh.h	/^    C_STRUCT aiAnimMesh** mAnimMeshes;$/;"	m	struct:aiMesh	access:public
aiMesh::mAnimMeshes	lib/assimp/mesh.h	/^    C_STRUCT aiAnimMesh** mAnimMeshes;$/;"	m	struct:aiMesh	access:public
aiMesh::mBitangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiMesh	access:public
aiMesh::mBitangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiMesh	access:public
aiMesh::mBones	lib/__assimp/mesh.h	/^    C_STRUCT aiBone** mBones;$/;"	m	struct:aiMesh	access:public
aiMesh::mBones	lib/assimp/mesh.h	/^    C_STRUCT aiBone** mBones;$/;"	m	struct:aiMesh	access:public
aiMesh::mColors	lib/__assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiMesh	access:public
aiMesh::mColors	lib/assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiMesh	access:public
aiMesh::mFaces	lib/__assimp/mesh.h	/^    C_STRUCT aiFace* mFaces;$/;"	m	struct:aiMesh	access:public
aiMesh::mFaces	lib/assimp/mesh.h	/^    C_STRUCT aiFace* mFaces;$/;"	m	struct:aiMesh	access:public
aiMesh::mMaterialIndex	lib/__assimp/mesh.h	/^    unsigned int mMaterialIndex;$/;"	m	struct:aiMesh	access:public
aiMesh::mMaterialIndex	lib/assimp/mesh.h	/^    unsigned int mMaterialIndex;$/;"	m	struct:aiMesh	access:public
aiMesh::mMethod	lib/__assimp/mesh.h	/^    unsigned int mMethod;$/;"	m	struct:aiMesh	access:public
aiMesh::mName	lib/__assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMesh	access:public
aiMesh::mName	lib/assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMesh	access:public
aiMesh::mNormals	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiMesh	access:public
aiMesh::mNormals	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumAnimMeshes	lib/__assimp/mesh.h	/^    unsigned int mNumAnimMeshes;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumAnimMeshes	lib/assimp/mesh.h	/^    unsigned int mNumAnimMeshes;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumBones	lib/__assimp/mesh.h	/^    unsigned int mNumBones;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumBones	lib/assimp/mesh.h	/^    unsigned int mNumBones;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumFaces	lib/__assimp/mesh.h	/^    unsigned int mNumFaces;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumFaces	lib/assimp/mesh.h	/^    unsigned int mNumFaces;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumUVComponents	lib/__assimp/mesh.h	/^    unsigned int mNumUVComponents[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
aiMesh::mNumUVComponents	lib/assimp/mesh.h	/^    unsigned int mNumUVComponents[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
aiMesh::mNumVertices	lib/__assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiMesh	access:public
aiMesh::mNumVertices	lib/assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiMesh	access:public
aiMesh::mPrimitiveTypes	lib/__assimp/mesh.h	/^    unsigned int mPrimitiveTypes;$/;"	m	struct:aiMesh	access:public
aiMesh::mPrimitiveTypes	lib/assimp/mesh.h	/^    unsigned int mPrimitiveTypes;$/;"	m	struct:aiMesh	access:public
aiMesh::mTangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiMesh	access:public
aiMesh::mTangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiMesh	access:public
aiMesh::mTextureCoords	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
aiMesh::mTextureCoords	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
aiMesh::mVertices	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiMesh	access:public
aiMesh::mVertices	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiMesh	access:public
aiMesh::~aiMesh	lib/__assimp/mesh.h	/^    ~aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMesh::~aiMesh	lib/assimp/mesh.h	/^    ~aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
aiMeshAnim	lib/__assimp/anim.h	/^    aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshAnim	lib/__assimp/anim.h	/^struct aiMeshAnim$/;"	s
aiMeshAnim	lib/assimp/anim.h	/^    aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshAnim	lib/assimp/anim.h	/^struct aiMeshAnim$/;"	s
aiMeshAnim::aiMeshAnim	lib/__assimp/anim.h	/^    aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshAnim::aiMeshAnim	lib/assimp/anim.h	/^    aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshAnim::mKeys	lib/__assimp/anim.h	/^    C_STRUCT aiMeshKey* mKeys;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::mKeys	lib/assimp/anim.h	/^    C_STRUCT aiMeshKey* mKeys;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::mName	lib/assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::mNumKeys	lib/__assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::mNumKeys	lib/assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshAnim	access:public
aiMeshAnim::~aiMeshAnim	lib/__assimp/anim.h	/^    ~aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshAnim::~aiMeshAnim	lib/assimp/anim.h	/^    ~aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
aiMeshKey	lib/__assimp/anim.h	/^    aiMeshKey() {$/;"	f	struct:aiMeshKey	access:public	signature:()
aiMeshKey	lib/__assimp/anim.h	/^    aiMeshKey(double time, const unsigned int value)$/;"	f	struct:aiMeshKey	access:public	signature:(double time, const unsigned int value)
aiMeshKey	lib/__assimp/anim.h	/^struct aiMeshKey$/;"	s
aiMeshKey	lib/assimp/anim.h	/^    aiMeshKey() {$/;"	f	struct:aiMeshKey	access:public	signature:()
aiMeshKey	lib/assimp/anim.h	/^    aiMeshKey(double time, const unsigned int value)$/;"	f	struct:aiMeshKey	access:public	signature:(double time, const unsigned int value)
aiMeshKey	lib/assimp/anim.h	/^struct aiMeshKey$/;"	s
aiMeshKey::aiMeshKey	lib/__assimp/anim.h	/^    aiMeshKey() {$/;"	f	struct:aiMeshKey	access:public	signature:()
aiMeshKey::aiMeshKey	lib/__assimp/anim.h	/^    aiMeshKey(double time, const unsigned int value)$/;"	f	struct:aiMeshKey	access:public	signature:(double time, const unsigned int value)
aiMeshKey::aiMeshKey	lib/assimp/anim.h	/^    aiMeshKey() {$/;"	f	struct:aiMeshKey	access:public	signature:()
aiMeshKey::aiMeshKey	lib/assimp/anim.h	/^    aiMeshKey(double time, const unsigned int value)$/;"	f	struct:aiMeshKey	access:public	signature:(double time, const unsigned int value)
aiMeshKey::elem_type	lib/__assimp/anim.h	/^    typedef unsigned int elem_type;$/;"	t	struct:aiMeshKey	access:public
aiMeshKey::elem_type	lib/assimp/anim.h	/^    typedef unsigned int elem_type;$/;"	t	struct:aiMeshKey	access:public
aiMeshKey::mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshKey	access:public
aiMeshKey::mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshKey	access:public
aiMeshKey::mValue	lib/__assimp/anim.h	/^    unsigned int mValue;$/;"	m	struct:aiMeshKey	access:public
aiMeshKey::mValue	lib/assimp/anim.h	/^    unsigned int mValue;$/;"	m	struct:aiMeshKey	access:public
aiMeshKey::operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator !=	lib/assimp/anim.h	/^    bool operator != (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator <	lib/__assimp/anim.h	/^    bool operator < (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator <	lib/assimp/anim.h	/^    bool operator < (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator ==	lib/assimp/anim.h	/^    bool operator == (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator >	lib/__assimp/anim.h	/^    bool operator > (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshKey::operator >	lib/assimp/anim.h	/^    bool operator > (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
aiMeshMorphAnim	lib/__assimp/anim.h	/^    aiMeshMorphAnim()$/;"	f	struct:aiMeshMorphAnim	access:public	signature:()
aiMeshMorphAnim	lib/__assimp/anim.h	/^struct aiMeshMorphAnim$/;"	s
aiMeshMorphAnim::aiMeshMorphAnim	lib/__assimp/anim.h	/^    aiMeshMorphAnim()$/;"	f	struct:aiMeshMorphAnim	access:public	signature:()
aiMeshMorphAnim::mKeys	lib/__assimp/anim.h	/^    C_STRUCT aiMeshMorphKey* mKeys;$/;"	m	struct:aiMeshMorphAnim	access:public
aiMeshMorphAnim::mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshMorphAnim	access:public
aiMeshMorphAnim::mNumKeys	lib/__assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshMorphAnim	access:public
aiMeshMorphAnim::~aiMeshMorphAnim	lib/__assimp/anim.h	/^    ~aiMeshMorphAnim()$/;"	f	struct:aiMeshMorphAnim	access:public	signature:()
aiMeshMorphKey	lib/__assimp/anim.h	/^	aiMeshMorphKey()$/;"	f	struct:aiMeshMorphKey	access:public	signature:()
aiMeshMorphKey	lib/__assimp/anim.h	/^struct aiMeshMorphKey$/;"	s
aiMeshMorphKey::aiMeshMorphKey	lib/__assimp/anim.h	/^	aiMeshMorphKey()$/;"	f	struct:aiMeshMorphKey	access:public	signature:()
aiMeshMorphKey::mNumValuesAndWeights	lib/__assimp/anim.h	/^    unsigned int mNumValuesAndWeights;$/;"	m	struct:aiMeshMorphKey	access:public
aiMeshMorphKey::mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshMorphKey	access:public
aiMeshMorphKey::mValues	lib/__assimp/anim.h	/^    unsigned int *mValues;$/;"	m	struct:aiMeshMorphKey	access:public
aiMeshMorphKey::mWeights	lib/__assimp/anim.h	/^    double *mWeights;$/;"	m	struct:aiMeshMorphKey	access:public
aiMeshMorphKey::~aiMeshMorphKey	lib/__assimp/anim.h	/^    ~aiMeshMorphKey()$/;"	f	struct:aiMeshMorphKey	access:public	signature:()
aiMetadata	lib/__assimp/metadata.h	/^    aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadata	lib/__assimp/metadata.h	/^struct aiMetadata {$/;"	s
aiMetadata	lib/assimp/metadata.h	/^    aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadata	lib/assimp/metadata.h	/^struct aiMetadata$/;"	s
aiMetadata::Add	lib/__assimp/metadata.h	/^	inline void Add(const std::string& key, const T& value)$/;"	f	struct:aiMetadata	access:public	signature:(const std::string& key, const T& value)
aiMetadata::Alloc	lib/__assimp/metadata.h	/^    aiMetadata *Alloc( unsigned int numProperties ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned int numProperties )
aiMetadata::Get	lib/__assimp/metadata.h	/^	inline bool Get(size_t index, const aiString*& key, const aiMetadataEntry*& entry) {$/;"	f	struct:aiMetadata	access:public	signature:(size_t index, const aiString*& key, const aiMetadataEntry*& entry)
aiMetadata::Get	lib/__assimp/metadata.h	/^    bool Get( const aiString& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const aiString& key, T& value )
aiMetadata::Get	lib/__assimp/metadata.h	/^    bool Get( unsigned index, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, T& value )
aiMetadata::Get	lib/__assimp/metadata.h	/^    inline bool Get( const std::string& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const std::string& key, T& value )
aiMetadata::Get	lib/assimp/metadata.h	/^    inline bool Get( const aiString& key, T& value )$/;"	f	struct:aiMetadata	access:public	signature:( const aiString& key, T& value )
aiMetadata::Get	lib/assimp/metadata.h	/^    inline bool Get( const std::string& key, T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( const std::string& key, T& value )
aiMetadata::Get	lib/assimp/metadata.h	/^    inline bool Get( unsigned index, T& value )$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, T& value )
aiMetadata::Set	lib/__assimp/metadata.h	/^    bool Set( unsigned index, const std::string& key, const T& value ) {$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, const std::string& key, const T& value )
aiMetadata::Set	lib/assimp/metadata.h	/^    inline void Set( unsigned index, const std::string& key, const T& value )$/;"	f	struct:aiMetadata	access:public	signature:( unsigned index, const std::string& key, const T& value )
aiMetadata::aiMetadata	lib/__assimp/metadata.h	/^    aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadata::aiMetadata	lib/assimp/metadata.h	/^    aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadata::mKeys	lib/__assimp/metadata.h	/^    C_STRUCT aiString* mKeys;$/;"	m	struct:aiMetadata	access:public
aiMetadata::mKeys	lib/assimp/metadata.h	/^    C_STRUCT aiString* mKeys;$/;"	m	struct:aiMetadata	access:public
aiMetadata::mNumProperties	lib/__assimp/metadata.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMetadata	access:public
aiMetadata::mNumProperties	lib/assimp/metadata.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMetadata	access:public
aiMetadata::mValues	lib/__assimp/metadata.h	/^    C_STRUCT aiMetadataEntry* mValues;$/;"	m	struct:aiMetadata	access:public
aiMetadata::mValues	lib/assimp/metadata.h	/^    C_STRUCT aiMetadataEntry* mValues;$/;"	m	struct:aiMetadata	access:public
aiMetadata::~aiMetadata	lib/__assimp/metadata.h	/^    ~aiMetadata() {$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadata::~aiMetadata	lib/assimp/metadata.h	/^    ~aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
aiMetadataEntry	lib/__assimp/metadata.h	/^struct aiMetadataEntry {$/;"	s
aiMetadataEntry	lib/assimp/metadata.h	/^struct aiMetadataEntry$/;"	s
aiMetadataEntry::mData	lib/__assimp/metadata.h	/^    void* mData;$/;"	m	struct:aiMetadataEntry	access:public
aiMetadataEntry::mData	lib/assimp/metadata.h	/^    void* mData;$/;"	m	struct:aiMetadataEntry	access:public
aiMetadataEntry::mType	lib/__assimp/metadata.h	/^    aiMetadataType mType;$/;"	m	struct:aiMetadataEntry	access:public
aiMetadataEntry::mType	lib/assimp/metadata.h	/^    aiMetadataType mType;$/;"	m	struct:aiMetadataEntry	access:public
aiMetadataType	lib/__assimp/metadata.h	/^typedef enum aiMetadataType {$/;"	g
aiMetadataType	lib/__assimp/metadata.h	/^} aiMetadataType;$/;"	t	typeref:enum:aiMetadataType
aiMetadataType	lib/assimp/metadata.h	/^typedef enum aiMetadataType$/;"	g
aiMetadataType	lib/assimp/metadata.h	/^} aiMetadataType;$/;"	t	typeref:enum:aiMetadataType
aiMorphingMethod	lib/__assimp/mesh.h	/^enum aiMorphingMethod$/;"	g
aiMorphingMethod_MORPH_NORMALIZED	lib/__assimp/mesh.h	/^    aiMorphingMethod_MORPH_NORMALIZED   = 0x2,$/;"	e	enum:aiMorphingMethod
aiMorphingMethod_MORPH_RELATIVE	lib/__assimp/mesh.h	/^    aiMorphingMethod_MORPH_RELATIVE     = 0x3,$/;"	e	enum:aiMorphingMethod
aiMorphingMethod_VERTEX_BLEND	lib/__assimp/mesh.h	/^    aiMorphingMethod_VERTEX_BLEND       = 0x1,$/;"	e	enum:aiMorphingMethod
aiNode	lib/__assimp/scene.h	/^struct ASSIMP_API aiNode$/;"	s
aiNode	lib/assimp/scene.h	/^    aiNode()$/;"	f	struct:aiNode	access:public	signature:()
aiNode	lib/assimp/scene.h	/^    explicit aiNode(const std::string& name)$/;"	f	struct:aiNode	access:public	signature:(const std::string& name)
aiNode	lib/assimp/scene.h	/^struct aiNode$/;"	s
aiNode::FindNode	lib/__assimp/scene.h	/^    aiNode* FindNode(const aiString& name) {$/;"	f	struct:aiNode	access:public	signature:(const aiString& name)
aiNode::FindNode	lib/__assimp/scene.h	/^    const aiNode* FindNode(const aiString& name) const {$/;"	f	struct:aiNode	access:public	signature:(const aiString& name) const
aiNode::FindNode	lib/assimp/scene.h	/^    inline aiNode* FindNode(const aiString& name)$/;"	f	struct:aiNode	access:public	signature:(const aiString& name)
aiNode::FindNode	lib/assimp/scene.h	/^    inline aiNode* FindNode(const char* name)$/;"	f	struct:aiNode	access:public	signature:(const char* name)
aiNode::FindNode	lib/assimp/scene.h	/^    inline const aiNode* FindNode(const aiString& name) const$/;"	f	struct:aiNode	access:public	signature:(const aiString& name) const
aiNode::FindNode	lib/assimp/scene.h	/^    inline const aiNode* FindNode(const char* name) const$/;"	f	struct:aiNode	access:public	signature:(const char* name) const
aiNode::aiNode	lib/assimp/scene.h	/^    aiNode()$/;"	f	struct:aiNode	access:public	signature:()
aiNode::aiNode	lib/assimp/scene.h	/^    explicit aiNode(const std::string& name)$/;"	f	struct:aiNode	access:public	signature:(const std::string& name)
aiNode::mChildren	lib/__assimp/scene.h	/^    C_STRUCT aiNode** mChildren;$/;"	m	struct:aiNode	access:public
aiNode::mChildren	lib/assimp/scene.h	/^    C_STRUCT aiNode** mChildren;$/;"	m	struct:aiNode	access:public
aiNode::mMeshes	lib/__assimp/scene.h	/^    unsigned int* mMeshes;$/;"	m	struct:aiNode	access:public
aiNode::mMeshes	lib/assimp/scene.h	/^    unsigned int* mMeshes;$/;"	m	struct:aiNode	access:public
aiNode::mMetaData	lib/__assimp/scene.h	/^    C_STRUCT aiMetadata* mMetaData;$/;"	m	struct:aiNode	access:public
aiNode::mMetaData	lib/assimp/scene.h	/^    C_STRUCT aiMetadata* mMetaData;$/;"	m	struct:aiNode	access:public
aiNode::mName	lib/__assimp/scene.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiNode	access:public
aiNode::mName	lib/assimp/scene.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiNode	access:public
aiNode::mNumChildren	lib/__assimp/scene.h	/^    unsigned int mNumChildren;$/;"	m	struct:aiNode	access:public
aiNode::mNumChildren	lib/assimp/scene.h	/^    unsigned int mNumChildren;$/;"	m	struct:aiNode	access:public
aiNode::mNumMeshes	lib/__assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiNode	access:public
aiNode::mNumMeshes	lib/assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiNode	access:public
aiNode::mParent	lib/__assimp/scene.h	/^    C_STRUCT aiNode* mParent;$/;"	m	struct:aiNode	access:public
aiNode::mParent	lib/assimp/scene.h	/^    C_STRUCT aiNode* mParent;$/;"	m	struct:aiNode	access:public
aiNode::mTransformation	lib/__assimp/scene.h	/^    C_STRUCT aiMatrix4x4 mTransformation;$/;"	m	struct:aiNode	access:public
aiNode::mTransformation	lib/assimp/scene.h	/^    C_STRUCT aiMatrix4x4 mTransformation;$/;"	m	struct:aiNode	access:public
aiNode::~aiNode	lib/assimp/scene.h	/^    ~aiNode()$/;"	f	struct:aiNode	access:public	signature:()
aiNodeAnim	lib/__assimp/anim.h	/^    aiNodeAnim() $/;"	f	struct:aiNodeAnim	access:public	signature:()
aiNodeAnim	lib/__assimp/anim.h	/^struct aiNodeAnim {$/;"	s
aiNodeAnim	lib/assimp/anim.h	/^    aiNodeAnim()$/;"	f	struct:aiNodeAnim	access:public	signature:()
aiNodeAnim	lib/assimp/anim.h	/^struct aiNodeAnim$/;"	s
aiNodeAnim::aiNodeAnim	lib/__assimp/anim.h	/^    aiNodeAnim() $/;"	f	struct:aiNodeAnim	access:public	signature:()
aiNodeAnim::aiNodeAnim	lib/assimp/anim.h	/^    aiNodeAnim()$/;"	f	struct:aiNodeAnim	access:public	signature:()
aiNodeAnim::mNodeName	lib/__assimp/anim.h	/^    C_STRUCT aiString mNodeName;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNodeName	lib/assimp/anim.h	/^    C_STRUCT aiString mNodeName;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumPositionKeys	lib/__assimp/anim.h	/^    unsigned int mNumPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumPositionKeys	lib/assimp/anim.h	/^    unsigned int mNumPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumRotationKeys	lib/__assimp/anim.h	/^    unsigned int mNumRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumRotationKeys	lib/assimp/anim.h	/^    unsigned int mNumRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumScalingKeys	lib/__assimp/anim.h	/^    unsigned int mNumScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mNumScalingKeys	lib/assimp/anim.h	/^    unsigned int mNumScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPositionKeys	lib/__assimp/anim.h	/^    C_STRUCT aiVectorKey* mPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPositionKeys	lib/assimp/anim.h	/^    C_STRUCT aiVectorKey* mPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPostState	lib/__assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPostState;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPostState	lib/assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPostState;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPreState	lib/__assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPreState;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mPreState	lib/assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPreState;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mRotationKeys	lib/__assimp/anim.h	/^    C_STRUCT aiQuatKey* mRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mRotationKeys	lib/assimp/anim.h	/^    C_STRUCT aiQuatKey* mRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mScalingKeys	lib/__assimp/anim.h	/^    C_STRUCT aiVectorKey* mScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::mScalingKeys	lib/assimp/anim.h	/^    C_STRUCT aiVectorKey* mScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
aiNodeAnim::~aiNodeAnim	lib/__assimp/anim.h	/^    ~aiNodeAnim() {$/;"	f	struct:aiNodeAnim	access:public	signature:()
aiNodeAnim::~aiNodeAnim	lib/assimp/anim.h	/^    ~aiNodeAnim()$/;"	f	struct:aiNodeAnim	access:public	signature:()
aiOrigin	lib/__assimp/types.h	/^enum aiOrigin$/;"	g
aiOrigin	lib/assimp/types.h	/^enum aiOrigin$/;"	g
aiOrigin_CUR	lib/__assimp/types.h	/^    aiOrigin_CUR = 0x1,$/;"	e	enum:aiOrigin
aiOrigin_CUR	lib/assimp/types.h	/^    aiOrigin_CUR = 0x1,$/;"	e	enum:aiOrigin
aiOrigin_END	lib/__assimp/types.h	/^    aiOrigin_END = 0x2,$/;"	e	enum:aiOrigin
aiOrigin_END	lib/assimp/types.h	/^    aiOrigin_END = 0x2,$/;"	e	enum:aiOrigin
aiOrigin_SET	lib/__assimp/types.h	/^    aiOrigin_SET = 0x0,$/;"	e	enum:aiOrigin
aiOrigin_SET	lib/assimp/types.h	/^    aiOrigin_SET = 0x0,$/;"	e	enum:aiOrigin
aiPTI_Buffer	lib/__assimp/material.h	/^    aiPTI_Buffer  = 0x5,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Buffer	lib/assimp/material.h	/^    aiPTI_Buffer  = 0x5,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Double	lib/__assimp/material.h	/^    aiPTI_Double   = 0x2,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Float	lib/__assimp/material.h	/^    aiPTI_Float   = 0x1,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Float	lib/assimp/material.h	/^    aiPTI_Float   = 0x1,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Integer	lib/__assimp/material.h	/^    aiPTI_Integer = 0x4,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_Integer	lib/assimp/material.h	/^    aiPTI_Integer = 0x4,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_String	lib/__assimp/material.h	/^    aiPTI_String  = 0x3,$/;"	e	enum:aiPropertyTypeInfo
aiPTI_String	lib/assimp/material.h	/^    aiPTI_String  = 0x3,$/;"	e	enum:aiPropertyTypeInfo
aiPlane	lib/__assimp/types.h	/^    aiPlane () : a(0.f), b(0.f), c(0.f), d(0.f) {}$/;"	f	struct:aiPlane	access:public	signature:()
aiPlane	lib/__assimp/types.h	/^    aiPlane (ai_real _a, ai_real _b, ai_real _c, ai_real _d)$/;"	f	struct:aiPlane	access:public	signature:(ai_real _a, ai_real _b, ai_real _c, ai_real _d)
aiPlane	lib/__assimp/types.h	/^    aiPlane (const aiPlane& o) : a(o.a), b(o.b), c(o.c), d(o.d) {}$/;"	f	struct:aiPlane	access:public	signature:(const aiPlane& o)
aiPlane	lib/__assimp/types.h	/^struct aiPlane$/;"	s
aiPlane	lib/assimp/types.h	/^    aiPlane () : a(0.f), b(0.f), c(0.f), d(0.f) {}$/;"	f	struct:aiPlane	access:public	signature:()
aiPlane	lib/assimp/types.h	/^    aiPlane (const aiPlane& o) : a(o.a), b(o.b), c(o.c), d(o.d) {}$/;"	f	struct:aiPlane	access:public	signature:(const aiPlane& o)
aiPlane	lib/assimp/types.h	/^    aiPlane (float _a, float _b, float _c, float _d)$/;"	f	struct:aiPlane	access:public	signature:(float _a, float _b, float _c, float _d)
aiPlane	lib/assimp/types.h	/^struct aiPlane$/;"	s
aiPlane::a	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::a	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::aiPlane	lib/__assimp/types.h	/^    aiPlane () : a(0.f), b(0.f), c(0.f), d(0.f) {}$/;"	f	struct:aiPlane	access:public	signature:()
aiPlane::aiPlane	lib/__assimp/types.h	/^    aiPlane (ai_real _a, ai_real _b, ai_real _c, ai_real _d)$/;"	f	struct:aiPlane	access:public	signature:(ai_real _a, ai_real _b, ai_real _c, ai_real _d)
aiPlane::aiPlane	lib/__assimp/types.h	/^    aiPlane (const aiPlane& o) : a(o.a), b(o.b), c(o.c), d(o.d) {}$/;"	f	struct:aiPlane	access:public	signature:(const aiPlane& o)
aiPlane::aiPlane	lib/assimp/types.h	/^    aiPlane () : a(0.f), b(0.f), c(0.f), d(0.f) {}$/;"	f	struct:aiPlane	access:public	signature:()
aiPlane::aiPlane	lib/assimp/types.h	/^    aiPlane (const aiPlane& o) : a(o.a), b(o.b), c(o.c), d(o.d) {}$/;"	f	struct:aiPlane	access:public	signature:(const aiPlane& o)
aiPlane::aiPlane	lib/assimp/types.h	/^    aiPlane (float _a, float _b, float _c, float _d)$/;"	f	struct:aiPlane	access:public	signature:(float _a, float _b, float _c, float _d)
aiPlane::b	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::b	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::c	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::c	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::d	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPlane::d	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
aiPostProcessSteps	lib/__assimp/postprocess.h	/^enum aiPostProcessSteps$/;"	g
aiPostProcessSteps	lib/assimp/postprocess.h	/^enum aiPostProcessSteps$/;"	g
aiPrimitiveType	lib/__assimp/mesh.h	/^enum aiPrimitiveType$/;"	g
aiPrimitiveType	lib/assimp/mesh.h	/^enum aiPrimitiveType$/;"	g
aiPrimitiveType_LINE	lib/__assimp/mesh.h	/^    aiPrimitiveType_LINE        = 0x2,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_LINE	lib/assimp/mesh.h	/^    aiPrimitiveType_LINE        = 0x2,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_POINT	lib/__assimp/mesh.h	/^    aiPrimitiveType_POINT       = 0x1,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_POINT	lib/assimp/mesh.h	/^    aiPrimitiveType_POINT       = 0x1,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_POLYGON	lib/__assimp/mesh.h	/^    aiPrimitiveType_POLYGON     = 0x8,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_POLYGON	lib/assimp/mesh.h	/^    aiPrimitiveType_POLYGON     = 0x8,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_TRIANGLE	lib/__assimp/mesh.h	/^    aiPrimitiveType_TRIANGLE    = 0x4,$/;"	e	enum:aiPrimitiveType
aiPrimitiveType_TRIANGLE	lib/assimp/mesh.h	/^    aiPrimitiveType_TRIANGLE    = 0x4,$/;"	e	enum:aiPrimitiveType
aiProcessPreset_TargetRealtime_Fast	lib/__assimp/postprocess.h	567;"	d
aiProcessPreset_TargetRealtime_Fast	lib/assimp/postprocess.h	566;"	d
aiProcessPreset_TargetRealtime_MaxQuality	lib/__assimp/postprocess.h	622;"	d
aiProcessPreset_TargetRealtime_MaxQuality	lib/assimp/postprocess.h	621;"	d
aiProcessPreset_TargetRealtime_Quality	lib/__assimp/postprocess.h	592;"	d
aiProcessPreset_TargetRealtime_Quality	lib/assimp/postprocess.h	591;"	d
aiProcess_CalcTangentSpace	lib/__assimp/postprocess.h	/^    aiProcess_CalcTangentSpace = 0x1,$/;"	e	enum:aiPostProcessSteps
aiProcess_CalcTangentSpace	lib/assimp/postprocess.h	/^    aiProcess_CalcTangentSpace = 0x1,$/;"	e	enum:aiPostProcessSteps
aiProcess_ConvertToLeftHanded	lib/__assimp/postprocess.h	546;"	d
aiProcess_ConvertToLeftHanded	lib/assimp/postprocess.h	545;"	d
aiProcess_Debone	lib/__assimp/postprocess.h	/^    aiProcess_Debone  = 0x4000000$/;"	e	enum:aiPostProcessSteps
aiProcess_Debone	lib/assimp/postprocess.h	/^    aiProcess_Debone  = 0x4000000$/;"	e	enum:aiPostProcessSteps
aiProcess_FindDegenerates	lib/__assimp/postprocess.h	/^    aiProcess_FindDegenerates = 0x10000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FindDegenerates	lib/assimp/postprocess.h	/^    aiProcess_FindDegenerates = 0x10000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FindInstances	lib/__assimp/postprocess.h	/^    aiProcess_FindInstances = 0x100000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FindInstances	lib/assimp/postprocess.h	/^    aiProcess_FindInstances = 0x100000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FindInvalidData	lib/__assimp/postprocess.h	/^    aiProcess_FindInvalidData = 0x20000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FindInvalidData	lib/assimp/postprocess.h	/^    aiProcess_FindInvalidData = 0x20000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FixInfacingNormals	lib/__assimp/postprocess.h	/^    aiProcess_FixInfacingNormals = 0x2000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FixInfacingNormals	lib/assimp/postprocess.h	/^    aiProcess_FixInfacingNormals = 0x2000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FlipUVs	lib/__assimp/postprocess.h	/^    aiProcess_FlipUVs = 0x800000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FlipUVs	lib/assimp/postprocess.h	/^    aiProcess_FlipUVs = 0x800000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FlipWindingOrder	lib/__assimp/postprocess.h	/^    aiProcess_FlipWindingOrder  = 0x1000000,$/;"	e	enum:aiPostProcessSteps
aiProcess_FlipWindingOrder	lib/assimp/postprocess.h	/^    aiProcess_FlipWindingOrder  = 0x1000000,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenNormals	lib/__assimp/postprocess.h	/^    aiProcess_GenNormals = 0x20,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenNormals	lib/assimp/postprocess.h	/^    aiProcess_GenNormals = 0x20,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenSmoothNormals	lib/__assimp/postprocess.h	/^    aiProcess_GenSmoothNormals = 0x40,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenSmoothNormals	lib/assimp/postprocess.h	/^    aiProcess_GenSmoothNormals = 0x40,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenUVCoords	lib/__assimp/postprocess.h	/^    aiProcess_GenUVCoords = 0x40000,$/;"	e	enum:aiPostProcessSteps
aiProcess_GenUVCoords	lib/assimp/postprocess.h	/^    aiProcess_GenUVCoords = 0x40000,$/;"	e	enum:aiPostProcessSteps
aiProcess_ImproveCacheLocality	lib/__assimp/postprocess.h	/^    aiProcess_ImproveCacheLocality = 0x800,$/;"	e	enum:aiPostProcessSteps
aiProcess_ImproveCacheLocality	lib/assimp/postprocess.h	/^    aiProcess_ImproveCacheLocality = 0x800,$/;"	e	enum:aiPostProcessSteps
aiProcess_JoinIdenticalVertices	lib/__assimp/postprocess.h	/^    aiProcess_JoinIdenticalVertices = 0x2,$/;"	e	enum:aiPostProcessSteps
aiProcess_JoinIdenticalVertices	lib/assimp/postprocess.h	/^    aiProcess_JoinIdenticalVertices = 0x2,$/;"	e	enum:aiPostProcessSteps
aiProcess_LimitBoneWeights	lib/__assimp/postprocess.h	/^    aiProcess_LimitBoneWeights = 0x200,$/;"	e	enum:aiPostProcessSteps
aiProcess_LimitBoneWeights	lib/assimp/postprocess.h	/^    aiProcess_LimitBoneWeights = 0x200,$/;"	e	enum:aiPostProcessSteps
aiProcess_MakeLeftHanded	lib/__assimp/postprocess.h	/^    aiProcess_MakeLeftHanded = 0x4,$/;"	e	enum:aiPostProcessSteps
aiProcess_MakeLeftHanded	lib/assimp/postprocess.h	/^    aiProcess_MakeLeftHanded = 0x4,$/;"	e	enum:aiPostProcessSteps
aiProcess_OptimizeGraph	lib/__assimp/postprocess.h	/^    aiProcess_OptimizeGraph  = 0x400000,$/;"	e	enum:aiPostProcessSteps
aiProcess_OptimizeGraph	lib/assimp/postprocess.h	/^    aiProcess_OptimizeGraph  = 0x400000,$/;"	e	enum:aiPostProcessSteps
aiProcess_OptimizeMeshes	lib/__assimp/postprocess.h	/^    aiProcess_OptimizeMeshes  = 0x200000,$/;"	e	enum:aiPostProcessSteps
aiProcess_OptimizeMeshes	lib/assimp/postprocess.h	/^    aiProcess_OptimizeMeshes  = 0x200000,$/;"	e	enum:aiPostProcessSteps
aiProcess_PreTransformVertices	lib/__assimp/postprocess.h	/^    aiProcess_PreTransformVertices = 0x100,$/;"	e	enum:aiPostProcessSteps
aiProcess_PreTransformVertices	lib/assimp/postprocess.h	/^    aiProcess_PreTransformVertices = 0x100,$/;"	e	enum:aiPostProcessSteps
aiProcess_RemoveComponent	lib/__assimp/postprocess.h	/^    aiProcess_RemoveComponent = 0x10,$/;"	e	enum:aiPostProcessSteps
aiProcess_RemoveComponent	lib/assimp/postprocess.h	/^    aiProcess_RemoveComponent = 0x10,$/;"	e	enum:aiPostProcessSteps
aiProcess_RemoveRedundantMaterials	lib/__assimp/postprocess.h	/^    aiProcess_RemoveRedundantMaterials = 0x1000,$/;"	e	enum:aiPostProcessSteps
aiProcess_RemoveRedundantMaterials	lib/assimp/postprocess.h	/^    aiProcess_RemoveRedundantMaterials = 0x1000,$/;"	e	enum:aiPostProcessSteps
aiProcess_SortByPType	lib/__assimp/postprocess.h	/^    aiProcess_SortByPType = 0x8000,$/;"	e	enum:aiPostProcessSteps
aiProcess_SortByPType	lib/assimp/postprocess.h	/^    aiProcess_SortByPType = 0x8000,$/;"	e	enum:aiPostProcessSteps
aiProcess_SplitByBoneCount	lib/__assimp/postprocess.h	/^    aiProcess_SplitByBoneCount  = 0x2000000,$/;"	e	enum:aiPostProcessSteps
aiProcess_SplitByBoneCount	lib/assimp/postprocess.h	/^    aiProcess_SplitByBoneCount  = 0x2000000,$/;"	e	enum:aiPostProcessSteps
aiProcess_SplitLargeMeshes	lib/__assimp/postprocess.h	/^    aiProcess_SplitLargeMeshes = 0x80,$/;"	e	enum:aiPostProcessSteps
aiProcess_SplitLargeMeshes	lib/assimp/postprocess.h	/^    aiProcess_SplitLargeMeshes = 0x80,$/;"	e	enum:aiPostProcessSteps
aiProcess_TransformUVCoords	lib/__assimp/postprocess.h	/^    aiProcess_TransformUVCoords = 0x80000,$/;"	e	enum:aiPostProcessSteps
aiProcess_TransformUVCoords	lib/assimp/postprocess.h	/^    aiProcess_TransformUVCoords = 0x80000,$/;"	e	enum:aiPostProcessSteps
aiProcess_Triangulate	lib/__assimp/postprocess.h	/^    aiProcess_Triangulate = 0x8,$/;"	e	enum:aiPostProcessSteps
aiProcess_Triangulate	lib/assimp/postprocess.h	/^    aiProcess_Triangulate = 0x8,$/;"	e	enum:aiPostProcessSteps
aiProcess_ValidateDataStructure	lib/__assimp/postprocess.h	/^    aiProcess_ValidateDataStructure = 0x400,$/;"	e	enum:aiPostProcessSteps
aiProcess_ValidateDataStructure	lib/assimp/postprocess.h	/^    aiProcess_ValidateDataStructure = 0x400,$/;"	e	enum:aiPostProcessSteps
aiPropertyStore	lib/__assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	s
aiPropertyStore	lib/assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	s
aiPropertyStore::sentinel	lib/__assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	m	struct:aiPropertyStore	access:public
aiPropertyStore::sentinel	lib/assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	m	struct:aiPropertyStore	access:public
aiPropertyTypeInfo	lib/__assimp/material.h	/^enum aiPropertyTypeInfo$/;"	g
aiPropertyTypeInfo	lib/assimp/material.h	/^enum aiPropertyTypeInfo$/;"	g
aiQuatKey	lib/__assimp/anim.h	/^    aiQuatKey()$/;"	f	struct:aiQuatKey	access:public	signature:()
aiQuatKey	lib/__assimp/anim.h	/^    aiQuatKey(double time, const aiQuaternion& value)$/;"	f	struct:aiQuatKey	access:public	signature:(double time, const aiQuaternion& value)
aiQuatKey	lib/__assimp/anim.h	/^struct aiQuatKey$/;"	s
aiQuatKey	lib/assimp/anim.h	/^    aiQuatKey(){$/;"	f	struct:aiQuatKey	access:public	signature:()
aiQuatKey	lib/assimp/anim.h	/^    aiQuatKey(double time, const aiQuaternion& value)$/;"	f	struct:aiQuatKey	access:public	signature:(double time, const aiQuaternion& value)
aiQuatKey	lib/assimp/anim.h	/^struct aiQuatKey$/;"	s
aiQuatKey::aiQuatKey	lib/__assimp/anim.h	/^    aiQuatKey()$/;"	f	struct:aiQuatKey	access:public	signature:()
aiQuatKey::aiQuatKey	lib/__assimp/anim.h	/^    aiQuatKey(double time, const aiQuaternion& value)$/;"	f	struct:aiQuatKey	access:public	signature:(double time, const aiQuaternion& value)
aiQuatKey::aiQuatKey	lib/assimp/anim.h	/^    aiQuatKey(){$/;"	f	struct:aiQuatKey	access:public	signature:()
aiQuatKey::aiQuatKey	lib/assimp/anim.h	/^    aiQuatKey(double time, const aiQuaternion& value)$/;"	f	struct:aiQuatKey	access:public	signature:(double time, const aiQuaternion& value)
aiQuatKey::elem_type	lib/__assimp/anim.h	/^    typedef aiQuaternion elem_type;$/;"	t	struct:aiQuatKey	access:public
aiQuatKey::elem_type	lib/assimp/anim.h	/^    typedef aiQuaternion elem_type;$/;"	t	struct:aiQuatKey	access:public
aiQuatKey::mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiQuatKey	access:public
aiQuatKey::mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiQuatKey	access:public
aiQuatKey::mValue	lib/__assimp/anim.h	/^    C_STRUCT aiQuaternion mValue;$/;"	m	struct:aiQuatKey	access:public
aiQuatKey::mValue	lib/assimp/anim.h	/^    C_STRUCT aiQuaternion mValue;$/;"	m	struct:aiQuatKey	access:public
aiQuatKey::operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator !=	lib/assimp/anim.h	/^    bool operator != (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator <	lib/__assimp/anim.h	/^    bool operator < (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator <	lib/assimp/anim.h	/^    bool operator < (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator ==	lib/assimp/anim.h	/^    bool operator == (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator >	lib/__assimp/anim.h	/^    bool operator > (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuatKey::operator >	lib/assimp/anim.h	/^    bool operator > (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
aiQuaternion	lib/__assimp/quaternion.h	/^struct aiQuaternion {$/;"	s
aiQuaternion	lib/__assimp/quaternion.h	/^typedef aiQuaterniont<ai_real> aiQuaternion;$/;"	t
aiQuaternion	lib/assimp/quaternion.h	/^struct aiQuaternion {$/;"	s
aiQuaternion	lib/assimp/quaternion.h	/^typedef aiQuaterniont<float> aiQuaternion;$/;"	t
aiQuaternion::w	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::w	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::x	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::x	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::y	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::y	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::z	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaternion::z	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
aiQuaterniont	lib/__assimp/quaternion.h	/^    aiQuaterniont() : w(1.0), x(), y(), z() {}$/;"	f	class:aiQuaterniont	access:public	signature:()
aiQuaterniont	lib/__assimp/quaternion.h	/^    aiQuaterniont(TReal pw, TReal px, TReal py, TReal pz)$/;"	f	class:aiQuaterniont	access:public	signature:(TReal pw, TReal px, TReal py, TReal pz)
aiQuaterniont	lib/__assimp/quaternion.h	/^class aiQuaterniont$/;"	c
aiQuaterniont	lib/assimp/quaternion.h	/^    aiQuaterniont() : w(1.0), x(), y(), z() {}$/;"	f	class:aiQuaterniont	access:public	signature:()
aiQuaterniont	lib/assimp/quaternion.h	/^    aiQuaterniont(TReal pw, TReal px, TReal py, TReal pz)$/;"	f	class:aiQuaterniont	access:public	signature:(TReal pw, TReal px, TReal py, TReal pz)
aiQuaterniont	lib/assimp/quaternion.h	/^class aiQuaterniont$/;"	c
aiQuaterniont::aiQuaterniont	lib/__assimp/quaternion.h	/^    aiQuaterniont() : w(1.0), x(), y(), z() {}$/;"	f	class:aiQuaterniont	access:public	signature:()
aiQuaterniont::aiQuaterniont	lib/__assimp/quaternion.h	/^    aiQuaterniont(TReal pw, TReal px, TReal py, TReal pz)$/;"	f	class:aiQuaterniont	access:public	signature:(TReal pw, TReal px, TReal py, TReal pz)
aiQuaterniont::aiQuaterniont	lib/assimp/quaternion.h	/^    aiQuaterniont() : w(1.0), x(), y(), z() {}$/;"	f	class:aiQuaterniont	access:public	signature:()
aiQuaterniont::aiQuaterniont	lib/assimp/quaternion.h	/^    aiQuaterniont(TReal pw, TReal px, TReal py, TReal pz)$/;"	f	class:aiQuaterniont	access:public	signature:(TReal pw, TReal px, TReal py, TReal pz)
aiQuaterniont::w	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::w	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::x	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::x	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::y	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::y	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::z	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiQuaterniont::z	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
aiRay	lib/__assimp/types.h	/^    aiRay () {}$/;"	f	struct:aiRay	access:public	signature:()
aiRay	lib/__assimp/types.h	/^    aiRay (const aiRay& o) : pos (o.pos), dir (o.dir) {}$/;"	f	struct:aiRay	access:public	signature:(const aiRay& o)
aiRay	lib/__assimp/types.h	/^    aiRay (const aiVector3D& _pos, const aiVector3D& _dir)$/;"	f	struct:aiRay	access:public	signature:(const aiVector3D& _pos, const aiVector3D& _dir)
aiRay	lib/__assimp/types.h	/^struct aiRay$/;"	s
aiRay	lib/assimp/types.h	/^    aiRay () {}$/;"	f	struct:aiRay	access:public	signature:()
aiRay	lib/assimp/types.h	/^    aiRay (const aiRay& o) : pos (o.pos), dir (o.dir) {}$/;"	f	struct:aiRay	access:public	signature:(const aiRay& o)
aiRay	lib/assimp/types.h	/^    aiRay (const aiVector3D& _pos, const aiVector3D& _dir)$/;"	f	struct:aiRay	access:public	signature:(const aiVector3D& _pos, const aiVector3D& _dir)
aiRay	lib/assimp/types.h	/^struct aiRay$/;"	s
aiRay::aiRay	lib/__assimp/types.h	/^    aiRay () {}$/;"	f	struct:aiRay	access:public	signature:()
aiRay::aiRay	lib/__assimp/types.h	/^    aiRay (const aiRay& o) : pos (o.pos), dir (o.dir) {}$/;"	f	struct:aiRay	access:public	signature:(const aiRay& o)
aiRay::aiRay	lib/__assimp/types.h	/^    aiRay (const aiVector3D& _pos, const aiVector3D& _dir)$/;"	f	struct:aiRay	access:public	signature:(const aiVector3D& _pos, const aiVector3D& _dir)
aiRay::aiRay	lib/assimp/types.h	/^    aiRay () {}$/;"	f	struct:aiRay	access:public	signature:()
aiRay::aiRay	lib/assimp/types.h	/^    aiRay (const aiRay& o) : pos (o.pos), dir (o.dir) {}$/;"	f	struct:aiRay	access:public	signature:(const aiRay& o)
aiRay::aiRay	lib/assimp/types.h	/^    aiRay (const aiVector3D& _pos, const aiVector3D& _dir)$/;"	f	struct:aiRay	access:public	signature:(const aiVector3D& _pos, const aiVector3D& _dir)
aiRay::dir	lib/__assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
aiRay::dir	lib/assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
aiRay::pos	lib/__assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
aiRay::pos	lib/assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
aiReturn	lib/__assimp/types.h	/^typedef enum aiReturn$/;"	g
aiReturn	lib/__assimp/types.h	/^} aiReturn;  \/\/ !enum aiReturn$/;"	t	typeref:enum:aiReturn
aiReturn	lib/assimp/types.h	/^typedef enum aiReturn$/;"	g
aiReturn	lib/assimp/types.h	/^} aiReturn;  \/\/ !enum aiReturn$/;"	t	typeref:enum:aiReturn
aiReturn_FAILURE	lib/__assimp/types.h	/^    aiReturn_FAILURE = -0x1,$/;"	e	enum:aiReturn
aiReturn_FAILURE	lib/assimp/types.h	/^    aiReturn_FAILURE = -0x1,$/;"	e	enum:aiReturn
aiReturn_OUTOFMEMORY	lib/__assimp/types.h	/^    aiReturn_OUTOFMEMORY = -0x3,$/;"	e	enum:aiReturn
aiReturn_OUTOFMEMORY	lib/assimp/types.h	/^    aiReturn_OUTOFMEMORY = -0x3,$/;"	e	enum:aiReturn
aiReturn_SUCCESS	lib/__assimp/types.h	/^    aiReturn_SUCCESS = 0x0,$/;"	e	enum:aiReturn
aiReturn_SUCCESS	lib/assimp/types.h	/^    aiReturn_SUCCESS = 0x0,$/;"	e	enum:aiReturn
aiScene	lib/__assimp/scene.h	/^struct aiScene$/;"	s
aiScene	lib/assimp/scene.h	/^struct aiScene$/;"	s
aiScene::HasAnimations	lib/__assimp/scene.h	/^    inline bool HasAnimations() const { $/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasAnimations	lib/assimp/scene.h	/^    inline bool HasAnimations() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasCameras	lib/__assimp/scene.h	/^    inline bool HasCameras() const {$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasCameras	lib/assimp/scene.h	/^    inline bool HasCameras() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasLights	lib/__assimp/scene.h	/^    inline bool HasLights() const { $/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasLights	lib/assimp/scene.h	/^    inline bool HasLights() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasMaterials	lib/__assimp/scene.h	/^    inline bool HasMaterials() const { $/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasMaterials	lib/assimp/scene.h	/^    inline bool HasMaterials() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasMeshes	lib/__assimp/scene.h	/^    inline bool HasMeshes() const { $/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasMeshes	lib/assimp/scene.h	/^    inline bool HasMeshes() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasTextures	lib/__assimp/scene.h	/^    inline bool HasTextures() const {$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::HasTextures	lib/assimp/scene.h	/^    inline bool HasTextures() const$/;"	f	struct:aiScene	access:public	signature:() const
aiScene::mAnimations	lib/__assimp/scene.h	/^    C_STRUCT aiAnimation** mAnimations;$/;"	m	struct:aiScene	access:public
aiScene::mAnimations	lib/assimp/scene.h	/^    C_STRUCT aiAnimation** mAnimations;$/;"	m	struct:aiScene	access:public
aiScene::mCameras	lib/__assimp/scene.h	/^    C_STRUCT aiCamera** mCameras;$/;"	m	struct:aiScene	access:public
aiScene::mCameras	lib/assimp/scene.h	/^    C_STRUCT aiCamera** mCameras;$/;"	m	struct:aiScene	access:public
aiScene::mFlags	lib/__assimp/scene.h	/^    unsigned int mFlags;$/;"	m	struct:aiScene	access:public
aiScene::mFlags	lib/assimp/scene.h	/^    unsigned int mFlags;$/;"	m	struct:aiScene	access:public
aiScene::mLights	lib/__assimp/scene.h	/^    C_STRUCT aiLight** mLights;$/;"	m	struct:aiScene	access:public
aiScene::mLights	lib/assimp/scene.h	/^    C_STRUCT aiLight** mLights;$/;"	m	struct:aiScene	access:public
aiScene::mMaterials	lib/__assimp/scene.h	/^    C_STRUCT aiMaterial** mMaterials;$/;"	m	struct:aiScene	access:public
aiScene::mMaterials	lib/assimp/scene.h	/^    C_STRUCT aiMaterial** mMaterials;$/;"	m	struct:aiScene	access:public
aiScene::mMeshes	lib/__assimp/scene.h	/^    C_STRUCT aiMesh** mMeshes;$/;"	m	struct:aiScene	access:public
aiScene::mMeshes	lib/assimp/scene.h	/^    C_STRUCT aiMesh** mMeshes;$/;"	m	struct:aiScene	access:public
aiScene::mNumAnimations	lib/__assimp/scene.h	/^    unsigned int mNumAnimations;$/;"	m	struct:aiScene	access:public
aiScene::mNumAnimations	lib/assimp/scene.h	/^    unsigned int mNumAnimations;$/;"	m	struct:aiScene	access:public
aiScene::mNumCameras	lib/__assimp/scene.h	/^    unsigned int mNumCameras;$/;"	m	struct:aiScene	access:public
aiScene::mNumCameras	lib/assimp/scene.h	/^    unsigned int mNumCameras;$/;"	m	struct:aiScene	access:public
aiScene::mNumLights	lib/__assimp/scene.h	/^    unsigned int mNumLights;$/;"	m	struct:aiScene	access:public
aiScene::mNumLights	lib/assimp/scene.h	/^    unsigned int mNumLights;$/;"	m	struct:aiScene	access:public
aiScene::mNumMaterials	lib/__assimp/scene.h	/^    unsigned int mNumMaterials;$/;"	m	struct:aiScene	access:public
aiScene::mNumMaterials	lib/assimp/scene.h	/^    unsigned int mNumMaterials;$/;"	m	struct:aiScene	access:public
aiScene::mNumMeshes	lib/__assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiScene	access:public
aiScene::mNumMeshes	lib/assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiScene	access:public
aiScene::mNumTextures	lib/__assimp/scene.h	/^    unsigned int mNumTextures;$/;"	m	struct:aiScene	access:public
aiScene::mNumTextures	lib/assimp/scene.h	/^    unsigned int mNumTextures;$/;"	m	struct:aiScene	access:public
aiScene::mPrivate	lib/__assimp/scene.h	/^    char* mPrivate;$/;"	m	struct:aiScene	access:public
aiScene::mPrivate	lib/__assimp/scene.h	/^    void* mPrivate;$/;"	m	struct:aiScene	access:public
aiScene::mPrivate	lib/assimp/scene.h	/^    char* mPrivate;$/;"	m	struct:aiScene	access:public
aiScene::mPrivate	lib/assimp/scene.h	/^    void* mPrivate;$/;"	m	struct:aiScene	access:public
aiScene::mRootNode	lib/__assimp/scene.h	/^    C_STRUCT aiNode* mRootNode;$/;"	m	struct:aiScene	access:public
aiScene::mRootNode	lib/assimp/scene.h	/^    C_STRUCT aiNode* mRootNode;$/;"	m	struct:aiScene	access:public
aiScene::mTextures	lib/__assimp/scene.h	/^    C_STRUCT aiTexture** mTextures;$/;"	m	struct:aiScene	access:public
aiScene::mTextures	lib/assimp/scene.h	/^    C_STRUCT aiTexture** mTextures;$/;"	m	struct:aiScene	access:public
aiShadingMode	lib/__assimp/material.h	/^enum aiShadingMode$/;"	g
aiShadingMode	lib/assimp/material.h	/^enum aiShadingMode$/;"	g
aiShadingMode_Blinn	lib/__assimp/material.h	/^    aiShadingMode_Blinn = 0x4,$/;"	e	enum:aiShadingMode
aiShadingMode_Blinn	lib/assimp/material.h	/^    aiShadingMode_Blinn = 0x4,$/;"	e	enum:aiShadingMode
aiShadingMode_CookTorrance	lib/__assimp/material.h	/^    aiShadingMode_CookTorrance = 0x8,$/;"	e	enum:aiShadingMode
aiShadingMode_CookTorrance	lib/assimp/material.h	/^    aiShadingMode_CookTorrance = 0x8,$/;"	e	enum:aiShadingMode
aiShadingMode_Flat	lib/__assimp/material.h	/^    aiShadingMode_Flat = 0x1,$/;"	e	enum:aiShadingMode
aiShadingMode_Flat	lib/assimp/material.h	/^    aiShadingMode_Flat = 0x1,$/;"	e	enum:aiShadingMode
aiShadingMode_Fresnel	lib/__assimp/material.h	/^    aiShadingMode_Fresnel = 0xa,$/;"	e	enum:aiShadingMode
aiShadingMode_Fresnel	lib/assimp/material.h	/^    aiShadingMode_Fresnel = 0xa,$/;"	e	enum:aiShadingMode
aiShadingMode_Gouraud	lib/__assimp/material.h	/^    aiShadingMode_Gouraud = 0x2,$/;"	e	enum:aiShadingMode
aiShadingMode_Gouraud	lib/assimp/material.h	/^    aiShadingMode_Gouraud = 0x2,$/;"	e	enum:aiShadingMode
aiShadingMode_Minnaert	lib/__assimp/material.h	/^    aiShadingMode_Minnaert = 0x7,$/;"	e	enum:aiShadingMode
aiShadingMode_Minnaert	lib/assimp/material.h	/^    aiShadingMode_Minnaert = 0x7,$/;"	e	enum:aiShadingMode
aiShadingMode_NoShading	lib/__assimp/material.h	/^    aiShadingMode_NoShading = 0x9,$/;"	e	enum:aiShadingMode
aiShadingMode_NoShading	lib/assimp/material.h	/^    aiShadingMode_NoShading = 0x9,$/;"	e	enum:aiShadingMode
aiShadingMode_OrenNayar	lib/__assimp/material.h	/^    aiShadingMode_OrenNayar = 0x6,$/;"	e	enum:aiShadingMode
aiShadingMode_OrenNayar	lib/assimp/material.h	/^    aiShadingMode_OrenNayar = 0x6,$/;"	e	enum:aiShadingMode
aiShadingMode_Phong	lib/__assimp/material.h	/^    aiShadingMode_Phong = 0x3,$/;"	e	enum:aiShadingMode
aiShadingMode_Phong	lib/assimp/material.h	/^    aiShadingMode_Phong = 0x3,$/;"	e	enum:aiShadingMode
aiShadingMode_Toon	lib/__assimp/material.h	/^    aiShadingMode_Toon = 0x5,$/;"	e	enum:aiShadingMode
aiShadingMode_Toon	lib/assimp/material.h	/^    aiShadingMode_Toon = 0x5,$/;"	e	enum:aiShadingMode
aiString	lib/__assimp/types.h	/^    aiString() :$/;"	f	struct:aiString	access:public	signature:()
aiString	lib/__assimp/types.h	/^    aiString(const aiString& rOther) :$/;"	f	struct:aiString	access:public	signature:(const aiString& rOther)
aiString	lib/__assimp/types.h	/^    explicit aiString(const std::string& pString) :$/;"	f	struct:aiString	access:public	signature:(const std::string& pString)
aiString	lib/__assimp/types.h	/^struct aiString$/;"	s
aiString	lib/assimp/types.h	/^    aiString() :$/;"	f	struct:aiString	access:public	signature:()
aiString	lib/assimp/types.h	/^    aiString(const aiString& rOther) :$/;"	f	struct:aiString	access:public	signature:(const aiString& rOther)
aiString	lib/assimp/types.h	/^    explicit aiString(const std::string& pString) :$/;"	f	struct:aiString	access:public	signature:(const std::string& pString)
aiString	lib/assimp/types.h	/^struct aiString$/;"	s
aiString::Append	lib/__assimp/types.h	/^    void Append (const char* app)   {$/;"	f	struct:aiString	access:public	signature:(const char* app)
aiString::Append	lib/assimp/types.h	/^    void Append (const char* app)   {$/;"	f	struct:aiString	access:public	signature:(const char* app)
aiString::C_Str	lib/__assimp/types.h	/^    const char* C_Str() const {$/;"	f	struct:aiString	access:public	signature:() const
aiString::C_Str	lib/assimp/types.h	/^    const char* C_Str() const {$/;"	f	struct:aiString	access:public	signature:() const
aiString::Clear	lib/__assimp/types.h	/^    void Clear ()   {$/;"	f	struct:aiString	access:public	signature:()
aiString::Clear	lib/assimp/types.h	/^    void Clear ()   {$/;"	f	struct:aiString	access:public	signature:()
aiString::Set	lib/__assimp/types.h	/^    void Set( const char* sz) {$/;"	f	struct:aiString	access:public	signature:( const char* sz)
aiString::Set	lib/__assimp/types.h	/^    void Set( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
aiString::Set	lib/assimp/types.h	/^    void Set( const char* sz) {$/;"	f	struct:aiString	access:public	signature:( const char* sz)
aiString::Set	lib/assimp/types.h	/^    void Set( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
aiString::aiString	lib/__assimp/types.h	/^    aiString() :$/;"	f	struct:aiString	access:public	signature:()
aiString::aiString	lib/__assimp/types.h	/^    aiString(const aiString& rOther) :$/;"	f	struct:aiString	access:public	signature:(const aiString& rOther)
aiString::aiString	lib/__assimp/types.h	/^    explicit aiString(const std::string& pString) :$/;"	f	struct:aiString	access:public	signature:(const std::string& pString)
aiString::aiString	lib/assimp/types.h	/^    aiString() :$/;"	f	struct:aiString	access:public	signature:()
aiString::aiString	lib/assimp/types.h	/^    aiString(const aiString& rOther) :$/;"	f	struct:aiString	access:public	signature:(const aiString& rOther)
aiString::aiString	lib/assimp/types.h	/^    explicit aiString(const std::string& pString) :$/;"	f	struct:aiString	access:public	signature:(const std::string& pString)
aiString::data	lib/__assimp/types.h	/^    char data[MAXLEN];$/;"	m	struct:aiString	access:public
aiString::data	lib/assimp/types.h	/^    char data[MAXLEN];$/;"	m	struct:aiString	access:public
aiString::length	lib/__assimp/types.h	/^    size_t length;$/;"	m	struct:aiString	access:public
aiString::length	lib/assimp/types.h	/^    size_t length;$/;"	m	struct:aiString	access:public
aiString::operator !=	lib/__assimp/types.h	/^    bool operator!=(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
aiString::operator !=	lib/assimp/types.h	/^    bool operator!=(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
aiString::operator =	lib/__assimp/types.h	/^    aiString& operator = ( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
aiString::operator =	lib/__assimp/types.h	/^    aiString& operator = (const char* sz) {$/;"	f	struct:aiString	access:public	signature:(const char* sz)
aiString::operator =	lib/assimp/types.h	/^    aiString& operator = ( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
aiString::operator =	lib/assimp/types.h	/^    aiString& operator = (const char* sz) {$/;"	f	struct:aiString	access:public	signature:(const char* sz)
aiString::operator ==	lib/__assimp/types.h	/^    bool operator==(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
aiString::operator ==	lib/assimp/types.h	/^    bool operator==(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
aiTexel	lib/__assimp/texture.h	/^struct aiTexel$/;"	s
aiTexel	lib/assimp/texture.h	/^struct aiTexel$/;"	s
aiTexel::a	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::a	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::b	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::b	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::g	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::g	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::operator !=	lib/__assimp/texture.h	/^    bool operator!= (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
aiTexel::operator !=	lib/assimp/texture.h	/^    bool operator!= (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
aiTexel::operator ==	lib/__assimp/texture.h	/^    bool operator== (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
aiTexel::operator ==	lib/assimp/texture.h	/^    bool operator== (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
aiTexel::operator aiColor4D	lib/__assimp/texture.h	/^    operator aiColor4D() const$/;"	f	struct:aiTexel	access:public	signature:() const
aiTexel::operator aiColor4D	lib/assimp/texture.h	/^    operator aiColor4D() const$/;"	f	struct:aiTexel	access:public	signature:() const
aiTexel::r	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexel::r	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
aiTexture	lib/__assimp/texture.h	/^    aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTexture	lib/__assimp/texture.h	/^struct aiTexture$/;"	s
aiTexture	lib/assimp/texture.h	/^    aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTexture	lib/assimp/texture.h	/^struct aiTexture$/;"	s
aiTexture::CheckFormat	lib/__assimp/texture.h	/^    bool CheckFormat(const char* s) const$/;"	f	struct:aiTexture	access:public	signature:(const char* s) const
aiTexture::CheckFormat	lib/assimp/texture.h	/^    bool CheckFormat(const char* s) const$/;"	f	struct:aiTexture	access:public	signature:(const char* s) const
aiTexture::achFormatHint	lib/__assimp/texture.h	/^    char achFormatHint[9];\/\/ 8 for string + 1 for terminator.$/;"	m	struct:aiTexture	access:public
aiTexture::achFormatHint	lib/assimp/texture.h	/^    char achFormatHint[4];$/;"	m	struct:aiTexture	access:public
aiTexture::aiTexture	lib/__assimp/texture.h	/^    aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTexture::aiTexture	lib/assimp/texture.h	/^    aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTexture::mHeight	lib/__assimp/texture.h	/^    unsigned int mHeight;$/;"	m	struct:aiTexture	access:public
aiTexture::mHeight	lib/assimp/texture.h	/^    unsigned int mHeight;$/;"	m	struct:aiTexture	access:public
aiTexture::mWidth	lib/__assimp/texture.h	/^    unsigned int mWidth;$/;"	m	struct:aiTexture	access:public
aiTexture::mWidth	lib/assimp/texture.h	/^    unsigned int mWidth;$/;"	m	struct:aiTexture	access:public
aiTexture::pcData	lib/__assimp/texture.h	/^    C_STRUCT aiTexel* pcData;$/;"	m	struct:aiTexture	access:public
aiTexture::pcData	lib/assimp/texture.h	/^    C_STRUCT aiTexel* pcData;$/;"	m	struct:aiTexture	access:public
aiTexture::~aiTexture	lib/__assimp/texture.h	/^    ~aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTexture::~aiTexture	lib/assimp/texture.h	/^    ~aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
aiTextureFlags	lib/__assimp/material.h	/^enum aiTextureFlags$/;"	g
aiTextureFlags	lib/assimp/material.h	/^enum aiTextureFlags$/;"	g
aiTextureFlags_IgnoreAlpha	lib/__assimp/material.h	/^    aiTextureFlags_IgnoreAlpha = 0x4,$/;"	e	enum:aiTextureFlags
aiTextureFlags_IgnoreAlpha	lib/assimp/material.h	/^    aiTextureFlags_IgnoreAlpha = 0x4,$/;"	e	enum:aiTextureFlags
aiTextureFlags_Invert	lib/__assimp/material.h	/^    aiTextureFlags_Invert = 0x1,$/;"	e	enum:aiTextureFlags
aiTextureFlags_Invert	lib/assimp/material.h	/^    aiTextureFlags_Invert = 0x1,$/;"	e	enum:aiTextureFlags
aiTextureFlags_UseAlpha	lib/__assimp/material.h	/^    aiTextureFlags_UseAlpha = 0x2,$/;"	e	enum:aiTextureFlags
aiTextureFlags_UseAlpha	lib/assimp/material.h	/^    aiTextureFlags_UseAlpha = 0x2,$/;"	e	enum:aiTextureFlags
aiTextureMapMode	lib/__assimp/material.h	/^enum aiTextureMapMode$/;"	g
aiTextureMapMode	lib/assimp/material.h	/^enum aiTextureMapMode$/;"	g
aiTextureMapMode_Clamp	lib/__assimp/material.h	/^    aiTextureMapMode_Clamp = 0x1,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Clamp	lib/assimp/material.h	/^    aiTextureMapMode_Clamp = 0x1,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Decal	lib/__assimp/material.h	/^    aiTextureMapMode_Decal = 0x3,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Decal	lib/assimp/material.h	/^    aiTextureMapMode_Decal = 0x3,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Mirror	lib/__assimp/material.h	/^    aiTextureMapMode_Mirror = 0x2,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Mirror	lib/assimp/material.h	/^    aiTextureMapMode_Mirror = 0x2,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Wrap	lib/__assimp/material.h	/^    aiTextureMapMode_Wrap = 0x0,$/;"	e	enum:aiTextureMapMode
aiTextureMapMode_Wrap	lib/assimp/material.h	/^    aiTextureMapMode_Wrap = 0x0,$/;"	e	enum:aiTextureMapMode
aiTextureMapping	lib/__assimp/material.h	/^enum aiTextureMapping$/;"	g
aiTextureMapping	lib/assimp/material.h	/^enum aiTextureMapping$/;"	g
aiTextureMapping_BOX	lib/__assimp/material.h	/^    aiTextureMapping_BOX = 0x3,$/;"	e	enum:aiTextureMapping
aiTextureMapping_BOX	lib/assimp/material.h	/^    aiTextureMapping_BOX = 0x3,$/;"	e	enum:aiTextureMapping
aiTextureMapping_CYLINDER	lib/__assimp/material.h	/^    aiTextureMapping_CYLINDER = 0x2,$/;"	e	enum:aiTextureMapping
aiTextureMapping_CYLINDER	lib/assimp/material.h	/^    aiTextureMapping_CYLINDER = 0x2,$/;"	e	enum:aiTextureMapping
aiTextureMapping_OTHER	lib/__assimp/material.h	/^    aiTextureMapping_OTHER = 0x5,$/;"	e	enum:aiTextureMapping
aiTextureMapping_OTHER	lib/assimp/material.h	/^    aiTextureMapping_OTHER = 0x5,$/;"	e	enum:aiTextureMapping
aiTextureMapping_PLANE	lib/__assimp/material.h	/^    aiTextureMapping_PLANE = 0x4,$/;"	e	enum:aiTextureMapping
aiTextureMapping_PLANE	lib/assimp/material.h	/^    aiTextureMapping_PLANE = 0x4,$/;"	e	enum:aiTextureMapping
aiTextureMapping_SPHERE	lib/__assimp/material.h	/^    aiTextureMapping_SPHERE = 0x1,$/;"	e	enum:aiTextureMapping
aiTextureMapping_SPHERE	lib/assimp/material.h	/^    aiTextureMapping_SPHERE = 0x1,$/;"	e	enum:aiTextureMapping
aiTextureMapping_UV	lib/__assimp/material.h	/^    aiTextureMapping_UV = 0x0,$/;"	e	enum:aiTextureMapping
aiTextureMapping_UV	lib/assimp/material.h	/^    aiTextureMapping_UV = 0x0,$/;"	e	enum:aiTextureMapping
aiTextureOp	lib/__assimp/material.h	/^enum aiTextureOp$/;"	g
aiTextureOp	lib/assimp/material.h	/^enum aiTextureOp$/;"	g
aiTextureOp_Add	lib/__assimp/material.h	/^    aiTextureOp_Add = 0x1,$/;"	e	enum:aiTextureOp
aiTextureOp_Add	lib/assimp/material.h	/^    aiTextureOp_Add = 0x1,$/;"	e	enum:aiTextureOp
aiTextureOp_Divide	lib/__assimp/material.h	/^    aiTextureOp_Divide = 0x3,$/;"	e	enum:aiTextureOp
aiTextureOp_Divide	lib/assimp/material.h	/^    aiTextureOp_Divide = 0x3,$/;"	e	enum:aiTextureOp
aiTextureOp_Multiply	lib/__assimp/material.h	/^    aiTextureOp_Multiply = 0x0,$/;"	e	enum:aiTextureOp
aiTextureOp_Multiply	lib/assimp/material.h	/^    aiTextureOp_Multiply = 0x0,$/;"	e	enum:aiTextureOp
aiTextureOp_SignedAdd	lib/__assimp/material.h	/^    aiTextureOp_SignedAdd = 0x5,$/;"	e	enum:aiTextureOp
aiTextureOp_SignedAdd	lib/assimp/material.h	/^    aiTextureOp_SignedAdd = 0x5,$/;"	e	enum:aiTextureOp
aiTextureOp_SmoothAdd	lib/__assimp/material.h	/^    aiTextureOp_SmoothAdd = 0x4,$/;"	e	enum:aiTextureOp
aiTextureOp_SmoothAdd	lib/assimp/material.h	/^    aiTextureOp_SmoothAdd = 0x4,$/;"	e	enum:aiTextureOp
aiTextureOp_Subtract	lib/__assimp/material.h	/^    aiTextureOp_Subtract = 0x2,$/;"	e	enum:aiTextureOp
aiTextureOp_Subtract	lib/assimp/material.h	/^    aiTextureOp_Subtract = 0x2,$/;"	e	enum:aiTextureOp
aiTextureType	lib/__assimp/material.h	/^enum aiTextureType$/;"	g
aiTextureType	lib/assimp/material.h	/^enum aiTextureType$/;"	g
aiTextureType_AMBIENT	lib/__assimp/material.h	/^    aiTextureType_AMBIENT = 0x3,$/;"	e	enum:aiTextureType
aiTextureType_AMBIENT	lib/assimp/material.h	/^    aiTextureType_AMBIENT = 0x3,$/;"	e	enum:aiTextureType
aiTextureType_DIFFUSE	lib/__assimp/material.h	/^    aiTextureType_DIFFUSE = 0x1,$/;"	e	enum:aiTextureType
aiTextureType_DIFFUSE	lib/assimp/material.h	/^    aiTextureType_DIFFUSE = 0x1,$/;"	e	enum:aiTextureType
aiTextureType_DISPLACEMENT	lib/__assimp/material.h	/^    aiTextureType_DISPLACEMENT = 0x9,$/;"	e	enum:aiTextureType
aiTextureType_DISPLACEMENT	lib/assimp/material.h	/^    aiTextureType_DISPLACEMENT = 0x9,$/;"	e	enum:aiTextureType
aiTextureType_EMISSIVE	lib/__assimp/material.h	/^    aiTextureType_EMISSIVE = 0x4,$/;"	e	enum:aiTextureType
aiTextureType_EMISSIVE	lib/assimp/material.h	/^    aiTextureType_EMISSIVE = 0x4,$/;"	e	enum:aiTextureType
aiTextureType_HEIGHT	lib/__assimp/material.h	/^    aiTextureType_HEIGHT = 0x5,$/;"	e	enum:aiTextureType
aiTextureType_HEIGHT	lib/assimp/material.h	/^    aiTextureType_HEIGHT = 0x5,$/;"	e	enum:aiTextureType
aiTextureType_LIGHTMAP	lib/__assimp/material.h	/^    aiTextureType_LIGHTMAP = 0xA,$/;"	e	enum:aiTextureType
aiTextureType_LIGHTMAP	lib/assimp/material.h	/^    aiTextureType_LIGHTMAP = 0xA,$/;"	e	enum:aiTextureType
aiTextureType_NONE	lib/__assimp/material.h	/^    aiTextureType_NONE = 0x0,$/;"	e	enum:aiTextureType
aiTextureType_NONE	lib/assimp/material.h	/^    aiTextureType_NONE = 0x0,$/;"	e	enum:aiTextureType
aiTextureType_NORMALS	lib/__assimp/material.h	/^    aiTextureType_NORMALS = 0x6,$/;"	e	enum:aiTextureType
aiTextureType_NORMALS	lib/assimp/material.h	/^    aiTextureType_NORMALS = 0x6,$/;"	e	enum:aiTextureType
aiTextureType_OPACITY	lib/__assimp/material.h	/^    aiTextureType_OPACITY = 0x8,$/;"	e	enum:aiTextureType
aiTextureType_OPACITY	lib/assimp/material.h	/^    aiTextureType_OPACITY = 0x8,$/;"	e	enum:aiTextureType
aiTextureType_REFLECTION	lib/__assimp/material.h	/^    aiTextureType_REFLECTION = 0xB,$/;"	e	enum:aiTextureType
aiTextureType_REFLECTION	lib/assimp/material.h	/^    aiTextureType_REFLECTION = 0xB,$/;"	e	enum:aiTextureType
aiTextureType_SHININESS	lib/__assimp/material.h	/^    aiTextureType_SHININESS = 0x7,$/;"	e	enum:aiTextureType
aiTextureType_SHININESS	lib/assimp/material.h	/^    aiTextureType_SHININESS = 0x7,$/;"	e	enum:aiTextureType
aiTextureType_SPECULAR	lib/__assimp/material.h	/^    aiTextureType_SPECULAR = 0x2,$/;"	e	enum:aiTextureType
aiTextureType_SPECULAR	lib/assimp/material.h	/^    aiTextureType_SPECULAR = 0x2,$/;"	e	enum:aiTextureType
aiTextureType_UNKNOWN	lib/__assimp/material.h	/^    aiTextureType_UNKNOWN = 0xC,$/;"	e	enum:aiTextureType
aiTextureType_UNKNOWN	lib/assimp/material.h	/^    aiTextureType_UNKNOWN = 0xC,$/;"	e	enum:aiTextureType
aiUVTransform	lib/__assimp/material.h	/^    aiUVTransform()$/;"	f	struct:aiUVTransform	access:public	signature:()
aiUVTransform	lib/__assimp/material.h	/^struct aiUVTransform$/;"	s
aiUVTransform	lib/assimp/material.h	/^    aiUVTransform()$/;"	f	struct:aiUVTransform	access:public	signature:()
aiUVTransform	lib/assimp/material.h	/^struct aiUVTransform$/;"	s
aiUVTransform::aiUVTransform	lib/__assimp/material.h	/^    aiUVTransform()$/;"	f	struct:aiUVTransform	access:public	signature:()
aiUVTransform::aiUVTransform	lib/assimp/material.h	/^    aiUVTransform()$/;"	f	struct:aiUVTransform	access:public	signature:()
aiUVTransform::mRotation	lib/__assimp/material.h	/^    ai_real mRotation;$/;"	m	struct:aiUVTransform	access:public
aiUVTransform::mRotation	lib/assimp/material.h	/^    float mRotation;$/;"	m	struct:aiUVTransform	access:public
aiUVTransform::mScaling	lib/__assimp/material.h	/^    C_STRUCT aiVector2D mScaling;$/;"	m	struct:aiUVTransform	access:public
aiUVTransform::mScaling	lib/assimp/material.h	/^    C_STRUCT aiVector2D mScaling;$/;"	m	struct:aiUVTransform	access:public
aiUVTransform::mTranslation	lib/__assimp/material.h	/^    C_STRUCT aiVector2D mTranslation;$/;"	m	struct:aiUVTransform	access:public
aiUVTransform::mTranslation	lib/assimp/material.h	/^    C_STRUCT aiVector2D mTranslation;$/;"	m	struct:aiUVTransform	access:public
aiUserData	lib/__assimp/cfileio.h	/^typedef char* aiUserData;$/;"	t
aiUserData	lib/assimp/cfileio.h	/^typedef char* aiUserData;$/;"	t
aiVector2D	lib/__assimp/vector2.h	/^struct aiVector2D {$/;"	s
aiVector2D	lib/__assimp/vector2.h	/^typedef aiVector2t<ai_real> aiVector2D;$/;"	t
aiVector2D	lib/assimp/vector2.h	/^struct aiVector2D {$/;"	s
aiVector2D	lib/assimp/vector2.h	/^typedef aiVector2t<float> aiVector2D;$/;"	t
aiVector2D::__anon19::__anon20::x	lib/assimp/vector2.h	/^            float x, y;$/;"	m	struct:aiVector2D::__anon19::__anon20	access:public
aiVector2D::__anon19::__anon20::y	lib/assimp/vector2.h	/^            float x, y;$/;"	m	struct:aiVector2D::__anon19::__anon20	access:public
aiVector2D::__anon19::v	lib/assimp/vector2.h	/^        float v[ 2 ];$/;"	m	union:aiVector2D::__anon19	access:public
aiVector2D::x	lib/__assimp/vector2.h	/^    ai_real x, y;$/;"	m	struct:aiVector2D	access:public
aiVector2D::y	lib/__assimp/vector2.h	/^    ai_real x, y;$/;"	m	struct:aiVector2D	access:public
aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t () : x(), y() {}$/;"	f	class:aiVector2t	access:public	signature:()
aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t (TReal _x, TReal _y) : x(_x), y(_y) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _x, TReal _y)
aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t (const aiVector2t& o) : x(o.x), y(o.y) {}$/;"	f	class:aiVector2t	access:public	signature:(const aiVector2t& o)
aiVector2t	lib/__assimp/vector2.h	/^    explicit aiVector2t (TReal _xyz) : x(_xyz), y(_xyz) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _xyz)
aiVector2t	lib/__assimp/vector2.h	/^class aiVector2t$/;"	c
aiVector2t	lib/assimp/vector2.h	/^    aiVector2t () : x(), y() {}$/;"	f	class:aiVector2t	access:public	signature:()
aiVector2t	lib/assimp/vector2.h	/^    aiVector2t (TReal _x, TReal _y) : x(_x), y(_y) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _x, TReal _y)
aiVector2t	lib/assimp/vector2.h	/^    aiVector2t (const aiVector2t& o) : x(o.x), y(o.y) {}$/;"	f	class:aiVector2t	access:public	signature:(const aiVector2t& o)
aiVector2t	lib/assimp/vector2.h	/^    explicit aiVector2t (TReal _xyz) : x(_xyz), y(_xyz) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _xyz)
aiVector2t	lib/assimp/vector2.h	/^class aiVector2t$/;"	c
aiVector2t::__anon17::__anon18::x	lib/assimp/vector2.h	/^            TReal x, y;$/;"	m	struct:aiVector2t::__anon17::__anon18	access:public
aiVector2t::__anon17::__anon18::y	lib/assimp/vector2.h	/^            TReal x, y;$/;"	m	struct:aiVector2t::__anon17::__anon18	access:public
aiVector2t::__anon17::v	lib/assimp/vector2.h	/^        TReal v[ 2 ];$/;"	m	union:aiVector2t::__anon17	access:public
aiVector2t::aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t () : x(), y() {}$/;"	f	class:aiVector2t	access:public	signature:()
aiVector2t::aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t (TReal _x, TReal _y) : x(_x), y(_y) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _x, TReal _y)
aiVector2t::aiVector2t	lib/__assimp/vector2.h	/^    aiVector2t (const aiVector2t& o) : x(o.x), y(o.y) {}$/;"	f	class:aiVector2t	access:public	signature:(const aiVector2t& o)
aiVector2t::aiVector2t	lib/__assimp/vector2.h	/^    explicit aiVector2t (TReal _xyz) : x(_xyz), y(_xyz) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _xyz)
aiVector2t::aiVector2t	lib/assimp/vector2.h	/^    aiVector2t () : x(), y() {}$/;"	f	class:aiVector2t	access:public	signature:()
aiVector2t::aiVector2t	lib/assimp/vector2.h	/^    aiVector2t (TReal _x, TReal _y) : x(_x), y(_y) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _x, TReal _y)
aiVector2t::aiVector2t	lib/assimp/vector2.h	/^    aiVector2t (const aiVector2t& o) : x(o.x), y(o.y) {}$/;"	f	class:aiVector2t	access:public	signature:(const aiVector2t& o)
aiVector2t::aiVector2t	lib/assimp/vector2.h	/^    explicit aiVector2t (TReal _xyz) : x(_xyz), y(_xyz) {}$/;"	f	class:aiVector2t	access:public	signature:(TReal _xyz)
aiVector2t::x	lib/__assimp/vector2.h	/^    TReal x, y;$/;"	m	class:aiVector2t	access:public
aiVector2t::y	lib/__assimp/vector2.h	/^    TReal x, y;$/;"	m	class:aiVector2t	access:public
aiVector3D	lib/__assimp/vector3.h	/^struct aiVector3D {$/;"	s
aiVector3D	lib/__assimp/vector3.h	/^typedef aiVector3t<ai_real> aiVector3D;$/;"	t
aiVector3D	lib/assimp/vector3.h	/^struct aiVector3D {$/;"	s
aiVector3D	lib/assimp/vector3.h	/^typedef aiVector3t<float> aiVector3D;$/;"	t
aiVector3D::__anon11::__anon12::x	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
aiVector3D::__anon11::__anon12::y	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
aiVector3D::__anon11::__anon12::z	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
aiVector3D::__anon11::v	lib/assimp/vector3.h	/^        float v[ 3 ];$/;"	m	union:aiVector3D::__anon11	access:public
aiVector3D::x	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
aiVector3D::y	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
aiVector3D::z	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t () : x(), y(), z() {}$/;"	f	class:aiVector3t	access:public	signature:()
aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t (TReal _x, TReal _y, TReal _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _x, TReal _y, TReal _z)
aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t (const aiVector3t& o) : x(o.x), y(o.y), z(o.z) {}$/;"	f	class:aiVector3t	access:public	signature:(const aiVector3t& o)
aiVector3t	lib/__assimp/vector3.h	/^    explicit aiVector3t (TReal _xyz) : x(_xyz), y(_xyz), z(_xyz) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _xyz)
aiVector3t	lib/__assimp/vector3.h	/^class aiVector3t$/;"	c
aiVector3t	lib/assimp/vector3.h	/^    aiVector3t () : x(), y(), z() {}$/;"	f	class:aiVector3t	access:public	signature:()
aiVector3t	lib/assimp/vector3.h	/^    aiVector3t (TReal _x, TReal _y, TReal _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _x, TReal _y, TReal _z)
aiVector3t	lib/assimp/vector3.h	/^    aiVector3t (const aiVector3t& o) : x(o.x), y(o.y), z(o.z) {}$/;"	f	class:aiVector3t	access:public	signature:(const aiVector3t& o)
aiVector3t	lib/assimp/vector3.h	/^    explicit aiVector3t (TReal _xyz) : x(_xyz), y(_xyz), z(_xyz) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _xyz)
aiVector3t	lib/assimp/vector3.h	/^class aiVector3t$/;"	c
aiVector3t::__anon9::__anon10::x	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
aiVector3t::__anon9::__anon10::y	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
aiVector3t::__anon9::__anon10::z	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
aiVector3t::__anon9::v	lib/assimp/vector3.h	/^        TReal v[ 3 ];$/;"	m	union:aiVector3t::__anon9	access:public
aiVector3t::aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t () : x(), y(), z() {}$/;"	f	class:aiVector3t	access:public	signature:()
aiVector3t::aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t (TReal _x, TReal _y, TReal _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _x, TReal _y, TReal _z)
aiVector3t::aiVector3t	lib/__assimp/vector3.h	/^    aiVector3t (const aiVector3t& o) : x(o.x), y(o.y), z(o.z) {}$/;"	f	class:aiVector3t	access:public	signature:(const aiVector3t& o)
aiVector3t::aiVector3t	lib/__assimp/vector3.h	/^    explicit aiVector3t (TReal _xyz) : x(_xyz), y(_xyz), z(_xyz) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _xyz)
aiVector3t::aiVector3t	lib/assimp/vector3.h	/^    aiVector3t () : x(), y(), z() {}$/;"	f	class:aiVector3t	access:public	signature:()
aiVector3t::aiVector3t	lib/assimp/vector3.h	/^    aiVector3t (TReal _x, TReal _y, TReal _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _x, TReal _y, TReal _z)
aiVector3t::aiVector3t	lib/assimp/vector3.h	/^    aiVector3t (const aiVector3t& o) : x(o.x), y(o.y), z(o.z) {}$/;"	f	class:aiVector3t	access:public	signature:(const aiVector3t& o)
aiVector3t::aiVector3t	lib/assimp/vector3.h	/^    explicit aiVector3t (TReal _xyz) : x(_xyz), y(_xyz), z(_xyz) {}$/;"	f	class:aiVector3t	access:public	signature:(TReal _xyz)
aiVector3t::x	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
aiVector3t::y	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
aiVector3t::z	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
aiVectorKey	lib/__assimp/anim.h	/^    aiVectorKey() $/;"	f	struct:aiVectorKey	access:public	signature:()
aiVectorKey	lib/__assimp/anim.h	/^    aiVectorKey(double time, const aiVector3D& value)$/;"	f	struct:aiVectorKey	access:public	signature:(double time, const aiVector3D& value)
aiVectorKey	lib/__assimp/anim.h	/^struct aiVectorKey$/;"	s
aiVectorKey	lib/assimp/anim.h	/^    aiVectorKey(){}$/;"	f	struct:aiVectorKey	access:public	signature:()
aiVectorKey	lib/assimp/anim.h	/^    aiVectorKey(double time, const aiVector3D& value)$/;"	f	struct:aiVectorKey	access:public	signature:(double time, const aiVector3D& value)
aiVectorKey	lib/assimp/anim.h	/^struct aiVectorKey$/;"	s
aiVectorKey::aiVectorKey	lib/__assimp/anim.h	/^    aiVectorKey() $/;"	f	struct:aiVectorKey	access:public	signature:()
aiVectorKey::aiVectorKey	lib/__assimp/anim.h	/^    aiVectorKey(double time, const aiVector3D& value)$/;"	f	struct:aiVectorKey	access:public	signature:(double time, const aiVector3D& value)
aiVectorKey::aiVectorKey	lib/assimp/anim.h	/^    aiVectorKey(){}$/;"	f	struct:aiVectorKey	access:public	signature:()
aiVectorKey::aiVectorKey	lib/assimp/anim.h	/^    aiVectorKey(double time, const aiVector3D& value)$/;"	f	struct:aiVectorKey	access:public	signature:(double time, const aiVector3D& value)
aiVectorKey::elem_type	lib/__assimp/anim.h	/^    typedef aiVector3D elem_type;$/;"	t	struct:aiVectorKey	access:public
aiVectorKey::elem_type	lib/assimp/anim.h	/^    typedef aiVector3D elem_type;$/;"	t	struct:aiVectorKey	access:public
aiVectorKey::mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiVectorKey	access:public
aiVectorKey::mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiVectorKey	access:public
aiVectorKey::mValue	lib/__assimp/anim.h	/^    C_STRUCT aiVector3D mValue;$/;"	m	struct:aiVectorKey	access:public
aiVectorKey::mValue	lib/assimp/anim.h	/^    C_STRUCT aiVector3D mValue;$/;"	m	struct:aiVectorKey	access:public
aiVectorKey::operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator !=	lib/assimp/anim.h	/^    bool operator != (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator <	lib/__assimp/anim.h	/^    bool operator < (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator <	lib/assimp/anim.h	/^    bool operator < (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator ==	lib/assimp/anim.h	/^    bool operator == (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator >	lib/__assimp/anim.h	/^    bool operator > (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVectorKey::operator >	lib/assimp/anim.h	/^    bool operator > (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
aiVertexWeight	lib/__assimp/mesh.h	/^    aiVertexWeight( unsigned int pID, float pWeight)$/;"	f	struct:aiVertexWeight	access:public	signature:( unsigned int pID, float pWeight)
aiVertexWeight	lib/__assimp/mesh.h	/^    aiVertexWeight() { }$/;"	f	struct:aiVertexWeight	access:public	signature:()
aiVertexWeight	lib/__assimp/mesh.h	/^struct aiVertexWeight$/;"	s
aiVertexWeight	lib/assimp/mesh.h	/^    aiVertexWeight( unsigned int pID, float pWeight)$/;"	f	struct:aiVertexWeight	access:public	signature:( unsigned int pID, float pWeight)
aiVertexWeight	lib/assimp/mesh.h	/^    aiVertexWeight() { }$/;"	f	struct:aiVertexWeight	access:public	signature:()
aiVertexWeight	lib/assimp/mesh.h	/^struct aiVertexWeight$/;"	s
aiVertexWeight::aiVertexWeight	lib/__assimp/mesh.h	/^    aiVertexWeight( unsigned int pID, float pWeight)$/;"	f	struct:aiVertexWeight	access:public	signature:( unsigned int pID, float pWeight)
aiVertexWeight::aiVertexWeight	lib/__assimp/mesh.h	/^    aiVertexWeight() { }$/;"	f	struct:aiVertexWeight	access:public	signature:()
aiVertexWeight::aiVertexWeight	lib/assimp/mesh.h	/^    aiVertexWeight( unsigned int pID, float pWeight)$/;"	f	struct:aiVertexWeight	access:public	signature:( unsigned int pID, float pWeight)
aiVertexWeight::aiVertexWeight	lib/assimp/mesh.h	/^    aiVertexWeight() { }$/;"	f	struct:aiVertexWeight	access:public	signature:()
aiVertexWeight::mVertexId	lib/__assimp/mesh.h	/^    unsigned int mVertexId;$/;"	m	struct:aiVertexWeight	access:public
aiVertexWeight::mVertexId	lib/assimp/mesh.h	/^    unsigned int mVertexId;$/;"	m	struct:aiVertexWeight	access:public
aiVertexWeight::mWeight	lib/__assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiVertexWeight	access:public
aiVertexWeight::mWeight	lib/assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiVertexWeight	access:public
ai_assert	lib/__assimp/ai_assert.h	47;"	d
ai_assert	lib/__assimp/ai_assert.h	49;"	d
ai_assert	lib/assimp/ai_assert.h	46;"	d
ai_assert	lib/assimp/ai_assert.h	48;"	d
ai_int	lib/__assimp/defs.h	/^    typedef signed int ai_int;$/;"	t
ai_int	lib/__assimp/defs.h	/^    typedef signed long long int ai_int;$/;"	t
ai_real	lib/__assimp/defs.h	/^    typedef double ai_real;$/;"	t
ai_real	lib/__assimp/defs.h	/^    typedef float ai_real;$/;"	t
ai_uint	lib/__assimp/defs.h	/^    typedef unsigned int ai_uint;$/;"	t
ai_uint	lib/__assimp/defs.h	/^    typedef unsigned long long int ai_uint;$/;"	t
albedo	inc/g_buffer.h	/^	inline FramebufferAttachment& albedo() { return attachments[INDEX_ALBEDO]; }$/;"	f	class:GBuffer	access:public	signature:()
aligned	lib/glm/detail/precision.hpp	/^			aligned = aligned_highp,$/;"	e	enum:glm::precision
aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec1			aligned_bvec1;$/;"	t	namespace:glm
aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec1			aligned_bvec1;$/;"	t	namespace:glm
aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec1		aligned_bvec1;$/;"	t	namespace:glm
aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec2			aligned_bvec2;$/;"	t	namespace:glm
aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec2			aligned_bvec2;$/;"	t	namespace:glm
aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec2		aligned_bvec2;$/;"	t	namespace:glm
aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec3			aligned_bvec3;$/;"	t	namespace:glm
aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec3			aligned_bvec3;$/;"	t	namespace:glm
aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec3		aligned_bvec3;$/;"	t	namespace:glm
aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec4			aligned_bvec4;$/;"	t	namespace:glm
aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec4			aligned_bvec4;$/;"	t	namespace:glm
aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec4		aligned_bvec4;$/;"	t	namespace:glm
aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec1			aligned_dvec1;$/;"	t	namespace:glm
aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec1			aligned_dvec1;$/;"	t	namespace:glm
aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec1		aligned_dvec1;$/;"	t	namespace:glm
aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec2			aligned_dvec2;$/;"	t	namespace:glm
aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec2			aligned_dvec2;$/;"	t	namespace:glm
aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec2		aligned_dvec2;$/;"	t	namespace:glm
aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec3			aligned_dvec3;$/;"	t	namespace:glm
aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec3			aligned_dvec3;$/;"	t	namespace:glm
aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec3		aligned_dvec3;$/;"	t	namespace:glm
aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec4			aligned_dvec4;$/;"	t	namespace:glm
aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec4			aligned_dvec4;$/;"	t	namespace:glm
aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec4		aligned_dvec4;$/;"	t	namespace:glm
aligned_highp	lib/glm/detail/precision.hpp	/^			aligned_highp,$/;"	e	enum:glm::precision
aligned_highp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_highp>		aligned_highp_bvec1;$/;"	t	namespace:glm
aligned_highp_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_highp>		aligned_highp_bvec2;$/;"	t	namespace:glm
aligned_highp_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_highp>		aligned_highp_bvec3;$/;"	t	namespace:glm
aligned_highp_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_highp>		aligned_highp_bvec4;$/;"	t	namespace:glm
aligned_highp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_highp>	aligned_highp_dvec1;$/;"	t	namespace:glm
aligned_highp_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_highp>	aligned_highp_dvec2;$/;"	t	namespace:glm
aligned_highp_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_highp>	aligned_highp_dvec3;$/;"	t	namespace:glm
aligned_highp_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_highp>	aligned_highp_dvec4;$/;"	t	namespace:glm
aligned_highp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_highp>		aligned_highp_ivec1;$/;"	t	namespace:glm
aligned_highp_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_highp>		aligned_highp_ivec2;$/;"	t	namespace:glm
aligned_highp_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_highp>		aligned_highp_ivec3;$/;"	t	namespace:glm
aligned_highp_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_highp>		aligned_highp_ivec4;$/;"	t	namespace:glm
aligned_highp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_highp>		aligned_highp_uvec1;$/;"	t	namespace:glm
aligned_highp_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_highp>		aligned_highp_uvec2;$/;"	t	namespace:glm
aligned_highp_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_highp>		aligned_highp_uvec3;$/;"	t	namespace:glm
aligned_highp_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_highp>		aligned_highp_uvec4;$/;"	t	namespace:glm
aligned_highp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_highp>		aligned_highp_vec1;$/;"	t	namespace:glm
aligned_highp_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_highp>		aligned_highp_vec2;$/;"	t	namespace:glm
aligned_highp_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_highp>		aligned_highp_vec3;$/;"	t	namespace:glm
aligned_highp_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_highp>		aligned_highp_vec4;$/;"	t	namespace:glm
aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec1			aligned_ivec1;$/;"	t	namespace:glm
aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec1			aligned_ivec1;$/;"	t	namespace:glm
aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec1		aligned_ivec1;$/;"	t	namespace:glm
aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec2			aligned_ivec2;$/;"	t	namespace:glm
aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec2			aligned_ivec2;$/;"	t	namespace:glm
aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec2		aligned_ivec2;$/;"	t	namespace:glm
aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec3			aligned_ivec3;$/;"	t	namespace:glm
aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec3			aligned_ivec3;$/;"	t	namespace:glm
aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec3		aligned_ivec3;$/;"	t	namespace:glm
aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec4			aligned_ivec4;$/;"	t	namespace:glm
aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec4			aligned_ivec4;$/;"	t	namespace:glm
aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec4		aligned_ivec4;$/;"	t	namespace:glm
aligned_lowp	lib/glm/detail/precision.hpp	/^			aligned_lowp,$/;"	e	enum:glm::precision
aligned_lowp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_lowp>		aligned_lowp_bvec1;$/;"	t	namespace:glm
aligned_lowp_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_lowp>		aligned_lowp_bvec2;$/;"	t	namespace:glm
aligned_lowp_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_lowp>		aligned_lowp_bvec3;$/;"	t	namespace:glm
aligned_lowp_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_lowp>		aligned_lowp_bvec4;$/;"	t	namespace:glm
aligned_lowp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_lowp>		aligned_lowp_dvec1;$/;"	t	namespace:glm
aligned_lowp_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_lowp>		aligned_lowp_dvec2;$/;"	t	namespace:glm
aligned_lowp_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_lowp>		aligned_lowp_dvec3;$/;"	t	namespace:glm
aligned_lowp_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_lowp>		aligned_lowp_dvec4;$/;"	t	namespace:glm
aligned_lowp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_lowp>		aligned_lowp_ivec1;$/;"	t	namespace:glm
aligned_lowp_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_lowp>		aligned_lowp_ivec2;$/;"	t	namespace:glm
aligned_lowp_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_lowp>		aligned_lowp_ivec3;$/;"	t	namespace:glm
aligned_lowp_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_lowp>		aligned_lowp_ivec4;$/;"	t	namespace:glm
aligned_lowp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_lowp>		aligned_lowp_uvec1;$/;"	t	namespace:glm
aligned_lowp_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_lowp>		aligned_lowp_uvec2;$/;"	t	namespace:glm
aligned_lowp_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_lowp>		aligned_lowp_uvec3;$/;"	t	namespace:glm
aligned_lowp_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_lowp>		aligned_lowp_uvec4;$/;"	t	namespace:glm
aligned_lowp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_lowp>		aligned_lowp_vec1;$/;"	t	namespace:glm
aligned_lowp_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_lowp>		aligned_lowp_vec2;$/;"	t	namespace:glm
aligned_lowp_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_lowp>		aligned_lowp_vec3;$/;"	t	namespace:glm
aligned_lowp_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_lowp>		aligned_lowp_vec4;$/;"	t	namespace:glm
aligned_mediump	lib/glm/detail/precision.hpp	/^			aligned_mediump,$/;"	e	enum:glm::precision
aligned_mediump_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_mediump>	aligned_mediump_bvec1;$/;"	t	namespace:glm
aligned_mediump_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_mediump>	aligned_mediump_bvec2;$/;"	t	namespace:glm
aligned_mediump_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_mediump>	aligned_mediump_bvec3;$/;"	t	namespace:glm
aligned_mediump_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_mediump>	aligned_mediump_bvec4;$/;"	t	namespace:glm
aligned_mediump_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_mediump>	aligned_mediump_dvec1;$/;"	t	namespace:glm
aligned_mediump_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_mediump>	aligned_mediump_dvec2;$/;"	t	namespace:glm
aligned_mediump_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_mediump>	aligned_mediump_dvec3;$/;"	t	namespace:glm
aligned_mediump_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_mediump>	aligned_mediump_dvec4;$/;"	t	namespace:glm
aligned_mediump_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_mediump>		aligned_mediump_ivec1;$/;"	t	namespace:glm
aligned_mediump_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_mediump>		aligned_mediump_ivec2;$/;"	t	namespace:glm
aligned_mediump_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_mediump>		aligned_mediump_ivec3;$/;"	t	namespace:glm
aligned_mediump_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_mediump>		aligned_mediump_ivec4;$/;"	t	namespace:glm
aligned_mediump_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_mediump>	aligned_mediump_uvec1;$/;"	t	namespace:glm
aligned_mediump_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_mediump>	aligned_mediump_uvec2;$/;"	t	namespace:glm
aligned_mediump_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_mediump>	aligned_mediump_uvec3;$/;"	t	namespace:glm
aligned_mediump_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_mediump>	aligned_mediump_uvec4;$/;"	t	namespace:glm
aligned_mediump_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_mediump>	aligned_mediump_vec1;$/;"	t	namespace:glm
aligned_mediump_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_mediump>	aligned_mediump_vec2;$/;"	t	namespace:glm
aligned_mediump_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_mediump>	aligned_mediump_vec3;$/;"	t	namespace:glm
aligned_mediump_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_mediump>	aligned_mediump_vec4;$/;"	t	namespace:glm
aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec1			aligned_uvec1;$/;"	t	namespace:glm
aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec1			aligned_uvec1;$/;"	t	namespace:glm
aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec1		aligned_uvec1;$/;"	t	namespace:glm
aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec2			aligned_uvec2;$/;"	t	namespace:glm
aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec2			aligned_uvec2;$/;"	t	namespace:glm
aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec2		aligned_uvec2;$/;"	t	namespace:glm
aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec3			aligned_uvec3;$/;"	t	namespace:glm
aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec3			aligned_uvec3;$/;"	t	namespace:glm
aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec3		aligned_uvec3;$/;"	t	namespace:glm
aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec4			aligned_uvec4;$/;"	t	namespace:glm
aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec4			aligned_uvec4;$/;"	t	namespace:glm
aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec4		aligned_uvec4;$/;"	t	namespace:glm
aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec1			aligned_vec1;$/;"	t	namespace:glm
aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec1			aligned_vec1;$/;"	t	namespace:glm
aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec1		aligned_vec1;$/;"	t	namespace:glm
aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec2			aligned_vec2;$/;"	t	namespace:glm
aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec2			aligned_vec2;$/;"	t	namespace:glm
aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec2		aligned_vec2;$/;"	t	namespace:glm
aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec3			aligned_vec3;$/;"	t	namespace:glm
aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec3			aligned_vec3;$/;"	t	namespace:glm
aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec3		aligned_vec3;$/;"	t	namespace:glm
aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec4			aligned_vec4;$/;"	t	namespace:glm
aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec4			aligned_vec4;$/;"	t	namespace:glm
aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec4		aligned_vec4;$/;"	t	namespace:glm
alignment	lib/vulkan/vulkan.h	/^    VkDeviceSize    alignment;$/;"	m	struct:VkMemoryRequirements	access:public
all_a	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
allocationSize	lib/vulkan/vulkan.h	/^    VkDeviceSize       allocationSize;$/;"	m	struct:VkMemoryAllocateInfo	access:public
alphaBlendOp	lib/vulkan/vulkan.h	/^    VkBlendOp                alphaBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
alphaMode	lib/vulkan/vk_icd.h	/^    VkDisplayPlaneAlphaFlagBitsKHR alphaMode;$/;"	m	struct:__anon83	access:public
alphaMode	lib/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagBitsKHR    alphaMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
alphaToCoverageEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 alphaToCoverageEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
alphaToOne	lib/vulkan/vulkan.h	/^    VkBool32    alphaToOne;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
alphaToOneEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 alphaToOneEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
ambientImages	inc/shape/model.h	/^			ambientImages;$/;"	m	struct:Model::Material	access:public
ambientIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
androidNativeWindow	inc/window.h	/^	ANativeWindow* androidNativeWindow;$/;"	m	class:Window	access:public
android_main	src/main.cpp	/^void android_main(android_app* state) {$/;"	f	signature:(android_app* state)
animSpeedScale	inc/shape/skinned.h	/^	float animSpeedScale;$/;"	m	class:Skinned	access:public
animations	lib/__assimp/types.h	/^    unsigned int animations;$/;"	m	struct:aiMemoryInfo	access:public
animations	lib/assimp/types.h	/^    unsigned int animations;$/;"	m	struct:aiMemoryInfo	access:public
anisotropyEnable	lib/vulkan/vulkan.h	/^    VkBool32                anisotropyEnable;$/;"	m	struct:VkSamplerCreateInfo	access:public
apiVersion	lib/vulkan/vulkan.h	/^    uint32_t                            apiVersion;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
apiVersion	lib/vulkan/vulkan.h	/^    uint32_t           apiVersion;$/;"	m	struct:VkApplicationInfo	access:public
applicationVersion	lib/vulkan/vulkan.h	/^    uint32_t           applicationVersion;$/;"	m	struct:VkApplicationInfo	access:public
arrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              arrayLayer;$/;"	m	struct:VkImageSubresource	access:public
arrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                 arrayLayers;$/;"	m	struct:VkImageCreateInfo	access:public
arrayPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    arrayPitch;$/;"	m	struct:VkSubresourceLayout	access:public
aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags          aspectMask;$/;"	m	struct:VkSparseImageFormatProperties	access:public
aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkClearAttachment	access:public
aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresource	access:public
aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceLayers	access:public
aspectMask	lib/vulkan/vulkan.h	/^    VkImageAspectFlags    aspectMask;$/;"	m	struct:VkImageSubresourceRange	access:public
assertGlfwWindowIsValid	src/input_manager.cpp	/^void InputManager::assertGlfwWindowIsValid()$/;"	f	class:InputManager	signature:()
assetManager	inc/file_manager.h	/^	static AAssetManager* assetManager;$/;"	m	class:FileManager	access:public
assetManager	src/file_manager.cpp	/^AAssetManager* FileManager::assetManager = nullptr;$/;"	m	class:FileManager	file:
atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}																\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x, T y)
atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> atan2(const vec<2, T, P>& x, const vec<2, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y)
atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> atan2(const vec<3, T, P>& x, const vec<3, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y)
atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> atan2(const vec<4, T, P>& x, const vec<4, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y)
attachStream	lib/__assimp/NullLogger.hpp	/^    bool attachStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
attachStream	lib/assimp/NullLogger.hpp	/^    bool attachStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
attachment	lib/vulkan/vulkan.h	/^    uint32_t         attachment;$/;"	m	struct:VkAttachmentReference	access:public
attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                                      attachmentCount;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                          attachmentCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
attachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                    attachmentCount;$/;"	m	struct:VkFramebufferCreateInfo	access:public
attachments	inc/g_buffer.h	/^	std::array<FramebufferAttachment, ATTACHMENT_COUNT> attachments;$/;"	m	class:GBuffer	access:public
b	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
b	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
b	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
b	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
b	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
b	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
b	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
b	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
b	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
b	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
b	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
b	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
b	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
b	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
b	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    b;$/;"	m	struct:VkComponentMapping	access:public
b1	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
b1	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
b1	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
b1	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
b1	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
b1	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
b1	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
b1	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
b2	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
b2	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
b2	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
b2	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
b2	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
b2	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
b2	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
b2	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
b3	lib/__assimp/matrix3x3.h	/^    TReal b1, b2, b3;$/;"	m	class:aiMatrix3x3t	access:public
b3	lib/__assimp/matrix3x3.h	/^    ai_real b1, b2, b3;$/;"	m	struct:aiMatrix3x3	access:public
b3	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
b3	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
b3	lib/assimp/matrix3x3.h	/^            TReal b1, b2, b3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
b3	lib/assimp/matrix3x3.h	/^            float b1, b2, b3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
b3	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
b3	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
b4	lib/__assimp/matrix4x4.h	/^    TReal b1, b2, b3, b4;$/;"	m	class:aiMatrix4x4t	access:public
b4	lib/__assimp/matrix4x4.h	/^    ai_real b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4	access:public
b4	lib/assimp/matrix4x4.h	/^            TReal b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
b4	lib/assimp/matrix4x4.h	/^            float b1, b2, b3, b4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
back	lib/vulkan/vulkan.h	/^    VkStencilOpState                          back;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon78	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon79	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon80	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon81	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon82	access:public
base	lib/vulkan/vk_icd.h	/^    VkIcdSurfaceBase base;$/;"	m	struct:__anon83	access:public
baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceLayers	access:public
baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t              baseArrayLayer;$/;"	m	struct:VkImageSubresourceRange	access:public
baseArrayLayer	lib/vulkan/vulkan.h	/^    uint32_t    baseArrayLayer;$/;"	m	struct:VkClearRect	access:public
baseIndex	inc/shape/model.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Model::Mesh	access:public
baseIndex	inc/shape/skinned.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Skinned::Mesh	access:public
baseMipLevel	lib/vulkan/vulkan.h	/^    uint32_t              baseMipLevel;$/;"	m	struct:VkImageSubresourceRange	access:public
basePipelineHandle	lib/vulkan/vulkan.h	/^    VkPipeline                                       basePipelineHandle;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
basePipelineHandle	lib/vulkan/vulkan.h	/^    VkPipeline                         basePipelineHandle;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
basePipelineIndex	lib/vulkan/vulkan.h	/^    int32_t                                          basePipelineIndex;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
basePipelineIndex	lib/vulkan/vulkan.h	/^    int32_t                            basePipelineIndex;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
baseVertex	inc/shape/model.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Model::Mesh	access:public
baseVertex	inc/shape/skinned.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Skinned::Mesh	access:public
base_type	lib/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<N, T, P, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 || E1 == E3 || E2 == E3)> base_type;$/;"	t	struct:glm::detail::_swizzle	access:public
basic_format_saver	lib/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_state_saver	lib/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
begin	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type * begin(genType& v)$/;"	f	namespace:glm	signature:(genType& v)
begin	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type const * begin(genType const & v)$/;"	f	class:glm::genType	signature:(genType const & v)
bgindex	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
bindCount	lib/vulkan/vulkan.h	/^    uint32_t                          bindCount;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
bindCount	lib/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
bindCount	lib/vulkan/vulkan.h	/^    uint32_t                     bindCount;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
binding	lib/vulkan/vulkan.h	/^    uint32_t              binding;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
binding	lib/vulkan/vulkan.h	/^    uint32_t             binding;$/;"	m	struct:VkVertexInputBindingDescription	access:public
binding	lib/vulkan/vulkan.h	/^    uint32_t    binding;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
bindingCount	lib/vulkan/vulkan.h	/^    uint32_t                               bindingCount;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
bitangent	inc/shape/model.h	/^		glm::vec3 bitangent;$/;"	m	struct:Model::Vertex	access:public
bitangent	inc/shape/skinned.h	/^		glm::vec3 bitangent;$/;"	m	struct:Skinned::Vertex	access:public
blendAttachmentSrcAlpha	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendAttachmentState blendAttachmentSrcAlpha() $/;"	f	namespace:PipelineBuilder	signature:()
blendAttachmentStateDisabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendAttachmentState blendAttachmentStateDisabled() $/;"	f	namespace:PipelineBuilder	signature:()
blendConstants	lib/vulkan/vulkan.h	/^    float                                         blendConstants[4];$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
blendEnable	lib/vulkan/vulkan.h	/^    VkBool32                 blendEnable;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
blendStateDisabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendStateCreateInfo blendStateDisabled($/;"	f	namespace:PipelineBuilder	signature:( VkPipelineColorBlendAttachmentState* attachmentStates, uint32_t attachmentCount)
blendStateEnabled	inc/creator/pipeline_builder.h	/^inline VkPipelineColorBlendStateCreateInfo blendStateEnabled($/;"	f	namespace:PipelineBuilder	signature:( VkPipelineColorBlendAttachmentState* attachmentStates, uint32_t attachmentCount)
boneIndex	inc/shape/anim_node.h	/^    uint32_t boneIndex;$/;"	m	struct:AnimNode	access:public
boneIndices	inc/shape/skinned.h	/^		glm::uvec4 boneIndices;$/;"	m	struct:Skinned::Vertex	access:public
bones	inc/shape/skinned.h	/^		std::array<glm::mat4, MAX_BONES> bones;$/;"	m	struct:Skinned::UBO	access:public
bool1	lib/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool1x1	lib/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool_type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<bool> bool_type;$/;"	t	struct:glm::detail::genType	access:public
bool_type	lib/glm/detail/type_vec1.hpp	/^		typedef vec<1, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
bool_type	lib/glm/detail/type_vec2.hpp	/^		typedef vec<2, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
bool_type	lib/glm/detail/type_vec3.hpp	/^		typedef vec<3, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
bool_type	lib/glm/detail/type_vec4.hpp	/^		typedef vec<4, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
borderColor	lib/vulkan/vulkan.h	/^    VkBorderColor           borderColor;$/;"	m	struct:VkSamplerCreateInfo	access:public
bpp	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
bss_	lib/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	access:private
buffer	inc/buffer_info.h	/^	VkBuffer buffer;$/;"	m	class:BufferInfo	access:public
buffer	inc/cmd_pass.h	/^	VkCommandBuffer buffer;$/;"	m	class:CmdPass	access:public
buffer	lib/vulkan/vulkan.h	/^    VkBuffer                     buffer;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
buffer	lib/vulkan/vulkan.h	/^    VkBuffer                   buffer;$/;"	m	struct:VkBufferViewCreateInfo	access:public
buffer	lib/vulkan/vulkan.h	/^    VkBuffer           buffer;$/;"	m	struct:VkBufferMemoryBarrier	access:public
buffer	lib/vulkan/vulkan.h	/^    VkBuffer           buffer;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
buffer	lib/vulkan/vulkan.h	/^    VkBuffer        buffer;$/;"	m	struct:VkDescriptorBufferInfo	access:public
bufferBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    bufferBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
bufferFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    bufferFeatures;$/;"	m	struct:VkFormatProperties	access:public
bufferImageGranularity	lib/vulkan/vulkan.h	/^    VkDeviceSize          bufferImageGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
bufferImageHeight	lib/vulkan/vulkan.h	/^    uint32_t                    bufferImageHeight;$/;"	m	struct:VkBufferImageCopy	access:public
bufferOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize                bufferOffset;$/;"	m	struct:VkBufferImageCopy	access:public
bufferRowLength	lib/vulkan/vulkan.h	/^    uint32_t                    bufferRowLength;$/;"	m	struct:VkBufferImageCopy	access:public
buffer_start	lib/stb/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon60	access:public
buflen	lib/stb/stb_image.h	/^   int buflen;$/;"	m	struct:__anon60	access:public
buildCommandBuffers	src/renderer.cpp	/^void Renderer::buildCommandBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
buildComputeBuffers	src/renderer.cpp	/^void Renderer::buildComputeBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
buildGBuffers	src/renderer.cpp	/^void Renderer::buildGBuffers(const Timer &timer, Camera &camera)$/;"	f	class:Renderer	signature:(const Timer &timer, Camera &camera)
bvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_bvec1				bvec1;$/;"	t	namespace:glm
bvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1				bvec1;$/;"	t	namespace:glm
bvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1			bvec1;$/;"	t	namespace:glm
bvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec2			bvec2;$/;"	t	namespace:glm
bvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec2			bvec2;$/;"	t	namespace:glm
bvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec2		bvec2;$/;"	t	namespace:glm
bvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec3			bvec3;$/;"	t	namespace:glm
bvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec3			bvec3;$/;"	t	namespace:glm
bvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec3		bvec3;$/;"	t	namespace:glm
bvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec4			bvec4;$/;"	t	namespace:glm
bvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec4			bvec4;$/;"	t	namespace:glm
bvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec4		bvec4;$/;"	t	namespace:glm
byte	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm
c	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
c	lib/assimp/color4.h	/^        TReal c[ 4 ];$/;"	m	union:aiColor4t::__anon5	access:public
c	lib/assimp/color4.h	/^        float c[ 4 ];$/;"	m	union:aiColor4D::__anon7	access:public
c	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
c1	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
c1	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
c1	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
c1	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
c1	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
c1	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
c1	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
c1	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
c2	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
c2	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
c2	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
c2	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
c2	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
c2	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
c2	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
c2	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
c3	lib/__assimp/matrix3x3.h	/^    TReal c1, c2, c3;$/;"	m	class:aiMatrix3x3t	access:public
c3	lib/__assimp/matrix3x3.h	/^    ai_real c1, c2, c3;$/;"	m	struct:aiMatrix3x3	access:public
c3	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
c3	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
c3	lib/assimp/matrix3x3.h	/^            TReal c1, c2, c3;$/;"	m	struct:aiMatrix3x3t::__anon13::__anon14	access:public
c3	lib/assimp/matrix3x3.h	/^            float c1, c2, c3;$/;"	m	struct:aiMatrix3x3::__anon15::__anon16	access:public
c3	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
c3	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
c4	lib/__assimp/matrix4x4.h	/^    TReal c1, c2, c3, c4;$/;"	m	class:aiMatrix4x4t	access:public
c4	lib/__assimp/matrix4x4.h	/^    ai_real c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4	access:public
c4	lib/assimp/matrix4x4.h	/^            TReal c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
c4	lib/assimp/matrix4x4.h	/^            float c1, c2, c3, c4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
cache	/home/al/amvk/inc/state.h	/^	VkPipelineCache cache;$/;"	m	struct:PipelineInfo	access:public
cacheName	inc/pipeline_cache.h	/^    const char* cacheName;$/;"	m	struct:PipelineCacheInfo	access:public
calcAlignment	src/scene_lights.cpp	/^VkDeviceSize SceneLights::calcAlignment(uint32_t structSize) $/;"	f	class:SceneLights	signature:(uint32_t structSize)
calcAspect	src/window.cpp	/^void Window::calcAspect() $/;"	f	class:Window	signature:()
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, R, P> call(R (*Func) (T x), vec<1, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<1, T, P> const & v)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, P> call(T (*Func) (T x, T y), vec<1, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<1, T, P> const & a, T b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, P> call(T (*Func) (T x, T y), vec<1, T, P> const & a, vec<1, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<1, T, P> const & a, vec<1, T, P> const & b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, R, P> call(R (*Func) (T x), vec<2, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<2, T, P> const & v)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, P> call(T (*Func) (T x, T y), vec<2, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<2, T, P> const & a, T b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, P> call(T (*Func) (T x, T y), vec<2, T, P> const & a, vec<2, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<2, T, P> const & a, vec<2, T, P> const & b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, R, P> call(R (*Func) (T x), vec<3, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<3, T, P> const & v)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, P> call(T (*Func) (T x, T y), vec<3, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<3, T, P> const & a, T b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, P> call(T (*Func) (T x, T y), vec<3, T, P> const & a, vec<3, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<3, T, P> const & a, vec<3, T, P> const & b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, R, P> call(R (*Func) (T x), vec<4, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<4, T, P> const & v)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, P> call(T (*Func) (T x, T y), vec<4, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<4, T, P> const & a, T b)
call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, P> call(T (*Func) (T x, T y), vec<4, T, P> const & a, vec<4, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<4, T, P> const & a, vec<4, T, P> const & b)
callback	lib/__assimp/cimport.h	/^    aiLogStreamCallback callback;$/;"	m	struct:aiLogStream	access:public
callback	lib/assimp/cimport.h	/^    aiLogStreamCallback callback;$/;"	m	struct:aiLogStream	access:public
cameras	lib/__assimp/types.h	/^    unsigned int cameras;$/;"	m	struct:aiMemoryInfo	access:public
cameras	lib/assimp/types.h	/^    unsigned int cameras;$/;"	m	struct:aiMemoryInfo	access:public
channel	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
channels	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
char_type	lib/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	access:private
char_type	lib/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	access:private
clearValue	lib/vulkan/vulkan.h	/^    VkClearValue          clearValue;$/;"	m	struct:VkClearAttachment	access:public
clearValueCount	lib/vulkan/vulkan.h	/^    uint32_t               clearValueCount;$/;"	m	struct:VkRenderPassBeginInfo	access:public
clearValues	inc/g_buffer.h	/^	std::array<VkClearValue, ATTACHMENT_COUNT> clearValues;$/;"	m	class:GBuffer	access:public
clipped	lib/vulkan/vulkan.h	/^    VkBool32                         clipped;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
cmdBuffer	inc/g_buffer.h	/^	VkCommandBuffer cmdBuffer;$/;"	m	class:GBuffer	access:public
cmdBuffers	inc/swapchain_manager.h	/^	std::vector<VkCommandBuffer> cmdBuffers;$/;"	m	class:SwapchainManager	access:public
code	lib/stb/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon62	access:public
code	lib/vulkan/libspirv.h	/^  const uint32_t* code;$/;"	m	struct:spv_const_binary_t	access:public
code	lib/vulkan/libspirv.h	/^  uint32_t* code;$/;"	m	struct:spv_binary_t	access:public
codeSize	lib/vulkan/vulkan.h	/^    size_t                       codeSize;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
code_bits	lib/stb/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon63	access:public
code_buffer	lib/stb/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon63	access:public
code_buffer	lib/stb/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon67	access:public
codes	lib/stb/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon74	access:public
coeff	lib/stb/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon63::__anon64	access:public
coeff_h	lib/stb/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon63::__anon64	access:public
coeff_w	lib/stb/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon63::__anon64	access:public
col_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
col_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
color	inc/shape/point_light.h	/^		glm::vec3 color;$/;"	m	struct:PointLight::LightUBO	access:public
color	inc/shape/tquad.h	/^		glm::vec3 color;$/;"	m	struct:TQuad::Vertex	access:public
color	lib/vulkan/vulkan.h	/^    VkClearColorValue           color;$/;"	m	union:VkClearValue	access:public
color	lib/vulkan/vulkan.h	/^    float              color[4];$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
colorAttachment	lib/vulkan/vulkan.h	/^    uint32_t              colorAttachment;$/;"	m	struct:VkClearAttachment	access:public
colorAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        colorAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
colorBlendOp	lib/vulkan/vulkan.h	/^    VkBlendOp                colorBlendOp;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
colorSpace	lib/vulkan/vulkan.h	/^    VkColorSpaceKHR    colorSpace;$/;"	m	struct:VkSurfaceFormatKHR	access:public
colorWriteMask	lib/vulkan/vulkan.h	/^    VkColorComponentFlags    colorWriteMask;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
color_table	lib/stb/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon74	access:public
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon22
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon23
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon24
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon25
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon26
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon27
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon28
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon29
cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon30
cols	lib/glm/gtx/type_trait.hpp	/^		static length_t const cols = 0;$/;"	m	struct:glm::type	access:public
column	lib/vulkan/libspirv.h	/^  size_t column;$/;"	m	struct:spv_position_t	access:public
column_major	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
commandBufferCount	lib/vulkan/vulkan.h	/^    uint32_t                       commandBufferCount;$/;"	m	struct:VkSubmitInfo	access:public
commandBufferCount	lib/vulkan/vulkan.h	/^    uint32_t                commandBufferCount;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
commandPool	/home/al/amvk/inc/state.h	/^	VkCommandPool commandPool;$/;"	m	struct:State	access:public
commandPool	lib/vulkan/vulkan.h	/^    VkCommandPool           commandPool;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
compareEnable	lib/vulkan/vulkan.h	/^    VkBool32                compareEnable;$/;"	m	struct:VkSamplerCreateInfo	access:public
compareMask	lib/vulkan/vulkan.h	/^    uint32_t       compareMask;$/;"	m	struct:VkStencilOpState	access:public
compareOp	lib/vulkan/vulkan.h	/^    VkCompareOp             compareOp;$/;"	m	struct:VkSamplerCreateInfo	access:public
compareOp	lib/vulkan/vulkan.h	/^    VkCompareOp    compareOp;$/;"	m	struct:VkStencilOpState	access:public
compile_shaders	script/vkrun.sh	/^function compile_shaders()$/;"	f
components	lib/glm/gtx/range.hpp	/^	inline length_t components(genType const & m)$/;"	f	namespace:glm	signature:(genType const & m)
components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<1, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<1, T, P> const & v)
components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<2, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<2, T, P> const & v)
components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<3, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<3, T, P> const & v)
components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<4, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<4, T, P> const & v)
components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon22
components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon23
components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon24
components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon25
components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon26
components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon27
components	lib/glm/gtx/type_trait.hpp	/^			components = 4$/;"	e	enum:glm::type::__anon31
components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon28
components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon29
components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon30
components	lib/glm/gtx/type_trait.hpp	/^			components = 8$/;"	e	enum:glm::type::__anon32
components	lib/glm/gtx/type_trait.hpp	/^			components = L$/;"	e	enum:glm::type::__anon21
components	lib/glm/gtx/type_trait.hpp	/^		static length_t const components = 0;$/;"	m	struct:glm::type	access:public
components	lib/vulkan/vulkan.h	/^    VkComponentMapping         components;$/;"	m	struct:VkImageViewCreateInfo	access:public
compositeAlpha	lib/vulkan/vulkan.h	/^    VkCompositeAlphaFlagBitsKHR      compositeAlpha;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
compute	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo compute;$/;"	m	struct:ShaderInfo	access:public
compute	inc/device_manager.h	/^		uint32_t compute = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
computeQueue	/home/al/amvk/inc/state.h	/^	VkQueue computeQueue;$/;"	m	struct:State	access:public
computeQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t computeQueueIndex;$/;"	m	struct:State	access:public
connection	lib/vulkan/vk_icd.h	/^    MirConnection *connection;$/;"	m	struct:__anon78	access:public
connection	lib/vulkan/vk_icd.h	/^    xcb_connection_t *connection;$/;"	m	struct:__anon81	access:public
connection	lib/vulkan/vulkan.h	/^    MirConnection*                connection;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
connection	lib/vulkan/vulkan.h	/^    xcb_connection_t*             connection;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
const_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const_pointer;$/;"	t	struct:glm::detail::genType	access:public
const_pointer_const	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const const_pointer_const;$/;"	t	struct:glm::detail::genType	access:public
const_reference	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & const_reference;$/;"	t	struct:glm::detail::genType	access:public
constant	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
constantID	lib/vulkan/vulkan.h	/^    uint32_t    constantID;$/;"	m	struct:VkSpecializationMapEntry	access:public
convertVector	src/shape/model.cpp	/^void Model::convertVector(const aiVector3D& src, glm::vec2& dest)$/;"	f	class:Model	signature:(const aiVector3D& src, glm::vec2& dest)
convertVector	src/shape/model.cpp	/^void Model::convertVector(const aiVector3D& src, glm::vec3& dest)$/;"	f	class:Model	signature:(const aiVector3D& src, glm::vec3& dest)
convertVector	src/shape/skinned.cpp	/^void Skinned::convertVector(const aiVector3D& src, glm::vec2& dest)$/;"	f	class:Skinned	signature:(const aiVector3D& src, glm::vec2& dest)
convertVector	src/shape/skinned.cpp	/^void Skinned::convertVector(const aiVector3D& src, glm::vec3& dest)$/;"	f	class:Skinned	signature:(const aiVector3D& src, glm::vec3& dest)
copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer src, VkBuffer dst, VkDeviceSize size)
copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, const VkCommandPool& commandPool, const VkQueue& queue, VkBuffer src, VkBuffer dst, VkDeviceSize offset, VkDeviceSize size)
copyBuffer	inc/creator/buffer_helper.h	/^inline void copyBuffer($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, const VkCommandPool& commandPool, const VkQueue& queue, VkBuffer src, VkBuffer dst, VkDeviceSize size)
copyImage	inc/creator/image_helper.h	/^inline void copyImage($/;"	f	namespace:ImageHelper	signature:( State& state, ImageInfo& srcImage, ImageInfo& dstImage)
copyImage	inc/creator/image_helper.h	/^inline void copyImage(VkCommandBuffer& cmdBuffer, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)$/;"	f	namespace:ImageHelper	signature:(VkCommandBuffer& cmdBuffer, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)
copyImage	inc/creator/image_helper.h	/^inline void copyImage(const State& state, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)$/;"	f	namespace:ImageHelper	signature:(const State& state, VkImage srcImage, VkImage dstImage, uint32_t width, uint32_t height)
countof	lib/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	signature:(T const (&)[N])
createAnimNode	src/shape/skinned.cpp	/^void Skinned::createAnimNode(aiNode* node, AnimNode* parent)$/;"	f	class:Skinned	signature:(aiNode* node, AnimNode* parent)
createAttachment	src/g_buffer.cpp	/^void GBuffer::createAttachment($/;"	f	class:GBuffer	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, FramebufferAttachment& attachment, VkFormat format, VkImageUsageFlagBits usage)
createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, BufferInfo& bufferInfo, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
createBuffer	inc/creator/buffer_helper.h	/^inline void createBuffer($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory, VkBufferUsageFlags usage, VkMemoryPropertyFlags prop)
createBuffers	src/shape/sphere.cpp	/^void Sphere::createBuffers(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Sphere	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
createBuffers	src/shape/tquad.cpp	/^void TQuad::createBuffers()$/;"	f	class:TQuad	signature:()
createCmdBuffer	src/g_buffer.cpp	/^void GBuffer::createCmdBuffer(const VkDevice& device, const VkCommandPool& cmdPool)$/;"	f	class:GBuffer	signature:(const VkDevice& device, const VkCommandPool& cmdPool)
createColorAttachmentDesc	src/g_buffer.cpp	/^void GBuffer::createColorAttachmentDesc(VkAttachmentDescription& desc, VkFormat format) $/;"	f	class:GBuffer	signature:(VkAttachmentDescription& desc, VkFormat format)
createCommandBuffers	src/swapchain_manager.cpp	/^void SwapchainManager::createCommandBuffers()$/;"	f	class:SwapchainManager	signature:()
createCommandPool	src/swapchain_manager.cpp	/^void SwapchainManager::createCommandPool()$/;"	f	class:SwapchainManager	signature:()
createCommonBuffer	inc/creator/buffer_helper.h	/^inline void createCommonBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createCommonBuffer	src/shape/model.cpp	/^void Model::createCommonBuffer(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Model	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
createCommonBuffer	src/shape/skinned.cpp	/^void Skinned::createCommonBuffer(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)$/;"	f	class:Skinned	signature:(const std::vector<Vertex>& vertices, const std::vector<uint32_t>& indices)
createDeferredDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDeferredDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createDeferredPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createDeferredPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createDepthAttachmentDesc	src/g_buffer.cpp	/^void GBuffer::createDepthAttachmentDesc(VkAttachmentDescription& desc, VkFormat format)$/;"	f	class:GBuffer	signature:(VkAttachmentDescription& desc, VkFormat format)
createDepthResources	src/swapchain_manager.cpp	/^void SwapchainManager::createDepthResources() $/;"	f	class:SwapchainManager	signature:()
createDescriptorPool	inc/creator/descriptor_creator.h	/^inline void createDescriptorPool(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createDescriptorPool	src/g_buffer.cpp	/^void GBuffer::createDescriptorPool()$/;"	f	class:GBuffer	signature:()
createDescriptorPool	src/scene_lights.cpp	/^void SceneLights::createDescriptorPool() $/;"	f	class:SceneLights	signature:()
createDescriptorPool	src/shape/model.cpp	/^void Model::createDescriptorPool() $/;"	f	class:Model	signature:()
createDescriptorPool	src/shape/skinned.cpp	/^void Skinned::createDescriptorPool() $/;"	f	class:Skinned	signature:()
createDescriptorSet	src/shape/model.cpp	/^void Model::createDescriptorSet()$/;"	f	class:Model	signature:()
createDescriptorSet	src/shape/skinned.cpp	/^void Skinned::createDescriptorSet()$/;"	f	class:Skinned	signature:()
createDescriptorSet	src/shape/tquad.cpp	/^void TQuad::createDescriptorSet()$/;"	f	class:TQuad	signature:()
createDescriptorSetLayouts	inc/creator/descriptor_creator.h	/^inline void createDescriptorSetLayouts(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createDescriptorSets	src/scene_lights.cpp	/^void SceneLights::createDescriptorSets() $/;"	f	class:SceneLights	signature:()
createDescriptorSets	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::createDescriptorSets() $/;"	f	class:FullscreenQuad	signature:()
createDescriptors	src/g_buffer.cpp	/^void GBuffer::createDescriptors()$/;"	f	class:GBuffer	signature:()
createDynamicUniformBuffer	inc/creator/buffer_helper.h	/^inline void createDynamicUniformBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createDynamicUniformFragmentDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDynamicUniformFragmentDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createDynamicUniformVertexDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createDynamicUniformVertexDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createFramebuffers	src/g_buffer.cpp	/^void GBuffer::createFramebuffers(const VkPhysicalDevice& physicalDevice, const VkDevice& device) $/;"	f	class:GBuffer	signature:(const VkPhysicalDevice& physicalDevice, const VkDevice& device)
createFramebuffers	src/swapchain_manager.cpp	/^void SwapchainManager::createFramebuffers(VkRenderPass renderPass)$/;"	f	class:SwapchainManager	signature:(VkRenderPass renderPass)
createFullscreenQuadPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createFullscreenQuadPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createImage	inc/creator/image_helper.h	/^inline void createImage($/;"	f	namespace:ImageHelper	signature:( State& state, ImageInfo& imageDesc, VkFormat format, VkImageTiling tiling, VkImageLayout initialLayout, VkImageUsageFlags usage, VkMemoryPropertyFlags properties)
createImageView	inc/creator/image_helper.h	/^inline void createImageView($/;"	f	namespace:ImageHelper	signature:( const VkDevice& device, ImageInfo& imageDesc, VkFormat format, VkImageAspectFlags aspectFlags)
createImageView	inc/creator/image_helper.h	/^inline void createImageView($/;"	f	namespace:ImageHelper	signature:( const VkDevice& device, VkImage image, VkFormat format, VkImageAspectFlags aspectFlags, VkImageView& imageView)
createImageViews	src/swapchain_manager.cpp	/^void SwapchainManager::createImageViews() $/;"	f	class:SwapchainManager	signature:()
createIndexBuffer	inc/creator/buffer_helper.h	/^inline void createIndexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createIndexBuffer	src/shape/tquad.cpp	/^void TQuad::createIndexBuffer()$/;"	f	class:TQuad	signature:()
createInfo	inc/pipeline_cache.h	/^    VkPipelineCacheCreateInfo createInfo;$/;"	m	struct:PipelineCacheInfo	access:public
createLogicalDevice	src/device_manager.cpp	/^void DeviceManager::createLogicalDevice() $/;"	f	class:DeviceManager	signature:()
createModelDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createModelDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createModelPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createModelPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createPhysicalDevice	src/device_manager.cpp	/^void DeviceManager::createPhysicalDevice(SwapchainManager& swapchainManager) $/;"	f	class:DeviceManager	signature:(SwapchainManager& swapchainManager)
createPipelines	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createPipelines(State& state, GBuffer& gBuffer)$/;"	f	namespace:PipelineCreator	signature:(State& state, GBuffer& gBuffer)
createPointLight	src/scene_lights.cpp	/^PointLight& SceneLights::createPointLight() $/;"	f	class:SceneLights	signature:()
createPointLight	src/scene_lights.cpp	/^PointLight& SceneLights::createPointLight(PointLight::UBO& ubo, PointLight::LightUBO& lightUbo) $/;"	f	class:SceneLights	signature:(PointLight::UBO& ubo, PointLight::LightUBO& lightUbo)
createPointLightDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createPointLightDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createPointLightPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createPointLightPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createRenderPass	src/swapchain_manager.cpp	/^void SwapchainManager::createRenderPass()$/;"	f	class:SwapchainManager	signature:()
createSampler	src/g_buffer.cpp	/^void GBuffer::createSampler(const VkDevice& device)$/;"	f	class:GBuffer	signature:(const VkDevice& device)
createSamplerDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createSamplerDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createSamplerListDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createSamplerListDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createSemaphores	src/renderer.cpp	/^void Renderer::createSemaphores()$/;"	f	class:Renderer	signature:()
createShaders	/home/al/amvk/inc/creator/shader_creator.h	/^inline void createShaders(State& state)$/;"	f	namespace:ShaderCreator	signature:(State& state)
createSkinnedPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createSkinnedPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createStagedImage	inc/creator/image_helper.h	/^inline void createStagedImage($/;"	f	namespace:ImageHelper	signature:( ImageInfo& imageInfo, const TextureData& textureData, State& state, const VkCommandPool& cmdPool, const VkQueue& cmdQueue)
createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, BufferInfo& bufferInfo)
createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const State& state, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory)
createStagingBuffer	inc/creator/buffer_helper.h	/^inline void createStagingBuffer($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, const VkDevice& device, VkBuffer& buffer, VkDeviceSize size, VkDeviceMemory& memory)
createSurface	src/swapchain_manager.cpp	/^void SwapchainManager::createSurface()$/;"	f	class:SwapchainManager	signature:()
createSwapChain	src/swapchain_manager.cpp	/^void SwapchainManager::createSwapChain()$/;"	f	class:SwapchainManager	signature:()
createTQuadDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createTQuadDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createTQuadPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createTQuadPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createTiledRendererPipeline	/home/al/amvk/inc/creator/pipeline_creator.h	/^inline void createTiledRendererPipeline(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)$/;"	f	namespace:PipelineCreator	signature:(State& state, PipelineInfo& info, VkRenderPass renderPass, uint32_t subpass)
createUniformBuffer	inc/creator/buffer_helper.h	/^inline void createUniformBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createUniformBuffer	src/g_buffer.cpp	/^void GBuffer::createUniformBuffer()$/;"	f	class:GBuffer	signature:()
createUniformBuffer	src/scene_lights.cpp	/^void SceneLights::createUniformBuffer() $/;"	f	class:SceneLights	signature:()
createUniformBuffer	src/shape/tquad.cpp	/^void TQuad::createUniformBuffer()$/;"	f	class:TQuad	signature:()
createUniformFragmentDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createUniformFragmentDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createUniformVertexDescriptorSetLayout	inc/creator/descriptor_creator.h	/^inline void createUniformVertexDescriptorSetLayout(State& state)$/;"	f	namespace:DescriptorCreator	signature:(State& state)
createVertexAndIndexBuffer	inc/creator/buffer_helper.h	/^inline void createVertexAndIndexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createVertexBuffer	inc/creator/buffer_helper.h	/^inline void createVertexBuffer(const State& state, BufferInfo& bufferInfo)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo)
createVertexBuffer	src/shape/tquad.cpp	/^void TQuad::createVertexBuffer()$/;"	f	class:TQuad	signature:()
createVkInstance	src/device_manager.cpp	/^void DeviceManager::createVkInstance() $/;"	f	class:DeviceManager	signature:()
ctor	lib/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	g	namespace:glm
ctor	lib/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::genType	access:public
cullMode	lib/vulkan/vulkan.h	/^    VkCullModeFlags                            cullMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
cur_x	lib/stb/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon74	access:public
cur_y	lib/stb/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon74	access:public
currentDisplay	lib/vulkan/vulkan.h	/^    VkDisplayKHR    currentDisplay;$/;"	m	struct:VkDisplayPlanePropertiesKHR	access:public
currentExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       currentExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
currentStackIndex	lib/vulkan/vulkan.h	/^    uint32_t        currentStackIndex;$/;"	m	struct:VkDisplayPlanePropertiesKHR	access:public
currentTransform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    currentTransform;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
cursorPosCallback	src/engine.cpp	/^void cursorPosCallback(GLFWwindow* window, double xpos, double ypos)$/;"	f	signature:(GLFWwindow* window, double xpos, double ypos)
d	lib/__assimp/types.h	/^    ai_real a,b,c,d;$/;"	m	struct:aiPlane	access:public
d	lib/assimp/types.h	/^    float a,b,c,d;$/;"	m	struct:aiPlane	access:public
d1	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
d1	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
d1	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
d1	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
d2	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
d2	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
d2	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
d2	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
d3	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
d3	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
d3	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
d3	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
d4	lib/__assimp/matrix4x4.h	/^    TReal d1, d2, d3, d4;$/;"	m	class:aiMatrix4x4t	access:public
d4	lib/__assimp/matrix4x4.h	/^    ai_real d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4	access:public
d4	lib/assimp/matrix4x4.h	/^            TReal d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4t::__anon1::__anon2	access:public
d4	lib/assimp/matrix4x4.h	/^            float d1, d2, d3, d4;$/;"	m	struct:aiMatrix4x4::__anon3::__anon4	access:public
data	inc/pipeline_cache.h	/^    std::vector<char> data;$/;"	m	struct:PipelineCacheInfo	access:public
data	lib/__assimp/cexport.h	/^    void* data;$/;"	m	struct:aiExportDataBlob	access:public
data	lib/__assimp/types.h	/^    char data[MAXLEN];$/;"	m	struct:aiString	access:public
data	lib/assimp/cexport.h	/^    void* data;$/;"	m	struct:aiExportDataBlob	access:public
data	lib/assimp/types.h	/^    char data[MAXLEN];$/;"	m	struct:aiString	access:public
data	lib/glm/detail/type_vec.hpp	/^			uint8 data[size];$/;"	m	struct:glm::detail::storage::type	access:public
data	lib/glm/detail/type_vec4.hpp	/^				typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;$/;"	m	union:glm::vec::__anon35	access:public
data	lib/glm/gtc/quaternion.hpp	/^				typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;$/;"	m	union:glm::tquat::__anon56	access:public
data	lib/stb/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon63::__anon64	access:public
dataSize	lib/vulkan/vulkan.h	/^    size_t                             dataSize;$/;"	m	struct:VkSpecializationInfo	access:public
dc_pred	lib/stb/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon63::__anon64	access:public
dct_bfly32o	lib/stb/stb_image.h	2067;"	d
dct_bfly32o	lib/stb/stb_image.h	2201;"	d
dct_bfly32o	lib/stb/stb_image.h	2253;"	d
dct_bfly32o	lib/stb/stb_image.h	2411;"	d
dct_const	lib/stb/stb_image.h	2039;"	d
dct_const	lib/stb/stb_image.h	2196;"	d
dct_interleave16	lib/stb/stb_image.h	2084;"	d
dct_interleave16	lib/stb/stb_image.h	2203;"	d
dct_interleave8	lib/stb/stb_image.h	2078;"	d
dct_interleave8	lib/stb/stb_image.h	2202;"	d
dct_long_mac	lib/stb/stb_image.h	2234;"	d
dct_long_mac	lib/stb/stb_image.h	2407;"	d
dct_long_mul	lib/stb/stb_image.h	2230;"	d
dct_long_mul	lib/stb/stb_image.h	2406;"	d
dct_pass	lib/stb/stb_image.h	2089;"	d
dct_pass	lib/stb/stb_image.h	2204;"	d
dct_pass	lib/stb/stb_image.h	2261;"	d
dct_pass	lib/stb/stb_image.h	2412;"	d
dct_rot	lib/stb/stb_image.h	2043;"	d
dct_rot	lib/stb/stb_image.h	2197;"	d
dct_trn16	lib/stb/stb_image.h	2321;"	d
dct_trn16	lib/stb/stb_image.h	2343;"	d
dct_trn32	lib/stb/stb_image.h	2322;"	d
dct_trn32	lib/stb/stb_image.h	2344;"	d
dct_trn64	lib/stb/stb_image.h	2323;"	d
dct_trn64	lib/stb/stb_image.h	2345;"	d
dct_trn8_16	lib/stb/stb_image.h	2367;"	d
dct_trn8_16	lib/stb/stb_image.h	2402;"	d
dct_trn8_32	lib/stb/stb_image.h	2368;"	d
dct_trn8_32	lib/stb/stb_image.h	2403;"	d
dct_trn8_8	lib/stb/stb_image.h	2366;"	d
dct_trn8_8	lib/stb/stb_image.h	2401;"	d
dct_wadd	lib/stb/stb_image.h	2057;"	d
dct_wadd	lib/stb/stb_image.h	2199;"	d
dct_wadd	lib/stb/stb_image.h	2243;"	d
dct_wadd	lib/stb/stb_image.h	2409;"	d
dct_widen	lib/stb/stb_image.h	2052;"	d
dct_widen	lib/stb/stb_image.h	2198;"	d
dct_widen	lib/stb/stb_image.h	2238;"	d
dct_widen	lib/stb/stb_image.h	2408;"	d
dct_wsub	lib/stb/stb_image.h	2062;"	d
dct_wsub	lib/stb/stb_image.h	2200;"	d
dct_wsub	lib/stb/stb_image.h	2248;"	d
dct_wsub	lib/stb/stb_image.h	2410;"	d
ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm
ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm
ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm
debug	lib/__assimp/Logger.hpp	/^inline void Logger::debug(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
debug	lib/assimp/Logger.hpp	/^inline void Logger::debug(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
debugCb	src/device_manager.cpp	/^VKAPI_ATTR VkBool32 VKAPI_CALL debugCb($/;"	f	signature:( VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objType, uint64_t obj, size_t location, int32_t code, const char* layerPrefix, const char* msg, void* userData)
dedicatedAllocation	lib/vulkan/vulkan.h	/^    VkBool32           dedicatedAllocation;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
dedicatedAllocation	lib/vulkan/vulkan.h	/^    VkBool32           dedicatedAllocation;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
defaultp	lib/glm/detail/precision.hpp	/^			defaultp = aligned_highp$/;"	e	enum:glm::precision
deferred	/home/al/amvk/inc/state.h	/^	PipelineInfo deferred;$/;"	m	struct:Pipelines	access:public
deferred	/home/al/amvk/inc/state.h	/^	ShaderInfo deferred;$/;"	m	struct:Shaders	access:public
deferred	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout deferred;$/;"	m	struct:DescriptorSetLayouts	access:public
deferredQuad	inc/g_buffer.h	/^	FullscreenQuad deferredQuad;$/;"	m	class:GBuffer	access:public
delay	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
delim_left	lib/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	access:public
delim_right	lib/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	access:public
delimeter	lib/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
delta	lib/stb/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon62	access:public
dependencyCount	lib/vulkan/vulkan.h	/^    uint32_t                          dependencyCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
dependencyFlags	lib/vulkan/vulkan.h	/^    VkDependencyFlags       dependencyFlags;$/;"	m	struct:VkSubpassDependency	access:public
depth	inc/g_buffer.h	/^	inline FramebufferAttachment& depth() { return attachments[INDEX_DEPTH]; }$/;"	f	class:GBuffer	access:public	signature:()
depth	lib/stb/stb_image.h	/^   int depth;$/;"	m	struct:__anon69	access:public
depth	lib/vulkan/vulkan.h	/^    float       depth;$/;"	m	struct:VkClearDepthStencilValue	access:public
depth	lib/vulkan/vulkan.h	/^    uint32_t    depth;$/;"	m	struct:VkExtent3D	access:public
depthBiasClamp	lib/vulkan/vulkan.h	/^    VkBool32    depthBiasClamp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
depthBiasClamp	lib/vulkan/vulkan.h	/^    float                                      depthBiasClamp;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
depthBiasConstantFactor	lib/vulkan/vulkan.h	/^    float                                      depthBiasConstantFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
depthBiasEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   depthBiasEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
depthBiasSlopeFactor	lib/vulkan/vulkan.h	/^    float                                      depthBiasSlopeFactor;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
depthBounds	lib/vulkan/vulkan.h	/^    VkBool32    depthBounds;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
depthBoundsTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthBoundsTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
depthClamp	lib/vulkan/vulkan.h	/^    VkBool32    depthClamp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
depthClampEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   depthClampEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
depthCompareOp	lib/vulkan/vulkan.h	/^    VkCompareOp                               depthCompareOp;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
depthFailOp	lib/vulkan/vulkan.h	/^    VkStencilOp    depthFailOp;$/;"	m	struct:VkStencilOpState	access:public
depthFormat	/home/al/amvk/inc/state.h	/^	VkFormat depthFormat;$/;"	m	struct:State	access:public
depthPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    depthPitch;$/;"	m	struct:VkSubresourceLayout	access:public
depthStencil	lib/vulkan/vulkan.h	/^    VkClearDepthStencilValue    depthStencil;$/;"	m	union:VkClearValue	access:public
depthStencilStateDepthLessNoStencil	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateDepthLessNoStencil() $/;"	f	namespace:PipelineBuilder	signature:()
depthStencilStateDepthLessOrEqualNoStencil	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateDepthLessOrEqualNoStencil() $/;"	f	namespace:PipelineBuilder	signature:()
depthStencilStateGBufferLightPass	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateGBufferLightPass() $/;"	f	namespace:PipelineBuilder	signature:()
depthStencilStateGBufferStencilPass	inc/creator/pipeline_builder.h	/^inline VkPipelineDepthStencilStateCreateInfo depthStencilStateGBufferStencilPass() $/;"	f	namespace:PipelineBuilder	signature:()
depthTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
depthWriteEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  depthWriteEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
dequant	lib/stb/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon63	access:public
description	lib/__assimp/cexport.h	/^    const char* description;$/;"	m	struct:aiExportFormatDesc	access:public
description	lib/assimp/cexport.h	/^    const char* description;$/;"	m	struct:aiExportFormatDesc	access:public
description	lib/vulkan/vulkan.h	/^    char        description[VK_MAX_DESCRIPTION_SIZE];$/;"	m	struct:VkLayerProperties	access:public
descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t                         descriptorCount;$/;"	m	struct:VkWriteDescriptorSet	access:public
descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t              descriptorCount;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t            descriptorCount;$/;"	m	struct:VkDescriptorPoolSize	access:public
descriptorCount	lib/vulkan/vulkan.h	/^    uint32_t           descriptorCount;$/;"	m	struct:VkCopyDescriptorSet	access:public
descriptorPool	/home/al/amvk/inc/state.h	/^	VkDescriptorPool descriptorPool;$/;"	m	struct:State	access:public
descriptorPool	lib/vulkan/vulkan.h	/^    VkDescriptorPool                descriptorPool;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
descriptorSetCount	lib/vulkan/vulkan.h	/^    uint32_t                        descriptorSetCount;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
descriptorSetLayouts	/home/al/amvk/inc/state.h	/^	DescriptorSetLayouts descriptorSetLayouts;$/;"	m	struct:State	access:public
descriptorType	lib/vulkan/vulkan.h	/^    VkDescriptorType                 descriptorType;$/;"	m	struct:VkWriteDescriptorSet	access:public
descriptorType	lib/vulkan/vulkan.h	/^    VkDescriptorType      descriptorType;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
descriptors	inc/scene_lights.h	/^	std::array<VkDescriptorSet, NUM_POINT_LIGHT_DESCRIPTORS> descriptors;$/;"	m	class:SceneLights	access:private
descriptors	inc/shape/model.h	/^		std::vector<VkDescriptorSet> descriptors;$/;"	m	struct:Model::Material	access:public
detail	lib/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/func_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/precision.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_gentype.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_int.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_mat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	lib/glm/detail/type_vec.hpp	/^namespace detail$/;"	n	namespace:glm
detatchStream	lib/__assimp/NullLogger.hpp	/^    bool detatchStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
detatchStream	lib/assimp/NullLogger.hpp	/^    bool detatchStream(LogStream *pStream, unsigned int severity) {$/;"	f	class:Assimp::NullLogger	access:public	signature:(LogStream *pStream, unsigned int severity)
device	/home/al/amvk/inc/state.h	/^	VkDevice device;$/;"	m	struct:State	access:public
deviceExtensionsSupported	src/device_manager.cpp	/^bool DeviceManager::deviceExtensionsSupported(const VkPhysicalDevice& physicalDevice) const $/;"	f	class:DeviceManager	signature:(const VkPhysicalDevice& physicalDevice) const
deviceID	lib/vulkan/vulkan.h	/^    uint32_t                            deviceID;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
deviceInfo	/home/al/amvk/inc/state.h	/^	DeviceInfo deviceInfo;$/;"	m	struct:State	access:public
deviceName	lib/vulkan/vulkan.h	/^    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties	access:public
deviceQueueIndicesSupported	src/device_manager.cpp	/^bool DeviceManager::deviceQueueIndicesSupported(const VkPhysicalDevice& physicalDevice, QueueIndices& outIndices) const {$/;"	f	class:DeviceManager	signature:(const VkPhysicalDevice& physicalDevice, QueueIndices& outIndices) const
deviceType	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceType                deviceType;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
device_info	lib/vulkan/vk_layer.h	/^    void *device_info;$/;"	m	struct:VkLayerDeviceInfo_	access:public
diffuseImages	inc/shape/model.h	/^			diffuseImages, $/;"	m	struct:Model::Material	access:public
diffuseIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
dir	lib/__assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
dir	lib/assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
directionForward	inc/input_manager.h	/^    float directionForward;$/;"	m	class:InputManager	access:public
directionSideways	inc/input_manager.h	/^    float directionSideways;$/;"	m	class:InputManager	access:public
discreteQueuePriorities	lib/vulkan/vulkan.h	/^    uint32_t              discreteQueuePriorities;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
display	lib/vulkan/vk_icd.h	/^    struct wl_display *display;$/;"	m	struct:__anon79	typeref:struct:__anon79::wl_display	access:public
display	lib/vulkan/vulkan.h	/^    VkDisplayKHR                  display;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
display	lib/vulkan/vulkan.h	/^    struct wl_display*                display;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_display	access:public
displayMode	lib/vulkan/vk_icd.h	/^    VkDisplayModeKHR displayMode;$/;"	m	struct:__anon83	access:public
displayMode	lib/vulkan/vulkan.h	/^    VkDisplayModeKHR                  displayMode;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
displayMode	lib/vulkan/vulkan.h	/^    VkDisplayModeKHR              displayMode;$/;"	m	struct:VkDisplayModePropertiesKHR	access:public
displayName	lib/vulkan/vulkan.h	/^    const char*                   displayName;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
dmat2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2;$/;"	t	namespace:glm
dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x2		dmat2x2;$/;"	t	namespace:glm
dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x3		dmat2x3;$/;"	t	namespace:glm
dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x4		dmat2x4;$/;"	t	namespace:glm
dmat3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3;$/;"	t	namespace:glm
dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x2		dmat3x2;$/;"	t	namespace:glm
dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x3		dmat3x3;$/;"	t	namespace:glm
dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x4		dmat3x4;$/;"	t	namespace:glm
dmat4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4;$/;"	t	namespace:glm
dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x2		dmat4x2;$/;"	t	namespace:glm
dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x3		dmat4x3;$/;"	t	namespace:glm
dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x4		dmat4x4;$/;"	t	namespace:glm
double1	lib/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double1x1	lib/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, double, highp>		double2;		\/\/!< \\brief double-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, double, highp>		double2x2;		\/\/!< \\brief double-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, double, highp>		double2x3;		\/\/!< \\brief double-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, double, highp>		double2x4;		\/\/!< \\brief double-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, double, highp>		double3;		\/\/!< \\brief double-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, double, highp>		double3x2;		\/\/!< \\brief double-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, double, highp>		double3x3;		\/\/!< \\brief double-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, double, highp>		double3x4;		\/\/!< \\brief double-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, double, highp>		double4;		\/\/!< \\brief double-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, double, highp>		double4x2;		\/\/!< \\brief double-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, double, highp>		double4x3;		\/\/!< \\brief double-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, double, highp>		double4x4;		\/\/!< \\brief double-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
dpy	lib/vulkan/vk_icd.h	/^    Display *dpy;$/;"	m	struct:__anon82	access:public
dpy	lib/vulkan/vulkan.h	/^    Display*                       dpy;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
dquat	lib/glm/fwd.hpp	/^	typedef highp_dquat			dquat;$/;"	t	namespace:glm
dquat	lib/glm/fwd.hpp	/^	typedef lowp_dquat			dquat;$/;"	t	namespace:glm
dquat	lib/glm/fwd.hpp	/^	typedef mediump_dquat		dquat;$/;"	t	namespace:glm
draw	src/renderer.cpp	/^void Renderer::draw()$/;"	f	class:Renderer	signature:()
draw	src/scene_lights.cpp	/^void SceneLights::draw(VkCommandBuffer& cmdBuffer)$/;"	f	class:SceneLights	signature:(VkCommandBuffer& cmdBuffer)
draw	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::draw($/;"	f	class:FullscreenQuad	signature:( VkCommandBuffer& cmdBuffer, VkPipeline pipeline, VkPipelineLayout layout, VkDescriptorSet* descriptors, uint32_t numDescriptors)
draw	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::draw(VkCommandBuffer& cmdBuffer) $/;"	f	class:FullscreenQuad	signature:(VkCommandBuffer& cmdBuffer)
draw	src/shape/model.cpp	/^void Model::draw(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)$/;"	f	class:Model	signature:(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)
draw	src/shape/skinned.cpp	/^void Skinned::draw(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)$/;"	f	class:Skinned	signature:(VkCommandBuffer& commandBuffer, VkPipeline& pipeline, VkPipelineLayout& pipelineLayout)
draw	src/shape/tquad.cpp	/^void TQuad::draw(VkCommandBuffer& commandBuffer)$/;"	f	class:TQuad	signature:(VkCommandBuffer& commandBuffer)
drawDeferredQuad	src/g_buffer.cpp	/^void GBuffer::drawDeferredQuad(VkCommandBuffer& cmdBuffer)$/;"	f	class:GBuffer	signature:(VkCommandBuffer& cmdBuffer)
drawIndirectFirstInstance	lib/vulkan/vulkan.h	/^    VkBool32    drawIndirectFirstInstance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
driverVersion	lib/vulkan/vulkan.h	/^    uint32_t                            driverVersion;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags              dstAccessMask;$/;"	m	struct:VkImageMemoryBarrier	access:public
dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags           dstAccessMask;$/;"	m	struct:VkSubpassDependency	access:public
dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkBufferMemoryBarrier	access:public
dstAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      dstAccessMask;$/;"	m	struct:VkMemoryBarrier	access:public
dstAlphaBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            dstAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
dstArrayElement	lib/vulkan/vulkan.h	/^    uint32_t                         dstArrayElement;$/;"	m	struct:VkWriteDescriptorSet	access:public
dstArrayElement	lib/vulkan/vulkan.h	/^    uint32_t           dstArrayElement;$/;"	m	struct:VkCopyDescriptorSet	access:public
dstBinding	lib/vulkan/vulkan.h	/^    uint32_t                         dstBinding;$/;"	m	struct:VkWriteDescriptorSet	access:public
dstBinding	lib/vulkan/vulkan.h	/^    uint32_t           dstBinding;$/;"	m	struct:VkCopyDescriptorSet	access:public
dstColorBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            dstColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
dstOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize    dstOffset;$/;"	m	struct:VkBufferCopy	access:public
dstOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageCopy	access:public
dstOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffset;$/;"	m	struct:VkImageResolve	access:public
dstOffsets	lib/vulkan/vulkan.h	/^    VkOffset3D                  dstOffsets[2];$/;"	m	struct:VkImageBlit	access:public
dstQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                   dstQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier	access:public
dstQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t           dstQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier	access:public
dstRect	lib/vulkan/vulkan.h	/^    VkRect2D           dstRect;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
dstSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet                  dstSet;$/;"	m	struct:VkWriteDescriptorSet	access:public
dstSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet    dstSet;$/;"	m	struct:VkCopyDescriptorSet	access:public
dstStageMask	lib/vulkan/vulkan.h	/^    VkPipelineStageFlags    dstStageMask;$/;"	m	struct:VkSubpassDependency	access:public
dstSubpass	lib/vulkan/vulkan.h	/^    uint32_t                dstSubpass;$/;"	m	struct:VkSubpassDependency	access:public
dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageBlit	access:public
dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageCopy	access:public
dstSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    dstSubresource;$/;"	m	struct:VkImageResolve	access:public
dt	src/timer.cpp	/^double Timer::dt() const$/;"	f	class:Timer	signature:() const
dual	lib/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	access:public
dualSrcBlend	lib/vulkan/vulkan.h	/^    VkBool32    dualSrcBlend;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm
dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm
dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm
dvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_dvec1				dvec1;$/;"	t	namespace:glm
dvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1				dvec1;$/;"	t	namespace:glm
dvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1			dvec1;$/;"	t	namespace:glm
dvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec2			dvec2;$/;"	t	namespace:glm
dvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec2			dvec2;$/;"	t	namespace:glm
dvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec2		dvec2;$/;"	t	namespace:glm
dvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec3			dvec3;$/;"	t	namespace:glm
dvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec3			dvec3;$/;"	t	namespace:glm
dvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec3		dvec3;$/;"	t	namespace:glm
dvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec4			dvec4;$/;"	t	namespace:glm
dvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec4			dvec4;$/;"	t	namespace:glm
dvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec4		dvec4;$/;"	t	namespace:glm
dwarf	inc/renderer.h	/^	Skinned dwarf;$/;"	m	class:Renderer	access:private
dword	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm
dynamicState	inc/creator/pipeline_builder.h	/^inline VkPipelineDynamicStateCreateInfo dynamicState(VkDynamicState* dynamicStates, uint32_t stateCount)$/;"	f	namespace:PipelineBuilder	signature:(VkDynamicState* dynamicStates, uint32_t stateCount)
dynamicStateCount	lib/vulkan/vulkan.h	/^    uint32_t                             dynamicStateCount;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
dynamicUniformFragment	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout dynamicUniformFragment;$/;"	m	struct:DescriptorSetLayouts	access:public
dynamicUniformVertex	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout dynamicUniformVertex;$/;"	m	struct:DescriptorSetLayouts	access:public
eflags	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
elem	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T const& elem(size_t i) const{ return (reinterpret_cast<const T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	access:protected	signature:(size_t i) const
elem	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& elem(size_t i){ return (reinterpret_cast<T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	access:protected	signature:(size_t i)
elem_type	lib/__assimp/anim.h	/^    typedef aiQuaternion elem_type;$/;"	t	struct:aiQuatKey	access:public
elem_type	lib/__assimp/anim.h	/^    typedef aiVector3D elem_type;$/;"	t	struct:aiVectorKey	access:public
elem_type	lib/__assimp/anim.h	/^    typedef unsigned int elem_type;$/;"	t	struct:aiMeshKey	access:public
elem_type	lib/assimp/anim.h	/^    typedef aiQuaternion elem_type;$/;"	t	struct:aiQuatKey	access:public
elem_type	lib/assimp/anim.h	/^    typedef aiVector3D elem_type;$/;"	t	struct:aiVectorKey	access:public
elem_type	lib/assimp/anim.h	/^    typedef unsigned int elem_type;$/;"	t	struct:aiMeshKey	access:public
enableDebug	src/device_manager.cpp	/^void DeviceManager::enableDebug() $/;"	f	class:DeviceManager	signature:()
enabledExtensionCount	lib/vulkan/vulkan.h	/^    uint32_t                           enabledExtensionCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
enabledExtensionCount	lib/vulkan/vulkan.h	/^    uint32_t                    enabledExtensionCount;$/;"	m	struct:VkInstanceCreateInfo	access:public
enabledLayerCount	lib/vulkan/vulkan.h	/^    uint32_t                           enabledLayerCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
enabledLayerCount	lib/vulkan/vulkan.h	/^    uint32_t                    enabledLayerCount;$/;"	m	struct:VkInstanceCreateInfo	access:public
end	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type * end(genType& v)$/;"	f	namespace:glm	signature:(genType& v)
end	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type const * end(genType const & v)$/;"	f	class:glm::genType	signature:(genType const & v)
engine	src/main.cpp	/^Engine engine;$/;"	v
engineVersion	lib/vulkan/vulkan.h	/^    uint32_t           engineVersion;$/;"	m	struct:VkApplicationInfo	access:public
eob_run	lib/stb/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon63	access:public
eof	lib/stb/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon59	access:public
error	lib/__assimp/Logger.hpp	/^inline void Logger::error(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
error	lib/assimp/Logger.hpp	/^inline void Logger::error(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
error	lib/vulkan/libspirv.h	/^  char* error;$/;"	m	struct:spv_diagnostic_t	access:public
execute	inc/task_manager.h	/^	void execute() {$/;"	f	class:MessageTask	access:public	signature:()
expanded	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
ext_inst_type	lib/vulkan/libspirv.h	/^  spv_ext_inst_type_t ext_inst_type;$/;"	m	struct:spv_parsed_instruction_t	access:public
extensionName	lib/vulkan/vulkan.h	/^    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkExtensionProperties	access:public
extent	lib/vulkan/vulkan.h	/^    VkExtent2D    extent;$/;"	m	struct:VkRect2D	access:public
extent	lib/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageCopy	access:public
extent	lib/vulkan/vulkan.h	/^    VkExtent3D                  extent;$/;"	m	struct:VkImageResolve	access:public
extent	lib/vulkan/vulkan.h	/^    VkExtent3D                 extent;$/;"	m	struct:VkSparseImageMemoryBind	access:public
extent	lib/vulkan/vulkan.h	/^    VkExtent3D               extent;$/;"	m	struct:VkImageCreateInfo	access:public
f32	lib/glm/fwd.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm
f32	lib/glm/fwd.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm
f32	lib/glm/fwd.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm
f32	lib/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm
f32mat1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat1x1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat2	lib/glm/fwd.hpp	/^	typedef f32mat2x2				f32mat2;$/;"	t	namespace:glm
f32mat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2			f32mat2;$/;"	t	namespace:glm
f32mat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2			f32mat2;$/;"	t	namespace:glm
f32mat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2;$/;"	t	namespace:glm
f32mat2x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		f32mat2x2;$/;"	t	namespace:glm
f32mat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2x2;$/;"	t	namespace:glm
f32mat2x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		f32mat2x3;$/;"	t	namespace:glm
f32mat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> f32mat2x3;$/;"	t	namespace:glm
f32mat2x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		f32mat2x4;$/;"	t	namespace:glm
f32mat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> f32mat2x4;$/;"	t	namespace:glm
f32mat3	lib/glm/fwd.hpp	/^	typedef f32mat3x3				f32mat3;$/;"	t	namespace:glm
f32mat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3			f32mat3;$/;"	t	namespace:glm
f32mat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3			f32mat3;$/;"	t	namespace:glm
f32mat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3;$/;"	t	namespace:glm
f32mat3x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		f32mat3x2;$/;"	t	namespace:glm
f32mat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> f32mat3x2;$/;"	t	namespace:glm
f32mat3x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		f32mat3x3;$/;"	t	namespace:glm
f32mat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3x3;$/;"	t	namespace:glm
f32mat3x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		f32mat3x4;$/;"	t	namespace:glm
f32mat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> f32mat3x4;$/;"	t	namespace:glm
f32mat4	lib/glm/fwd.hpp	/^	typedef f32mat4x4				f32mat4;$/;"	t	namespace:glm
f32mat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4			f32mat4;$/;"	t	namespace:glm
f32mat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4			f32mat4;$/;"	t	namespace:glm
f32mat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4;$/;"	t	namespace:glm
f32mat4x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		f32mat4x2;$/;"	t	namespace:glm
f32mat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> f32mat4x2;$/;"	t	namespace:glm
f32mat4x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		f32mat4x3;$/;"	t	namespace:glm
f32mat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> f32mat4x3;$/;"	t	namespace:glm
f32mat4x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		f32mat4x4;$/;"	t	namespace:glm
f32mat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4x4;$/;"	t	namespace:glm
f32quat	lib/glm/fwd.hpp	/^	typedef highp_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	lib/glm/fwd.hpp	/^	typedef lowp_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	lib/glm/fwd.hpp	/^	typedef mediump_f32quat			f32quat;$/;"	t	namespace:glm
f32quat	lib/glm/gtc/type_precision.hpp	/^	typedef tquat<f32, defaultp> f32quat;$/;"	t	namespace:glm
f32vec1	lib/glm/fwd.hpp	/^	typedef highp_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	lib/glm/fwd.hpp	/^	typedef lowp_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	lib/glm/fwd.hpp	/^	typedef mediump_f32vec1			f32vec1;$/;"	t	namespace:glm
f32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, defaultp> f32vec1;$/;"	t	namespace:glm
f32vec1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32vec2	lib/glm/fwd.hpp	/^	typedef highp_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	lib/glm/fwd.hpp	/^	typedef lowp_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	lib/glm/fwd.hpp	/^	typedef mediump_f32vec2			f32vec2;$/;"	t	namespace:glm
f32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, defaultp> f32vec2;$/;"	t	namespace:glm
f32vec3	lib/glm/fwd.hpp	/^	typedef highp_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	lib/glm/fwd.hpp	/^	typedef lowp_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	lib/glm/fwd.hpp	/^	typedef mediump_f32vec3			f32vec3;$/;"	t	namespace:glm
f32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, defaultp> f32vec3;$/;"	t	namespace:glm
f32vec4	lib/glm/fwd.hpp	/^	typedef highp_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	lib/glm/fwd.hpp	/^	typedef lowp_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	lib/glm/fwd.hpp	/^	typedef mediump_f32vec4			f32vec4;$/;"	t	namespace:glm
f32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, defaultp> f32vec4;$/;"	t	namespace:glm
f64	lib/glm/fwd.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm
f64	lib/glm/fwd.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm
f64	lib/glm/fwd.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm
f64	lib/glm/gtc/type_precision.hpp	/^	typedef float64 f64;$/;"	t	namespace:glm
f64mat1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat1x1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat2	lib/glm/fwd.hpp	/^	typedef f64mat2x2				f64mat2;$/;"	t	namespace:glm
f64mat2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2			f64mat2;$/;"	t	namespace:glm
f64mat2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2			f64mat2;$/;"	t	namespace:glm
f64mat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2;$/;"	t	namespace:glm
f64mat2x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x2		f64mat2x2;$/;"	t	namespace:glm
f64mat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2x2;$/;"	t	namespace:glm
f64mat2x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x3		f64mat2x3;$/;"	t	namespace:glm
f64mat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, defaultp> f64mat2x3;$/;"	t	namespace:glm
f64mat2x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x4		f64mat2x4;$/;"	t	namespace:glm
f64mat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, defaultp> f64mat2x4;$/;"	t	namespace:glm
f64mat3	lib/glm/fwd.hpp	/^	typedef f64mat3x3				f64mat3;$/;"	t	namespace:glm
f64mat3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3			f64mat3;$/;"	t	namespace:glm
f64mat3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3			f64mat3;$/;"	t	namespace:glm
f64mat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3;$/;"	t	namespace:glm
f64mat3x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x2		f64mat3x2;$/;"	t	namespace:glm
f64mat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, defaultp> f64mat3x2;$/;"	t	namespace:glm
f64mat3x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x3		f64mat3x3;$/;"	t	namespace:glm
f64mat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3x3;$/;"	t	namespace:glm
f64mat3x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x4		f64mat3x4;$/;"	t	namespace:glm
f64mat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, defaultp> f64mat3x4;$/;"	t	namespace:glm
f64mat4	lib/glm/fwd.hpp	/^	typedef f64mat4x4				f64mat4;$/;"	t	namespace:glm
f64mat4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4			f64mat4;$/;"	t	namespace:glm
f64mat4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4			f64mat4;$/;"	t	namespace:glm
f64mat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4;$/;"	t	namespace:glm
f64mat4x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x2		f64mat4x2;$/;"	t	namespace:glm
f64mat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, defaultp> f64mat4x2;$/;"	t	namespace:glm
f64mat4x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x3		f64mat4x3;$/;"	t	namespace:glm
f64mat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, defaultp> f64mat4x3;$/;"	t	namespace:glm
f64mat4x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x4		f64mat4x4;$/;"	t	namespace:glm
f64mat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4x4;$/;"	t	namespace:glm
f64quat	lib/glm/fwd.hpp	/^	typedef highp_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	lib/glm/fwd.hpp	/^	typedef lowp_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	lib/glm/fwd.hpp	/^	typedef mediump_f64quat			f64quat;$/;"	t	namespace:glm
f64quat	lib/glm/gtc/type_precision.hpp	/^	typedef tquat<f64, defaultp> f64quat;$/;"	t	namespace:glm
f64vec1	lib/glm/fwd.hpp	/^	typedef highp_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	lib/glm/fwd.hpp	/^	typedef lowp_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	lib/glm/fwd.hpp	/^	typedef mediump_f64vec1			f64vec1;$/;"	t	namespace:glm
f64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, defaultp> f64vec1;$/;"	t	namespace:glm
f64vec1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64vec2	lib/glm/fwd.hpp	/^	typedef highp_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	lib/glm/fwd.hpp	/^	typedef lowp_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	lib/glm/fwd.hpp	/^	typedef mediump_f64vec2			f64vec2;$/;"	t	namespace:glm
f64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, defaultp> f64vec2;$/;"	t	namespace:glm
f64vec3	lib/glm/fwd.hpp	/^	typedef highp_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	lib/glm/fwd.hpp	/^	typedef lowp_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	lib/glm/fwd.hpp	/^	typedef mediump_f64vec3			f64vec3;$/;"	t	namespace:glm
f64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, defaultp> f64vec3;$/;"	t	namespace:glm
f64vec4	lib/glm/fwd.hpp	/^	typedef highp_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	lib/glm/fwd.hpp	/^	typedef lowp_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	lib/glm/fwd.hpp	/^	typedef mediump_f64vec4			f64vec4;$/;"	t	namespace:glm
f64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, defaultp> f64vec4;$/;"	t	namespace:glm
fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> fade(vec<2, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & t)
fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> fade(vec<3, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & t)
fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> fade(vec<4, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & t)
failOp	lib/vulkan/vulkan.h	/^    VkStencilOp    failOp;$/;"	m	struct:VkStencilOpState	access:public
fast	lib/glm/detail/type_gentype.hpp	/^		fast,$/;"	e	enum:glm::profile
fast	lib/stb/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon66	access:public
fast	lib/stb/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon62	access:public
fast_ac	lib/stb/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon63	access:public
fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm
fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm
fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm
fileExtension	lib/__assimp/cexport.h	/^    const char* fileExtension;$/;"	m	struct:aiExportFormatDesc	access:public
fileExtension	lib/assimp/cexport.h	/^    const char* fileExtension;$/;"	m	struct:aiExportFormatDesc	access:public
fileManager	inc/file_manager.h	/^	FileManager(const FileManager& fileManager) = delete;$/;"	m	class:FileManager	access:public
fileManager	inc/file_manager.h	/^	void operator=(const FileManager& fileManager) = delete;$/;"	m	class:FileManager	access:public
filename	inc/texture_data.h	/^	std::string filename;$/;"	m	struct:TextureDesc	access:public
fillModeNonSolid	lib/vulkan/vulkan.h	/^    VkBool32    fillModeNonSolid;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
fill_	lib/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	access:private
finalLayout	lib/vulkan/vulkan.h	/^    VkImageLayout                   finalLayout;$/;"	m	struct:VkAttachmentDescription	access:public
findDepthFormat	inc/creator/image_helper.h	/^inline VkFormat findDepthFormat(VkPhysicalDevice& physicalDevice)$/;"	f	namespace:ImageHelper	signature:(VkPhysicalDevice& physicalDevice)
findDepthStencilFormat	inc/creator/image_helper.h	/^inline VkFormat findDepthStencilFormat(const VkPhysicalDevice& physicalDevice) $/;"	f	namespace:ImageHelper	signature:(const VkPhysicalDevice& physicalDevice)
findSupportedFormat	inc/creator/image_helper.h	/^inline VkFormat findSupportedFormat($/;"	f	namespace:ImageHelper	signature:( const State& state, const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features)
findSupportedFormat	inc/creator/image_helper.h	/^inline VkFormat findSupportedFormat($/;"	f	namespace:ImageHelper	signature:( const VkPhysicalDevice& physicalDevice, const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features)
first	lib/stb/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon73	access:public
firstIndex	lib/vulkan/vulkan.h	/^    uint32_t    firstIndex;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
firstInstance	lib/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
firstInstance	lib/vulkan/vulkan.h	/^    uint32_t    firstInstance;$/;"	m	struct:VkDrawIndirectCommand	access:public
firstVertex	lib/vulkan/vulkan.h	/^    uint32_t    firstVertex;$/;"	m	struct:VkDrawIndirectCommand	access:public
first_row_filter	lib/stb/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	lib/stb/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon66	access:public
firstsymbol	lib/stb/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon66	access:public
flags	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
flags	lib/vulkan/vulkan.h	/^    VkAndroidSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkAttachmentDescriptionFlags    flags;$/;"	m	struct:VkAttachmentDescription	access:public
flags	lib/vulkan/vulkan.h	/^    VkBufferCreateFlags    flags;$/;"	m	struct:VkBufferCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkBufferViewCreateFlags    flags;$/;"	m	struct:VkBufferViewCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkCommandBufferUsageFlags                flags;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkCommandPoolCreateFlags    flags;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkDebugReportFlagsEXT           flags;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
flags	lib/vulkan/vulkan.h	/^    VkDescriptorPoolCreateFlags    flags;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkDescriptorSetLayoutCreateFlags       flags;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkDeviceCreateFlags                flags;$/;"	m	struct:VkDeviceCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkDeviceQueueCreateFlags    flags;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkDisplayModeCreateFlagsKHR    flags;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkDisplaySurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkEventCreateFlags    flags;$/;"	m	struct:VkEventCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkFenceCreateFlags    flags;$/;"	m	struct:VkFenceCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkFramebufferCreateFlags    flags;$/;"	m	struct:VkFramebufferCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkImageCreateFlags       flags;$/;"	m	struct:VkImageCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkImageViewCreateFlags     flags;$/;"	m	struct:VkImageViewCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkInstanceCreateFlags       flags;$/;"	m	struct:VkInstanceCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkMemoryHeapFlags    flags;$/;"	m	struct:VkMemoryHeap	access:public
flags	lib/vulkan/vulkan.h	/^    VkMirSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineCacheCreateFlags    flags;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineColorBlendStateCreateFlags          flags;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineCreateFlags                            flags;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineCreateFlags              flags;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineDepthStencilStateCreateFlags    flags;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineDynamicStateCreateFlags    flags;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineInputAssemblyStateCreateFlags    flags;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineLayoutCreateFlags     flags;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineMultisampleStateCreateFlags    flags;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineRasterizationStateCreateFlags    flags;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateFlags    flags;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineTessellationStateCreateFlags    flags;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineVertexInputStateCreateFlags       flags;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkPipelineViewportStateCreateFlags    flags;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkQueryPoolCreateFlags           flags;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkRenderPassCreateFlags           flags;$/;"	m	struct:VkRenderPassCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkSamplerCreateFlags    flags;$/;"	m	struct:VkSamplerCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkSemaphoreCreateFlags    flags;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkShaderModuleCreateFlags    flags;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
flags	lib/vulkan/vulkan.h	/^    VkSparseImageFormatFlags    flags;$/;"	m	struct:VkSparseImageFormatProperties	access:public
flags	lib/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseImageMemoryBind	access:public
flags	lib/vulkan/vulkan.h	/^    VkSparseMemoryBindFlags    flags;$/;"	m	struct:VkSparseMemoryBind	access:public
flags	lib/vulkan/vulkan.h	/^    VkSubpassDescriptionFlags       flags;$/;"	m	struct:VkSubpassDescription	access:public
flags	lib/vulkan/vulkan.h	/^    VkSwapchainCreateFlagsKHR        flags;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkWaylandSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkWin32SurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkXcbSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
flags	lib/vulkan/vulkan.h	/^    VkXlibSurfaceCreateFlagsKHR    flags;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
flags_	lib/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	access:private
flags_type	lib/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	access:private
float1	lib/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float1x1	lib/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, float, highp>		float2;			\/\/!< \\brief single-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2fixed	lib/stb/stb_image.h	3072;"	d
float2fixed	lib/stb/stb_image.h	3100;"	d
float2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, float, highp>		float2x2;		\/\/!< \\brief single-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, float, highp>		float2x3;		\/\/!< \\brief single-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, float, highp>		float2x4;		\/\/!< \\brief single-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, float, highp>		float3;			\/\/!< \\brief single-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float32	lib/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm
float32	lib/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm::detail
float32	lib/glm/fwd.hpp	/^	typedef highp_float32 float32;$/;"	t	namespace:glm
float32	lib/glm/fwd.hpp	/^	typedef lowp_float32 float32;$/;"	t	namespace:glm
float32	lib/glm/fwd.hpp	/^	typedef mediump_float32 float32;$/;"	t	namespace:glm
float32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32;$/;"	t	namespace:glm
float32	lib/vulkan/vulkan.h	/^    float       float32[4];$/;"	m	union:VkClearColorValue	access:public
float32_t	lib/glm/fwd.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm
float32_t	lib/glm/fwd.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm
float32_t	lib/glm/fwd.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm
float32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32_t;$/;"	t	namespace:glm
float3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, float, highp>		float3x2;		\/\/!< \\brief single-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, float, highp>		float3x3;		\/\/!< \\brief single-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, float, highp>		float3x4;		\/\/!< \\brief single-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, float, highp>		float4;			\/\/!< \\brief single-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, float, highp>		float4x2;		\/\/!< \\brief single-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, float, highp>		float4x3;		\/\/!< \\brief single-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, float, highp>		float4x4;		\/\/!< \\brief single-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float64	lib/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm
float64	lib/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm::detail
float64	lib/glm/fwd.hpp	/^	typedef highp_float64 float64;$/;"	t	namespace:glm
float64	lib/glm/fwd.hpp	/^	typedef lowp_float64 float64;$/;"	t	namespace:glm
float64	lib/glm/fwd.hpp	/^	typedef mediump_float64 float64;$/;"	t	namespace:glm
float64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64;$/;"	t	namespace:glm
float64_t	lib/glm/fwd.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm
float64_t	lib/glm/fwd.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm
float64_t	lib/glm/fwd.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm
float64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64_t;$/;"	t	namespace:glm
float_t	lib/glm/detail/type_float.hpp	/^	typedef highp_float			float_t;$/;"	t	namespace:glm
float_t	lib/glm/detail/type_float.hpp	/^	typedef lowp_float			float_t;$/;"	t	namespace:glm
float_t	lib/glm/detail/type_float.hpp	/^	typedef mediump_float		float_t;$/;"	t	namespace:glm
fmat2	lib/glm/fwd.hpp	/^	typedef fmat2x2					fmat2;$/;"	t	namespace:glm
fmat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2			fmat2;$/;"	t	namespace:glm
fmat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2			fmat2;$/;"	t	namespace:glm
fmat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2;$/;"	t	namespace:glm
fmat2x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
fmat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
fmat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		fmat2x2;$/;"	t	namespace:glm
fmat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2x2;$/;"	t	namespace:glm
fmat2x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
fmat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
fmat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		fmat2x3;$/;"	t	namespace:glm
fmat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> fmat2x3;$/;"	t	namespace:glm
fmat2x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
fmat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
fmat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		fmat2x4;$/;"	t	namespace:glm
fmat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> fmat2x4;$/;"	t	namespace:glm
fmat3	lib/glm/fwd.hpp	/^	typedef fmat3x3					fmat3;$/;"	t	namespace:glm
fmat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3			fmat3;$/;"	t	namespace:glm
fmat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3			fmat3;$/;"	t	namespace:glm
fmat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3;$/;"	t	namespace:glm
fmat3x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
fmat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
fmat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		fmat3x2;$/;"	t	namespace:glm
fmat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> fmat3x2;$/;"	t	namespace:glm
fmat3x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
fmat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
fmat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		fmat3x3;$/;"	t	namespace:glm
fmat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3x3;$/;"	t	namespace:glm
fmat3x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
fmat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
fmat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		fmat3x4;$/;"	t	namespace:glm
fmat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> fmat3x4;$/;"	t	namespace:glm
fmat4	lib/glm/fwd.hpp	/^	typedef fmat4x4					fmat4;$/;"	t	namespace:glm
fmat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4			fmat4;$/;"	t	namespace:glm
fmat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4			fmat4;$/;"	t	namespace:glm
fmat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4;$/;"	t	namespace:glm
fmat4x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
fmat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
fmat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		fmat4x2;$/;"	t	namespace:glm
fmat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> fmat4x2;$/;"	t	namespace:glm
fmat4x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
fmat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
fmat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		fmat4x3;$/;"	t	namespace:glm
fmat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> fmat4x3;$/;"	t	namespace:glm
fmat4x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
fmat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
fmat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		fmat4x4;$/;"	t	namespace:glm
fmat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4x4;$/;"	t	namespace:glm
format	inc/g_buffer.h	/^	VkFormat format;$/;"	m	struct:FramebufferAttachment	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat                        format;$/;"	m	struct:VkAttachmentDescription	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkBufferViewCreateInfo	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat                   format;$/;"	m	struct:VkImageViewCreateInfo	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat                 format;$/;"	m	struct:VkImageCreateInfo	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat           format;$/;"	m	struct:VkSurfaceFormatKHR	access:public
format	lib/vulkan/vulkan.h	/^    VkFormat    format;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
formatProperties	lib/vulkan/vulkan.h	/^    VkSparseImageFormatProperties    formatProperties;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
format_punct	lib/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io	inherits:std::locale::facet
format_saver	lib/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io
formatted	lib/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	access:public
fpExportFunc	lib/__assimp/Exporter.hpp	/^    typedef void (*fpExportFunc)(const char*, IOSystem*, const aiScene*, const ExportProperties*);$/;"	t	class:Assimp::Exporter	access:public
fpExportFunc	lib/assimp/Exporter.hpp	/^    typedef void (*fpExportFunc)(const char*, IOSystem*, const aiScene*, const ExportProperties*);$/;"	t	class:Assimp::Exporter	access:public
fquat	lib/glm/fwd.hpp	/^	typedef highp_fquat				fquat;$/;"	t	namespace:glm
fquat	lib/glm/fwd.hpp	/^	typedef lowp_f32quat			fquat;$/;"	t	namespace:glm
fquat	lib/glm/fwd.hpp	/^	typedef mediump_f32quat			fquat;$/;"	t	namespace:glm
fquat	lib/glm/fwd.hpp	/^	typedef quat				fquat;$/;"	t	namespace:glm
fragment	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo fragment;$/;"	m	struct:ShaderInfo	access:public
fragmentStoresAndAtomics	lib/vulkan/vulkan.h	/^    VkBool32    fragmentStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
frameBuffer	inc/g_buffer.h	/^	VkFramebuffer frameBuffer;$/;"	m	class:GBuffer	access:public
framebuffer	lib/vulkan/vulkan.h	/^    VkFramebuffer                    framebuffer;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
framebuffer	lib/vulkan/vulkan.h	/^    VkFramebuffer          framebuffer;$/;"	m	struct:VkRenderPassBeginInfo	access:public
framebufferColorSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
framebufferDepthSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
framebufferNoAttachmentsSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
framebufferStencilSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    framebufferStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
framebuffers	inc/swapchain_manager.h	/^	std::vector<VkFramebuffer> framebuffers;$/;"	m	class:SwapchainManager	access:public
front	lib/vulkan/vulkan.h	/^    VkStencilOpState                          front;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
frontFace	lib/vulkan/vulkan.h	/^    VkFrontFace                                frontFace;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
fullDrawIndexUint32	lib/vulkan/vulkan.h	/^    VkBool32    fullDrawIndexUint32;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
fullscreenQuad	/home/al/amvk/inc/state.h	/^	PipelineInfo fullscreenQuad;$/;"	m	struct:Pipelines	access:public
fullscreenQuad	/home/al/amvk/inc/state.h	/^	ShaderInfo fullscreenQuad;$/;"	m	struct:Shaders	access:public
fullscreenQuad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout fullscreenQuad;$/;"	m	struct:DescriptorSetLayouts	access:public
fullscreenQuad	inc/renderer.h	/^	FullscreenQuad fullscreenQuad;$/;"	m	class:Renderer	access:private
function	lib/vulkan/vk_layer.h	/^    VkLayerFunction function;$/;"	m	struct:__anon85	access:public
function	lib/vulkan/vk_layer.h	/^    VkLayerFunction function;$/;"	m	struct:__anon87	access:public
functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<1, R, T, P>$/;"	s	namespace:glm::detail
functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<2, R, T, P>$/;"	s	namespace:glm::detail
functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<3, R, T, P>$/;"	s	namespace:glm::detail
functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<4, R, T, P>$/;"	s	namespace:glm::detail
functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<1, T, P>$/;"	s	namespace:glm::detail
functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<2, T, P>$/;"	s	namespace:glm::detail
functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<3, T, P>$/;"	s	namespace:glm::detail
functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<4, T, P>$/;"	s	namespace:glm::detail
functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<1, T, P>$/;"	s	namespace:glm::detail
functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<2, T, P>$/;"	s	namespace:glm::detail
functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<3, T, P>$/;"	s	namespace:glm::detail
functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<4, T, P>$/;"	s	namespace:glm::detail
functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	lib/glm/fwd.hpp	/^	typedef highp_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	lib/glm/fwd.hpp	/^	typedef lowp_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	lib/glm/fwd.hpp	/^	typedef mediump_f32vec1			fvec1;$/;"	t	namespace:glm
fvec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, defaultp> fvec1;$/;"	t	namespace:glm
fvec2	lib/glm/fwd.hpp	/^	typedef highp_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	lib/glm/fwd.hpp	/^	typedef lowp_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	lib/glm/fwd.hpp	/^	typedef mediump_f32vec2			fvec2;$/;"	t	namespace:glm
fvec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, defaultp> fvec2;$/;"	t	namespace:glm
fvec3	lib/glm/fwd.hpp	/^	typedef highp_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	lib/glm/fwd.hpp	/^	typedef lowp_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	lib/glm/fwd.hpp	/^	typedef mediump_f32vec3			fvec3;$/;"	t	namespace:glm
fvec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, defaultp> fvec3;$/;"	t	namespace:glm
fvec4	lib/glm/fwd.hpp	/^	typedef highp_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	lib/glm/fwd.hpp	/^	typedef lowp_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	lib/glm/fwd.hpp	/^	typedef mediump_f32vec4			fvec4;$/;"	t	namespace:glm
fvec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, defaultp> fvec4;$/;"	t	namespace:glm
g	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
g	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
g	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
g	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
g	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
g	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
g	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
g	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
g	lib/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon50::__anon52	access:public
g	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
g	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
g	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
g	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
g	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
g	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    g;$/;"	m	struct:VkComponentMapping	access:public
gBuffer	inc/renderer.h	/^	GBuffer gBuffer;$/;"	m	class:Renderer	access:private
gBufferColorBlendAttachments	inc/creator/pipeline_builder.h	/^inline std::array<VkPipelineColorBlendAttachmentState, 3> gBufferColorBlendAttachments() $/;"	f	namespace:PipelineBuilder	signature:()
genType	lib/glm/detail/type_gentype.hpp	/^	struct genType$/;"	s	namespace:glm::detail
geometry	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo geometry;$/;"	m	struct:ShaderInfo	access:public
geometryShader	lib/vulkan/vulkan.h	/^    VkBool32    geometryShader;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
getAnimatedTransform	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getAnimatedTransform(float progress, unsigned int animIndex)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex)
getAspect	src/camera.cpp	/^float Camera::getAspect() const $/;"	f	class:Camera	signature:() const
getAspect	src/window.cpp	/^float Window::getAspect() const$/;"	f	class:Window	signature:() const
getBinPath	src/file_manager.cpp	/^std::string FileManager::getBinPath() $/;"	f	class:FileManager	signature:()
getCache	src/pipeline_cache.cpp	/^void PipelineCacheInfo::getCache(const VkDevice& device)$/;"	f	class:PipelineCacheInfo	signature:(const VkDevice& device)
getCachePath	src/file_manager.cpp	/^std::string FileManager::getCachePath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
getCamera	src/engine.cpp	/^Camera& Engine::getCamera()$/;"	f	class:Engine	signature:()
getChannels	src/texture_data.cpp	/^int TextureData::getChannels() const$/;"	f	class:TextureData	signature:() const
getCurrentDir	inc/file_manager.h	15;"	d
getCurrentDir	inc/file_manager.h	18;"	d
getExtensionNames	src/device_manager.cpp	/^std::vector<const char*> DeviceManager::getExtensionNames() $/;"	f	class:DeviceManager	signature:()
getExtent	src/swapchain_manager.cpp	/^VkExtent2D SwapchainManager::getExtent(VkSurfaceCapabilitiesKHR& surfaceCapabilities) const$/;"	f	class:SwapchainManager	signature:(VkSurfaceCapabilitiesKHR& surfaceCapabilities) const
getFilePath	src/file_manager.cpp	/^std::string FileManager::getFilePath(const char* filename) $/;"	f	class:FileManager	signature:(const char* filename)
getFilePath	src/file_manager.cpp	/^std::string FileManager::getFilePath(const std::string& filename)$/;"	f	class:FileManager	signature:(const std::string& filename)
getHeight	src/swapchain_manager.cpp	/^uint32_t SwapchainManager::getHeight() const$/;"	f	class:SwapchainManager	signature:() const
getHeight	src/texture_data.cpp	/^int TextureData::getHeight() const $/;"	f	class:TextureData	signature:() const
getHeight	src/window.cpp	/^unsigned Window::getHeight() const $/;"	f	class:Window	signature:() const
getInputManager	src/window.cpp	/^InputManager& Window::getInputManager()$/;"	f	class:Window	signature:()
getInstance	src/file_manager.cpp	/^FileManager& FileManager::getInstance()$/;"	f	class:FileManager	signature:()
getInstance	src/texture_manager.cpp	/^TextureManager& TextureManager::getInstance() $/;"	f	class:TextureManager	signature:()
getLogSeverity	lib/__assimp/Logger.hpp	/^inline Logger::LogSeverity Logger::getLogSeverity() const {$/;"	f	class:Assimp::Logger	signature:() const
getLogSeverity	lib/assimp/Logger.hpp	/^inline Logger::LogSeverity Logger::getLogSeverity() const {$/;"	f	class:Assimp::Logger	signature:() const
getMemoryType	inc/creator/buffer_helper.h	/^inline uint32_t getMemoryType($/;"	f	namespace:BufferHelper	signature:( const VkPhysicalDevice& physicalDevice, uint32_t typeFilter, VkMemoryPropertyFlags flags)
getModelsPath	src/file_manager.cpp	/^std::string FileManager::getModelsPath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
getPixels	src/texture_data.cpp	/^stbi_uc* TextureData::getPixels()$/;"	f	class:TextureData	signature:()
getPosition	src/shape/point_light.cpp	/^glm::vec3 PointLight::getPosition() const$/;"	f	class:PointLight	signature:() const
getPresentMode	src/swapchain_manager.cpp	/^VkPresentModeKHR SwapchainManager::getPresentMode(const std::vector<VkPresentModeKHR>& presentModes) const$/;"	f	class:SwapchainManager	signature:(const std::vector<VkPresentModeKHR>& presentModes) const
getRadius	src/shape/point_light.cpp	/^float PointLight::getRadius() const$/;"	f	class:PointLight	signature:() const
getRadius	src/shape/sphere.cpp	/^float Sphere::getRadius() const $/;"	f	class:Sphere	signature:() const
getRenderer	src/engine.cpp	/^Renderer& Engine::getRenderer()$/;"	f	class:Engine	signature:()
getResourcePath	src/file_manager.cpp	/^std::string FileManager::getResourcePath(std::string&& path) $/;"	f	class:FileManager	signature:(std::string&& path)
getRotation	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getRotation(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
getScaling	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getScaling(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
getSize	src/texture_data.cpp	/^uint64_t TextureData::getSize() const $/;"	f	class:TextureData	signature:() const
getSurfaceFormat	src/swapchain_manager.cpp	/^VkSurfaceFormatKHR SwapchainManager::getSurfaceFormat(const std::vector<VkSurfaceFormatKHR>& surfaceFormats) const $/;"	f	class:SwapchainManager	signature:(const std::vector<VkSurfaceFormatKHR>& surfaceFormats) const
getTaskManager	src/engine.cpp	/^TaskManager& Engine::getTaskManager() $/;"	f	class:Engine	signature:()
getTimer	src/engine.cpp	/^Timer& Engine::getTimer()$/;"	f	class:Engine	signature:()
getTranslation	src/shape/anim_node.cpp	/^aiMatrix4x4 AnimNode::getTranslation(float progress, unsigned int animIndex, aiNodeAnim& channel)$/;"	f	class:AnimNode	signature:(float progress, unsigned int animIndex, aiNodeAnim& channel)
getVkResultString	src/vulkan_utils.cpp	/^const char* VulkanUtils::getVkResultString(VkResult result)$/;"	f	class:VulkanUtils	signature:(VkResult result)
getVkResultString	src/vulkan_utils.cpp	/^const char* VulkanUtils::getVkResultString(int result)$/;"	f	class:VulkanUtils	signature:(int result)
getWidth	src/swapchain_manager.cpp	/^uint32_t SwapchainManager::getWidth() const$/;"	f	class:SwapchainManager	signature:() const
getWidth	src/texture_data.cpp	/^int TextureData::getWidth() const $/;"	f	class:TextureData	signature:() const
getWidth	src/window.cpp	/^unsigned Window::getWidth() const  $/;"	f	class:Window	signature:() const
getWindow	src/engine.cpp	/^Window& Engine::getWindow()$/;"	f	class:Engine	signature:()
glm	lib/glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/func_common.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_exponential.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_geometric.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_integer.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_matrix.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/func_packing.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_trigonometric.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/func_vector_relational.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	lib/glm/detail/precision.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	lib/glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/type_gentype.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/type_int.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/type_mat.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_vec.hpp	/^namespace glm{$/;"	n
glm	lib/glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	lib/glm/detail/type_vec4.hpp	/^namespace glm$/;"	n
glm	lib/glm/fwd.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/functions.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/matrix_transform.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/type_aligned.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtc/vec1.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/color_encoding.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/extended_min_max.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	lib/glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	lib/glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/range.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/type_trait.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/vec_swizzle.hpp	/^namespace glm {$/;"	n
glm	lib/glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	lib/glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat2x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat2x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat2x4.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat3x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat3x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat3x4.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat4x2.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat4x3.hpp	/^namespace glm$/;"	n
glm	lib/glm/mat4x4.hpp	/^namespace glm$/;"	n
glm::aligned	lib/glm/detail/precision.hpp	/^			aligned = aligned_highp,$/;"	e	enum:glm::precision
glm::aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec1			aligned_bvec1;$/;"	t	namespace:glm
glm::aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec1			aligned_bvec1;$/;"	t	namespace:glm
glm::aligned_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec1		aligned_bvec1;$/;"	t	namespace:glm
glm::aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec2			aligned_bvec2;$/;"	t	namespace:glm
glm::aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec2			aligned_bvec2;$/;"	t	namespace:glm
glm::aligned_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec2		aligned_bvec2;$/;"	t	namespace:glm
glm::aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec3			aligned_bvec3;$/;"	t	namespace:glm
glm::aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec3			aligned_bvec3;$/;"	t	namespace:glm
glm::aligned_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec3		aligned_bvec3;$/;"	t	namespace:glm
glm::aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec4			aligned_bvec4;$/;"	t	namespace:glm
glm::aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec4			aligned_bvec4;$/;"	t	namespace:glm
glm::aligned_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec4		aligned_bvec4;$/;"	t	namespace:glm
glm::aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec1			aligned_dvec1;$/;"	t	namespace:glm
glm::aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec1			aligned_dvec1;$/;"	t	namespace:glm
glm::aligned_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec1		aligned_dvec1;$/;"	t	namespace:glm
glm::aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec2			aligned_dvec2;$/;"	t	namespace:glm
glm::aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec2			aligned_dvec2;$/;"	t	namespace:glm
glm::aligned_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec2		aligned_dvec2;$/;"	t	namespace:glm
glm::aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec3			aligned_dvec3;$/;"	t	namespace:glm
glm::aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec3			aligned_dvec3;$/;"	t	namespace:glm
glm::aligned_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec3		aligned_dvec3;$/;"	t	namespace:glm
glm::aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec4			aligned_dvec4;$/;"	t	namespace:glm
glm::aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec4			aligned_dvec4;$/;"	t	namespace:glm
glm::aligned_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec4		aligned_dvec4;$/;"	t	namespace:glm
glm::aligned_highp	lib/glm/detail/precision.hpp	/^			aligned_highp,$/;"	e	enum:glm::precision
glm::aligned_highp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_highp>		aligned_highp_bvec1;$/;"	t	namespace:glm
glm::aligned_highp_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_highp>		aligned_highp_bvec2;$/;"	t	namespace:glm
glm::aligned_highp_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_highp>		aligned_highp_bvec3;$/;"	t	namespace:glm
glm::aligned_highp_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_highp>		aligned_highp_bvec4;$/;"	t	namespace:glm
glm::aligned_highp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_highp>	aligned_highp_dvec1;$/;"	t	namespace:glm
glm::aligned_highp_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_highp>	aligned_highp_dvec2;$/;"	t	namespace:glm
glm::aligned_highp_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_highp>	aligned_highp_dvec3;$/;"	t	namespace:glm
glm::aligned_highp_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_highp>	aligned_highp_dvec4;$/;"	t	namespace:glm
glm::aligned_highp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_highp>		aligned_highp_ivec1;$/;"	t	namespace:glm
glm::aligned_highp_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_highp>		aligned_highp_ivec2;$/;"	t	namespace:glm
glm::aligned_highp_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_highp>		aligned_highp_ivec3;$/;"	t	namespace:glm
glm::aligned_highp_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_highp>		aligned_highp_ivec4;$/;"	t	namespace:glm
glm::aligned_highp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_highp>		aligned_highp_uvec1;$/;"	t	namespace:glm
glm::aligned_highp_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_highp>		aligned_highp_uvec2;$/;"	t	namespace:glm
glm::aligned_highp_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_highp>		aligned_highp_uvec3;$/;"	t	namespace:glm
glm::aligned_highp_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_highp>		aligned_highp_uvec4;$/;"	t	namespace:glm
glm::aligned_highp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_highp>		aligned_highp_vec1;$/;"	t	namespace:glm
glm::aligned_highp_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_highp>		aligned_highp_vec2;$/;"	t	namespace:glm
glm::aligned_highp_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_highp>		aligned_highp_vec3;$/;"	t	namespace:glm
glm::aligned_highp_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_highp>		aligned_highp_vec4;$/;"	t	namespace:glm
glm::aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec1			aligned_ivec1;$/;"	t	namespace:glm
glm::aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec1			aligned_ivec1;$/;"	t	namespace:glm
glm::aligned_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec1		aligned_ivec1;$/;"	t	namespace:glm
glm::aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec2			aligned_ivec2;$/;"	t	namespace:glm
glm::aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec2			aligned_ivec2;$/;"	t	namespace:glm
glm::aligned_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec2		aligned_ivec2;$/;"	t	namespace:glm
glm::aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec3			aligned_ivec3;$/;"	t	namespace:glm
glm::aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec3			aligned_ivec3;$/;"	t	namespace:glm
glm::aligned_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec3		aligned_ivec3;$/;"	t	namespace:glm
glm::aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec4			aligned_ivec4;$/;"	t	namespace:glm
glm::aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec4			aligned_ivec4;$/;"	t	namespace:glm
glm::aligned_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec4		aligned_ivec4;$/;"	t	namespace:glm
glm::aligned_lowp	lib/glm/detail/precision.hpp	/^			aligned_lowp,$/;"	e	enum:glm::precision
glm::aligned_lowp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_lowp>		aligned_lowp_bvec1;$/;"	t	namespace:glm
glm::aligned_lowp_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_lowp>		aligned_lowp_bvec2;$/;"	t	namespace:glm
glm::aligned_lowp_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_lowp>		aligned_lowp_bvec3;$/;"	t	namespace:glm
glm::aligned_lowp_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_lowp>		aligned_lowp_bvec4;$/;"	t	namespace:glm
glm::aligned_lowp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_lowp>		aligned_lowp_dvec1;$/;"	t	namespace:glm
glm::aligned_lowp_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_lowp>		aligned_lowp_dvec2;$/;"	t	namespace:glm
glm::aligned_lowp_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_lowp>		aligned_lowp_dvec3;$/;"	t	namespace:glm
glm::aligned_lowp_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_lowp>		aligned_lowp_dvec4;$/;"	t	namespace:glm
glm::aligned_lowp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_lowp>		aligned_lowp_ivec1;$/;"	t	namespace:glm
glm::aligned_lowp_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_lowp>		aligned_lowp_ivec2;$/;"	t	namespace:glm
glm::aligned_lowp_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_lowp>		aligned_lowp_ivec3;$/;"	t	namespace:glm
glm::aligned_lowp_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_lowp>		aligned_lowp_ivec4;$/;"	t	namespace:glm
glm::aligned_lowp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_lowp>		aligned_lowp_uvec1;$/;"	t	namespace:glm
glm::aligned_lowp_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_lowp>		aligned_lowp_uvec2;$/;"	t	namespace:glm
glm::aligned_lowp_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_lowp>		aligned_lowp_uvec3;$/;"	t	namespace:glm
glm::aligned_lowp_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_lowp>		aligned_lowp_uvec4;$/;"	t	namespace:glm
glm::aligned_lowp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_lowp>		aligned_lowp_vec1;$/;"	t	namespace:glm
glm::aligned_lowp_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_lowp>		aligned_lowp_vec2;$/;"	t	namespace:glm
glm::aligned_lowp_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_lowp>		aligned_lowp_vec3;$/;"	t	namespace:glm
glm::aligned_lowp_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_lowp>		aligned_lowp_vec4;$/;"	t	namespace:glm
glm::aligned_mediump	lib/glm/detail/precision.hpp	/^			aligned_mediump,$/;"	e	enum:glm::precision
glm::aligned_mediump_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_mediump>	aligned_mediump_bvec1;$/;"	t	namespace:glm
glm::aligned_mediump_bvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_mediump>	aligned_mediump_bvec2;$/;"	t	namespace:glm
glm::aligned_mediump_bvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_mediump>	aligned_mediump_bvec3;$/;"	t	namespace:glm
glm::aligned_mediump_bvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_mediump>	aligned_mediump_bvec4;$/;"	t	namespace:glm
glm::aligned_mediump_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_mediump>	aligned_mediump_dvec1;$/;"	t	namespace:glm
glm::aligned_mediump_dvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_mediump>	aligned_mediump_dvec2;$/;"	t	namespace:glm
glm::aligned_mediump_dvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_mediump>	aligned_mediump_dvec3;$/;"	t	namespace:glm
glm::aligned_mediump_dvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_mediump>	aligned_mediump_dvec4;$/;"	t	namespace:glm
glm::aligned_mediump_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_mediump>		aligned_mediump_ivec1;$/;"	t	namespace:glm
glm::aligned_mediump_ivec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_mediump>		aligned_mediump_ivec2;$/;"	t	namespace:glm
glm::aligned_mediump_ivec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_mediump>		aligned_mediump_ivec3;$/;"	t	namespace:glm
glm::aligned_mediump_ivec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_mediump>		aligned_mediump_ivec4;$/;"	t	namespace:glm
glm::aligned_mediump_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_mediump>	aligned_mediump_uvec1;$/;"	t	namespace:glm
glm::aligned_mediump_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_mediump>	aligned_mediump_uvec2;$/;"	t	namespace:glm
glm::aligned_mediump_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_mediump>	aligned_mediump_uvec3;$/;"	t	namespace:glm
glm::aligned_mediump_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_mediump>	aligned_mediump_uvec4;$/;"	t	namespace:glm
glm::aligned_mediump_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_mediump>	aligned_mediump_vec1;$/;"	t	namespace:glm
glm::aligned_mediump_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_mediump>	aligned_mediump_vec2;$/;"	t	namespace:glm
glm::aligned_mediump_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_mediump>	aligned_mediump_vec3;$/;"	t	namespace:glm
glm::aligned_mediump_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_mediump>	aligned_mediump_vec4;$/;"	t	namespace:glm
glm::aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec1			aligned_uvec1;$/;"	t	namespace:glm
glm::aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec1			aligned_uvec1;$/;"	t	namespace:glm
glm::aligned_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec1		aligned_uvec1;$/;"	t	namespace:glm
glm::aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec2			aligned_uvec2;$/;"	t	namespace:glm
glm::aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec2			aligned_uvec2;$/;"	t	namespace:glm
glm::aligned_uvec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec2		aligned_uvec2;$/;"	t	namespace:glm
glm::aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec3			aligned_uvec3;$/;"	t	namespace:glm
glm::aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec3			aligned_uvec3;$/;"	t	namespace:glm
glm::aligned_uvec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec3		aligned_uvec3;$/;"	t	namespace:glm
glm::aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec4			aligned_uvec4;$/;"	t	namespace:glm
glm::aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec4			aligned_uvec4;$/;"	t	namespace:glm
glm::aligned_uvec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec4		aligned_uvec4;$/;"	t	namespace:glm
glm::aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec1			aligned_vec1;$/;"	t	namespace:glm
glm::aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec1			aligned_vec1;$/;"	t	namespace:glm
glm::aligned_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec1		aligned_vec1;$/;"	t	namespace:glm
glm::aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec2			aligned_vec2;$/;"	t	namespace:glm
glm::aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec2			aligned_vec2;$/;"	t	namespace:glm
glm::aligned_vec2	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec2		aligned_vec2;$/;"	t	namespace:glm
glm::aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec3			aligned_vec3;$/;"	t	namespace:glm
glm::aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec3			aligned_vec3;$/;"	t	namespace:glm
glm::aligned_vec3	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec3		aligned_vec3;$/;"	t	namespace:glm
glm::aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec4			aligned_vec4;$/;"	t	namespace:glm
glm::aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec4			aligned_vec4;$/;"	t	namespace:glm
glm::aligned_vec4	lib/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec4		aligned_vec4;$/;"	t	namespace:glm
glm::atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}																\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x, T y)
glm::atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> atan2(const vec<2, T, P>& x, const vec<2, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y)
glm::atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> atan2(const vec<3, T, P>& x, const vec<3, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y)
glm::atan2	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> atan2(const vec<4, T, P>& x, const vec<4, T, P>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y)
glm::begin	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type * begin(genType& v)$/;"	f	namespace:glm	signature:(genType& v)
glm::bool1	lib/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool1x1	lib/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bool4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::bvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_bvec1				bvec1;$/;"	t	namespace:glm
glm::bvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1				bvec1;$/;"	t	namespace:glm
glm::bvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1			bvec1;$/;"	t	namespace:glm
glm::bvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec2			bvec2;$/;"	t	namespace:glm
glm::bvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec2			bvec2;$/;"	t	namespace:glm
glm::bvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec2		bvec2;$/;"	t	namespace:glm
glm::bvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec3			bvec3;$/;"	t	namespace:glm
glm::bvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec3			bvec3;$/;"	t	namespace:glm
glm::bvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec3		bvec3;$/;"	t	namespace:glm
glm::bvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_bvec4			bvec4;$/;"	t	namespace:glm
glm::bvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_bvec4			bvec4;$/;"	t	namespace:glm
glm::bvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_bvec4		bvec4;$/;"	t	namespace:glm
glm::byte	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm
glm::components	lib/glm/gtx/range.hpp	/^	inline length_t components(genType const & m)$/;"	f	namespace:glm	signature:(genType const & m)
glm::components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<1, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<1, T, P> const & v)
glm::components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<2, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<2, T, P> const & v)
glm::components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<3, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<3, T, P> const & v)
glm::components	lib/glm/gtx/range.hpp	/^	inline length_t components(vec<4, T, P> const & v)$/;"	f	namespace:glm	signature:(vec<4, T, P> const & v)
glm::countof	lib/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	signature:(T const (&)[N])
glm::ctor	lib/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	g	namespace:glm
glm::ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm
glm::ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm
glm::ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm
glm::defaultp	lib/glm/detail/precision.hpp	/^			defaultp = aligned_highp$/;"	e	enum:glm::precision
glm::detail	lib/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/func_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/precision.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_gentype.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_int.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_mat.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail	lib/glm/detail/type_vec.hpp	/^namespace detail$/;"	n	namespace:glm
glm::detail::_swizzle	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<N, T, P, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 || E1 == E3 || E2 == E3)>$/;"	s	namespace:glm::detail	inherits:_swizzle_base2
glm::detail::_swizzle::base_type	lib/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<N, T, P, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 || E1 == E3 || E2 == E3)> base_type;$/;"	t	struct:glm::detail::_swizzle	access:public
glm::detail::_swizzle::operator vec<N, T, P>	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator vec<N, T, P> () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle	access:public	signature:() const
glm::detail::_swizzle_base0	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
glm::detail::_swizzle_base0::_buffer	lib/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	access:protected
glm::detail::_swizzle_base0::elem	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T const& elem(size_t i) const{ return (reinterpret_cast<const T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	access:protected	signature:(size_t i) const
glm::detail::_swizzle_base0::elem	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& elem(size_t i){ return (reinterpret_cast<T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	access:protected	signature:(size_t i)
glm::detail::_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
glm::detail::_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<2, T, P, E0,E1,-1,-2, Aligned> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
glm::detail::_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<3, T, P, E0,E1,E2,-1, Aligned> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
glm::detail::_swizzle_base1	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<4, T, P, E0,E1,E2,E3, Aligned> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail	inherits:_swizzle_base0
glm::detail::_swizzle_base1::operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<2, T, P> operator ()()  const { return vec<2, T, P>(this->elem(E0), this->elem(E1)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
glm::detail::_swizzle_base1::operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<3, T, P> operator ()()  const { return vec<3, T, P>(this->elem(E0), this->elem(E1), this->elem(E2)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
glm::detail::_swizzle_base1::operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<4, T, P> operator ()()  const { return vec<4, T, P>(this->elem(E0), this->elem(E1), this->elem(E2), this->elem(E3)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
glm::detail::_swizzle_base2	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<N, T, P, E0,E1,E2,E3, detail::is_aligned<P>::value>$/;"	s	namespace:glm::detail	inherits:_swizzle_base1
glm::detail::_swizzle_base2	lib/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<N, T, P, E0,E1,E2,E3, 1> : public _swizzle_base1<N, T, P, E0,E1,E2,E3, detail::is_aligned<P>::value>$/;"	s	namespace:glm::detail	inherits:_swizzle_base1
glm::detail::_swizzle_base2::Stub	lib/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2	access:public
glm::detail::_swizzle_base2::_apply_op	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(vec<N, T, P> const& that, U op)$/;"	f	struct:glm::detail::_swizzle_base2	access:protected	signature:(vec<N, T, P> const& that, U op)
glm::detail::_swizzle_base2::operator *=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
glm::detail::_swizzle_base2::operator +=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
glm::detail::_swizzle_base2::operator -=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
glm::detail::_swizzle_base2::operator /=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
glm::detail::_swizzle_base2::operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const &) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(Stub const &)
glm::detail::_swizzle_base2::operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const T& t)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(const T& t)
glm::detail::_swizzle_base2::operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
glm::detail::_swizzle_base2::operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i) const
glm::detail::_swizzle_base2::operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[](size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i) const
glm::detail::_swizzle_base2::operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& operator[](size_t i)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i)
glm::detail::fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> fade(vec<2, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & t)
glm::detail::fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> fade(vec<3, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & t)
glm::detail::fade	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> fade(vec<4, T, P> const & t)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & t)
glm::detail::float32	lib/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm::detail
glm::detail::float64	lib/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm::detail
glm::detail::functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<1, R, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<2, R, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<3, R, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1<4, R, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor1	lib/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
glm::detail::functor1::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, R, P> call(R (*Func) (T x), vec<1, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<1, T, P> const & v)
glm::detail::functor1::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, R, P> call(R (*Func) (T x), vec<2, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<2, T, P> const & v)
glm::detail::functor1::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, R, P> call(R (*Func) (T x), vec<3, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<3, T, P> const & v)
glm::detail::functor1::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, R, P> call(R (*Func) (T x), vec<4, T, P> const & v)$/;"	f	struct:glm::detail::functor1	access:public	signature:(R (Func) T x), vec<4, T, P> const & v)
glm::detail::functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<1, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<2, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<3, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2<4, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2	lib/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
glm::detail::functor2::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, P> call(T (*Func) (T x, T y), vec<1, T, P> const & a, vec<1, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<1, T, P> const & a, vec<1, T, P> const & b)
glm::detail::functor2::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, P> call(T (*Func) (T x, T y), vec<2, T, P> const & a, vec<2, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<2, T, P> const & a, vec<2, T, P> const & b)
glm::detail::functor2::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, P> call(T (*Func) (T x, T y), vec<3, T, P> const & a, vec<3, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<3, T, P> const & a, vec<3, T, P> const & b)
glm::detail::functor2::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, P> call(T (*Func) (T x, T y), vec<4, T, P> const & a, vec<4, T, P> const & b)$/;"	f	struct:glm::detail::functor2	access:public	signature:(T (Func) T x, T y), vec<4, T, P> const & a, vec<4, T, P> const & b)
glm::detail::functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<1, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<2, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<3, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<4, T, P>$/;"	s	namespace:glm::detail
glm::detail::functor2_vec_sca	lib/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
glm::detail::functor2_vec_sca::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, P> call(T (*Func) (T x, T y), vec<1, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<1, T, P> const & a, T b)
glm::detail::functor2_vec_sca::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, P> call(T (*Func) (T x, T y), vec<2, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<2, T, P> const & a, T b)
glm::detail::functor2_vec_sca::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, P> call(T (*Func) (T x, T y), vec<3, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<3, T, P> const & a, T b)
glm::detail::functor2_vec_sca::call	lib/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, P> call(T (*Func) (T x, T y), vec<4, T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	access:public	signature:(T (Func) T x, T y), vec<4, T, P> const & a, T b)
glm::detail::genType	lib/glm/detail/type_gentype.hpp	/^	struct genType$/;"	s	namespace:glm::detail
glm::detail::genType::bool_type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<bool> bool_type;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::const_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const_pointer;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::const_pointer_const	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const const_pointer_const;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::const_reference	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & const_reference;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::ctor	lib/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::genType	access:public
glm::detail::genType::is_vector	lib/glm/detail/type_gentype.hpp	/^	bool genType<VALTYPE, TYPE>::is_vector()$/;"	f	class:glm::detail::genType	signature:()
glm::detail::genType::null	lib/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::genType::ctor
glm::detail::genType::param_type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & param_type;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::pointer	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * pointer;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::pointer_const	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * const pointer_const;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::reference	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> & reference;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::size_type	lib/glm/detail/type_gentype.hpp	/^		typedef sizeType size_type;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> type;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::value_address	lib/glm/detail/type_gentype.hpp	/^		value_const_pointer value_address() const{return value_pointer(this);}$/;"	f	struct:glm::detail::genType	access:public	signature:() const
glm::detail::genType::value_address	lib/glm/detail/type_gentype.hpp	/^		value_pointer value_address(){return value_pointer(this);}$/;"	f	struct:glm::detail::genType	access:public	signature:()
glm::detail::genType::value_const_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE const * value_const_pointer;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::value_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE * value_pointer;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::value_reference	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE & value_reference;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::genType::value_type	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE value_type;$/;"	t	struct:glm::detail::genType	access:public
glm::detail::hdata	lib/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail
glm::detail::highp_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						highp_int_t;$/;"	t	namespace:glm::detail
glm::detail::highp_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					highp_uint_t;$/;"	t	namespace:glm::detail
glm::detail::int16	lib/glm/detail/type_int.hpp	/^		typedef std::int16_t				int16;$/;"	t	namespace:glm::detail
glm::detail::int32	lib/glm/detail/type_int.hpp	/^		typedef std::int32_t				int32;$/;"	t	namespace:glm::detail
glm::detail::int64	lib/glm/detail/type_int.hpp	/^		typedef std::int64_t				int64;$/;"	t	namespace:glm::detail
glm::detail::int8	lib/glm/detail/type_int.hpp	/^		typedef std::int8_t					int8;$/;"	t	namespace:glm::detail
glm::detail::is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_highp>$/;"	s	namespace:glm::detail
glm::detail::is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_lowp>$/;"	s	namespace:glm::detail
glm::detail::is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_mediump>$/;"	s	namespace:glm::detail
glm::detail::is_aligned	lib/glm/detail/precision.hpp	/^	struct is_aligned$/;"	s	namespace:glm::detail
glm::detail::is_aligned::value	lib/glm/detail/precision.hpp	/^			static const bool value = true;$/;"	m	struct:glm::detail::is_aligned	access:public
glm::detail::is_aligned::value	lib/glm/detail/precision.hpp	/^		static const bool value = false;$/;"	m	struct:glm::detail::is_aligned	access:public
glm::detail::lowp_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						lowp_int_t;$/;"	t	namespace:glm::detail
glm::detail::lowp_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					lowp_uint_t;$/;"	t	namespace:glm::detail
glm::detail::mediump_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						mediump_int_t;$/;"	t	namespace:glm::detail
glm::detail::mediump_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					mediump_uint_t;$/;"	t	namespace:glm::detail
glm::detail::mod289	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const & x)$/;"	f	namespace:glm::detail	signature:(T const & x)
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait	lib/glm/detail/type_mat.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::outerProduct_trait::type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
glm::detail::permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const & x)$/;"	f	namespace:glm::detail	signature:(T const & x)
glm::detail::permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> permute(vec<2, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & x)
glm::detail::permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> permute(vec<3, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & x)
glm::detail::permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> permute(vec<4, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & x)
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<double, 32, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<float, 16, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<int, 16, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<int64, 32, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<uint64, 32, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^		struct storage<unsigned int, 16, true>$/;"	s	namespace:glm::detail
glm::detail::storage	lib/glm/detail/type_vec.hpp	/^	struct storage$/;"	s	namespace:glm::detail
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_dvec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_i64vec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_ivec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_u64vec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_uvec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^			typedef glm_vec4 type;$/;"	t	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^		typedef struct type {$/;"	s	struct:glm::detail::storage	access:public
glm::detail::storage::type	lib/glm/detail/type_vec.hpp	/^		} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type	access:public
glm::detail::storage::type::data	lib/glm/detail/type_vec.hpp	/^			uint8 data[size];$/;"	m	struct:glm::detail::storage::type	access:public
glm::detail::taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const & r)$/;"	f	namespace:glm::detail	signature:(T const & r)
glm::detail::taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> taylorInvSqrt(vec<2, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & r)
glm::detail::taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> taylorInvSqrt(vec<3, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & r)
glm::detail::taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> taylorInvSqrt(vec<4, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & r)
glm::detail::uint16	lib/glm/detail/type_int.hpp	/^		typedef std::uint16_t				uint16;$/;"	t	namespace:glm::detail
glm::detail::uint32	lib/glm/detail/type_int.hpp	/^		typedef std::uint32_t				uint32;$/;"	t	namespace:glm::detail
glm::detail::uint64	lib/glm/detail/type_int.hpp	/^		typedef std::uint64_t				uint64;$/;"	t	namespace:glm::detail
glm::detail::uint8	lib/glm/detail/type_int.hpp	/^		typedef std::uint8_t				uint8;$/;"	t	namespace:glm::detail
glm::dmat2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2;$/;"	t	namespace:glm
glm::dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
glm::dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x2		dmat2x2;$/;"	t	namespace:glm
glm::dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x2		dmat2x2;$/;"	t	namespace:glm
glm::dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
glm::dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x3		dmat2x3;$/;"	t	namespace:glm
glm::dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x3		dmat2x3;$/;"	t	namespace:glm
glm::dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
glm::dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x4		dmat2x4;$/;"	t	namespace:glm
glm::dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x4		dmat2x4;$/;"	t	namespace:glm
glm::dmat3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3;$/;"	t	namespace:glm
glm::dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
glm::dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x2		dmat3x2;$/;"	t	namespace:glm
glm::dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x2		dmat3x2;$/;"	t	namespace:glm
glm::dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
glm::dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x3		dmat3x3;$/;"	t	namespace:glm
glm::dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x3		dmat3x3;$/;"	t	namespace:glm
glm::dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
glm::dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x4		dmat3x4;$/;"	t	namespace:glm
glm::dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x4		dmat3x4;$/;"	t	namespace:glm
glm::dmat4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4;$/;"	t	namespace:glm
glm::dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
glm::dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x2		dmat4x2;$/;"	t	namespace:glm
glm::dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x2		dmat4x2;$/;"	t	namespace:glm
glm::dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
glm::dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x3		dmat4x3;$/;"	t	namespace:glm
glm::dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x3		dmat4x3;$/;"	t	namespace:glm
glm::dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
glm::dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x4		dmat4x4;$/;"	t	namespace:glm
glm::dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x4		dmat4x4;$/;"	t	namespace:glm
glm::double1	lib/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double1x1	lib/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, double, highp>		double2;		\/\/!< \\brief double-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, double, highp>		double2x2;		\/\/!< \\brief double-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, double, highp>		double2x3;		\/\/!< \\brief double-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, double, highp>		double2x4;		\/\/!< \\brief double-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, double, highp>		double3;		\/\/!< \\brief double-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, double, highp>		double3x2;		\/\/!< \\brief double-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, double, highp>		double3x3;		\/\/!< \\brief double-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, double, highp>		double3x4;		\/\/!< \\brief double-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, double, highp>		double4;		\/\/!< \\brief double-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, double, highp>		double4x2;		\/\/!< \\brief double-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, double, highp>		double4x3;		\/\/!< \\brief double-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::double4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, double, highp>		double4x4;		\/\/!< \\brief double-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::dquat	lib/glm/fwd.hpp	/^	typedef highp_dquat			dquat;$/;"	t	namespace:glm
glm::dquat	lib/glm/fwd.hpp	/^	typedef lowp_dquat			dquat;$/;"	t	namespace:glm
glm::dquat	lib/glm/fwd.hpp	/^	typedef mediump_dquat		dquat;$/;"	t	namespace:glm
glm::dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm
glm::dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm
glm::dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm
glm::dvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_dvec1				dvec1;$/;"	t	namespace:glm
glm::dvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1				dvec1;$/;"	t	namespace:glm
glm::dvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1			dvec1;$/;"	t	namespace:glm
glm::dvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec2			dvec2;$/;"	t	namespace:glm
glm::dvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec2			dvec2;$/;"	t	namespace:glm
glm::dvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec2		dvec2;$/;"	t	namespace:glm
glm::dvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec3			dvec3;$/;"	t	namespace:glm
glm::dvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec3			dvec3;$/;"	t	namespace:glm
glm::dvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec3		dvec3;$/;"	t	namespace:glm
glm::dvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_dvec4			dvec4;$/;"	t	namespace:glm
glm::dvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_dvec4			dvec4;$/;"	t	namespace:glm
glm::dvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_dvec4		dvec4;$/;"	t	namespace:glm
glm::dword	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm
glm::end	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type * end(genType& v)$/;"	f	namespace:glm	signature:(genType& v)
glm::f32	lib/glm/fwd.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm
glm::f32	lib/glm/fwd.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm
glm::f32	lib/glm/fwd.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm
glm::f32	lib/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm
glm::f32mat2	lib/glm/fwd.hpp	/^	typedef f32mat2x2				f32mat2;$/;"	t	namespace:glm
glm::f32mat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2			f32mat2;$/;"	t	namespace:glm
glm::f32mat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2			f32mat2;$/;"	t	namespace:glm
glm::f32mat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2;$/;"	t	namespace:glm
glm::f32mat2x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
glm::f32mat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm
glm::f32mat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		f32mat2x2;$/;"	t	namespace:glm
glm::f32mat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2x2;$/;"	t	namespace:glm
glm::f32mat2x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
glm::f32mat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm
glm::f32mat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		f32mat2x3;$/;"	t	namespace:glm
glm::f32mat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> f32mat2x3;$/;"	t	namespace:glm
glm::f32mat2x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
glm::f32mat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm
glm::f32mat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		f32mat2x4;$/;"	t	namespace:glm
glm::f32mat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> f32mat2x4;$/;"	t	namespace:glm
glm::f32mat3	lib/glm/fwd.hpp	/^	typedef f32mat3x3				f32mat3;$/;"	t	namespace:glm
glm::f32mat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3			f32mat3;$/;"	t	namespace:glm
glm::f32mat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3			f32mat3;$/;"	t	namespace:glm
glm::f32mat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3;$/;"	t	namespace:glm
glm::f32mat3x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
glm::f32mat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm
glm::f32mat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		f32mat3x2;$/;"	t	namespace:glm
glm::f32mat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> f32mat3x2;$/;"	t	namespace:glm
glm::f32mat3x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
glm::f32mat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm
glm::f32mat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		f32mat3x3;$/;"	t	namespace:glm
glm::f32mat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3x3;$/;"	t	namespace:glm
glm::f32mat3x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
glm::f32mat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm
glm::f32mat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		f32mat3x4;$/;"	t	namespace:glm
glm::f32mat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> f32mat3x4;$/;"	t	namespace:glm
glm::f32mat4	lib/glm/fwd.hpp	/^	typedef f32mat4x4				f32mat4;$/;"	t	namespace:glm
glm::f32mat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4			f32mat4;$/;"	t	namespace:glm
glm::f32mat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4			f32mat4;$/;"	t	namespace:glm
glm::f32mat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4;$/;"	t	namespace:glm
glm::f32mat4x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
glm::f32mat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm
glm::f32mat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		f32mat4x2;$/;"	t	namespace:glm
glm::f32mat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> f32mat4x2;$/;"	t	namespace:glm
glm::f32mat4x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
glm::f32mat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm
glm::f32mat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		f32mat4x3;$/;"	t	namespace:glm
glm::f32mat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> f32mat4x3;$/;"	t	namespace:glm
glm::f32mat4x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
glm::f32mat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm
glm::f32mat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		f32mat4x4;$/;"	t	namespace:glm
glm::f32mat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4x4;$/;"	t	namespace:glm
glm::f32quat	lib/glm/fwd.hpp	/^	typedef highp_f32quat			f32quat;$/;"	t	namespace:glm
glm::f32quat	lib/glm/fwd.hpp	/^	typedef lowp_f32quat			f32quat;$/;"	t	namespace:glm
glm::f32quat	lib/glm/fwd.hpp	/^	typedef mediump_f32quat			f32quat;$/;"	t	namespace:glm
glm::f32quat	lib/glm/gtc/type_precision.hpp	/^	typedef tquat<f32, defaultp> f32quat;$/;"	t	namespace:glm
glm::f32vec1	lib/glm/fwd.hpp	/^	typedef highp_f32vec1			f32vec1;$/;"	t	namespace:glm
glm::f32vec1	lib/glm/fwd.hpp	/^	typedef lowp_f32vec1			f32vec1;$/;"	t	namespace:glm
glm::f32vec1	lib/glm/fwd.hpp	/^	typedef mediump_f32vec1			f32vec1;$/;"	t	namespace:glm
glm::f32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, defaultp> f32vec1;$/;"	t	namespace:glm
glm::f32vec2	lib/glm/fwd.hpp	/^	typedef highp_f32vec2			f32vec2;$/;"	t	namespace:glm
glm::f32vec2	lib/glm/fwd.hpp	/^	typedef lowp_f32vec2			f32vec2;$/;"	t	namespace:glm
glm::f32vec2	lib/glm/fwd.hpp	/^	typedef mediump_f32vec2			f32vec2;$/;"	t	namespace:glm
glm::f32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, defaultp> f32vec2;$/;"	t	namespace:glm
glm::f32vec3	lib/glm/fwd.hpp	/^	typedef highp_f32vec3			f32vec3;$/;"	t	namespace:glm
glm::f32vec3	lib/glm/fwd.hpp	/^	typedef lowp_f32vec3			f32vec3;$/;"	t	namespace:glm
glm::f32vec3	lib/glm/fwd.hpp	/^	typedef mediump_f32vec3			f32vec3;$/;"	t	namespace:glm
glm::f32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, defaultp> f32vec3;$/;"	t	namespace:glm
glm::f32vec4	lib/glm/fwd.hpp	/^	typedef highp_f32vec4			f32vec4;$/;"	t	namespace:glm
glm::f32vec4	lib/glm/fwd.hpp	/^	typedef lowp_f32vec4			f32vec4;$/;"	t	namespace:glm
glm::f32vec4	lib/glm/fwd.hpp	/^	typedef mediump_f32vec4			f32vec4;$/;"	t	namespace:glm
glm::f32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, defaultp> f32vec4;$/;"	t	namespace:glm
glm::f64	lib/glm/fwd.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm
glm::f64	lib/glm/fwd.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm
glm::f64	lib/glm/fwd.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm
glm::f64	lib/glm/gtc/type_precision.hpp	/^	typedef float64 f64;$/;"	t	namespace:glm
glm::f64mat2	lib/glm/fwd.hpp	/^	typedef f64mat2x2				f64mat2;$/;"	t	namespace:glm
glm::f64mat2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2			f64mat2;$/;"	t	namespace:glm
glm::f64mat2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2			f64mat2;$/;"	t	namespace:glm
glm::f64mat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2;$/;"	t	namespace:glm
glm::f64mat2x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
glm::f64mat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm
glm::f64mat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x2		f64mat2x2;$/;"	t	namespace:glm
glm::f64mat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2x2;$/;"	t	namespace:glm
glm::f64mat2x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
glm::f64mat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm
glm::f64mat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x3		f64mat2x3;$/;"	t	namespace:glm
glm::f64mat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, defaultp> f64mat2x3;$/;"	t	namespace:glm
glm::f64mat2x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
glm::f64mat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm
glm::f64mat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x4		f64mat2x4;$/;"	t	namespace:glm
glm::f64mat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, defaultp> f64mat2x4;$/;"	t	namespace:glm
glm::f64mat3	lib/glm/fwd.hpp	/^	typedef f64mat3x3				f64mat3;$/;"	t	namespace:glm
glm::f64mat3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3			f64mat3;$/;"	t	namespace:glm
glm::f64mat3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3			f64mat3;$/;"	t	namespace:glm
glm::f64mat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3;$/;"	t	namespace:glm
glm::f64mat3x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
glm::f64mat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm
glm::f64mat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x2		f64mat3x2;$/;"	t	namespace:glm
glm::f64mat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, defaultp> f64mat3x2;$/;"	t	namespace:glm
glm::f64mat3x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
glm::f64mat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm
glm::f64mat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x3		f64mat3x3;$/;"	t	namespace:glm
glm::f64mat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3x3;$/;"	t	namespace:glm
glm::f64mat3x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
glm::f64mat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm
glm::f64mat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x4		f64mat3x4;$/;"	t	namespace:glm
glm::f64mat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, defaultp> f64mat3x4;$/;"	t	namespace:glm
glm::f64mat4	lib/glm/fwd.hpp	/^	typedef f64mat4x4				f64mat4;$/;"	t	namespace:glm
glm::f64mat4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4			f64mat4;$/;"	t	namespace:glm
glm::f64mat4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4			f64mat4;$/;"	t	namespace:glm
glm::f64mat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4;$/;"	t	namespace:glm
glm::f64mat4x2	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
glm::f64mat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm
glm::f64mat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x2		f64mat4x2;$/;"	t	namespace:glm
glm::f64mat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, defaultp> f64mat4x2;$/;"	t	namespace:glm
glm::f64mat4x3	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
glm::f64mat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm
glm::f64mat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x3		f64mat4x3;$/;"	t	namespace:glm
glm::f64mat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, defaultp> f64mat4x3;$/;"	t	namespace:glm
glm::f64mat4x4	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
glm::f64mat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm
glm::f64mat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x4		f64mat4x4;$/;"	t	namespace:glm
glm::f64mat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4x4;$/;"	t	namespace:glm
glm::f64quat	lib/glm/fwd.hpp	/^	typedef highp_f64quat			f64quat;$/;"	t	namespace:glm
glm::f64quat	lib/glm/fwd.hpp	/^	typedef lowp_f64quat			f64quat;$/;"	t	namespace:glm
glm::f64quat	lib/glm/fwd.hpp	/^	typedef mediump_f64quat			f64quat;$/;"	t	namespace:glm
glm::f64quat	lib/glm/gtc/type_precision.hpp	/^	typedef tquat<f64, defaultp> f64quat;$/;"	t	namespace:glm
glm::f64vec1	lib/glm/fwd.hpp	/^	typedef highp_f64vec1			f64vec1;$/;"	t	namespace:glm
glm::f64vec1	lib/glm/fwd.hpp	/^	typedef lowp_f64vec1			f64vec1;$/;"	t	namespace:glm
glm::f64vec1	lib/glm/fwd.hpp	/^	typedef mediump_f64vec1			f64vec1;$/;"	t	namespace:glm
glm::f64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, defaultp> f64vec1;$/;"	t	namespace:glm
glm::f64vec2	lib/glm/fwd.hpp	/^	typedef highp_f64vec2			f64vec2;$/;"	t	namespace:glm
glm::f64vec2	lib/glm/fwd.hpp	/^	typedef lowp_f64vec2			f64vec2;$/;"	t	namespace:glm
glm::f64vec2	lib/glm/fwd.hpp	/^	typedef mediump_f64vec2			f64vec2;$/;"	t	namespace:glm
glm::f64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, defaultp> f64vec2;$/;"	t	namespace:glm
glm::f64vec3	lib/glm/fwd.hpp	/^	typedef highp_f64vec3			f64vec3;$/;"	t	namespace:glm
glm::f64vec3	lib/glm/fwd.hpp	/^	typedef lowp_f64vec3			f64vec3;$/;"	t	namespace:glm
glm::f64vec3	lib/glm/fwd.hpp	/^	typedef mediump_f64vec3			f64vec3;$/;"	t	namespace:glm
glm::f64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, defaultp> f64vec3;$/;"	t	namespace:glm
glm::f64vec4	lib/glm/fwd.hpp	/^	typedef highp_f64vec4			f64vec4;$/;"	t	namespace:glm
glm::f64vec4	lib/glm/fwd.hpp	/^	typedef lowp_f64vec4			f64vec4;$/;"	t	namespace:glm
glm::f64vec4	lib/glm/fwd.hpp	/^	typedef mediump_f64vec4			f64vec4;$/;"	t	namespace:glm
glm::f64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, defaultp> f64vec4;$/;"	t	namespace:glm
glm::fast	lib/glm/detail/type_gentype.hpp	/^		fast,$/;"	e	enum:glm::profile
glm::fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm
glm::fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm
glm::fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm
glm::float1	lib/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float1x1	lib/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, float, highp>		float2;			\/\/!< \\brief single-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, float, highp>		float2x2;		\/\/!< \\brief single-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, float, highp>		float2x3;		\/\/!< \\brief single-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, float, highp>		float2x4;		\/\/!< \\brief single-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, float, highp>		float3;			\/\/!< \\brief single-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float32	lib/glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm
glm::float32	lib/glm/fwd.hpp	/^	typedef highp_float32 float32;$/;"	t	namespace:glm
glm::float32	lib/glm/fwd.hpp	/^	typedef lowp_float32 float32;$/;"	t	namespace:glm
glm::float32	lib/glm/fwd.hpp	/^	typedef mediump_float32 float32;$/;"	t	namespace:glm
glm::float32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32;$/;"	t	namespace:glm
glm::float32_t	lib/glm/fwd.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm
glm::float32_t	lib/glm/fwd.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm
glm::float32_t	lib/glm/fwd.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm
glm::float32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32_t;$/;"	t	namespace:glm
glm::float3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, float, highp>		float3x2;		\/\/!< \\brief single-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, float, highp>		float3x3;		\/\/!< \\brief single-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, float, highp>		float3x4;		\/\/!< \\brief single-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, float, highp>		float4;			\/\/!< \\brief single-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, float, highp>		float4x2;		\/\/!< \\brief single-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, float, highp>		float4x3;		\/\/!< \\brief single-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, float, highp>		float4x4;		\/\/!< \\brief single-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::float64	lib/glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm
glm::float64	lib/glm/fwd.hpp	/^	typedef highp_float64 float64;$/;"	t	namespace:glm
glm::float64	lib/glm/fwd.hpp	/^	typedef lowp_float64 float64;$/;"	t	namespace:glm
glm::float64	lib/glm/fwd.hpp	/^	typedef mediump_float64 float64;$/;"	t	namespace:glm
glm::float64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64;$/;"	t	namespace:glm
glm::float64_t	lib/glm/fwd.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm
glm::float64_t	lib/glm/fwd.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm
glm::float64_t	lib/glm/fwd.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm
glm::float64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64_t;$/;"	t	namespace:glm
glm::float_t	lib/glm/detail/type_float.hpp	/^	typedef highp_float			float_t;$/;"	t	namespace:glm
glm::float_t	lib/glm/detail/type_float.hpp	/^	typedef lowp_float			float_t;$/;"	t	namespace:glm
glm::float_t	lib/glm/detail/type_float.hpp	/^	typedef mediump_float		float_t;$/;"	t	namespace:glm
glm::fmat2	lib/glm/fwd.hpp	/^	typedef fmat2x2					fmat2;$/;"	t	namespace:glm
glm::fmat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2			fmat2;$/;"	t	namespace:glm
glm::fmat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2			fmat2;$/;"	t	namespace:glm
glm::fmat2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2;$/;"	t	namespace:glm
glm::fmat2x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
glm::fmat2x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm
glm::fmat2x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2		fmat2x2;$/;"	t	namespace:glm
glm::fmat2x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2x2;$/;"	t	namespace:glm
glm::fmat2x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
glm::fmat2x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm
glm::fmat2x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x3		fmat2x3;$/;"	t	namespace:glm
glm::fmat2x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> fmat2x3;$/;"	t	namespace:glm
glm::fmat2x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
glm::fmat2x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm
glm::fmat2x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x4		fmat2x4;$/;"	t	namespace:glm
glm::fmat2x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> fmat2x4;$/;"	t	namespace:glm
glm::fmat3	lib/glm/fwd.hpp	/^	typedef fmat3x3					fmat3;$/;"	t	namespace:glm
glm::fmat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3			fmat3;$/;"	t	namespace:glm
glm::fmat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3			fmat3;$/;"	t	namespace:glm
glm::fmat3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3;$/;"	t	namespace:glm
glm::fmat3x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
glm::fmat3x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm
glm::fmat3x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x2		fmat3x2;$/;"	t	namespace:glm
glm::fmat3x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> fmat3x2;$/;"	t	namespace:glm
glm::fmat3x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
glm::fmat3x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm
glm::fmat3x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3		fmat3x3;$/;"	t	namespace:glm
glm::fmat3x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3x3;$/;"	t	namespace:glm
glm::fmat3x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
glm::fmat3x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm
glm::fmat3x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x4		fmat3x4;$/;"	t	namespace:glm
glm::fmat3x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> fmat3x4;$/;"	t	namespace:glm
glm::fmat4	lib/glm/fwd.hpp	/^	typedef fmat4x4					fmat4;$/;"	t	namespace:glm
glm::fmat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4			fmat4;$/;"	t	namespace:glm
glm::fmat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4			fmat4;$/;"	t	namespace:glm
glm::fmat4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4;$/;"	t	namespace:glm
glm::fmat4x2	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
glm::fmat4x2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm
glm::fmat4x2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x2		fmat4x2;$/;"	t	namespace:glm
glm::fmat4x2	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> fmat4x2;$/;"	t	namespace:glm
glm::fmat4x3	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
glm::fmat4x3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm
glm::fmat4x3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x3		fmat4x3;$/;"	t	namespace:glm
glm::fmat4x3	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> fmat4x3;$/;"	t	namespace:glm
glm::fmat4x4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
glm::fmat4x4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm
glm::fmat4x4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4		fmat4x4;$/;"	t	namespace:glm
glm::fmat4x4	lib/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4x4;$/;"	t	namespace:glm
glm::fquat	lib/glm/fwd.hpp	/^	typedef highp_fquat				fquat;$/;"	t	namespace:glm
glm::fquat	lib/glm/fwd.hpp	/^	typedef lowp_f32quat			fquat;$/;"	t	namespace:glm
glm::fquat	lib/glm/fwd.hpp	/^	typedef mediump_f32quat			fquat;$/;"	t	namespace:glm
glm::fquat	lib/glm/fwd.hpp	/^	typedef quat				fquat;$/;"	t	namespace:glm
glm::fvec1	lib/glm/fwd.hpp	/^	typedef highp_f32vec1			fvec1;$/;"	t	namespace:glm
glm::fvec1	lib/glm/fwd.hpp	/^	typedef lowp_f32vec1			fvec1;$/;"	t	namespace:glm
glm::fvec1	lib/glm/fwd.hpp	/^	typedef mediump_f32vec1			fvec1;$/;"	t	namespace:glm
glm::fvec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, defaultp> fvec1;$/;"	t	namespace:glm
glm::fvec2	lib/glm/fwd.hpp	/^	typedef highp_f32vec2			fvec2;$/;"	t	namespace:glm
glm::fvec2	lib/glm/fwd.hpp	/^	typedef lowp_f32vec2			fvec2;$/;"	t	namespace:glm
glm::fvec2	lib/glm/fwd.hpp	/^	typedef mediump_f32vec2			fvec2;$/;"	t	namespace:glm
glm::fvec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, defaultp> fvec2;$/;"	t	namespace:glm
glm::fvec3	lib/glm/fwd.hpp	/^	typedef highp_f32vec3			fvec3;$/;"	t	namespace:glm
glm::fvec3	lib/glm/fwd.hpp	/^	typedef lowp_f32vec3			fvec3;$/;"	t	namespace:glm
glm::fvec3	lib/glm/fwd.hpp	/^	typedef mediump_f32vec3			fvec3;$/;"	t	namespace:glm
glm::fvec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, defaultp> fvec3;$/;"	t	namespace:glm
glm::fvec4	lib/glm/fwd.hpp	/^	typedef highp_f32vec4			fvec4;$/;"	t	namespace:glm
glm::fvec4	lib/glm/fwd.hpp	/^	typedef lowp_f32vec4			fvec4;$/;"	t	namespace:glm
glm::fvec4	lib/glm/fwd.hpp	/^	typedef mediump_f32vec4			fvec4;$/;"	t	namespace:glm
glm::fvec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, defaultp> fvec4;$/;"	t	namespace:glm
glm::genType::begin	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type const * begin(genType const & v)$/;"	f	class:glm::genType	signature:(genType const & v)
glm::genType::end	lib/glm/gtx/range.hpp	/^	inline typename genType::value_type const * end(genType const & v)$/;"	f	class:glm::genType	signature:(genType const & v)
glm::gtx	lib/glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
glm::gtx	lib/glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
glm::gtx::f32mat1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::f32mat1x1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::f32vec1	lib/glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::f64mat1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::f64mat1x1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::f64vec1	lib/glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::u16vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::u32vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::u64vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::gtx::u8vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
glm::highp	lib/glm/detail/precision.hpp	/^		highp = packed_highp,$/;"	e	enum:glm::precision
glm::highp_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_bvec1_t			highp_bvec1;$/;"	t	namespace:glm
glm::highp_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, highp>		highp_bvec1_t;$/;"	t	namespace:glm
glm::highp_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm
glm::highp_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm
glm::highp_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm
glm::highp_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm
glm::highp_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, highp>		highp_dmat2;$/;"	t	namespace:glm
glm::highp_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, highp>		highp_dmat2x2;$/;"	t	namespace:glm
glm::highp_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, highp>		highp_dmat2x3;$/;"	t	namespace:glm
glm::highp_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, highp>		highp_dmat2x4;$/;"	t	namespace:glm
glm::highp_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, highp>		highp_dmat3;$/;"	t	namespace:glm
glm::highp_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, highp>		highp_dmat3x2;$/;"	t	namespace:glm
glm::highp_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, highp>		highp_dmat3x3;$/;"	t	namespace:glm
glm::highp_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, highp>		highp_dmat3x4;$/;"	t	namespace:glm
glm::highp_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, highp>		highp_dmat4;$/;"	t	namespace:glm
glm::highp_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, highp>		highp_dmat4x2;$/;"	t	namespace:glm
glm::highp_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, highp>		highp_dmat4x3;$/;"	t	namespace:glm
glm::highp_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, highp>		highp_dmat4x4;$/;"	t	namespace:glm
glm::highp_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, highp>	highp_dquat;$/;"	t	namespace:glm
glm::highp_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm
glm::highp_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_dvec1_t			highp_dvec1;$/;"	t	namespace:glm
glm::highp_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, highp>	highp_dvec1_t;$/;"	t	namespace:glm
glm::highp_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, highp>	highp_dvec2;$/;"	t	namespace:glm
glm::highp_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, highp>	highp_dvec3;$/;"	t	namespace:glm
glm::highp_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, highp>	highp_dvec4;$/;"	t	namespace:glm
glm::highp_f32	lib/glm/fwd.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm
glm::highp_f32mat2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm
glm::highp_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm
glm::highp_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm
glm::highp_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm
glm::highp_f32mat3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm
glm::highp_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm
glm::highp_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm
glm::highp_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm
glm::highp_f32mat4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm
glm::highp_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm
glm::highp_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm
glm::highp_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm
glm::highp_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, highp> highp_f32quat;$/;"	t	namespace:glm
glm::highp_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, highp> highp_f32vec1;$/;"	t	namespace:glm
glm::highp_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, highp> highp_f32vec2;$/;"	t	namespace:glm
glm::highp_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, highp> highp_f32vec3;$/;"	t	namespace:glm
glm::highp_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, highp> highp_f32vec4;$/;"	t	namespace:glm
glm::highp_f64	lib/glm/fwd.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm
glm::highp_f64mat2	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm
glm::highp_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm
glm::highp_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm
glm::highp_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm
glm::highp_f64mat3	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm
glm::highp_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm
glm::highp_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm
glm::highp_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm
glm::highp_f64mat4	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm
glm::highp_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm
glm::highp_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm
glm::highp_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm
glm::highp_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, highp> highp_f64quat;$/;"	t	namespace:glm
glm::highp_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, highp> highp_f64vec1;$/;"	t	namespace:glm
glm::highp_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, highp> highp_f64vec2;$/;"	t	namespace:glm
glm::highp_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, highp> highp_f64vec3;$/;"	t	namespace:glm
glm::highp_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, highp> highp_f64vec4;$/;"	t	namespace:glm
glm::highp_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm
glm::highp_float	lib/glm/detail/type_float.hpp	/^	typedef highp_float_t		highp_float;$/;"	t	namespace:glm
glm::highp_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 highp_float32;$/;"	t	namespace:glm
glm::highp_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 highp_float32_t;$/;"	t	namespace:glm
glm::highp_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 highp_float64;$/;"	t	namespace:glm
glm::highp_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 highp_float64_t;$/;"	t	namespace:glm
glm::highp_float_t	lib/glm/detail/type_float.hpp	/^	typedef double				highp_float_t;$/;"	t	namespace:glm
glm::highp_fmat2	lib/glm/fwd.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm
glm::highp_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp> highp_fmat2x2;$/;"	t	namespace:glm
glm::highp_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp> highp_fmat2x3;$/;"	t	namespace:glm
glm::highp_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp> highp_fmat2x4;$/;"	t	namespace:glm
glm::highp_fmat3	lib/glm/fwd.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm
glm::highp_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp> highp_fmat3x2;$/;"	t	namespace:glm
glm::highp_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp> highp_fmat3x3;$/;"	t	namespace:glm
glm::highp_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp> highp_fmat3x4;$/;"	t	namespace:glm
glm::highp_fmat4	lib/glm/fwd.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm
glm::highp_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp> highp_fmat4x2;$/;"	t	namespace:glm
glm::highp_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp> highp_fmat4x3;$/;"	t	namespace:glm
glm::highp_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp> highp_fmat4x4;$/;"	t	namespace:glm
glm::highp_fquat	lib/glm/fwd.hpp	/^	typedef highp_quat			highp_fquat;$/;"	t	namespace:glm
glm::highp_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, highp> highp_fvec1;$/;"	t	namespace:glm
glm::highp_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, highp> highp_fvec2;$/;"	t	namespace:glm
glm::highp_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, highp> highp_fvec3;$/;"	t	namespace:glm
glm::highp_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, highp> highp_fvec4;$/;"	t	namespace:glm
glm::highp_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
glm::highp_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
glm::highp_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm
glm::highp_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm
glm::highp_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm
glm::highp_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm
glm::highp_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
glm::highp_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
glm::highp_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm
glm::highp_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm
glm::highp_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm
glm::highp_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm
glm::highp_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
glm::highp_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
glm::highp_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm
glm::highp_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm
glm::highp_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm
glm::highp_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm
glm::highp_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
glm::highp_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
glm::highp_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, highp> highp_i8vec1;$/;"	t	namespace:glm
glm::highp_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, highp> highp_i8vec2;$/;"	t	namespace:glm
glm::highp_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, highp> highp_i8vec3;$/;"	t	namespace:glm
glm::highp_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, highp> highp_i8vec4;$/;"	t	namespace:glm
glm::highp_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2;$/;"	t	namespace:glm
glm::highp_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2x2;$/;"	t	namespace:glm
glm::highp_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, highp>				highp_imat2x3;$/;"	t	namespace:glm
glm::highp_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, highp>				highp_imat2x4;$/;"	t	namespace:glm
glm::highp_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3;$/;"	t	namespace:glm
glm::highp_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, highp>				highp_imat3x2;$/;"	t	namespace:glm
glm::highp_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3x3;$/;"	t	namespace:glm
glm::highp_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, highp>				highp_imat3x4;$/;"	t	namespace:glm
glm::highp_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4;$/;"	t	namespace:glm
glm::highp_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, highp>				highp_imat4x2;$/;"	t	namespace:glm
glm::highp_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, highp>				highp_imat4x3;$/;"	t	namespace:glm
glm::highp_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4x4;$/;"	t	namespace:glm
glm::highp_int	lib/glm/detail/type_int.hpp	/^	typedef detail::highp_int_t				highp_int;$/;"	t	namespace:glm
glm::highp_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
glm::highp_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
glm::highp_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
glm::highp_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
glm::highp_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
glm::highp_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
glm::highp_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
glm::highp_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
glm::highp_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
glm::highp_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
glm::highp_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
glm::highp_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
glm::highp_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
glm::highp_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
glm::highp_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
glm::highp_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
glm::highp_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_ivec1_t			highp_ivec1;$/;"	t	namespace:glm
glm::highp_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, highp>		highp_ivec1_t;$/;"	t	namespace:glm
glm::highp_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm
glm::highp_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm
glm::highp_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm
glm::highp_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm
glm::highp_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm
glm::highp_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm
glm::highp_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm
glm::highp_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm
glm::highp_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm
glm::highp_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm
glm::highp_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm
glm::highp_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm
glm::highp_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm
glm::highp_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm
glm::highp_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm
glm::highp_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm
glm::highp_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm
glm::highp_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm
glm::highp_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm
glm::highp_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm
glm::highp_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm
glm::highp_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm
glm::highp_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm
glm::highp_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm
glm::highp_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm
glm::highp_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm
glm::highp_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm
glm::highp_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, highp>		highp_quat;$/;"	t	namespace:glm
glm::highp_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
glm::highp_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
glm::highp_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm
glm::highp_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm
glm::highp_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm
glm::highp_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm
glm::highp_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
glm::highp_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
glm::highp_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm
glm::highp_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm
glm::highp_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm
glm::highp_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm
glm::highp_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
glm::highp_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
glm::highp_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm
glm::highp_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm
glm::highp_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm
glm::highp_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm
glm::highp_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
glm::highp_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
glm::highp_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, highp> highp_u8vec1;$/;"	t	namespace:glm
glm::highp_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, highp> highp_u8vec2;$/;"	t	namespace:glm
glm::highp_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, highp> highp_u8vec3;$/;"	t	namespace:glm
glm::highp_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, highp> highp_u8vec4;$/;"	t	namespace:glm
glm::highp_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::highp_uint_t			highp_uint;$/;"	t	namespace:glm
glm::highp_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
glm::highp_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
glm::highp_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
glm::highp_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
glm::highp_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
glm::highp_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
glm::highp_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
glm::highp_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
glm::highp_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
glm::highp_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
glm::highp_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
glm::highp_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
glm::highp_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
glm::highp_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
glm::highp_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
glm::highp_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
glm::highp_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2;	$/;"	t	namespace:glm
glm::highp_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2x2;$/;"	t	namespace:glm
glm::highp_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, highp>				highp_umat2x3;$/;"	t	namespace:glm
glm::highp_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, highp>				highp_umat2x4;$/;"	t	namespace:glm
glm::highp_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3;$/;"	t	namespace:glm
glm::highp_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, highp>				highp_umat3x2;$/;"	t	namespace:glm
glm::highp_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3x3;$/;"	t	namespace:glm
glm::highp_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, highp>				highp_umat3x4;$/;"	t	namespace:glm
glm::highp_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4;$/;"	t	namespace:glm
glm::highp_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, highp>				highp_umat4x2;$/;"	t	namespace:glm
glm::highp_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, highp>				highp_umat4x3;$/;"	t	namespace:glm
glm::highp_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4x4;$/;"	t	namespace:glm
glm::highp_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_uvec1_t			highp_uvec1;$/;"	t	namespace:glm
glm::highp_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, highp>		highp_uvec1_t;$/;"	t	namespace:glm
glm::highp_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, highp>		highp_uvec2;$/;"	t	namespace:glm
glm::highp_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, highp>		highp_uvec3;$/;"	t	namespace:glm
glm::highp_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, highp>		highp_uvec4;$/;"	t	namespace:glm
glm::highp_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, highp> highp_vec1;$/;"	t	namespace:glm
glm::highp_vec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_vec1_t			highp_vec1;$/;"	t	namespace:glm
glm::highp_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, highp>	highp_vec1_t;$/;"	t	namespace:glm
glm::highp_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm
glm::highp_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, highp> highp_vec2;$/;"	t	namespace:glm
glm::highp_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm
glm::highp_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, highp> highp_vec3;$/;"	t	namespace:glm
glm::highp_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm
glm::highp_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, highp> highp_vec4;$/;"	t	namespace:glm
glm::i16	lib/glm/fwd.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
glm::i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
glm::i16vec1	lib/glm/fwd.hpp	/^	typedef highp_i16vec1			i16vec1;$/;"	t	namespace:glm
glm::i16vec1	lib/glm/fwd.hpp	/^	typedef lowp_i16vec1			i16vec1;$/;"	t	namespace:glm
glm::i16vec1	lib/glm/fwd.hpp	/^	typedef mediump_i16vec1			i16vec1;$/;"	t	namespace:glm
glm::i16vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, defaultp> i16vec1;$/;"	t	namespace:glm
glm::i16vec2	lib/glm/fwd.hpp	/^	typedef highp_i16vec2			i16vec2;$/;"	t	namespace:glm
glm::i16vec2	lib/glm/fwd.hpp	/^	typedef lowp_i16vec2			i16vec2;$/;"	t	namespace:glm
glm::i16vec2	lib/glm/fwd.hpp	/^	typedef mediump_i16vec2			i16vec2;$/;"	t	namespace:glm
glm::i16vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, defaultp> i16vec2;$/;"	t	namespace:glm
glm::i16vec3	lib/glm/fwd.hpp	/^	typedef highp_i16vec3			i16vec3;$/;"	t	namespace:glm
glm::i16vec3	lib/glm/fwd.hpp	/^	typedef lowp_i16vec3			i16vec3;$/;"	t	namespace:glm
glm::i16vec3	lib/glm/fwd.hpp	/^	typedef mediump_i16vec3			i16vec3;$/;"	t	namespace:glm
glm::i16vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, defaultp> i16vec3;$/;"	t	namespace:glm
glm::i16vec4	lib/glm/fwd.hpp	/^	typedef highp_i16vec4			i16vec4;$/;"	t	namespace:glm
glm::i16vec4	lib/glm/fwd.hpp	/^	typedef lowp_i16vec4			i16vec4;$/;"	t	namespace:glm
glm::i16vec4	lib/glm/fwd.hpp	/^	typedef mediump_i16vec4			i16vec4;$/;"	t	namespace:glm
glm::i16vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, defaultp> i16vec4;$/;"	t	namespace:glm
glm::i32	lib/glm/fwd.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
glm::i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
glm::i32vec1	lib/glm/fwd.hpp	/^	typedef highp_i32vec1			i32vec1;$/;"	t	namespace:glm
glm::i32vec1	lib/glm/fwd.hpp	/^	typedef lowp_i32vec1			i32vec1;$/;"	t	namespace:glm
glm::i32vec1	lib/glm/fwd.hpp	/^	typedef mediump_i32vec1			i32vec1;$/;"	t	namespace:glm
glm::i32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, defaultp> i32vec1;$/;"	t	namespace:glm
glm::i32vec2	lib/glm/fwd.hpp	/^	typedef highp_i32vec2			i32vec2;$/;"	t	namespace:glm
glm::i32vec2	lib/glm/fwd.hpp	/^	typedef lowp_i32vec2			i32vec2;$/;"	t	namespace:glm
glm::i32vec2	lib/glm/fwd.hpp	/^	typedef mediump_i32vec2			i32vec2;$/;"	t	namespace:glm
glm::i32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, defaultp> i32vec2;$/;"	t	namespace:glm
glm::i32vec3	lib/glm/fwd.hpp	/^	typedef highp_i32vec3			i32vec3;$/;"	t	namespace:glm
glm::i32vec3	lib/glm/fwd.hpp	/^	typedef lowp_i32vec3			i32vec3;$/;"	t	namespace:glm
glm::i32vec3	lib/glm/fwd.hpp	/^	typedef mediump_i32vec3			i32vec3;$/;"	t	namespace:glm
glm::i32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, defaultp> i32vec3;$/;"	t	namespace:glm
glm::i32vec4	lib/glm/fwd.hpp	/^	typedef highp_i32vec4			i32vec4;$/;"	t	namespace:glm
glm::i32vec4	lib/glm/fwd.hpp	/^	typedef lowp_i32vec4			i32vec4;$/;"	t	namespace:glm
glm::i32vec4	lib/glm/fwd.hpp	/^	typedef mediump_i32vec4			i32vec4;$/;"	t	namespace:glm
glm::i32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, defaultp> i32vec4;$/;"	t	namespace:glm
glm::i64	lib/glm/fwd.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
glm::i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
glm::i64vec1	lib/glm/fwd.hpp	/^	typedef highp_i64vec1			i64vec1;$/;"	t	namespace:glm
glm::i64vec1	lib/glm/fwd.hpp	/^	typedef lowp_i64vec1			i64vec1;$/;"	t	namespace:glm
glm::i64vec1	lib/glm/fwd.hpp	/^	typedef mediump_i64vec1			i64vec1;$/;"	t	namespace:glm
glm::i64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, defaultp> i64vec1;$/;"	t	namespace:glm
glm::i64vec2	lib/glm/fwd.hpp	/^	typedef highp_i64vec2			i64vec2;$/;"	t	namespace:glm
glm::i64vec2	lib/glm/fwd.hpp	/^	typedef lowp_i64vec2			i64vec2;$/;"	t	namespace:glm
glm::i64vec2	lib/glm/fwd.hpp	/^	typedef mediump_i64vec2			i64vec2;$/;"	t	namespace:glm
glm::i64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, defaultp> i64vec2;$/;"	t	namespace:glm
glm::i64vec3	lib/glm/fwd.hpp	/^	typedef highp_i64vec3			i64vec3;$/;"	t	namespace:glm
glm::i64vec3	lib/glm/fwd.hpp	/^	typedef lowp_i64vec3			i64vec3;$/;"	t	namespace:glm
glm::i64vec3	lib/glm/fwd.hpp	/^	typedef mediump_i64vec3			i64vec3;$/;"	t	namespace:glm
glm::i64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, defaultp> i64vec3;$/;"	t	namespace:glm
glm::i64vec4	lib/glm/fwd.hpp	/^	typedef highp_i64vec4			i64vec4;$/;"	t	namespace:glm
glm::i64vec4	lib/glm/fwd.hpp	/^	typedef lowp_i64vec4			i64vec4;$/;"	t	namespace:glm
glm::i64vec4	lib/glm/fwd.hpp	/^	typedef mediump_i64vec4			i64vec4;$/;"	t	namespace:glm
glm::i64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, defaultp> i64vec4;$/;"	t	namespace:glm
glm::i8	lib/glm/fwd.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
glm::i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
glm::i8vec1	lib/glm/fwd.hpp	/^	typedef highp_i8vec1			i8vec1;$/;"	t	namespace:glm
glm::i8vec1	lib/glm/fwd.hpp	/^	typedef lowp_i8vec1				i8vec1;$/;"	t	namespace:glm
glm::i8vec1	lib/glm/fwd.hpp	/^	typedef mediump_i8vec1			i8vec1;$/;"	t	namespace:glm
glm::i8vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, defaultp> i8vec1;$/;"	t	namespace:glm
glm::i8vec2	lib/glm/fwd.hpp	/^	typedef highp_i8vec2			i8vec2;$/;"	t	namespace:glm
glm::i8vec2	lib/glm/fwd.hpp	/^	typedef lowp_i8vec2				i8vec2;$/;"	t	namespace:glm
glm::i8vec2	lib/glm/fwd.hpp	/^	typedef mediump_i8vec2			i8vec2;$/;"	t	namespace:glm
glm::i8vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, defaultp> i8vec2;$/;"	t	namespace:glm
glm::i8vec3	lib/glm/fwd.hpp	/^	typedef highp_i8vec3			i8vec3;$/;"	t	namespace:glm
glm::i8vec3	lib/glm/fwd.hpp	/^	typedef lowp_i8vec3				i8vec3;$/;"	t	namespace:glm
glm::i8vec3	lib/glm/fwd.hpp	/^	typedef mediump_i8vec3			i8vec3;$/;"	t	namespace:glm
glm::i8vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, defaultp> i8vec3;$/;"	t	namespace:glm
glm::i8vec4	lib/glm/fwd.hpp	/^	typedef highp_i8vec4			i8vec4;$/;"	t	namespace:glm
glm::i8vec4	lib/glm/fwd.hpp	/^	typedef lowp_i8vec4				i8vec4;$/;"	t	namespace:glm
glm::i8vec4	lib/glm/fwd.hpp	/^	typedef mediump_i8vec4			i8vec4;	$/;"	t	namespace:glm
glm::i8vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, defaultp> i8vec4;$/;"	t	namespace:glm
glm::imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm
glm::imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm
glm::imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm
glm::imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm
glm::imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm
glm::imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm
glm::imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm
glm::imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm
glm::imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm
glm::imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm
glm::imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm
glm::imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm
glm::imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm
glm::imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm
glm::imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm
glm::imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm
glm::imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm
glm::imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm
glm::imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm
glm::imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm
glm::imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm
glm::imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm
glm::imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm
glm::imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm
glm::imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm
glm::imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm
glm::imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm
glm::imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm
glm::imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm
glm::imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm
glm::imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm
glm::imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm
glm::imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm
glm::imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm
glm::imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm
glm::imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm
glm::int1	lib/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int16	lib/glm/detail/type_int.hpp	/^	typedef detail::int16					int16;$/;"	t	namespace:glm
glm::int16	lib/glm/fwd.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
glm::int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
glm::int1x1	lib/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int32	lib/glm/detail/type_int.hpp	/^	typedef detail::int32					int32;$/;"	t	namespace:glm
glm::int32	lib/glm/fwd.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
glm::int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
glm::int3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
glm::int64	lib/glm/detail/type_int.hpp	/^	typedef detail::int64					int64;$/;"	t	namespace:glm
glm::int64	lib/glm/fwd.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
glm::int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
glm::int8	lib/glm/detail/type_int.hpp	/^	typedef detail::int8					int8;$/;"	t	namespace:glm
glm::int8	lib/glm/fwd.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
glm::int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
glm::int_t	lib/glm/detail/type_int.hpp	/^	typedef highp_int					int_t;$/;"	t	namespace:glm
glm::int_t	lib/glm/detail/type_int.hpp	/^	typedef lowp_int					int_t;$/;"	t	namespace:glm
glm::int_t	lib/glm/detail/type_int.hpp	/^	typedef mediump_int					int_t;$/;"	t	namespace:glm
glm::io	lib/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
glm::io::basic_format_saver	lib/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
glm::io::basic_format_saver::bss_	lib/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	access:private
glm::io::basic_state_saver	lib/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
glm::io::basic_state_saver::char_type	lib/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::fill_	lib/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::flags_	lib/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::flags_type	lib/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::locale_	lib/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::precision_	lib/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::state_	lib/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::state_type	lib/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::std::locale_type	lib/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver::std	access:private
glm::io::basic_state_saver::streamsize_type	lib/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	access:private
glm::io::basic_state_saver::width_	lib/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	access:private
glm::io::column_major	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
glm::io::delimeter	lib/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
glm::io::delimeter::value	lib/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	access:public
glm::io::format_punct	lib/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io	inherits:std::locale::facet
glm::io::format_punct::char_type	lib/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	access:private
glm::io::format_punct::delim_left	lib/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::delim_right	lib/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::formatted	lib/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::id	lib/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::newline	lib/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::order	lib/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::precision	lib/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::separator	lib/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::space	lib/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_punct::width	lib/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	access:public
glm::io::format_saver	lib/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io
glm::io::order	lib/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
glm::io::order::value	lib/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	access:public
glm::io::order_type	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
glm::io::precision	lib/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
glm::io::precision::value	lib/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	access:public
glm::io::row_major	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
glm::io::state_saver	lib/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io
glm::io::wformat_saver	lib/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io
glm::io::width	lib/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
glm::io::width::value	lib/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	access:public
glm::io::wstate_saver	lib/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io
glm::ivec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_ivec1			ivec1;$/;"	t	namespace:glm
glm::ivec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1			ivec1;$/;"	t	namespace:glm
glm::ivec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1		ivec1;$/;"	t	namespace:glm
glm::ivec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec2			ivec2;$/;"	t	namespace:glm
glm::ivec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec2			ivec2;$/;"	t	namespace:glm
glm::ivec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec2		ivec2;$/;"	t	namespace:glm
glm::ivec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec3			ivec3;$/;"	t	namespace:glm
glm::ivec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec3			ivec3;$/;"	t	namespace:glm
glm::ivec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec3		ivec3;$/;"	t	namespace:glm
glm::ivec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec4			ivec4;$/;"	t	namespace:glm
glm::ivec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec4			ivec4;$/;"	t	namespace:glm
glm::ivec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec4		ivec4;$/;"	t	namespace:glm
glm::length_t	lib/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> lerp(const vec<2, T, P>& x, const vec<2, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y, T a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> lerp(const vec<2, T, P>& x, const vec<2, T, P>& y, const vec<2, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y, const vec<2, T, P>& a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> lerp(const vec<3, T, P>& x, const vec<3, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y, T a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> lerp(const vec<3, T, P>& x, const vec<3, T, P>& y, const vec<3, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y, const vec<3, T, P>& a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> lerp(const vec<4, T, P>& x, const vec<4, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y, T a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> lerp(const vec<4, T, P>& x, const vec<4, T, P>& y, const vec<4, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y, const vec<4, T, P>& a)
glm::lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}																					\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x, T y, T a)
glm::lowp	lib/glm/detail/precision.hpp	/^		lowp = packed_lowp,$/;"	e	enum:glm::precision
glm::lowp_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1_t			lowp_bvec1;$/;"	t	namespace:glm
glm::lowp_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, lowp>		lowp_bvec1_t;$/;"	t	namespace:glm
glm::lowp_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm
glm::lowp_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm
glm::lowp_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm
glm::lowp_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm
glm::lowp_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2;$/;"	t	namespace:glm
glm::lowp_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm
glm::lowp_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm
glm::lowp_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm
glm::lowp_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_dmat3;$/;"	t	namespace:glm
glm::lowp_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm
glm::lowp_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm
glm::lowp_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm
glm::lowp_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4;$/;"	t	namespace:glm
glm::lowp_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm
glm::lowp_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm
glm::lowp_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm
glm::lowp_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, lowp>		lowp_dquat;$/;"	t	namespace:glm
glm::lowp_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm
glm::lowp_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1_t			lowp_dvec1;$/;"	t	namespace:glm
glm::lowp_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, lowp>	lowp_dvec1_t;$/;"	t	namespace:glm
glm::lowp_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, lowp>		lowp_dvec2;$/;"	t	namespace:glm
glm::lowp_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, lowp>		lowp_dvec3;$/;"	t	namespace:glm
glm::lowp_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, lowp>		lowp_dvec4;$/;"	t	namespace:glm
glm::lowp_f32	lib/glm/fwd.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm
glm::lowp_f32mat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm
glm::lowp_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm
glm::lowp_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm
glm::lowp_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm
glm::lowp_f32mat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm
glm::lowp_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm
glm::lowp_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm
glm::lowp_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm
glm::lowp_f32mat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm
glm::lowp_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm
glm::lowp_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm
glm::lowp_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm
glm::lowp_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm
glm::lowp_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm
glm::lowp_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm
glm::lowp_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm
glm::lowp_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm
glm::lowp_f64	lib/glm/fwd.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm
glm::lowp_f64mat2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm
glm::lowp_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm
glm::lowp_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm
glm::lowp_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm
glm::lowp_f64mat3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm
glm::lowp_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm
glm::lowp_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm
glm::lowp_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm
glm::lowp_f64mat4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm
glm::lowp_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm
glm::lowp_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm
glm::lowp_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm
glm::lowp_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm
glm::lowp_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm
glm::lowp_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm
glm::lowp_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm
glm::lowp_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm
glm::lowp_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm
glm::lowp_float	lib/glm/detail/type_float.hpp	/^	typedef lowp_float_t		lowp_float;$/;"	t	namespace:glm
glm::lowp_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32;$/;"	t	namespace:glm
glm::lowp_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32_t;$/;"	t	namespace:glm
glm::lowp_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64;$/;"	t	namespace:glm
glm::lowp_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64_t;$/;"	t	namespace:glm
glm::lowp_float_t	lib/glm/detail/type_float.hpp	/^	typedef float				lowp_float_t;$/;"	t	namespace:glm
glm::lowp_fmat2	lib/glm/fwd.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm
glm::lowp_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm
glm::lowp_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm
glm::lowp_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm
glm::lowp_fmat3	lib/glm/fwd.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm
glm::lowp_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm
glm::lowp_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm
glm::lowp_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm
glm::lowp_fmat4	lib/glm/fwd.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm
glm::lowp_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm
glm::lowp_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm
glm::lowp_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm
glm::lowp_fquat	lib/glm/fwd.hpp	/^	typedef lowp_quat			lowp_fquat;$/;"	t	namespace:glm
glm::lowp_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, lowp> lowp_fvec1;$/;"	t	namespace:glm
glm::lowp_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, lowp> lowp_fvec2;$/;"	t	namespace:glm
glm::lowp_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, lowp> lowp_fvec3;$/;"	t	namespace:glm
glm::lowp_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, lowp> lowp_fvec4;$/;"	t	namespace:glm
glm::lowp_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
glm::lowp_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
glm::lowp_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm
glm::lowp_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm
glm::lowp_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm
glm::lowp_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm
glm::lowp_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
glm::lowp_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
glm::lowp_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm
glm::lowp_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm
glm::lowp_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm
glm::lowp_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm
glm::lowp_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
glm::lowp_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
glm::lowp_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm
glm::lowp_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm
glm::lowp_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm
glm::lowp_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm
glm::lowp_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
glm::lowp_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
glm::lowp_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm
glm::lowp_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm
glm::lowp_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm
glm::lowp_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm
glm::lowp_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2;$/;"	t	namespace:glm
glm::lowp_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm
glm::lowp_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm
glm::lowp_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm
glm::lowp_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3;$/;"	t	namespace:glm
glm::lowp_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm
glm::lowp_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm
glm::lowp_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm
glm::lowp_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4;$/;"	t	namespace:glm
glm::lowp_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm
glm::lowp_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm
glm::lowp_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm
glm::lowp_int	lib/glm/detail/type_int.hpp	/^	typedef detail::lowp_int_t				lowp_int;$/;"	t	namespace:glm
glm::lowp_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
glm::lowp_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
glm::lowp_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
glm::lowp_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
glm::lowp_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
glm::lowp_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
glm::lowp_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
glm::lowp_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
glm::lowp_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
glm::lowp_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
glm::lowp_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
glm::lowp_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
glm::lowp_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
glm::lowp_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
glm::lowp_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
glm::lowp_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
glm::lowp_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1_t			lowp_ivec1;$/;"	t	namespace:glm
glm::lowp_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, lowp>		lowp_ivec1_t;$/;"	t	namespace:glm
glm::lowp_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm
glm::lowp_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm
glm::lowp_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm
glm::lowp_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm
glm::lowp_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm
glm::lowp_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
glm::lowp_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
glm::lowp_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
glm::lowp_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
glm::lowp_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
glm::lowp_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
glm::lowp_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm
glm::lowp_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm
glm::lowp_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
glm::lowp_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
glm::lowp_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
glm::lowp_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
glm::lowp_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
glm::lowp_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
glm::lowp_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm
glm::lowp_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm
glm::lowp_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
glm::lowp_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
glm::lowp_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
glm::lowp_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
glm::lowp_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
glm::lowp_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
glm::lowp_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, lowp>		lowp_quat;$/;"	t	namespace:glm
glm::lowp_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
glm::lowp_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
glm::lowp_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm
glm::lowp_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm
glm::lowp_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm
glm::lowp_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm
glm::lowp_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
glm::lowp_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
glm::lowp_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm
glm::lowp_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm
glm::lowp_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm
glm::lowp_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm
glm::lowp_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
glm::lowp_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
glm::lowp_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm
glm::lowp_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm
glm::lowp_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm
glm::lowp_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm
glm::lowp_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
glm::lowp_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
glm::lowp_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm
glm::lowp_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm
glm::lowp_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm
glm::lowp_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm
glm::lowp_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::lowp_uint_t				lowp_uint;$/;"	t	namespace:glm
glm::lowp_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
glm::lowp_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
glm::lowp_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
glm::lowp_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
glm::lowp_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
glm::lowp_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
glm::lowp_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
glm::lowp_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
glm::lowp_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
glm::lowp_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
glm::lowp_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
glm::lowp_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
glm::lowp_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
glm::lowp_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
glm::lowp_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
glm::lowp_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
glm::lowp_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2;$/;"	t	namespace:glm
glm::lowp_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm
glm::lowp_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm
glm::lowp_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm
glm::lowp_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3;$/;"	t	namespace:glm
glm::lowp_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm
glm::lowp_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm
glm::lowp_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm
glm::lowp_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4;$/;"	t	namespace:glm
glm::lowp_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm
glm::lowp_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm
glm::lowp_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm
glm::lowp_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1_t			lowp_uvec1;$/;"	t	namespace:glm
glm::lowp_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, lowp>		lowp_uvec1_t;$/;"	t	namespace:glm
glm::lowp_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm
glm::lowp_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm
glm::lowp_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm
glm::lowp_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, lowp> lowp_vec1;$/;"	t	namespace:glm
glm::lowp_vec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_vec1_t				lowp_vec1;$/;"	t	namespace:glm
glm::lowp_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, lowp>		lowp_vec1_t;$/;"	t	namespace:glm
glm::lowp_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, lowp>		lowp_vec2;$/;"	t	namespace:glm
glm::lowp_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, lowp> lowp_vec2;$/;"	t	namespace:glm
glm::lowp_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, lowp>		lowp_vec3;$/;"	t	namespace:glm
glm::lowp_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, lowp> lowp_vec3;$/;"	t	namespace:glm
glm::lowp_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, lowp>		lowp_vec4;$/;"	t	namespace:glm
glm::lowp_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, lowp> lowp_vec4;$/;"	t	namespace:glm
glm::mat	lib/glm/detail/type_mat2x2.hpp	/^	struct mat<2, 2, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat2x3.hpp	/^	struct mat<2, 3, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat2x4.hpp	/^	struct mat<2, 4, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat3x2.hpp	/^	struct mat<3, 2, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat3x3.hpp	/^	struct mat<3, 3, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat3x4.hpp	/^	struct mat<3, 4, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat4x2.hpp	/^	struct mat<4, 2, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat4x3.hpp	/^	struct mat<4, 3, T, P>$/;"	s	namespace:glm
glm::mat	lib/glm/detail/type_mat4x4.hpp	/^	struct mat<4, 4, T, P>$/;"	s	namespace:glm
glm::mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat2x2					mat2;$/;"	t	namespace:glm
glm::mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x2			mat2x2;$/;"	t	namespace:glm
glm::mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x2			mat2x2;$/;"	t	namespace:glm
glm::mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x2		mat2x2;$/;"	t	namespace:glm
glm::mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x3			mat2x3;$/;"	t	namespace:glm
glm::mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x3			mat2x3;$/;"	t	namespace:glm
glm::mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x3		mat2x3;$/;"	t	namespace:glm
glm::mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x4			mat2x4;$/;"	t	namespace:glm
glm::mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x4			mat2x4;$/;"	t	namespace:glm
glm::mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x4		mat2x4;$/;"	t	namespace:glm
glm::mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat3x3					mat3;$/;"	t	namespace:glm
glm::mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x2			mat3x2;$/;"	t	namespace:glm
glm::mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x2			mat3x2;$/;"	t	namespace:glm
glm::mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x2		mat3x2;$/;"	t	namespace:glm
glm::mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x3			mat3x3;$/;"	t	namespace:glm
glm::mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x3			mat3x3;$/;"	t	namespace:glm
glm::mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x3		mat3x3;$/;"	t	namespace:glm
glm::mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x4			mat3x4;$/;"	t	namespace:glm
glm::mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x4			mat3x4;$/;"	t	namespace:glm
glm::mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x4		mat3x4;$/;"	t	namespace:glm
glm::mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat4x4					mat4;$/;"	t	namespace:glm
glm::mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x2			mat4x2;$/;"	t	namespace:glm
glm::mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x2			mat4x2;$/;"	t	namespace:glm
glm::mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x2		mat4x2;$/;"	t	namespace:glm
glm::mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x3			mat4x3;$/;"	t	namespace:glm
glm::mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x3			mat4x3;$/;"	t	namespace:glm
glm::mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x3		mat4x3;$/;"	t	namespace:glm
glm::mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x4			mat4x4;$/;"	t	namespace:glm
glm::mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x4			mat4x4;$/;"	t	namespace:glm
glm::mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x4		mat4x4;$/;"	t	namespace:glm
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat(mat<2, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat<2, 2, T, P> & operator=(mat<2, 2, T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat(mat<2, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat<2, 3, T, P> & operator=(mat<2, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat(mat<2, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat<2, 4, T, P> & operator=(mat<2, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat(mat<3, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat<3, 2, T, P> & operator=(mat<3, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat(mat<3, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat<3, 3, T, P> & operator=(mat<3, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat(mat<3, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat<3, 4, T, P> & operator=(mat<3, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat(mat<4, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat<4, 2, T, P> & operator=(mat<4, 2, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat(mat<4, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat<4, 3, T, P> & operator=(mat<4, 3, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat(mat<4, 4, T, P> const& m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat<4, 4, T, P> & operator=(mat<4, 4, T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::GLM_DEFAULT_CTOR	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL mat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef vec<2, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef vec<3, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::col_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, P> col_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
glm::mat::length_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::length_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::row_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef mat<3, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef mat<4, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef mat<2, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef mat<4, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef mat<2, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef mat<3, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::transpose_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat2x3.hpp	/^		typedef mat<2, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat2x4.hpp	/^		typedef mat<2, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat3x2.hpp	/^		typedef mat<3, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat3x4.hpp	/^		typedef mat<3, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat4x2.hpp	/^		typedef mat<4, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat4x3.hpp	/^		typedef mat<4, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::type	lib/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
glm::mat::value	lib/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
glm::mat::value	lib/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
glm::mat::value_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mat::value_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
glm::mediump	lib/glm/detail/precision.hpp	/^		mediump = packed_mediump,$/;"	e	enum:glm::precision
glm::mediump_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1_t			mediump_bvec1;$/;"	t	namespace:glm
glm::mediump_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, mediump>	mediump_bvec1_t;$/;"	t	namespace:glm
glm::mediump_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm
glm::mediump_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm
glm::mediump_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm
glm::mediump_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm
glm::mediump_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2;$/;"	t	namespace:glm
glm::mediump_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm
glm::mediump_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm
glm::mediump_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm
glm::mediump_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3;$/;"	t	namespace:glm
glm::mediump_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm
glm::mediump_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm
glm::mediump_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm
glm::mediump_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4;$/;"	t	namespace:glm
glm::mediump_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm
glm::mediump_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm
glm::mediump_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm
glm::mediump_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, mediump>	mediump_dquat;$/;"	t	namespace:glm
glm::mediump_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm
glm::mediump_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1_t			mediump_dvec1;$/;"	t	namespace:glm
glm::mediump_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, mediump>	mediump_dvec1_t;$/;"	t	namespace:glm
glm::mediump_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, mediump>	mediump_dvec2;$/;"	t	namespace:glm
glm::mediump_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, mediump>	mediump_dvec3;$/;"	t	namespace:glm
glm::mediump_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, mediump>	mediump_dvec4;$/;"	t	namespace:glm
glm::mediump_f32	lib/glm/fwd.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm
glm::mediump_f32mat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm
glm::mediump_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm
glm::mediump_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm
glm::mediump_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm
glm::mediump_f32mat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm
glm::mediump_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm
glm::mediump_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm
glm::mediump_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm
glm::mediump_f32mat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm
glm::mediump_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm
glm::mediump_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm
glm::mediump_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm
glm::mediump_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm
glm::mediump_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm
glm::mediump_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm
glm::mediump_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm
glm::mediump_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm
glm::mediump_f64	lib/glm/fwd.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm
glm::mediump_f64mat2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm
glm::mediump_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm
glm::mediump_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm
glm::mediump_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm
glm::mediump_f64mat3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm
glm::mediump_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm
glm::mediump_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm
glm::mediump_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm
glm::mediump_f64mat4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm
glm::mediump_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm
glm::mediump_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm
glm::mediump_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm
glm::mediump_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm
glm::mediump_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm
glm::mediump_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm
glm::mediump_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm
glm::mediump_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm
glm::mediump_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm
glm::mediump_float	lib/glm/detail/type_float.hpp	/^	typedef mediump_float_t		mediump_float;$/;"	t	namespace:glm
glm::mediump_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32;$/;"	t	namespace:glm
glm::mediump_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32_t;$/;"	t	namespace:glm
glm::mediump_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64;$/;"	t	namespace:glm
glm::mediump_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64_t;$/;"	t	namespace:glm
glm::mediump_float_t	lib/glm/detail/type_float.hpp	/^	typedef float				mediump_float_t;$/;"	t	namespace:glm
glm::mediump_fmat2	lib/glm/fwd.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm
glm::mediump_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm
glm::mediump_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm
glm::mediump_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm
glm::mediump_fmat3	lib/glm/fwd.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm
glm::mediump_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm
glm::mediump_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm
glm::mediump_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm
glm::mediump_fmat4	lib/glm/fwd.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm
glm::mediump_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm
glm::mediump_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm
glm::mediump_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm
glm::mediump_fquat	lib/glm/fwd.hpp	/^	typedef mediump_quat		mediump_fquat;$/;"	t	namespace:glm
glm::mediump_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, mediump> mediump_fvec1;$/;"	t	namespace:glm
glm::mediump_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, mediump> mediump_fvec2;$/;"	t	namespace:glm
glm::mediump_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, mediump> mediump_fvec3;$/;"	t	namespace:glm
glm::mediump_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, mediump> mediump_fvec4;$/;"	t	namespace:glm
glm::mediump_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
glm::mediump_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
glm::mediump_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm
glm::mediump_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm
glm::mediump_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm
glm::mediump_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm
glm::mediump_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
glm::mediump_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
glm::mediump_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm
glm::mediump_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm
glm::mediump_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm
glm::mediump_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm
glm::mediump_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
glm::mediump_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
glm::mediump_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm
glm::mediump_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm
glm::mediump_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm
glm::mediump_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm
glm::mediump_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
glm::mediump_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
glm::mediump_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm
glm::mediump_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm
glm::mediump_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm
glm::mediump_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm
glm::mediump_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2;$/;"	t	namespace:glm
glm::mediump_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm
glm::mediump_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm
glm::mediump_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm
glm::mediump_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3;$/;"	t	namespace:glm
glm::mediump_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm
glm::mediump_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm
glm::mediump_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm
glm::mediump_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4;$/;"	t	namespace:glm
glm::mediump_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm
glm::mediump_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm
glm::mediump_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm
glm::mediump_int	lib/glm/detail/type_int.hpp	/^	typedef detail::mediump_int_t			mediump_int;$/;"	t	namespace:glm
glm::mediump_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
glm::mediump_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
glm::mediump_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
glm::mediump_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
glm::mediump_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
glm::mediump_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
glm::mediump_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
glm::mediump_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
glm::mediump_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
glm::mediump_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
glm::mediump_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
glm::mediump_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
glm::mediump_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
glm::mediump_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
glm::mediump_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
glm::mediump_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
glm::mediump_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1_t			mediump_ivec1;$/;"	t	namespace:glm
glm::mediump_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, mediump>	mediump_ivec1_t;$/;"	t	namespace:glm
glm::mediump_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, mediump>		mediump_ivec2;$/;"	t	namespace:glm
glm::mediump_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, mediump>		mediump_ivec3;$/;"	t	namespace:glm
glm::mediump_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, mediump>		mediump_ivec4;$/;"	t	namespace:glm
glm::mediump_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2;$/;"	t	namespace:glm
glm::mediump_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, mediump>		mediump_mat2;$/;"	t	namespace:glm
glm::mediump_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2x2;$/;"	t	namespace:glm
glm::mediump_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm
glm::mediump_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, mediump>	mediump_mat2x3;$/;"	t	namespace:glm
glm::mediump_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm
glm::mediump_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, mediump>	mediump_mat2x4;$/;"	t	namespace:glm
glm::mediump_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm
glm::mediump_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3;$/;"	t	namespace:glm
glm::mediump_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, mediump>		mediump_mat3;$/;"	t	namespace:glm
glm::mediump_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, mediump>	mediump_mat3x2;$/;"	t	namespace:glm
glm::mediump_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm
glm::mediump_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3x3;$/;"	t	namespace:glm
glm::mediump_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm
glm::mediump_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, mediump>	mediump_mat3x4;$/;"	t	namespace:glm
glm::mediump_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm
glm::mediump_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4;$/;"	t	namespace:glm
glm::mediump_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, mediump>		mediump_mat4;$/;"	t	namespace:glm
glm::mediump_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, mediump>	mediump_mat4x2;$/;"	t	namespace:glm
glm::mediump_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm
glm::mediump_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, mediump>	mediump_mat4x3;$/;"	t	namespace:glm
glm::mediump_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm
glm::mediump_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4x4;$/;"	t	namespace:glm
glm::mediump_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm
glm::mediump_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, mediump>	mediump_quat;$/;"	t	namespace:glm
glm::mediump_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
glm::mediump_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
glm::mediump_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm
glm::mediump_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm
glm::mediump_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm
glm::mediump_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm
glm::mediump_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
glm::mediump_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
glm::mediump_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm
glm::mediump_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm
glm::mediump_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm
glm::mediump_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm
glm::mediump_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
glm::mediump_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
glm::mediump_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm
glm::mediump_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm
glm::mediump_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm
glm::mediump_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm
glm::mediump_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
glm::mediump_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
glm::mediump_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm
glm::mediump_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm
glm::mediump_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm
glm::mediump_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm
glm::mediump_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::mediump_uint_t			mediump_uint;$/;"	t	namespace:glm
glm::mediump_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
glm::mediump_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
glm::mediump_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
glm::mediump_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
glm::mediump_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
glm::mediump_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
glm::mediump_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
glm::mediump_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
glm::mediump_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
glm::mediump_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
glm::mediump_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
glm::mediump_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
glm::mediump_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
glm::mediump_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
glm::mediump_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
glm::mediump_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
glm::mediump_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2;$/;"	t	namespace:glm
glm::mediump_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm
glm::mediump_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm
glm::mediump_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm
glm::mediump_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3;$/;"	t	namespace:glm
glm::mediump_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm
glm::mediump_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm
glm::mediump_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm
glm::mediump_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4;$/;"	t	namespace:glm
glm::mediump_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm
glm::mediump_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm
glm::mediump_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm
glm::mediump_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1_t			mediump_uvec1;$/;"	t	namespace:glm
glm::mediump_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, mediump>	mediump_uvec1_t;$/;"	t	namespace:glm
glm::mediump_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm
glm::mediump_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm
glm::mediump_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm
glm::mediump_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, mediump> mediump_vec1;$/;"	t	namespace:glm
glm::mediump_vec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_vec1_t			mediump_vec1;$/;"	t	namespace:glm
glm::mediump_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, mediump>	mediump_vec1_t;$/;"	t	namespace:glm
glm::mediump_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, mediump>	mediump_vec2;$/;"	t	namespace:glm
glm::mediump_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, mediump> mediump_vec2;$/;"	t	namespace:glm
glm::mediump_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, mediump>	mediump_vec3;$/;"	t	namespace:glm
glm::mediump_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, mediump> mediump_vec3;$/;"	t	namespace:glm
glm::mediump_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, mediump>	mediump_vec4;$/;"	t	namespace:glm
glm::mediump_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, mediump> mediump_vec4;$/;"	t	namespace:glm
glm::nice	lib/glm/detail/type_gentype.hpp	/^		nice,$/;"	e	enum:glm::profile
glm::packed	lib/glm/detail/precision.hpp	/^		packed = packed_highp,$/;"	e	enum:glm::precision
glm::packed_highp	lib/glm/detail/precision.hpp	/^		packed_highp,$/;"	e	enum:glm::precision
glm::packed_highp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_highp>		packed_highp_bvec1;$/;"	t	namespace:glm
glm::packed_highp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_highp>		packed_highp_dvec1;$/;"	t	namespace:glm
glm::packed_highp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_highp>		packed_highp_ivec1;$/;"	t	namespace:glm
glm::packed_highp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_highp>		packed_highp_uvec1;$/;"	t	namespace:glm
glm::packed_highp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_highp>		packed_highp_vec1;$/;"	t	namespace:glm
glm::packed_lowp	lib/glm/detail/precision.hpp	/^		packed_lowp,$/;"	e	enum:glm::precision
glm::packed_lowp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_lowp>		packed_lowp_bvec1;$/;"	t	namespace:glm
glm::packed_lowp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_lowp>		packed_lowp_dvec1;$/;"	t	namespace:glm
glm::packed_lowp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_lowp>			packed_lowp_ivec1;$/;"	t	namespace:glm
glm::packed_lowp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_lowp>		packed_lowp_uvec1;$/;"	t	namespace:glm
glm::packed_lowp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_lowp>		packed_lowp_vec1;$/;"	t	namespace:glm
glm::packed_mediump	lib/glm/detail/precision.hpp	/^		packed_mediump,$/;"	e	enum:glm::precision
glm::packed_mediump_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_mediump>		packed_mediump_bvec1;$/;"	t	namespace:glm
glm::packed_mediump_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_mediump>	packed_mediump_dvec1;$/;"	t	namespace:glm
glm::packed_mediump_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_mediump>		packed_mediump_ivec1;$/;"	t	namespace:glm
glm::packed_mediump_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_mediump>		packed_mediump_uvec1;$/;"	t	namespace:glm
glm::packed_mediump_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_mediump>	packed_mediump_vec1;$/;"	t	namespace:glm
glm::precision	lib/glm/detail/precision.hpp	/^	enum precision$/;"	g	namespace:glm
glm::profile	lib/glm/detail/type_gentype.hpp	/^	enum profile$/;"	g	namespace:glm
glm::quat	lib/glm/fwd.hpp	/^	typedef highp_quat			quat;$/;"	t	namespace:glm
glm::quat	lib/glm/fwd.hpp	/^	typedef lowp_quat			quat;$/;"	t	namespace:glm
glm::quat	lib/glm/fwd.hpp	/^	typedef mediump_quat		quat;$/;"	t	namespace:glm
glm::qword	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm
glm::saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1));}														\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x)
glm::saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> saturate(const vec<2, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x)
glm::saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> saturate(const vec<3, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x)
glm::saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> saturate(const vec<4, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x)
glm::simd	lib/glm/detail/type_gentype.hpp	/^		simd$/;"	e	enum:glm::profile
glm::sint	lib/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm
glm::size1	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1;$/;"	t	namespace:glm
glm::size1_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm
glm::size2	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2;$/;"	t	namespace:glm
glm::size2_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm
glm::size3	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3;$/;"	t	namespace:glm
glm::size3_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm
glm::size4	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4;$/;"	t	namespace:glm
glm::size4_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm
glm::sizeType	lib/glm/detail/type_gentype.hpp	/^	typedef std::size_t sizeType;$/;"	t	namespace:glm
glm::tdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
glm::tdualquat::GLM_DEFAULT	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tdualquat(tdualquat<T, P> const & d) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat	access:public
glm::tdualquat::GLM_DEFAULT	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL tdualquat<T, P> & operator=(tdualquat<T, P> const & m) GLM_DEFAULT;$/;"	m	struct:glm::tdualquat	access:public
glm::tdualquat::GLM_DEFAULT_CTOR	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tdualquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tdualquat	access:public
glm::tdualquat::dual	lib/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	access:public
glm::tdualquat::length	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::tdualquat	access:public	signature:()
glm::tdualquat::length_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tdualquat	access:public
glm::tdualquat::part_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef glm::tquat<T, P> part_type;$/;"	t	struct:glm::tdualquat	access:public
glm::tdualquat::real	lib/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	access:public
glm::tdualquat::value_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	access:public
glm::toMat3	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<3, 3, T, P> toMat3($/;"	f	namespace:glm	signature:( tquat<T, P> const & x)
glm::toMat4	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<4, 4, T, P> toMat4($/;"	f	namespace:glm	signature:( tquat<T, P> const & x)
glm::toQuat	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm	signature:( mat<3, 3, T, P> const& x)
glm::toQuat	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm	signature:( mat<4, 4, T, P> const& x)
glm::tquat	lib/glm/gtc/quaternion.hpp	/^	struct tquat$/;"	s	namespace:glm
glm::tquat::GLM_DEFAULT	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tquat(tquat<T, P> const& q) GLM_DEFAULT;$/;"	m	struct:glm::tquat	access:public
glm::tquat::GLM_DEFAULT	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL tquat<T, P> & operator=(tquat<T, P> const& q) GLM_DEFAULT;$/;"	m	struct:glm::tquat	access:public
glm::tquat::GLM_DEFAULT_CTOR	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR tquat() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::tquat	access:public
glm::tquat::__anon56::__anon57::w	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
glm::tquat::__anon56::__anon57::x	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
glm::tquat::__anon56::__anon57::y	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
glm::tquat::__anon56::__anon57::z	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
glm::tquat::__anon56::data	lib/glm/gtc/quaternion.hpp	/^				typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;$/;"	m	union:glm::tquat::__anon56	access:public
glm::tquat::length	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::tquat	access:public	signature:()
glm::tquat::length_type	lib/glm/gtc/quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tquat	access:public
glm::tquat::type	lib/glm/gtc/quaternion.hpp	/^		typedef tquat<T, P> type;$/;"	t	struct:glm::tquat	access:public
glm::tquat::value_type	lib/glm/gtc/quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tquat	access:public
glm::tquat::w	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
glm::tquat::x	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
glm::tquat::y	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
glm::tquat::z	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 2, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 3, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 4, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 2, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 3, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 4, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 2, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 3, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 4, T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<tdualquat<T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<tquat<T, P> >$/;"	s	namespace:glm
glm::type	lib/glm/gtx/type_trait.hpp	/^	struct type<vec<L, T, P> >$/;"	s	namespace:glm
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon22
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon23
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 2,$/;"	e	enum:glm::type::__anon24
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon25
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon26
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 3,$/;"	e	enum:glm::type::__anon27
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon28
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon29
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^			cols = 4,$/;"	e	enum:glm::type::__anon30
glm::type::cols	lib/glm/gtx/type_trait.hpp	/^		static length_t const cols = 0;$/;"	m	struct:glm::type	access:public
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon22
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon23
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 2,$/;"	e	enum:glm::type::__anon24
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon25
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon26
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 3,$/;"	e	enum:glm::type::__anon27
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 4$/;"	e	enum:glm::type::__anon31
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon28
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon29
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 4,$/;"	e	enum:glm::type::__anon30
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = 8$/;"	e	enum:glm::type::__anon32
glm::type::components	lib/glm/gtx/type_trait.hpp	/^			components = L$/;"	e	enum:glm::type::__anon21
glm::type::components	lib/glm/gtx/type_trait.hpp	/^		static length_t const components = 0;$/;"	m	struct:glm::type	access:public
glm::type::is_mat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	m	struct:glm::type	access:public
glm::type::is_mat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_mat = true;$/;"	m	struct:glm::type	access:public
glm::type::is_quat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	m	struct:glm::type	access:public
glm::type::is_quat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_quat = true;$/;"	m	struct:glm::type	access:public
glm::type::is_vec	lib/glm/gtx/type_trait.hpp	/^		static bool const is_vec = false;$/;"	m	struct:glm::type	access:public
glm::type::is_vec	lib/glm/gtx/type_trait.hpp	/^		static bool const is_vec = true;$/;"	m	struct:glm::type	access:public
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon22
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon25
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon28
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon23
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon26
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon29
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon24
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon27
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon30
glm::type::rows	lib/glm/gtx/type_trait.hpp	/^		static length_t const rows = 0;$/;"	m	struct:glm::type	access:public
glm::u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
glm::u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
glm::u16vec1	lib/glm/fwd.hpp	/^	typedef highp_u16vec1			u16vec1;$/;"	t	namespace:glm
glm::u16vec1	lib/glm/fwd.hpp	/^	typedef lowp_u16vec1			u16vec1;$/;"	t	namespace:glm
glm::u16vec1	lib/glm/fwd.hpp	/^	typedef mediump_u16vec1			u16vec1;$/;"	t	namespace:glm
glm::u16vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, defaultp> u16vec1;$/;"	t	namespace:glm
glm::u16vec2	lib/glm/fwd.hpp	/^	typedef highp_u16vec2			u16vec2;$/;"	t	namespace:glm
glm::u16vec2	lib/glm/fwd.hpp	/^	typedef lowp_u16vec2			u16vec2;$/;"	t	namespace:glm
glm::u16vec2	lib/glm/fwd.hpp	/^	typedef mediump_u16vec2			u16vec2;$/;"	t	namespace:glm
glm::u16vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, defaultp> u16vec2;$/;"	t	namespace:glm
glm::u16vec3	lib/glm/fwd.hpp	/^	typedef highp_u16vec3			u16vec3;$/;"	t	namespace:glm
glm::u16vec3	lib/glm/fwd.hpp	/^	typedef lowp_u16vec3			u16vec3;$/;"	t	namespace:glm
glm::u16vec3	lib/glm/fwd.hpp	/^	typedef mediump_u16vec3			u16vec3;$/;"	t	namespace:glm
glm::u16vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, defaultp> u16vec3;$/;"	t	namespace:glm
glm::u16vec4	lib/glm/fwd.hpp	/^	typedef highp_u16vec4			u16vec4;$/;"	t	namespace:glm
glm::u16vec4	lib/glm/fwd.hpp	/^	typedef lowp_u16vec4			u16vec4;$/;"	t	namespace:glm
glm::u16vec4	lib/glm/fwd.hpp	/^	typedef mediump_u16vec4			u16vec4;$/;"	t	namespace:glm
glm::u16vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, defaultp> u16vec4;$/;"	t	namespace:glm
glm::u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
glm::u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
glm::u32vec1	lib/glm/fwd.hpp	/^	typedef highp_u32vec1			u32vec1;$/;"	t	namespace:glm
glm::u32vec1	lib/glm/fwd.hpp	/^	typedef lowp_u32vec1			u32vec1;$/;"	t	namespace:glm
glm::u32vec1	lib/glm/fwd.hpp	/^	typedef mediump_u32vec1			u32vec1;$/;"	t	namespace:glm
glm::u32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, defaultp> u32vec1;$/;"	t	namespace:glm
glm::u32vec2	lib/glm/fwd.hpp	/^	typedef highp_u32vec2			u32vec2;$/;"	t	namespace:glm
glm::u32vec2	lib/glm/fwd.hpp	/^	typedef lowp_u32vec2			u32vec2;$/;"	t	namespace:glm
glm::u32vec2	lib/glm/fwd.hpp	/^	typedef mediump_u32vec2			u32vec2;$/;"	t	namespace:glm
glm::u32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, defaultp> u32vec2;$/;"	t	namespace:glm
glm::u32vec3	lib/glm/fwd.hpp	/^	typedef highp_u32vec3			u32vec3;$/;"	t	namespace:glm
glm::u32vec3	lib/glm/fwd.hpp	/^	typedef lowp_u32vec3			u32vec3;$/;"	t	namespace:glm
glm::u32vec3	lib/glm/fwd.hpp	/^	typedef mediump_u32vec3			u32vec3;$/;"	t	namespace:glm
glm::u32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, defaultp> u32vec3;$/;"	t	namespace:glm
glm::u32vec4	lib/glm/fwd.hpp	/^	typedef highp_u32vec4			u32vec4;$/;"	t	namespace:glm
glm::u32vec4	lib/glm/fwd.hpp	/^	typedef lowp_u32vec4			u32vec4;$/;"	t	namespace:glm
glm::u32vec4	lib/glm/fwd.hpp	/^	typedef mediump_u32vec4			u32vec4;$/;"	t	namespace:glm
glm::u32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, defaultp> u32vec4;$/;"	t	namespace:glm
glm::u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
glm::u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
glm::u64vec1	lib/glm/fwd.hpp	/^	typedef highp_u64vec1			u64vec1;$/;"	t	namespace:glm
glm::u64vec1	lib/glm/fwd.hpp	/^	typedef lowp_u64vec1			u64vec1;$/;"	t	namespace:glm
glm::u64vec1	lib/glm/fwd.hpp	/^	typedef mediump_u64vec1			u64vec1;$/;"	t	namespace:glm
glm::u64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, defaultp> u64vec1;$/;"	t	namespace:glm
glm::u64vec2	lib/glm/fwd.hpp	/^	typedef highp_u64vec2			u64vec2;$/;"	t	namespace:glm
glm::u64vec2	lib/glm/fwd.hpp	/^	typedef lowp_u64vec2			u64vec2;$/;"	t	namespace:glm
glm::u64vec2	lib/glm/fwd.hpp	/^	typedef mediump_u64vec2			u64vec2;$/;"	t	namespace:glm
glm::u64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, defaultp> u64vec2;$/;"	t	namespace:glm
glm::u64vec3	lib/glm/fwd.hpp	/^	typedef highp_u64vec3			u64vec3;$/;"	t	namespace:glm
glm::u64vec3	lib/glm/fwd.hpp	/^	typedef lowp_u64vec3			u64vec3;$/;"	t	namespace:glm
glm::u64vec3	lib/glm/fwd.hpp	/^	typedef mediump_u64vec3			u64vec3;$/;"	t	namespace:glm
glm::u64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, defaultp> u64vec3;$/;"	t	namespace:glm
glm::u64vec4	lib/glm/fwd.hpp	/^	typedef highp_u64vec4			u64vec4;$/;"	t	namespace:glm
glm::u64vec4	lib/glm/fwd.hpp	/^	typedef lowp_u64vec4			u64vec4;$/;"	t	namespace:glm
glm::u64vec4	lib/glm/fwd.hpp	/^	typedef mediump_u64vec4			u64vec4;$/;"	t	namespace:glm
glm::u64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, defaultp> u64vec4;$/;"	t	namespace:glm
glm::u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
glm::u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
glm::u8vec1	lib/glm/fwd.hpp	/^	typedef highp_u8vec1			u8vec1;$/;"	t	namespace:glm
glm::u8vec1	lib/glm/fwd.hpp	/^	typedef lowp_u8vec1				u8vec1;$/;"	t	namespace:glm
glm::u8vec1	lib/glm/fwd.hpp	/^	typedef mediump_u8vec1			u8vec1;$/;"	t	namespace:glm
glm::u8vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, defaultp> u8vec1;$/;"	t	namespace:glm
glm::u8vec2	lib/glm/fwd.hpp	/^	typedef highp_u8vec2			u8vec2;$/;"	t	namespace:glm
glm::u8vec2	lib/glm/fwd.hpp	/^	typedef lowp_u8vec2				u8vec2;$/;"	t	namespace:glm
glm::u8vec2	lib/glm/fwd.hpp	/^	typedef mediump_u8vec2			u8vec2;$/;"	t	namespace:glm
glm::u8vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, defaultp> u8vec2;$/;"	t	namespace:glm
glm::u8vec3	lib/glm/fwd.hpp	/^	typedef highp_u8vec3			u8vec3;$/;"	t	namespace:glm
glm::u8vec3	lib/glm/fwd.hpp	/^	typedef lowp_u8vec3				u8vec3;$/;"	t	namespace:glm
glm::u8vec3	lib/glm/fwd.hpp	/^	typedef mediump_u8vec3			u8vec3;$/;"	t	namespace:glm
glm::u8vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, defaultp> u8vec3;$/;"	t	namespace:glm
glm::u8vec4	lib/glm/fwd.hpp	/^	typedef highp_u8vec4			u8vec4;$/;"	t	namespace:glm
glm::u8vec4	lib/glm/fwd.hpp	/^	typedef lowp_u8vec4				u8vec4;$/;"	t	namespace:glm
glm::u8vec4	lib/glm/fwd.hpp	/^	typedef mediump_u8vec4			u8vec4;	$/;"	t	namespace:glm
glm::u8vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, defaultp> u8vec4;$/;"	t	namespace:glm
glm::uint	lib/glm/detail/type_int.hpp	/^	typedef unsigned int				uint;$/;"	t	namespace:glm
glm::uint16	lib/glm/detail/type_int.hpp	/^	typedef detail::uint16					uint16;$/;"	t	namespace:glm
glm::uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
glm::uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
glm::uint32	lib/glm/detail/type_int.hpp	/^	typedef detail::uint32					uint32;$/;"	t	namespace:glm
glm::uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
glm::uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
glm::uint64	lib/glm/detail/type_int.hpp	/^	typedef detail::uint64					uint64;$/;"	t	namespace:glm
glm::uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
glm::uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
glm::uint8	lib/glm/detail/type_int.hpp	/^	typedef detail::uint8					uint8;$/;"	t	namespace:glm
glm::uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
glm::uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
glm::uint_t	lib/glm/detail/type_int.hpp	/^	typedef highp_uint					uint_t;$/;"	t	namespace:glm
glm::uint_t	lib/glm/detail/type_int.hpp	/^	typedef lowp_uint					uint_t;$/;"	t	namespace:glm
glm::uint_t	lib/glm/detail/type_int.hpp	/^	typedef mediump_uint				uint_t;$/;"	t	namespace:glm
glm::umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm
glm::umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm
glm::umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm
glm::umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm
glm::umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm
glm::umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm
glm::umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm
glm::umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm
glm::umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm
glm::umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm
glm::umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm
glm::umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm
glm::umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm
glm::umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm
glm::umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm
glm::umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm
glm::umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm
glm::umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm
glm::umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm
glm::umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm
glm::umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm
glm::umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm
glm::umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm
glm::umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm
glm::umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm
glm::umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm
glm::umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm
glm::umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm
glm::umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm
glm::umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm
glm::umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm
glm::umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm
glm::umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm
glm::umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm
glm::umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm
glm::umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm
glm::uninitialize	lib/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	e	enum:glm::ctor
glm::uvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_uvec1			uvec1;$/;"	t	namespace:glm
glm::uvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1			uvec1;$/;"	t	namespace:glm
glm::uvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1		uvec1;$/;"	t	namespace:glm
glm::uvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec2			uvec2;$/;"	t	namespace:glm
glm::uvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec2			uvec2;$/;"	t	namespace:glm
glm::uvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec2		uvec2;$/;"	t	namespace:glm
glm::uvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec3			uvec3;$/;"	t	namespace:glm
glm::uvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec3			uvec3;$/;"	t	namespace:glm
glm::uvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec3		uvec3;$/;"	t	namespace:glm
glm::uvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec4			uvec4;$/;"	t	namespace:glm
glm::uvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec4			uvec4;$/;"	t	namespace:glm
glm::uvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec4		uvec4;$/;"	t	namespace:glm
glm::vec	lib/glm/detail/type_vec1.hpp	/^	struct vec<1, T, P>$/;"	s	namespace:glm
glm::vec	lib/glm/detail/type_vec2.hpp	/^	struct vec<2, T, P>$/;"	s	namespace:glm
glm::vec	lib/glm/detail/type_vec3.hpp	/^	struct vec<3, T, P>$/;"	s	namespace:glm
glm::vec	lib/glm/detail/type_vec4.hpp	/^	struct vec<4, T, P>$/;"	s	namespace:glm
glm::vec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_vec1				vec1;$/;"	t	namespace:glm
glm::vec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_vec1				vec1;$/;"	t	namespace:glm
glm::vec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_vec1			vec1;$/;"	t	namespace:glm
glm::vec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec2			vec2;$/;"	t	namespace:glm
glm::vec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec2			vec2;$/;"	t	namespace:glm
glm::vec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec2		vec2;$/;"	t	namespace:glm
glm::vec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec3			vec3;$/;"	t	namespace:glm
glm::vec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec3			vec3;$/;"	t	namespace:glm
glm::vec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec3		vec3;$/;"	t	namespace:glm
glm::vec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec4			vec4;$/;"	t	namespace:glm
glm::vec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec4			vec4;$/;"	t	namespace:glm
glm::vec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec4		vec4;$/;"	t	namespace:glm
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL vec & operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL vec& operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL vec & operator=(vec const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_SIMD vec(vec<4, T, P> const& v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL vec<4, T, P>& operator=(vec<4, T, P> const & v) GLM_DEFAULT;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT_CTOR	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT_CTOR	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT_CTOR	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_CTOR vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
glm::vec::GLM_DEFAULT_CTOR	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL GLM_CONSTEXPR_SIMD vec() GLM_DEFAULT_CTOR;$/;"	m	struct:glm::vec	access:public
glm::vec::__anon33::r	lib/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::vec::__anon33	access:public
glm::vec::__anon33::s	lib/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::vec::__anon33	access:public
glm::vec::__anon33::x	lib/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::vec::__anon33	access:public
glm::vec::__anon34::r	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
glm::vec::__anon34::s	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
glm::vec::__anon34::x	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
glm::vec::__anon35::__anon36::w	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
glm::vec::__anon35::__anon36::x	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
glm::vec::__anon35::__anon36::y	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
glm::vec::__anon35::__anon36::z	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
glm::vec::__anon35::__anon37::a	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
glm::vec::__anon35::__anon37::b	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
glm::vec::__anon35::__anon37::g	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
glm::vec::__anon35::__anon37::r	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
glm::vec::__anon35::__anon38::p	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
glm::vec::__anon35::__anon38::q	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
glm::vec::__anon35::__anon38::s	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
glm::vec::__anon35::__anon38::t	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
glm::vec::__anon35::data	lib/glm/detail/type_vec4.hpp	/^				typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;$/;"	m	union:glm::vec::__anon35	access:public
glm::vec::__anon39::r	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
glm::vec::__anon39::s	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
glm::vec::__anon39::x	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
glm::vec::__anon40::g	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
glm::vec::__anon40::t	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
glm::vec::__anon40::y	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
glm::vec::__anon41::b	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
glm::vec::__anon41::p	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
glm::vec::__anon41::z	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
glm::vec::__anon42::a	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
glm::vec::__anon42::q	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
glm::vec::__anon42::w	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
glm::vec::__anon43::__anon44::x	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
glm::vec::__anon43::__anon44::y	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
glm::vec::__anon43::__anon44::z	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
glm::vec::__anon43::__anon45::b	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
glm::vec::__anon43::__anon45::g	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
glm::vec::__anon43::__anon45::r	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
glm::vec::__anon43::__anon46::p	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
glm::vec::__anon43::__anon46::s	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
glm::vec::__anon43::__anon46::t	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
glm::vec::__anon47::r	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
glm::vec::__anon47::s	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
glm::vec::__anon47::x	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
glm::vec::__anon48::g	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
glm::vec::__anon48::t	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
glm::vec::__anon48::y	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
glm::vec::__anon49::b	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
glm::vec::__anon49::p	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
glm::vec::__anon49::z	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
glm::vec::__anon50::__anon51::x	lib/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon50::__anon51	access:public
glm::vec::__anon50::__anon51::y	lib/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon50::__anon51	access:public
glm::vec::__anon50::__anon52::g	lib/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon50::__anon52	access:public
glm::vec::__anon50::__anon52::r	lib/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon50::__anon52	access:public
glm::vec::__anon50::__anon53::s	lib/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon50::__anon53	access:public
glm::vec::__anon50::__anon53::t	lib/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon50::__anon53	access:public
glm::vec::__anon54::r	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
glm::vec::__anon54::s	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
glm::vec::__anon54::x	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
glm::vec::__anon55::g	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
glm::vec::__anon55::t	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
glm::vec::__anon55::y	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
glm::vec::bool_type	lib/glm/detail/type_vec1.hpp	/^		typedef vec<1, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
glm::vec::bool_type	lib/glm/detail/type_vec2.hpp	/^		typedef vec<2, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
glm::vec::bool_type	lib/glm/detail/type_vec3.hpp	/^		typedef vec<3, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
glm::vec::bool_type	lib/glm/detail/type_vec4.hpp	/^		typedef vec<4, bool, P> bool_type;$/;"	t	struct:glm::vec	access:public
glm::vec::length	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL static length_type length(){return 1;}$/;"	f	struct:glm::vec	access:public	signature:()
glm::vec::length	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::vec	access:public	signature:()
glm::vec::length	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::vec	access:public	signature:()
glm::vec::length	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::vec	access:public	signature:()
glm::vec::length_type	lib/glm/detail/type_vec1.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
glm::vec::length_type	lib/glm/detail/type_vec2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
glm::vec::length_type	lib/glm/detail/type_vec3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
glm::vec::length_type	lib/glm/detail/type_vec4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
glm::vec::type	lib/glm/detail/type_vec1.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
glm::vec::type	lib/glm/detail/type_vec2.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
glm::vec::type	lib/glm/detail/type_vec3.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
glm::vec::type	lib/glm/detail/type_vec4.hpp	/^		typedef vec<4, T, P> type;$/;"	t	struct:glm::vec	access:public
glm::vec::value_type	lib/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
glm::vec::value_type	lib/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
glm::vec::value_type	lib/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
glm::vec::value_type	lib/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
glm::vec::vec	lib/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1,-1,-2> const& that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1,-1,-2> const& that)
glm::vec::vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(T const & scalar, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & scalar, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)
glm::vec::vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & scalar)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & scalar)
glm::vec::vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & that)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, T const & y, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, T const & y, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & w)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & z, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & z, T const & w)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, detail::_swizzle<2, T, P, F0, F1, -1, -2> const & u)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, detail::_swizzle<2, T, P, F0, F1, -1, -2> const & u)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v, T const & w)
glm::vec::vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<4, T, P, E0, E1, E2, E3> const & that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<4, T, P, E0, E1, E2, E3> const & that)
glm::vec::w	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
glm::vec::x	lib/glm/detail/type_vec1.hpp	/^			T x;$/;"	m	struct:glm::vec	access:public
glm::vec::x	lib/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	access:public
glm::vec::x	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
glm::vec::x	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
glm::vec::y	lib/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	access:public
glm::vec::y	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
glm::vec::y	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
glm::vec::z	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
glm::vec::z	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
glm::word	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm
glm::ww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> ww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::www	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> www(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::wzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
glm::xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
glm::xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
glm::xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::xzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::xzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::ywzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
glm::yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::yzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::yzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm::zzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
glm::zzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
glm_dvec4	lib/glm/simd/platform.h	/^	typedef __m256d		glm_dvec4;$/;"	t
glm_i128_interleave	lib/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave(glm_uvec4 x)$/;"	f	signature:(glm_uvec4 x)
glm_i128_interleave2	lib/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave2(glm_uvec4 x, glm_uvec4 y)$/;"	f	signature:(glm_uvec4 x, glm_uvec4 y)
glm_i64vec4	lib/glm/simd/platform.h	/^	typedef __m256i		glm_i64vec4;$/;"	t
glm_ivec4	lib/glm/simd/platform.h	/^	typedef __m128i		glm_ivec4;$/;"	t
glm_ivec4_abs	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_ivec4 glm_ivec4_abs(glm_ivec4 x)$/;"	f	signature:(glm_ivec4 x)
glm_mat4_add	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_add(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])
glm_mat4_determinant	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant(glm_vec4 const m[4])$/;"	f	signature:(glm_vec4 const m[4])
glm_mat4_determinant_highp	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_highp(glm_vec4 const in[4])$/;"	f	signature:(glm_vec4 const in[4])
glm_mat4_determinant_lowp	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_lowp(glm_vec4 const m[4])$/;"	f	signature:(glm_vec4 const m[4])
glm_mat4_inverse	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in[4], glm_vec4 out[4])
glm_mat4_inverse_lowp	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse_lowp(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in[4], glm_vec4 out[4])
glm_mat4_matrixCompMult	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_matrixCompMult(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])
glm_mat4_mul	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_mul(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])
glm_mat4_mul_vec4	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_mul_vec4(glm_vec4 const m[4], glm_vec4 v)$/;"	f	signature:(glm_vec4 const m[4], glm_vec4 v)
glm_mat4_outerProduct	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_outerProduct(__m128 const & c, __m128 const & r, __m128 out[4])$/;"	f	signature:(__m128 const & c, __m128 const & r, __m128 out[4])
glm_mat4_sub	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_sub(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[4])
glm_mat4_transpose	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_transpose(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	signature:(glm_vec4 const in[4], glm_vec4 out[4])
glm_u64vec4	lib/glm/simd/platform.h	/^	typedef __m256i		glm_u64vec4;$/;"	t
glm_uvec4	lib/glm/simd/platform.h	/^	typedef __m128i		glm_uvec4;$/;"	t
glm_vec1_add	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_add(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec1_div	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_div(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec1_dot	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	signature:(glm_vec4 v1, glm_vec4 v2)
glm_vec1_fma	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_fma(glm_vec4 a, glm_vec4 b, glm_vec4 c)$/;"	f	signature:(glm_vec4 a, glm_vec4 b, glm_vec4 c)
glm_vec1_mul	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_mul(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec1_sqrt_lowp	lib/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_sqrt_lowp(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec1_sub	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_sub(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4	lib/glm/simd/platform.h	/^	typedef __m128		glm_vec4;$/;"	t
glm_vec4_abs	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_abs(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_add	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_add(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4_ceil	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_ceil(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_clamp	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_clamp(glm_vec4 v, glm_vec4 minVal, glm_vec4 maxVal)$/;"	f	signature:(glm_vec4 v, glm_vec4 minVal, glm_vec4 maxVal)
glm_vec4_cross	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_cross(glm_vec4 v1, glm_vec4 v2)$/;"	f	signature:(glm_vec4 v1, glm_vec4 v2)
glm_vec4_distance	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_distance(glm_vec4 p0, glm_vec4 p1)$/;"	f	signature:(glm_vec4 p0, glm_vec4 p1)
glm_vec4_div	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_div(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4_div_lowp	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_div_lowp(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4_dot	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	signature:(glm_vec4 v1, glm_vec4 v2)
glm_vec4_faceforward	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_faceforward(glm_vec4 N, glm_vec4 I, glm_vec4 Nref)$/;"	f	signature:(glm_vec4 N, glm_vec4 I, glm_vec4 Nref)
glm_vec4_floor	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_floor(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_fma	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_fma(glm_vec4 a, glm_vec4 b, glm_vec4 c)$/;"	f	signature:(glm_vec4 a, glm_vec4 b, glm_vec4 c)
glm_vec4_fract	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_fract(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_inf	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_inf(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_length	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_length(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_mix	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mix(glm_vec4 v1, glm_vec4 v2, glm_vec4 a)$/;"	f	signature:(glm_vec4 v1, glm_vec4 v2, glm_vec4 a)
glm_vec4_mod	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mod(glm_vec4 x, glm_vec4 y)$/;"	f	signature:(glm_vec4 x, glm_vec4 y)
glm_vec4_mul	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mul(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4_mul_mat4	lib/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_mul_mat4(glm_vec4 v, glm_vec4 const m[4])$/;"	f	signature:(glm_vec4 v, glm_vec4 const m[4])
glm_vec4_nan	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_nan(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_normalize	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_normalize(glm_vec4 v)$/;"	f	signature:(glm_vec4 v)
glm_vec4_reflect	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_reflect(glm_vec4 I, glm_vec4 N)$/;"	f	signature:(glm_vec4 I, glm_vec4 N)
glm_vec4_refract	lib/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_refract(glm_vec4 I, glm_vec4 N, glm_vec4 eta)$/;"	f	signature:(glm_vec4 I, glm_vec4 N, glm_vec4 eta)
glm_vec4_round	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_round(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_roundEven	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_roundEven(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_sign	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sign(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_smoothstep	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_smoothstep(glm_vec4 edge0, glm_vec4 edge1, glm_vec4 x)$/;"	f	signature:(glm_vec4 edge0, glm_vec4 edge1, glm_vec4 x)
glm_vec4_sqrt_lowp	lib/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sqrt_lowp(glm_vec4 x)$/;"	f	signature:(glm_vec4 x)
glm_vec4_step	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_step(glm_vec4 edge, glm_vec4 x)$/;"	f	signature:(glm_vec4 edge, glm_vec4 x)
glm_vec4_sub	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sub(glm_vec4 a, glm_vec4 b)$/;"	f	signature:(glm_vec4 a, glm_vec4 b)
glm_vec4_swizzle_xyzw	lib/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_swizzle_xyzw(glm_vec4 a)$/;"	f	signature:(glm_vec4 a)
globalAlpha	lib/vulkan/vk_icd.h	/^    float globalAlpha;$/;"	m	struct:__anon83	access:public
globalAlpha	lib/vulkan/vulkan.h	/^    float                             globalAlpha;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
glue3	lib/__assimp/Compiler/pstdint.h	819;"	d
glue3	lib/assimp/Compiler/pstdint.h	790;"	d
glue3_aux	lib/__assimp/Compiler/pstdint.h	818;"	d
glue3_aux	lib/assimp/Compiler/pstdint.h	789;"	d
graphics	inc/device_manager.h	/^		uint32_t graphics = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
graphicsQueue	/home/al/amvk/inc/state.h	/^	VkQueue graphicsQueue;$/;"	m	struct:State	access:public
graphicsQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t graphicsQueueIndex;$/;"	m	struct:State	access:public
gtx	lib/glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	lib/glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
guard	inc/renderer.h	/^	Skinned guard;$/;"	m	class:Renderer	access:private
h	lib/stb/stb_image.h	/^      int h,v;$/;"	m	struct:__anon63::__anon64	access:public
h	lib/stb/stb_image.h	/^   int w,h;$/;"	m	struct:__anon74	access:public
h2	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
ha	lib/stb/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon63::__anon64	access:public
handleCmd	src/engine.cpp	/^void Engine::handleCmd(struct android_app *app, int32_t cmd)$/;"	f	class:Engine	signature:(struct android_app *app, int32_t cmd)
handleInput	src/engine.cpp	/^int32_t Engine::handleInput(android_app *app, AInputEvent *event)$/;"	f	class:Engine	signature:(android_app *app, AInputEvent *event)
handleMovement	src/engine.cpp	/^void Engine::handleMovement(double dt)$/;"	f	class:Engine	signature:(double dt)
hasCache	inc/pipeline_cache.h	/^    bool hasCache;$/;"	m	struct:PipelineCacheInfo	access:public
hasFocus	inc/engine.h	/^    bool hasFocus;$/;"	m	class:Engine	access:public
hash	inc/texture_data.h	/^    template<> struct hash<TextureDesc> {$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 2, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 3, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 4, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 2, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 3, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 4, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 2, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 3, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 4, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::tquat<T,P>>$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<1, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<2, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<3, T,P> >$/;"	s	namespace:std
hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<4, T,P> >$/;"	s	namespace:std
hd	lib/stb/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon63::__anon64	access:public
hdata	lib/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail
heapIndex	lib/vulkan/vulkan.h	/^    uint32_t                 heapIndex;$/;"	m	struct:VkMemoryType	access:public
height	inc/g_buffer.h	/^	int32_t width, height;$/;"	m	class:GBuffer	access:public
height	inc/image_info.h	/^	uint32_t width, height;$/;"	m	class:ImageInfo	access:public
height	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
height	lib/vulkan/vulkan.h	/^    float    height;$/;"	m	struct:VkViewport	access:public
height	lib/vulkan/vulkan.h	/^    uint32_t                    height;$/;"	m	struct:VkFramebufferCreateInfo	access:public
height	lib/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent2D	access:public
height	lib/vulkan/vulkan.h	/^    uint32_t    height;$/;"	m	struct:VkExtent3D	access:public
heightImages	inc/shape/model.h	/^			heightImages, $/;"	m	struct:Model::Material	access:public
heightIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
highp	lib/glm/detail/precision.hpp	/^		highp = packed_highp,$/;"	e	enum:glm::precision
highp_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_bvec1_t			highp_bvec1;$/;"	t	namespace:glm
highp_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, highp>		highp_bvec1_t;$/;"	t	namespace:glm
highp_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm
highp_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm
highp_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm
highp_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm
highp_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, highp>		highp_dmat2;$/;"	t	namespace:glm
highp_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, highp>		highp_dmat2x2;$/;"	t	namespace:glm
highp_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, highp>		highp_dmat2x3;$/;"	t	namespace:glm
highp_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, highp>		highp_dmat2x4;$/;"	t	namespace:glm
highp_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, highp>		highp_dmat3;$/;"	t	namespace:glm
highp_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, highp>		highp_dmat3x2;$/;"	t	namespace:glm
highp_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, highp>		highp_dmat3x3;$/;"	t	namespace:glm
highp_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, highp>		highp_dmat3x4;$/;"	t	namespace:glm
highp_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, highp>		highp_dmat4;$/;"	t	namespace:glm
highp_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, highp>		highp_dmat4x2;$/;"	t	namespace:glm
highp_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, highp>		highp_dmat4x3;$/;"	t	namespace:glm
highp_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, highp>		highp_dmat4x4;$/;"	t	namespace:glm
highp_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, highp>	highp_dquat;$/;"	t	namespace:glm
highp_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm
highp_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_dvec1_t			highp_dvec1;$/;"	t	namespace:glm
highp_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, highp>	highp_dvec1_t;$/;"	t	namespace:glm
highp_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, highp>	highp_dvec2;$/;"	t	namespace:glm
highp_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, highp>	highp_dvec3;$/;"	t	namespace:glm
highp_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, highp>	highp_dvec4;$/;"	t	namespace:glm
highp_f32	lib/glm/fwd.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm
highp_f32mat2	lib/glm/fwd.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm
highp_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm
highp_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm
highp_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm
highp_f32mat3	lib/glm/fwd.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm
highp_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm
highp_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm
highp_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm
highp_f32mat4	lib/glm/fwd.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm
highp_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm
highp_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm
highp_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm
highp_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, highp> highp_f32quat;$/;"	t	namespace:glm
highp_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, highp> highp_f32vec1;$/;"	t	namespace:glm
highp_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, highp> highp_f32vec2;$/;"	t	namespace:glm
highp_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, highp> highp_f32vec3;$/;"	t	namespace:glm
highp_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, highp> highp_f32vec4;$/;"	t	namespace:glm
highp_f64	lib/glm/fwd.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm
highp_f64mat2	lib/glm/fwd.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm
highp_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm
highp_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm
highp_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm
highp_f64mat3	lib/glm/fwd.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm
highp_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm
highp_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm
highp_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm
highp_f64mat4	lib/glm/fwd.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm
highp_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm
highp_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm
highp_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm
highp_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, highp> highp_f64quat;$/;"	t	namespace:glm
highp_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, highp> highp_f64vec1;$/;"	t	namespace:glm
highp_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, highp> highp_f64vec2;$/;"	t	namespace:glm
highp_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, highp> highp_f64vec3;$/;"	t	namespace:glm
highp_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, highp> highp_f64vec4;$/;"	t	namespace:glm
highp_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm
highp_float	lib/glm/detail/type_float.hpp	/^	typedef highp_float_t		highp_float;$/;"	t	namespace:glm
highp_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 highp_float32;$/;"	t	namespace:glm
highp_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 highp_float32_t;$/;"	t	namespace:glm
highp_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 highp_float64;$/;"	t	namespace:glm
highp_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 highp_float64_t;$/;"	t	namespace:glm
highp_float_t	lib/glm/detail/type_float.hpp	/^	typedef double				highp_float_t;$/;"	t	namespace:glm
highp_fmat2	lib/glm/fwd.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm
highp_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp> highp_fmat2x2;$/;"	t	namespace:glm
highp_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp> highp_fmat2x3;$/;"	t	namespace:glm
highp_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp> highp_fmat2x4;$/;"	t	namespace:glm
highp_fmat3	lib/glm/fwd.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm
highp_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp> highp_fmat3x2;$/;"	t	namespace:glm
highp_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp> highp_fmat3x3;$/;"	t	namespace:glm
highp_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp> highp_fmat3x4;$/;"	t	namespace:glm
highp_fmat4	lib/glm/fwd.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm
highp_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp> highp_fmat4x2;$/;"	t	namespace:glm
highp_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp> highp_fmat4x3;$/;"	t	namespace:glm
highp_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp> highp_fmat4x4;$/;"	t	namespace:glm
highp_fquat	lib/glm/fwd.hpp	/^	typedef highp_quat			highp_fquat;$/;"	t	namespace:glm
highp_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, highp> highp_fvec1;$/;"	t	namespace:glm
highp_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, highp> highp_fvec2;$/;"	t	namespace:glm
highp_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, highp> highp_fvec3;$/;"	t	namespace:glm
highp_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, highp> highp_fvec4;$/;"	t	namespace:glm
highp_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
highp_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm
highp_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm
highp_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm
highp_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm
highp_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm
highp_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
highp_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm
highp_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm
highp_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm
highp_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm
highp_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm
highp_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
highp_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm
highp_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm
highp_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm
highp_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm
highp_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm
highp_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
highp_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm
highp_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, highp> highp_i8vec1;$/;"	t	namespace:glm
highp_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, highp> highp_i8vec2;$/;"	t	namespace:glm
highp_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, highp> highp_i8vec3;$/;"	t	namespace:glm
highp_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, highp> highp_i8vec4;$/;"	t	namespace:glm
highp_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2;$/;"	t	namespace:glm
highp_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2x2;$/;"	t	namespace:glm
highp_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, highp>				highp_imat2x3;$/;"	t	namespace:glm
highp_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, highp>				highp_imat2x4;$/;"	t	namespace:glm
highp_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3;$/;"	t	namespace:glm
highp_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, highp>				highp_imat3x2;$/;"	t	namespace:glm
highp_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3x3;$/;"	t	namespace:glm
highp_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, highp>				highp_imat3x4;$/;"	t	namespace:glm
highp_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4;$/;"	t	namespace:glm
highp_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, highp>				highp_imat4x2;$/;"	t	namespace:glm
highp_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, highp>				highp_imat4x3;$/;"	t	namespace:glm
highp_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4x4;$/;"	t	namespace:glm
highp_int	lib/glm/detail/type_int.hpp	/^	typedef detail::highp_int_t				highp_int;$/;"	t	namespace:glm
highp_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
highp_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm
highp_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
highp_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm
highp_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
highp_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm
highp_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
highp_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm
highp_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
highp_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm
highp_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
highp_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm
highp_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
highp_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm
highp_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
highp_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm
highp_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						highp_int_t;$/;"	t	namespace:glm::detail
highp_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_ivec1_t			highp_ivec1;$/;"	t	namespace:glm
highp_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, highp>		highp_ivec1_t;$/;"	t	namespace:glm
highp_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm
highp_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm
highp_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm
highp_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm
highp_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm
highp_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm
highp_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm
highp_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm
highp_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm
highp_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm
highp_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm
highp_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm
highp_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm
highp_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm
highp_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm
highp_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm
highp_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm
highp_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm
highp_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm
highp_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm
highp_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm
highp_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm
highp_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm
highp_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm
highp_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm
highp_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm
highp_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm
highp_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, highp>		highp_quat;$/;"	t	namespace:glm
highp_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
highp_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm
highp_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm
highp_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm
highp_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm
highp_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm
highp_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
highp_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm
highp_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm
highp_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm
highp_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm
highp_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm
highp_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
highp_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm
highp_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm
highp_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm
highp_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm
highp_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm
highp_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
highp_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm
highp_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, highp> highp_u8vec1;$/;"	t	namespace:glm
highp_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, highp> highp_u8vec2;$/;"	t	namespace:glm
highp_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, highp> highp_u8vec3;$/;"	t	namespace:glm
highp_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, highp> highp_u8vec4;$/;"	t	namespace:glm
highp_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::highp_uint_t			highp_uint;$/;"	t	namespace:glm
highp_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
highp_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm
highp_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
highp_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm
highp_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
highp_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm
highp_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
highp_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm
highp_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
highp_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm
highp_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
highp_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm
highp_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
highp_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm
highp_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
highp_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm
highp_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					highp_uint_t;$/;"	t	namespace:glm::detail
highp_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2;	$/;"	t	namespace:glm
highp_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2x2;$/;"	t	namespace:glm
highp_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, highp>				highp_umat2x3;$/;"	t	namespace:glm
highp_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, highp>				highp_umat2x4;$/;"	t	namespace:glm
highp_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3;$/;"	t	namespace:glm
highp_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, highp>				highp_umat3x2;$/;"	t	namespace:glm
highp_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3x3;$/;"	t	namespace:glm
highp_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, highp>				highp_umat3x4;$/;"	t	namespace:glm
highp_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4;$/;"	t	namespace:glm
highp_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, highp>				highp_umat4x2;$/;"	t	namespace:glm
highp_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, highp>				highp_umat4x3;$/;"	t	namespace:glm
highp_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4x4;$/;"	t	namespace:glm
highp_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_uvec1_t			highp_uvec1;$/;"	t	namespace:glm
highp_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, highp>		highp_uvec1_t;$/;"	t	namespace:glm
highp_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, highp>		highp_uvec2;$/;"	t	namespace:glm
highp_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, highp>		highp_uvec3;$/;"	t	namespace:glm
highp_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, highp>		highp_uvec4;$/;"	t	namespace:glm
highp_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, highp> highp_vec1;$/;"	t	namespace:glm
highp_vec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_vec1_t			highp_vec1;$/;"	t	namespace:glm
highp_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, highp>	highp_vec1_t;$/;"	t	namespace:glm
highp_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm
highp_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, highp> highp_vec2;$/;"	t	namespace:glm
highp_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm
highp_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, highp> highp_vec3;$/;"	t	namespace:glm
highp_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm
highp_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, highp> highp_vec4;$/;"	t	namespace:glm
hinstance	lib/vulkan/vk_icd.h	/^    HINSTANCE hinstance;$/;"	m	struct:__anon80	access:public
hinstance	lib/vulkan/vulkan.h	/^    HINSTANCE                       hinstance;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
hs	lib/stb/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon65	access:public
hsz	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
huff_ac	lib/stb/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon63	access:public
huff_dc	lib/stb/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon63	access:public
hwnd	lib/vulkan/vk_icd.h	/^    HWND hwnd;$/;"	m	struct:__anon80	access:public
hwnd	lib/vulkan/vulkan.h	/^    HWND                            hwnd;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
i16	lib/glm/fwd.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
i16vec1	lib/glm/fwd.hpp	/^	typedef highp_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	lib/glm/fwd.hpp	/^	typedef lowp_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	lib/glm/fwd.hpp	/^	typedef mediump_i16vec1			i16vec1;$/;"	t	namespace:glm
i16vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, defaultp> i16vec1;$/;"	t	namespace:glm
i16vec2	lib/glm/fwd.hpp	/^	typedef highp_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	lib/glm/fwd.hpp	/^	typedef lowp_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	lib/glm/fwd.hpp	/^	typedef mediump_i16vec2			i16vec2;$/;"	t	namespace:glm
i16vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, defaultp> i16vec2;$/;"	t	namespace:glm
i16vec3	lib/glm/fwd.hpp	/^	typedef highp_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	lib/glm/fwd.hpp	/^	typedef lowp_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	lib/glm/fwd.hpp	/^	typedef mediump_i16vec3			i16vec3;$/;"	t	namespace:glm
i16vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, defaultp> i16vec3;$/;"	t	namespace:glm
i16vec4	lib/glm/fwd.hpp	/^	typedef highp_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	lib/glm/fwd.hpp	/^	typedef lowp_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	lib/glm/fwd.hpp	/^	typedef mediump_i16vec4			i16vec4;$/;"	t	namespace:glm
i16vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, defaultp> i16vec4;$/;"	t	namespace:glm
i32	lib/glm/fwd.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
i32vec1	lib/glm/fwd.hpp	/^	typedef highp_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	lib/glm/fwd.hpp	/^	typedef lowp_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	lib/glm/fwd.hpp	/^	typedef mediump_i32vec1			i32vec1;$/;"	t	namespace:glm
i32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, defaultp> i32vec1;$/;"	t	namespace:glm
i32vec2	lib/glm/fwd.hpp	/^	typedef highp_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	lib/glm/fwd.hpp	/^	typedef lowp_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	lib/glm/fwd.hpp	/^	typedef mediump_i32vec2			i32vec2;$/;"	t	namespace:glm
i32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, defaultp> i32vec2;$/;"	t	namespace:glm
i32vec3	lib/glm/fwd.hpp	/^	typedef highp_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	lib/glm/fwd.hpp	/^	typedef lowp_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	lib/glm/fwd.hpp	/^	typedef mediump_i32vec3			i32vec3;$/;"	t	namespace:glm
i32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, defaultp> i32vec3;$/;"	t	namespace:glm
i32vec4	lib/glm/fwd.hpp	/^	typedef highp_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	lib/glm/fwd.hpp	/^	typedef lowp_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	lib/glm/fwd.hpp	/^	typedef mediump_i32vec4			i32vec4;$/;"	t	namespace:glm
i32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, defaultp> i32vec4;$/;"	t	namespace:glm
i64	lib/glm/fwd.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
i64vec1	lib/glm/fwd.hpp	/^	typedef highp_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	lib/glm/fwd.hpp	/^	typedef lowp_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	lib/glm/fwd.hpp	/^	typedef mediump_i64vec1			i64vec1;$/;"	t	namespace:glm
i64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, defaultp> i64vec1;$/;"	t	namespace:glm
i64vec2	lib/glm/fwd.hpp	/^	typedef highp_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	lib/glm/fwd.hpp	/^	typedef lowp_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	lib/glm/fwd.hpp	/^	typedef mediump_i64vec2			i64vec2;$/;"	t	namespace:glm
i64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, defaultp> i64vec2;$/;"	t	namespace:glm
i64vec3	lib/glm/fwd.hpp	/^	typedef highp_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	lib/glm/fwd.hpp	/^	typedef lowp_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	lib/glm/fwd.hpp	/^	typedef mediump_i64vec3			i64vec3;$/;"	t	namespace:glm
i64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, defaultp> i64vec3;$/;"	t	namespace:glm
i64vec4	lib/glm/fwd.hpp	/^	typedef highp_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	lib/glm/fwd.hpp	/^	typedef lowp_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	lib/glm/fwd.hpp	/^	typedef mediump_i64vec4			i64vec4;$/;"	t	namespace:glm
i64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, defaultp> i64vec4;$/;"	t	namespace:glm
i8	lib/glm/fwd.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
i8vec1	lib/glm/fwd.hpp	/^	typedef highp_i8vec1			i8vec1;$/;"	t	namespace:glm
i8vec1	lib/glm/fwd.hpp	/^	typedef lowp_i8vec1				i8vec1;$/;"	t	namespace:glm
i8vec1	lib/glm/fwd.hpp	/^	typedef mediump_i8vec1			i8vec1;$/;"	t	namespace:glm
i8vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, defaultp> i8vec1;$/;"	t	namespace:glm
i8vec2	lib/glm/fwd.hpp	/^	typedef highp_i8vec2			i8vec2;$/;"	t	namespace:glm
i8vec2	lib/glm/fwd.hpp	/^	typedef lowp_i8vec2				i8vec2;$/;"	t	namespace:glm
i8vec2	lib/glm/fwd.hpp	/^	typedef mediump_i8vec2			i8vec2;$/;"	t	namespace:glm
i8vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, defaultp> i8vec2;$/;"	t	namespace:glm
i8vec3	lib/glm/fwd.hpp	/^	typedef highp_i8vec3			i8vec3;$/;"	t	namespace:glm
i8vec3	lib/glm/fwd.hpp	/^	typedef lowp_i8vec3				i8vec3;$/;"	t	namespace:glm
i8vec3	lib/glm/fwd.hpp	/^	typedef mediump_i8vec3			i8vec3;$/;"	t	namespace:glm
i8vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, defaultp> i8vec3;$/;"	t	namespace:glm
i8vec4	lib/glm/fwd.hpp	/^	typedef highp_i8vec4			i8vec4;$/;"	t	namespace:glm
i8vec4	lib/glm/fwd.hpp	/^	typedef lowp_i8vec4				i8vec4;$/;"	t	namespace:glm
i8vec4	lib/glm/fwd.hpp	/^	typedef mediump_i8vec4			i8vec4;	$/;"	t	namespace:glm
i8vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, defaultp> i8vec4;$/;"	t	namespace:glm
id	lib/__assimp/cexport.h	/^    const char* id;$/;"	m	struct:aiExportFormatDesc	access:public
id	lib/assimp/cexport.h	/^    const char* id;$/;"	m	struct:aiExportFormatDesc	access:public
id	lib/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	access:public
id	lib/stb/stb_image.h	/^      int id;$/;"	m	struct:__anon63::__anon64	access:public
idata	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
idct_block_kernel	lib/stb/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon63	access:public
image	inc/g_buffer.h	/^	VkImage image;$/;"	m	struct:FramebufferAttachment	access:public
image	inc/image_info.h	/^	VkImage image;$/;"	m	class:ImageInfo	access:public
image	inc/shape/skinned.h	/^		ImageInfo* image;$/;"	m	struct:Skinned::MaterialTexture	access:public
image	lib/vulkan/vulkan.h	/^    VkImage                           image;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
image	lib/vulkan/vulkan.h	/^    VkImage                      image;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
image	lib/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageMemoryBarrier	access:public
image	lib/vulkan/vulkan.h	/^    VkImage                    image;$/;"	m	struct:VkImageViewCreateInfo	access:public
image	lib/vulkan/vulkan.h	/^    VkImage            image;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
imageAquiredSemaphore	inc/renderer.h	/^	VkSemaphore imageAquiredSemaphore;$/;"	m	class:Renderer	access:private
imageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                         imageArrayLayers;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    imageBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
imageColorSpace	lib/vulkan/vulkan.h	/^    VkColorSpaceKHR                  imageColorSpace;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageCubeArray	lib/vulkan/vulkan.h	/^    VkBool32    imageCubeArray;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
imageExtent	lib/vulkan/vk_icd.h	/^    VkExtent2D imageExtent;$/;"	m	struct:__anon83	access:public
imageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                        imageExtent;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
imageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       imageExtent;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageExtent	lib/vulkan/vulkan.h	/^    VkExtent3D                  imageExtent;$/;"	m	struct:VkBufferImageCopy	access:public
imageFormat	lib/vulkan/vulkan.h	/^    VkFormat                         imageFormat;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageGranularity	lib/vulkan/vulkan.h	/^    VkExtent3D                  imageGranularity;$/;"	m	struct:VkSparseImageFormatProperties	access:public
imageIndex	inc/renderer.h	/^	uint32_t imageIndex;$/;"	m	class:Renderer	access:private
imageLayout	lib/vulkan/vulkan.h	/^    VkImageLayout    imageLayout;$/;"	m	struct:VkDescriptorImageInfo	access:public
imageMipTailFirstLod	lib/vulkan/vulkan.h	/^    uint32_t                         imageMipTailFirstLod;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
imageMipTailOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailOffset;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
imageMipTailSize	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailSize;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
imageMipTailStride	lib/vulkan/vulkan.h	/^    VkDeviceSize                     imageMipTailStride;$/;"	m	struct:VkSparseImageMemoryRequirements	access:public
imageOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  imageOffset;$/;"	m	struct:VkBufferImageCopy	access:public
imageOpaqueBindCount	lib/vulkan/vulkan.h	/^    uint32_t                                    imageOpaqueBindCount;$/;"	m	struct:VkBindSparseInfo	access:public
imageSharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode                    imageSharingMode;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    imageSubresource;$/;"	m	struct:VkBufferImageCopy	access:public
imageType	lib/vulkan/vulkan.h	/^    VkImageType              imageType;$/;"	m	struct:VkImageCreateInfo	access:public
imageUsage	lib/vulkan/vulkan.h	/^    VkImageUsageFlags                imageUsage;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
imageView	inc/image_info.h	/^	VkImageView imageView;$/;"	m	class:ImageInfo	access:public
imageView	lib/vulkan/vulkan.h	/^    VkImageView      imageView;$/;"	m	struct:VkDescriptorImageInfo	access:public
imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm
imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm
imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm
imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm
imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm
imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm
imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm
imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm
imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm
imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm
imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm
imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm
img_buffer	lib/stb/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon60	access:public
img_buffer_end	lib/stb/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon60	access:public
img_buffer_original	lib/stb/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon60	access:public
img_buffer_original_end	lib/stb/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon60	access:public
img_comp	lib/stb/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon63	typeref:struct:__anon63::__anon64	access:public
img_h_max	lib/stb/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon63	access:public
img_mcu_h	lib/stb/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon63	access:public
img_mcu_w	lib/stb/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon63	access:public
img_mcu_x	lib/stb/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon63	access:public
img_mcu_y	lib/stb/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon63	access:public
img_n	lib/stb/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon60	access:public
img_out_n	lib/stb/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon60	access:public
img_v_max	lib/stb/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon63	access:public
img_x	lib/stb/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon60	access:public
img_y	lib/stb/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon60	access:public
implementationVersion	lib/vulkan/vulkan.h	/^    uint32_t    implementationVersion;$/;"	m	struct:VkLayerProperties	access:public
importer	inc/shape/skinned.h	/^    Assimp::Importer importer;    $/;"	m	class:Skinned	access:protected
independentBlend	lib/vulkan/vulkan.h	/^    VkBool32    independentBlend;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
index	inc/shape/skinned.h	/^		uint32_t index;$/;"	m	struct:Skinned::MaterialTexture	access:public
index	lib/vulkan/libspirv.h	/^  size_t index;$/;"	m	struct:spv_position_t	access:public
indexBufferOffset	inc/shape/model.h	/^				 indexBufferOffset; $/;"	m	class:Model	access:public
indexBufferOffset	inc/shape/skinned.h	/^				 indexBufferOffset;$/;"	m	class:Skinned	access:public
indexBufferOffset	inc/shape/sphere.h	/^	VkDeviceSize vertexBufferOffset, indexBufferOffset;$/;"	m	class:Sphere	access:public
indexCount	lib/vulkan/vulkan.h	/^    uint32_t    indexCount;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
info	lib/__assimp/Logger.hpp	/^inline void Logger::info(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
info	lib/assimp/Logger.hpp	/^inline void Logger::info(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
inheritedQueries	lib/vulkan/vulkan.h	/^    VkBool32    inheritedQueries;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
init	src/engine.cpp	/^void Engine::init()$/;"	f	class:Engine	signature:()
init	src/engine.cpp	/^void Engine::init(android_app* state)$/;"	f	class:Engine	signature:(android_app* state)
init	src/g_buffer.cpp	/^void GBuffer::init(const VkPhysicalDevice& physicalDevice, const VkDevice& device, uint32_t width, uint32_t height)$/;"	f	class:GBuffer	signature:(const VkPhysicalDevice& physicalDevice, const VkDevice& device, uint32_t width, uint32_t height)
init	src/renderer.cpp	/^void Renderer::init()$/;"	f	class:Renderer	signature:()
init	src/scene_lights.cpp	/^void SceneLights::init() $/;"	f	class:SceneLights	signature:()
init	src/shape/fullscreen_quad.cpp	/^void FullscreenQuad::init() $/;"	f	class:FullscreenQuad	signature:()
init	src/shape/model.cpp	/^void Model::init(const char* modelPath, unsigned int pFlags)$/;"	f	class:Model	signature:(const char* modelPath, unsigned int pFlags)
init	src/shape/model.cpp	/^void Model::init(std::string modelPath, unsigned int pFlags) $/;"	f	class:Model	signature:(std::string modelPath, unsigned int pFlags)
init	src/shape/point_light.cpp	/^void PointLight::init(State& state, const glm::vec3& color, const glm::vec3& position, float radius, float specPower \/* = 1.0f *\/)$/;"	f	class:PointLight	signature:(State& state, const glm::vec3& color, const glm::vec3& position, float radius, float specPower )
init	src/shape/skinned.cpp	/^void Skinned::init(const char* modelPath, unsigned int pFlags, ModelFlags modelFlags)$/;"	f	class:Skinned	signature:(const char* modelPath, unsigned int pFlags, ModelFlags modelFlags)
init	src/shape/skinned.cpp	/^void Skinned::init(std::string modelPath, unsigned int pFlags, ModelFlags modelFlags) $/;"	f	class:Skinned	signature:(std::string modelPath, unsigned int pFlags, ModelFlags modelFlags)
init	src/shape/sphere.cpp	/^void Sphere::init(uint32_t numStacks, uint32_t numSlices, float radius \/* = 1.0f *\/)$/;"	f	class:Sphere	signature:(uint32_t numStacks, uint32_t numSlices, float radius )
init	src/shape/tquad.cpp	/^void TQuad::init()$/;"	f	class:TQuad	signature:()
initBinPath	src/file_manager.cpp	/^void FileManager::initBinPath()$/;"	f	class:FileManager	signature:()
initPrevPos	inc/camera.h	/^	bool initPrevPos;	$/;"	m	class:Camera	access:private
initWindow	src/window.cpp	/^void Window::initWindow(Engine& engine)$/;"	f	class:Window	signature:(Engine& engine)
initialDataSize	lib/vulkan/vulkan.h	/^    size_t                        initialDataSize;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
initialLayout	lib/vulkan/vulkan.h	/^    VkImageLayout                   initialLayout;$/;"	m	struct:VkAttachmentDescription	access:public
initialLayout	lib/vulkan/vulkan.h	/^    VkImageLayout            initialLayout;$/;"	m	struct:VkImageCreateInfo	access:public
inline	lib/vulkan/vk_sdk_platform.h	28;"	d
inline	lib/vulkan/vk_sdk_platform.h	29;"	d
inputAssemblyNoRestart	inc/creator/pipeline_builder.h	/^inline VkPipelineInputAssemblyStateCreateInfo inputAssemblyNoRestart(VkPrimitiveTopology topology) $/;"	f	namespace:PipelineBuilder	signature:(VkPrimitiveTopology topology)
inputAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        inputAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
inputRate	lib/vulkan/vulkan.h	/^    VkVertexInputRate    inputRate;$/;"	m	struct:VkVertexInputBindingDescription	access:public
instance	/home/al/amvk/inc/state.h	/^	VkInstance instance;$/;"	m	struct:State	access:public
instanceCount	lib/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
instanceCount	lib/vulkan/vulkan.h	/^    uint32_t    instanceCount;$/;"	m	struct:VkDrawIndirectCommand	access:public
int1	lib/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int16	lib/glm/detail/type_int.hpp	/^		typedef std::int16_t				int16;$/;"	t	namespace:glm::detail
int16	lib/glm/detail/type_int.hpp	/^	typedef detail::int16					int16;$/;"	t	namespace:glm
int16	lib/glm/fwd.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
int16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef signed int int16_t;$/;"	t
int16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef signed short int16_t;$/;"	t
int16_t	lib/assimp/Compiler/pstdint.h	/^typedef signed int int16_t;$/;"	t
int16_t	lib/assimp/Compiler/pstdint.h	/^typedef signed short int16_t;$/;"	t
int16_t	lib/vulkan/vk_platform.h	/^        typedef signed   __int16 int16_t;$/;"	t
int1x1	lib/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2	lib/glm/gtx/compatibility.hpp	/^	typedef vec<2, int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3	lib/glm/gtx/compatibility.hpp	/^	typedef vec<3, int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int32	lib/glm/detail/type_int.hpp	/^		typedef std::int32_t				int32;$/;"	t	namespace:glm::detail
int32	lib/glm/detail/type_int.hpp	/^	typedef detail::int32					int32;$/;"	t	namespace:glm
int32	lib/glm/fwd.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
int32	lib/vulkan/vulkan.h	/^    int32_t     int32[4];$/;"	m	union:VkClearColorValue	access:public
int32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef signed int int32_t;$/;"	t
int32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef signed long int32_t;$/;"	t
int32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef signed short int32_t;$/;"	t
int32_t	lib/assimp/Compiler/pstdint.h	/^typedef signed int int32_t;$/;"	t
int32_t	lib/assimp/Compiler/pstdint.h	/^typedef signed long int32_t;$/;"	t
int32_t	lib/assimp/Compiler/pstdint.h	/^typedef signed short int32_t;$/;"	t
int32_t	lib/vulkan/vk_platform.h	/^        typedef signed   __int32 int32_t;$/;"	t
int3x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4	lib/glm/gtx/compatibility.hpp	/^	typedef vec<4, int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x2	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x3	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x4	lib/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int64	lib/glm/detail/type_int.hpp	/^		typedef std::int64_t				int64;$/;"	t	namespace:glm::detail
int64	lib/glm/detail/type_int.hpp	/^	typedef detail::int64					int64;$/;"	t	namespace:glm
int64	lib/glm/fwd.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
int64_t	lib/__assimp/Compiler/pstdint.h	/^   __extension__ typedef long long int64_t;$/;"	t
int64_t	lib/__assimp/Compiler/pstdint.h	/^   typedef __int64 int64_t;$/;"	t
int64_t	lib/__assimp/Compiler/pstdint.h	/^   typedef long long int64_t;$/;"	t
int64_t	lib/assimp/Compiler/pstdint.h	/^      __extension__ typedef long long int64_t;$/;"	t
int64_t	lib/assimp/Compiler/pstdint.h	/^typedef __int64 int64_t;$/;"	t
int64_t	lib/assimp/Compiler/pstdint.h	/^typedef long long int64_t;$/;"	t
int64_t	lib/vulkan/vk_platform.h	/^        typedef signed   __int64 int64_t;$/;"	t
int8	lib/glm/detail/type_int.hpp	/^		typedef std::int8_t					int8;$/;"	t	namespace:glm::detail
int8	lib/glm/detail/type_int.hpp	/^	typedef detail::int8					int8;$/;"	t	namespace:glm
int8	lib/glm/fwd.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
int8_t	lib/__assimp/Compiler/pstdint.h	/^    typedef signed char int8_t;$/;"	t
int8_t	lib/assimp/Compiler/pstdint.h	/^typedef signed char int8_t;$/;"	t
int8_t	lib/vulkan/vk_platform.h	/^        typedef signed   __int8  int8_t;$/;"	t
int_fast16_t	lib/__assimp/Compiler/pstdint.h	/^typedef  int_least16_t  int_fast16_t;$/;"	t
int_fast16_t	lib/assimp/Compiler/pstdint.h	/^typedef  int_least16_t  int_fast16_t;$/;"	t
int_fast32_t	lib/__assimp/Compiler/pstdint.h	/^typedef  int_least32_t  int_fast32_t;$/;"	t
int_fast32_t	lib/assimp/Compiler/pstdint.h	/^typedef  int_least32_t  int_fast32_t;$/;"	t
int_fast64_t	lib/__assimp/Compiler/pstdint.h	/^  typedef  int_least64_t  int_fast64_t;$/;"	t
int_fast64_t	lib/assimp/Compiler/pstdint.h	/^  typedef  int_least64_t  int_fast64_t;$/;"	t
int_fast8_t	lib/__assimp/Compiler/pstdint.h	/^typedef   int_least8_t   int_fast8_t;$/;"	t
int_fast8_t	lib/assimp/Compiler/pstdint.h	/^typedef   int_least8_t   int_fast8_t;$/;"	t
int_least16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef  int16_t  int_least16_t;$/;"	t
int_least16_t	lib/assimp/Compiler/pstdint.h	/^  typedef  int16_t  int_least16_t;$/;"	t
int_least32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef  int32_t  int_least32_t;$/;"	t
int_least32_t	lib/assimp/Compiler/pstdint.h	/^  typedef  int32_t  int_least32_t;$/;"	t
int_least64_t	lib/__assimp/Compiler/pstdint.h	/^    typedef  int64_t  int_least64_t;$/;"	t
int_least64_t	lib/assimp/Compiler/pstdint.h	/^    typedef  int64_t  int_least64_t;$/;"	t
int_least8_t	lib/__assimp/Compiler/pstdint.h	/^  typedef   int8_t   int_least8_t;$/;"	t
int_least8_t	lib/assimp/Compiler/pstdint.h	/^  typedef   int8_t   int_least8_t;$/;"	t
int_t	lib/glm/detail/type_int.hpp	/^	typedef highp_int					int_t;$/;"	t	namespace:glm
int_t	lib/glm/detail/type_int.hpp	/^	typedef lowp_int					int_t;$/;"	t	namespace:glm
int_t	lib/glm/detail/type_int.hpp	/^	typedef mediump_int					int_t;$/;"	t	namespace:glm
internalStoragePath	inc/file_manager.h	/^	static const char* internalStoragePath;$/;"	m	class:FileManager	access:public
internalStoragePath	src/file_manager.cpp	/^const char* FileManager::internalStoragePath = nullptr;$/;"	m	class:FileManager	file:
intmax_t	lib/__assimp/Compiler/pstdint.h	/^  typedef int32_t intmax_t;$/;"	t
intmax_t	lib/__assimp/Compiler/pstdint.h	/^  typedef int64_t intmax_t;$/;"	t
intmax_t	lib/assimp/Compiler/pstdint.h	/^  typedef int32_t intmax_t;$/;"	t
intmax_t	lib/assimp/Compiler/pstdint.h	/^  typedef int64_t intmax_t;$/;"	t
intptr_t	lib/__assimp/Compiler/pstdint.h	/^  typedef ptrdiff_t intptr_t;$/;"	t
intptr_t	lib/__assimp/Compiler/pstdint.h	/^  typedef stdint_intptr_glue3( int,stdint_intptr_bits,_t)  intptr_t;$/;"	t
intptr_t	lib/assimp/Compiler/pstdint.h	/^     typedef stdint_intptr_glue3( int,stdint_intptr_bits,_t)  intptr_t;$/;"	t
intptr_t	lib/assimp/Compiler/pstdint.h	/^  typedef ptrdiff_t intptr_t;$/;"	t
io	lib/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
io	lib/stb/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon60	access:public
io_user_data	lib/stb/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon60	access:public
isAnimatedAtIndex	src/shape/anim_node.cpp	/^bool AnimNode::isAnimatedAtIndex(unsigned int animIndex) const$/;"	f	class:AnimNode	signature:(unsigned int animIndex) const
isOpen	src/window.cpp	/^bool Window::isOpen()$/;"	f	class:Window	signature:()
isReady	inc/engine.h	/^    bool isReady;$/;"	m	class:Engine	access:public
isTextSource	lib/vulkan/libspirv.h	/^  bool isTextSource;$/;"	m	struct:spv_diagnostic_t	access:public
is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_highp>$/;"	s	namespace:glm::detail
is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_lowp>$/;"	s	namespace:glm::detail
is_aligned	lib/glm/detail/precision.hpp	/^		struct is_aligned<glm::aligned_mediump>$/;"	s	namespace:glm::detail
is_aligned	lib/glm/detail/precision.hpp	/^	struct is_aligned$/;"	s	namespace:glm::detail
is_mat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	m	struct:glm::type	access:public
is_mat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_mat = true;$/;"	m	struct:glm::type	access:public
is_quat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	m	struct:glm::type	access:public
is_quat	lib/glm/gtx/type_trait.hpp	/^		static bool const is_quat = true;$/;"	m	struct:glm::type	access:public
is_vec	lib/glm/gtx/type_trait.hpp	/^		static bool const is_vec = false;$/;"	m	struct:glm::type	access:public
is_vec	lib/glm/gtx/type_trait.hpp	/^		static bool const is_vec = true;$/;"	m	struct:glm::type	access:public
is_vector	lib/glm/detail/type_gentype.hpp	/^	bool genType<VALTYPE, TYPE>::is_vector()$/;"	f	class:glm::detail::genType	signature:()
isfinite	lib/glm/gtx/compatibility.hpp	32;"	d
isinf	lib/glm/detail/_fixes.hpp	23;"	d
isnan	lib/glm/detail/_fixes.hpp	18;"	d
ivec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1		ivec1;$/;"	t	namespace:glm
ivec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec2		ivec2;$/;"	t	namespace:glm
ivec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec3		ivec3;$/;"	t	namespace:glm
ivec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_ivec4		ivec4;$/;"	t	namespace:glm
keyCallback	src/engine.cpp	/^void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mode)$/;"	f	signature:(GLFWwindow* window, int key, int scancode, int action, int mode)
keyPressed	src/input_manager.cpp	/^bool InputManager::keyPressed(int key)$/;"	f	class:InputManager	signature:(int key)
largePoints	lib/vulkan/vulkan.h	/^    VkBool32    largePoints;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
lastLen	lib/__assimp/DefaultLogger.hpp	/^    size_t lastLen;$/;"	m	class:Assimp::DefaultLogger	access:private
lastLen	lib/assimp/DefaultLogger.hpp	/^    size_t lastLen;$/;"	m	class:Assimp::DefaultLogger	access:private
lastMsg	lib/__assimp/DefaultLogger.hpp	/^    char lastMsg[MAX_LOG_MESSAGE_LENGTH*2];$/;"	m	class:Assimp::DefaultLogger	access:private
lastMsg	lib/assimp/DefaultLogger.hpp	/^    char lastMsg[MAX_LOG_MESSAGE_LENGTH*2];$/;"	m	class:Assimp::DefaultLogger	access:private
layerCount	lib/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceLayers	access:public
layerCount	lib/vulkan/vulkan.h	/^    uint32_t              layerCount;$/;"	m	struct:VkImageSubresourceRange	access:public
layerCount	lib/vulkan/vulkan.h	/^    uint32_t    layerCount;$/;"	m	struct:VkClearRect	access:public
layerName	lib/vulkan/vulkan.h	/^    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];$/;"	m	struct:VkLayerProperties	access:public
layers	lib/vulkan/vulkan.h	/^    uint32_t                    layers;$/;"	m	struct:VkFramebufferCreateInfo	access:public
layout	/home/al/amvk/inc/state.h	/^	VkPipelineLayout layout;$/;"	m	struct:PipelineInfo	access:public
layout	inc/creator/pipeline_builder.h	/^inline VkPipelineLayoutCreateInfo layout($/;"	f	namespace:PipelineBuilder	signature:( VkDescriptorSetLayout* setLayouts, uint32_t setLayoutCount, VkPushConstantRange* pushConstantRanges, uint32_t pushConstantRangeCount)
layout	lib/vulkan/vulkan.h	/^    VkImageLayout    layout;$/;"	m	struct:VkAttachmentReference	access:public
layout	lib/vulkan/vulkan.h	/^    VkPipelineLayout                                 layout;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
layout	lib/vulkan/vulkan.h	/^    VkPipelineLayout                   layout;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
length	lib/__assimp/types.h	/^    size_t length;$/;"	m	struct:aiString	access:public
length	lib/assimp/types.h	/^    size_t length;$/;"	m	struct:aiString	access:public
length	lib/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::mat	access:public	signature:()
length	lib/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL static length_type length(){return 1;}$/;"	f	struct:glm::vec	access:public	signature:()
length	lib/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::vec	access:public	signature:()
length	lib/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL static length_type length(){return 3;}$/;"	f	struct:glm::vec	access:public	signature:()
length	lib/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::vec	access:public	signature:()
length	lib/glm/gtc/quaternion.hpp	/^		GLM_FUNC_DECL static length_type length(){return 4;}$/;"	f	struct:glm::tquat	access:public	signature:()
length	lib/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL static length_type length(){return 2;}$/;"	f	struct:glm::tdualquat	access:public	signature:()
length	lib/stb/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon68	access:public
length	lib/vulkan/libspirv.h	/^  size_t length;$/;"	m	struct:spv_text_t	access:public
length_t	lib/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm
length_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	access:public
length_type	lib/glm/detail/type_vec1.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
length_type	lib/glm/detail/type_vec2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
length_type	lib/glm/detail/type_vec3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
length_type	lib/glm/detail/type_vec4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	access:public
length_type	lib/glm/gtc/quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tquat	access:public
length_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tdualquat	access:public
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> lerp(const vec<2, T, P>& x, const vec<2, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y, T a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> lerp(const vec<2, T, P>& x, const vec<2, T, P>& y, const vec<2, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x, const vec<2, T, P>& y, const vec<2, T, P>& a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> lerp(const vec<3, T, P>& x, const vec<3, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y, T a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> lerp(const vec<3, T, P>& x, const vec<3, T, P>& y, const vec<3, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x, const vec<3, T, P>& y, const vec<3, T, P>& a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> lerp(const vec<4, T, P>& x, const vec<4, T, P>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y, T a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> lerp(const vec<4, T, P>& x, const vec<4, T, P>& y, const vec<4, T, P>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x, const vec<4, T, P>& y, const vec<4, T, P>& a)
lerp	lib/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}																					\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x, T y, T a)
level	lib/vulkan/vulkan.h	/^    VkCommandBufferLevel    level;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
levelCount	lib/vulkan/vulkan.h	/^    uint32_t              levelCount;$/;"	m	struct:VkImageSubresourceRange	access:public
lflags	lib/stb/stb_image.h	/^   int lflags;$/;"	m	struct:__anon74	access:public
lightOffset	inc/scene_lights.h	/^		VkDeviceSize lightOffset;$/;"	m	struct:SceneLights::PointLightInfo	access:public
lightSet	inc/scene_lights.h	/^	VkDescriptorSet lightSet;$/;"	m	class:SceneLights	access:private
lightUbo	inc/shape/point_light.h	/^	LightUBO* lightUbo;$/;"	m	class:PointLight	access:public
lights	lib/__assimp/types.h	/^    unsigned int lights;$/;"	m	struct:aiMemoryInfo	access:public
lights	lib/assimp/types.h	/^    unsigned int lights;$/;"	m	struct:aiMemoryInfo	access:public
limits	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceLimits              limits;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
line	lib/vulkan/libspirv.h	/^  size_t line;$/;"	m	struct:spv_position_t	access:public
line0	lib/stb/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon65	access:public
line1	lib/stb/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon65	access:public
lineWidth	lib/vulkan/vulkan.h	/^    float                                      lineWidth;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
lineWidthGranularity	lib/vulkan/vulkan.h	/^    float                 lineWidthGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
lineWidthRange	lib/vulkan/vulkan.h	/^    float                 lineWidthRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
line_size	lib/stb/stb_image.h	/^   int line_size;$/;"	m	struct:__anon74	access:public
linear	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
linearTilingFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    linearTilingFeatures;$/;"	m	struct:VkFormatProperties	access:public
linebuf	lib/stb/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon63::__anon64	access:public
load	src/texture_data.cpp	/^stbi_uc* TextureData::load(const char* resource, int reqComp)$/;"	f	class:TextureData	signature:(const char* resource, int reqComp)
load	src/texture_manager.cpp	/^ImageInfo* TextureManager::load($/;"	f	class:TextureManager	signature:( State& state, const VkCommandPool& cmdPool, const VkQueue& cmdQueue, const TextureDesc& textureDesc)
loadOp	lib/vulkan/vulkan.h	/^    VkAttachmentLoadOp              loadOp;$/;"	m	struct:VkAttachmentDescription	access:public
load_jpeg_image	lib/stb/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	signature:(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
loaderData	lib/vulkan/vk_icd.h	/^    void *loaderData;$/;"	m	union:__anon75	access:public
loaderMagic	lib/vulkan/vk_icd.h	/^    uintptr_t loaderMagic;$/;"	m	union:__anon75	access:public
locale_	lib/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	access:private
locale_type	lib/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver::std	access:private
location	lib/vulkan/vulkan.h	/^    uint32_t    location;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
lock	inc/texture_manager.h	/^	std::mutex lock;$/;"	m	class:TextureManager	access:private
log2	lib/glm/detail/_fixes.hpp	28;"	d
logicOp	lib/vulkan/vulkan.h	/^    VkBool32    logicOp;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
logicOp	lib/vulkan/vulkan.h	/^    VkLogicOp                                     logicOp;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
logicOpEnable	lib/vulkan/vulkan.h	/^    VkBool32                                      logicOpEnable;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
lowp	lib/glm/detail/precision.hpp	/^		lowp = packed_lowp,$/;"	e	enum:glm::precision
lowp_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_bvec1_t			lowp_bvec1;$/;"	t	namespace:glm
lowp_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, lowp>		lowp_bvec1_t;$/;"	t	namespace:glm
lowp_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm
lowp_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm
lowp_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm
lowp_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm
lowp_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2;$/;"	t	namespace:glm
lowp_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm
lowp_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm
lowp_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm
lowp_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_dmat3;$/;"	t	namespace:glm
lowp_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm
lowp_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm
lowp_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm
lowp_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4;$/;"	t	namespace:glm
lowp_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm
lowp_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm
lowp_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm
lowp_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, lowp>		lowp_dquat;$/;"	t	namespace:glm
lowp_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm
lowp_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_dvec1_t			lowp_dvec1;$/;"	t	namespace:glm
lowp_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, lowp>	lowp_dvec1_t;$/;"	t	namespace:glm
lowp_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, lowp>		lowp_dvec2;$/;"	t	namespace:glm
lowp_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, lowp>		lowp_dvec3;$/;"	t	namespace:glm
lowp_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, lowp>		lowp_dvec4;$/;"	t	namespace:glm
lowp_f32	lib/glm/fwd.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm
lowp_f32mat2	lib/glm/fwd.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm
lowp_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm
lowp_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm
lowp_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm
lowp_f32mat3	lib/glm/fwd.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm
lowp_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm
lowp_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm
lowp_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm
lowp_f32mat4	lib/glm/fwd.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm
lowp_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm
lowp_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm
lowp_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm
lowp_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm
lowp_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm
lowp_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm
lowp_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm
lowp_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm
lowp_f64	lib/glm/fwd.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm
lowp_f64mat2	lib/glm/fwd.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm
lowp_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm
lowp_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm
lowp_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm
lowp_f64mat3	lib/glm/fwd.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm
lowp_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm
lowp_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm
lowp_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm
lowp_f64mat4	lib/glm/fwd.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm
lowp_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm
lowp_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm
lowp_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm
lowp_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm
lowp_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm
lowp_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm
lowp_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm
lowp_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm
lowp_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm
lowp_float	lib/glm/detail/type_float.hpp	/^	typedef lowp_float_t		lowp_float;$/;"	t	namespace:glm
lowp_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32;$/;"	t	namespace:glm
lowp_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 lowp_float32_t;$/;"	t	namespace:glm
lowp_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64;$/;"	t	namespace:glm
lowp_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 lowp_float64_t;$/;"	t	namespace:glm
lowp_float_t	lib/glm/detail/type_float.hpp	/^	typedef float				lowp_float_t;$/;"	t	namespace:glm
lowp_fmat2	lib/glm/fwd.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm
lowp_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm
lowp_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm
lowp_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm
lowp_fmat3	lib/glm/fwd.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm
lowp_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm
lowp_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm
lowp_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm
lowp_fmat4	lib/glm/fwd.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm
lowp_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm
lowp_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm
lowp_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm
lowp_fquat	lib/glm/fwd.hpp	/^	typedef lowp_quat			lowp_fquat;$/;"	t	namespace:glm
lowp_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, lowp> lowp_fvec1;$/;"	t	namespace:glm
lowp_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, lowp> lowp_fvec2;$/;"	t	namespace:glm
lowp_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, lowp> lowp_fvec3;$/;"	t	namespace:glm
lowp_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, lowp> lowp_fvec4;$/;"	t	namespace:glm
lowp_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
lowp_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm
lowp_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm
lowp_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm
lowp_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm
lowp_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm
lowp_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
lowp_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm
lowp_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm
lowp_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm
lowp_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm
lowp_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm
lowp_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
lowp_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm
lowp_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm
lowp_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm
lowp_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm
lowp_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm
lowp_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
lowp_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm
lowp_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm
lowp_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm
lowp_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm
lowp_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm
lowp_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2;$/;"	t	namespace:glm
lowp_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm
lowp_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm
lowp_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm
lowp_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3;$/;"	t	namespace:glm
lowp_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm
lowp_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm
lowp_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm
lowp_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4;$/;"	t	namespace:glm
lowp_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm
lowp_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm
lowp_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm
lowp_int	lib/glm/detail/type_int.hpp	/^	typedef detail::lowp_int_t				lowp_int;$/;"	t	namespace:glm
lowp_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
lowp_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm
lowp_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
lowp_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm
lowp_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
lowp_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm
lowp_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
lowp_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm
lowp_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
lowp_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm
lowp_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
lowp_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm
lowp_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
lowp_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm
lowp_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
lowp_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm
lowp_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						lowp_int_t;$/;"	t	namespace:glm::detail
lowp_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_ivec1_t			lowp_ivec1;$/;"	t	namespace:glm
lowp_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, lowp>		lowp_ivec1_t;$/;"	t	namespace:glm
lowp_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm
lowp_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm
lowp_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm
lowp_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm
lowp_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm
lowp_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
lowp_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm
lowp_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
lowp_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm
lowp_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
lowp_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm
lowp_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm
lowp_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm
lowp_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
lowp_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm
lowp_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
lowp_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm
lowp_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
lowp_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm
lowp_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm
lowp_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm
lowp_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
lowp_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm
lowp_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
lowp_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm
lowp_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
lowp_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm
lowp_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, lowp>		lowp_quat;$/;"	t	namespace:glm
lowp_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
lowp_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm
lowp_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm
lowp_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm
lowp_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm
lowp_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm
lowp_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
lowp_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm
lowp_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm
lowp_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm
lowp_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm
lowp_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm
lowp_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
lowp_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm
lowp_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm
lowp_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm
lowp_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm
lowp_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm
lowp_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
lowp_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm
lowp_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm
lowp_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm
lowp_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm
lowp_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm
lowp_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::lowp_uint_t				lowp_uint;$/;"	t	namespace:glm
lowp_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
lowp_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm
lowp_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
lowp_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm
lowp_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
lowp_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm
lowp_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
lowp_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm
lowp_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
lowp_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm
lowp_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
lowp_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm
lowp_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
lowp_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm
lowp_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
lowp_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm
lowp_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					lowp_uint_t;$/;"	t	namespace:glm::detail
lowp_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2;$/;"	t	namespace:glm
lowp_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm
lowp_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm
lowp_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm
lowp_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3;$/;"	t	namespace:glm
lowp_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm
lowp_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm
lowp_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm
lowp_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4;$/;"	t	namespace:glm
lowp_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm
lowp_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm
lowp_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm
lowp_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1_t			lowp_uvec1;$/;"	t	namespace:glm
lowp_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, lowp>		lowp_uvec1_t;$/;"	t	namespace:glm
lowp_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm
lowp_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm
lowp_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm
lowp_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, lowp> lowp_vec1;$/;"	t	namespace:glm
lowp_vec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_vec1_t				lowp_vec1;$/;"	t	namespace:glm
lowp_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, lowp>		lowp_vec1_t;$/;"	t	namespace:glm
lowp_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, lowp>		lowp_vec2;$/;"	t	namespace:glm
lowp_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, lowp> lowp_vec2;$/;"	t	namespace:glm
lowp_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, lowp>		lowp_vec3;$/;"	t	namespace:glm
lowp_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, lowp> lowp_vec3;$/;"	t	namespace:glm
lowp_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, lowp>		lowp_vec4;$/;"	t	namespace:glm
lowp_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, lowp> lowp_vec4;$/;"	t	namespace:glm
lpal	lib/stb/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon74	access:public
m	lib/assimp/matrix3x3.h	/^        TReal m[ 3 ][ 3 ];$/;"	m	union:aiMatrix3x3t::__anon13	access:public
m	lib/assimp/matrix3x3.h	/^        float m[ 3 ][ 3 ];$/;"	m	union:aiMatrix3x3::__anon15	access:public
m	lib/assimp/matrix4x4.h	/^        TReal m[ 4 ][ 4 ];$/;"	m	union:aiMatrix4x4t::__anon1	access:public
m	lib/assimp/matrix4x4.h	/^        float m[ 4 ][ 4 ];$/;"	m	union:aiMatrix4x4::__anon3	access:public
mAngleInnerCone	lib/__assimp/light.h	/^    float mAngleInnerCone;$/;"	m	struct:aiLight	access:public
mAngleInnerCone	lib/assimp/light.h	/^    float mAngleInnerCone;$/;"	m	struct:aiLight	access:public
mAngleOuterCone	lib/__assimp/light.h	/^    float mAngleOuterCone;$/;"	m	struct:aiLight	access:public
mAngleOuterCone	lib/assimp/light.h	/^    float mAngleOuterCone;$/;"	m	struct:aiLight	access:public
mAnimMeshes	lib/__assimp/mesh.h	/^    C_STRUCT aiAnimMesh** mAnimMeshes;$/;"	m	struct:aiMesh	access:public
mAnimMeshes	lib/assimp/mesh.h	/^    C_STRUCT aiAnimMesh** mAnimMeshes;$/;"	m	struct:aiMesh	access:public
mAnimNodeRoot	inc/shape/skinned.h	/^    AnimNode* mAnimNodeRoot;$/;"	m	class:Skinned	access:protected
mAnimTypes	inc/shape/anim_node.h	/^    std::vector<aiNodeAnim*> mAnimTypes;$/;"	m	struct:AnimNode	access:public
mAnimations	lib/__assimp/scene.h	/^    C_STRUCT aiAnimation** mAnimations;$/;"	m	struct:aiScene	access:public
mAnimations	lib/assimp/scene.h	/^    C_STRUCT aiAnimation** mAnimations;$/;"	m	struct:aiScene	access:public
mApkAssetManager	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^	AAssetManager* mApkAssetManager;$/;"	m	class:Assimp::AndroidJNIIOSystem	access:public
mApkWorkspacePath	lib/__assimp/port/AndroidJNI/AndroidJNIIOSystem.h	/^	std::string mApkWorkspacePath;$/;"	m	class:Assimp::AndroidJNIIOSystem	access:public
mAspect	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
mAspect	inc/window.h	/^	float mAspect;$/;"	m	class:Window	access:private
mAspect	lib/__assimp/camera.h	/^    float mAspect;$/;"	m	struct:aiCamera	access:public
mAspect	lib/assimp/camera.h	/^    float mAspect;$/;"	m	struct:aiCamera	access:public
mAssimpNode	inc/shape/anim_node.h	/^    aiNode& mAssimpNode;$/;"	m	struct:AnimNode	access:public
mAttenuationConstant	lib/__assimp/light.h	/^    float mAttenuationConstant;$/;"	m	struct:aiLight	access:public
mAttenuationConstant	lib/assimp/light.h	/^    float mAttenuationConstant;$/;"	m	struct:aiLight	access:public
mAttenuationLinear	lib/__assimp/light.h	/^    float mAttenuationLinear;$/;"	m	struct:aiLight	access:public
mAttenuationLinear	lib/assimp/light.h	/^    float mAttenuationLinear;$/;"	m	struct:aiLight	access:public
mAttenuationQuadratic	lib/__assimp/light.h	/^    float mAttenuationQuadratic;$/;"	m	struct:aiLight	access:public
mAttenuationQuadratic	lib/assimp/light.h	/^    float mAttenuationQuadratic;$/;"	m	struct:aiLight	access:public
mAuthor	lib/__assimp/importerdesc.h	/^    const char* mAuthor;$/;"	m	struct:aiImporterDesc	access:public
mAuthor	lib/assimp/importerdesc.h	/^    const char* mAuthor;$/;"	m	struct:aiImporterDesc	access:public
mBinPath	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mBitangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiAnimMesh	access:public
mBitangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiMesh	access:public
mBitangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiAnimMesh	access:public
mBitangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mBitangents;$/;"	m	struct:aiMesh	access:public
mBoneTransforms	inc/shape/skinned.h	/^	std::vector<aiMatrix4x4> mBoneTransforms;$/;"	m	class:Skinned	access:protected
mBones	lib/__assimp/mesh.h	/^    C_STRUCT aiBone** mBones;$/;"	m	struct:aiMesh	access:public
mBones	lib/assimp/mesh.h	/^    C_STRUCT aiBone** mBones;$/;"	m	struct:aiMesh	access:public
mCacheDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mCachedSize	lib/__assimp/DefaultIOStream.h	/^    mutable size_t mCachedSize;$/;"	m	class:Assimp::DefaultIOStream	access:private
mCamera	inc/engine.h	/^	Camera mCamera;$/;"	m	class:Engine	access:private
mCameras	lib/__assimp/scene.h	/^    C_STRUCT aiCamera** mCameras;$/;"	m	struct:aiScene	access:public
mCameras	lib/assimp/scene.h	/^    C_STRUCT aiCamera** mCameras;$/;"	m	struct:aiScene	access:public
mChannels	lib/__assimp/anim.h	/^    C_STRUCT aiNodeAnim** mChannels;$/;"	m	struct:aiAnimation	access:public
mChannels	lib/assimp/anim.h	/^    C_STRUCT aiNodeAnim** mChannels;$/;"	m	struct:aiAnimation	access:public
mChildren	inc/shape/anim_node.h	/^    std::vector<AnimNode*> mChildren;$/;"	m	struct:AnimNode	access:public
mChildren	lib/__assimp/scene.h	/^    C_STRUCT aiNode** mChildren;$/;"	m	struct:aiNode	access:public
mChildren	lib/assimp/scene.h	/^    C_STRUCT aiNode** mChildren;$/;"	m	struct:aiNode	access:public
mClipPlaneFar	lib/__assimp/camera.h	/^    float mClipPlaneFar;$/;"	m	struct:aiCamera	access:public
mClipPlaneFar	lib/assimp/camera.h	/^    float mClipPlaneFar;$/;"	m	struct:aiCamera	access:public
mClipPlaneNear	lib/__assimp/camera.h	/^    float mClipPlaneNear;$/;"	m	struct:aiCamera	access:public
mClipPlaneNear	lib/assimp/camera.h	/^    float mClipPlaneNear;$/;"	m	struct:aiCamera	access:public
mColorAmbient	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorAmbient;$/;"	m	struct:aiLight	access:public
mColorAmbient	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorAmbient;$/;"	m	struct:aiLight	access:public
mColorDiffuse	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorDiffuse;$/;"	m	struct:aiLight	access:public
mColorDiffuse	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorDiffuse;$/;"	m	struct:aiLight	access:public
mColorSpecular	lib/__assimp/light.h	/^    C_STRUCT aiColor3D mColorSpecular;$/;"	m	struct:aiLight	access:public
mColorSpecular	lib/assimp/light.h	/^    C_STRUCT aiColor3D mColorSpecular;$/;"	m	struct:aiLight	access:public
mColors	lib/__assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiAnimMesh	access:public
mColors	lib/__assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiMesh	access:public
mColors	lib/assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiAnimMesh	access:public
mColors	lib/assimp/mesh.h	/^    C_STRUCT aiColor4D* mColors[AI_MAX_NUMBER_OF_COLOR_SETS];$/;"	m	struct:aiMesh	access:public
mComments	lib/__assimp/importerdesc.h	/^    const char* mComments;$/;"	m	struct:aiImporterDesc	access:public
mComments	lib/assimp/importerdesc.h	/^    const char* mComments;$/;"	m	struct:aiImporterDesc	access:public
mCommonBufferInfo	inc/shape/model.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Model	access:protected
mCommonBufferInfo	inc/shape/skinned.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Skinned	access:protected
mCommonBufferInfo	inc/shape/sphere.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:Sphere	access:public
mCommonBufferInfo	inc/shape/tquad.h	/^	BufferInfo mCommonBufferInfo;$/;"	m	class:TQuad	access:public
mCondition	inc/task_manager.h	/^	std::condition_variable mCondition;$/;"	m	class:TaskManager	access:private
mContinue	inc/task_manager.h	/^	std::atomic_bool mContinue;$/;"	m	class:TaskManager	access:private
mData	lib/__assimp/material.h	/^    char* mData;$/;"	m	struct:aiMaterialProperty	access:public
mData	lib/__assimp/metadata.h	/^    void* mData;$/;"	m	struct:aiMetadataEntry	access:public
mData	lib/assimp/material.h	/^    char* mData;$/;"	m	struct:aiMaterialProperty	access:public
mData	lib/assimp/matrix3x3.h	/^        TReal mData[ 9 ];$/;"	m	union:aiMatrix3x3t::__anon13	access:public
mData	lib/assimp/matrix3x3.h	/^        float mData[ 9 ];$/;"	m	union:aiMatrix3x3::__anon15	access:public
mData	lib/assimp/matrix4x4.h	/^        TReal mData[ 16 ];$/;"	m	union:aiMatrix4x4t::__anon1	access:public
mData	lib/assimp/matrix4x4.h	/^        float mData[ 16 ];$/;"	m	union:aiMatrix4x4::__anon3	access:public
mData	lib/assimp/metadata.h	/^    void* mData;$/;"	m	struct:aiMetadataEntry	access:public
mDataLength	lib/__assimp/material.h	/^    unsigned int mDataLength;$/;"	m	struct:aiMaterialProperty	access:public
mDataLength	lib/assimp/material.h	/^    unsigned int mDataLength;$/;"	m	struct:aiMaterialProperty	access:public
mDebugReportCallback	inc/device_manager.h	/^	VkDebugReportCallbackEXT mDebugReportCallback; $/;"	m	class:DeviceManager	access:private
mDepthImageDesc	inc/swapchain_manager.h	/^	ImageInfo mDepthImageDesc;$/;"	m	class:SwapchainManager	access:private
mDescription	lib/__assimp/Exporter.hpp	/^        aiExportFormatDesc mDescription;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mDescription	lib/assimp/Exporter.hpp	/^        aiExportFormatDesc mDescription;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mDescriptorPool	inc/g_buffer.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:GBuffer	access:private
mDescriptorPool	inc/scene_lights.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:SceneLights	access:private
mDescriptorPool	inc/shape/model.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:Model	access:protected
mDescriptorPool	inc/shape/skinned.h	/^	VkDescriptorPool mDescriptorPool;$/;"	m	class:Skinned	access:protected
mDescriptorSet	inc/g_buffer.h	/^	VkDescriptorSet mDescriptorSet;$/;"	m	class:GBuffer	access:private
mDescriptorSet	inc/shape/fullscreen_quad.h	/^	VkDescriptorSet mDescriptorSet;$/;"	m	class:FullscreenQuad	access:public
mDeviceManager	inc/renderer.h	/^	DeviceManager mDeviceManager;$/;"	m	class:Renderer	access:private
mDirection	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mDirection;$/;"	m	struct:aiLight	access:public
mDirection	lib/assimp/light.h	/^    C_STRUCT aiVector3D mDirection;$/;"	m	struct:aiLight	access:public
mDt	inc/timer.h	/^	double mDt;$/;"	m	class:Timer	access:private
mDuration	lib/__assimp/anim.h	/^    double mDuration;$/;"	m	struct:aiAnimation	access:public
mDuration	lib/assimp/anim.h	/^    double mDuration;$/;"	m	struct:aiAnimation	access:public
mDynamicAlignmentSize	inc/scene_lights.h	/^	uint32_t mDynamicAlignmentSize;$/;"	m	class:SceneLights	access:private
mEnforcePP	lib/__assimp/Exporter.hpp	/^        unsigned int mEnforcePP;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mEnforcePP	lib/assimp/Exporter.hpp	/^        unsigned int mEnforcePP;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mEngineRoot	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mExportFunction	lib/__assimp/Exporter.hpp	/^        fpExportFunc mExportFunction;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mExportFunction	lib/assimp/Exporter.hpp	/^        fpExportFunc mExportFunction;$/;"	m	struct:Assimp::Exporter::ExportFormatEntry	access:public
mEye	inc/camera.h	/^    glm::vec3 mEye; $/;"	m	class:Camera	access:private
mFOV	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
mFPS	inc/timer.h	/^	uint32_t mFPS;$/;"	m	class:Timer	access:private
mFaces	lib/__assimp/mesh.h	/^    C_STRUCT aiFace* mFaces;$/;"	m	struct:aiMesh	access:public
mFaces	lib/assimp/mesh.h	/^    C_STRUCT aiFace* mFaces;$/;"	m	struct:aiMesh	access:public
mFar	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
mFile	lib/__assimp/DefaultIOStream.h	/^    FILE* mFile;$/;"	m	class:Assimp::DefaultIOStream	access:private
mFileExtensions	lib/__assimp/importerdesc.h	/^    const char* mFileExtensions;$/;"	m	struct:aiImporterDesc	access:public
mFileExtensions	lib/assimp/importerdesc.h	/^    const char* mFileExtensions;$/;"	m	struct:aiImporterDesc	access:public
mFilename	lib/__assimp/DefaultIOStream.h	/^    std::string mFilename;$/;"	m	class:Assimp::DefaultIOStream	access:private
mFlags	lib/__assimp/importerdesc.h	/^    unsigned int mFlags;$/;"	m	struct:aiImporterDesc	access:public
mFlags	lib/__assimp/scene.h	/^    unsigned int mFlags;$/;"	m	struct:aiScene	access:public
mFlags	lib/assimp/importerdesc.h	/^    unsigned int mFlags;$/;"	m	struct:aiImporterDesc	access:public
mFlags	lib/assimp/scene.h	/^    unsigned int mFlags;$/;"	m	struct:aiScene	access:public
mFloatProperties	lib/__assimp/Exporter.hpp	/^    FloatPropertyMap mFloatProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mFloatProperties	lib/assimp/Exporter.hpp	/^    FloatPropertyMap mFloatProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mFolder	inc/shape/model.h	/^	std::string mPath, mFolder;$/;"	m	class:Model	access:protected
mFolder	inc/shape/skinned.h	/^	std::string mPath, mFolder;$/;"	m	class:Skinned	access:protected
mForwardMovementScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
mFrameTime	inc/timer.h	/^	double mFrameTime;$/;"	m	class:Timer	access:private
mGlfwWindow	inc/input_manager.h	/^	GLFWwindow* mGlfwWindow;$/;"	m	class:InputManager	access:public
mGlfwWindow	inc/window.h	/^	GLFWwindow* mGlfwWindow;$/;"	m	class:Window	access:public
mHeight	inc/window.h	/^	unsigned mWidth, mHeight;$/;"	m	class:Window	access:private
mHeight	lib/__assimp/texture.h	/^    unsigned int mHeight;$/;"	m	struct:aiTexture	access:public
mHeight	lib/assimp/texture.h	/^    unsigned int mHeight;$/;"	m	struct:aiTexture	access:public
mHorizontalFOV	lib/__assimp/camera.h	/^    float mHorizontalFOV;$/;"	m	struct:aiCamera	access:public
mHorizontalFOV	lib/assimp/camera.h	/^    float mHorizontalFOV;$/;"	m	struct:aiCamera	access:public
mId	inc/task_manager.h	/^	int mId;$/;"	m	class:MessageTask	access:public
mImageInfo	inc/shape/fullscreen_quad.h	/^	ImageInfo* mImageInfo;$/;"	m	class:FullscreenQuad	access:private
mIndex	lib/__assimp/material.h	/^    unsigned int mIndex;$/;"	m	struct:aiMaterialProperty	access:public
mIndex	lib/assimp/material.h	/^    unsigned int mIndex;$/;"	m	struct:aiMaterialProperty	access:public
mIndexBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
mIndexBufferOffset	inc/shape/tquad.h	/^				 mIndexBufferOffset, $/;"	m	class:TQuad	access:public
mIndices	lib/__assimp/mesh.h	/^    unsigned int* mIndices;$/;"	m	struct:aiFace	access:public
mIndices	lib/assimp/mesh.h	/^    unsigned int* mIndices;$/;"	m	struct:aiFace	access:public
mInputManager	inc/window.h	/^	InputManager mInputManager;$/;"	m	class:Window	access:private
mIntProperties	lib/__assimp/Exporter.hpp	/^    IntPropertyMap mIntProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mIntProperties	lib/assimp/Exporter.hpp	/^    IntPropertyMap mIntProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mKey	lib/__assimp/material.h	/^    C_STRUCT aiString mKey;$/;"	m	struct:aiMaterialProperty	access:public
mKey	lib/assimp/material.h	/^    C_STRUCT aiString mKey;$/;"	m	struct:aiMaterialProperty	access:public
mKeys	lib/__assimp/anim.h	/^    C_STRUCT aiMeshKey* mKeys;$/;"	m	struct:aiMeshAnim	access:public
mKeys	lib/__assimp/anim.h	/^    C_STRUCT aiMeshMorphKey* mKeys;$/;"	m	struct:aiMeshMorphAnim	access:public
mKeys	lib/__assimp/metadata.h	/^    C_STRUCT aiString* mKeys;$/;"	m	struct:aiMetadata	access:public
mKeys	lib/assimp/anim.h	/^    C_STRUCT aiMeshKey* mKeys;$/;"	m	struct:aiMeshAnim	access:public
mKeys	lib/assimp/metadata.h	/^    C_STRUCT aiString* mKeys;$/;"	m	struct:aiMetadata	access:public
mLights	lib/__assimp/scene.h	/^    C_STRUCT aiLight** mLights;$/;"	m	struct:aiScene	access:public
mLights	lib/assimp/scene.h	/^    C_STRUCT aiLight** mLights;$/;"	m	struct:aiScene	access:public
mLookAt	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mLookAt;$/;"	m	struct:aiCamera	access:public
mLookAt	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mLookAt;$/;"	m	struct:aiCamera	access:public
mMaintainer	lib/__assimp/importerdesc.h	/^    const char* mMaintainer;$/;"	m	struct:aiImporterDesc	access:public
mMaintainer	lib/assimp/importerdesc.h	/^    const char* mMaintainer;$/;"	m	struct:aiImporterDesc	access:public
mMaterialIndex	lib/__assimp/mesh.h	/^    unsigned int mMaterialIndex;$/;"	m	struct:aiMesh	access:public
mMaterialIndex	lib/assimp/mesh.h	/^    unsigned int mMaterialIndex;$/;"	m	struct:aiMesh	access:public
mMaterialIndexToMaterial	inc/shape/model.h	/^	std::unordered_map<uint32_t, Material> mMaterialIndexToMaterial;$/;"	m	class:Model	access:protected
mMaterialIndexToMaterial	inc/shape/skinned.h	/^	std::unordered_map<uint32_t, Material> mMaterialIndexToMaterial;$/;"	m	class:Skinned	access:protected
mMaterials	lib/__assimp/scene.h	/^    C_STRUCT aiMaterial** mMaterials;$/;"	m	struct:aiScene	access:public
mMaterials	lib/assimp/scene.h	/^    C_STRUCT aiMaterial** mMaterials;$/;"	m	struct:aiScene	access:public
mMatrixProperties	lib/__assimp/Exporter.hpp	/^    MatrixPropertyMap mMatrixProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mMatrixProperties	lib/assimp/Exporter.hpp	/^    MatrixPropertyMap mMatrixProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mMaxMajor	lib/__assimp/importerdesc.h	/^    unsigned int mMaxMajor;$/;"	m	struct:aiImporterDesc	access:public
mMaxMajor	lib/assimp/importerdesc.h	/^    unsigned int mMaxMajor;$/;"	m	struct:aiImporterDesc	access:public
mMaxMinor	lib/__assimp/importerdesc.h	/^    unsigned int mMaxMinor;$/;"	m	struct:aiImporterDesc	access:public
mMaxMinor	lib/assimp/importerdesc.h	/^    unsigned int mMaxMinor;$/;"	m	struct:aiImporterDesc	access:public
mMeshChannels	lib/__assimp/anim.h	/^    C_STRUCT aiMeshAnim** mMeshChannels;$/;"	m	struct:aiAnimation	access:public
mMeshChannels	lib/assimp/anim.h	/^    C_STRUCT aiMeshAnim** mMeshChannels;$/;"	m	struct:aiAnimation	access:public
mMeshes	inc/shape/model.h	/^	std::vector<Mesh> mMeshes;$/;"	m	class:Model	access:protected
mMeshes	inc/shape/skinned.h	/^	std::vector<Mesh> mMeshes;$/;"	m	class:Skinned	access:protected
mMeshes	lib/__assimp/scene.h	/^    C_STRUCT aiMesh** mMeshes;$/;"	m	struct:aiScene	access:public
mMeshes	lib/__assimp/scene.h	/^    unsigned int* mMeshes;$/;"	m	struct:aiNode	access:public
mMeshes	lib/assimp/scene.h	/^    C_STRUCT aiMesh** mMeshes;$/;"	m	struct:aiScene	access:public
mMeshes	lib/assimp/scene.h	/^    unsigned int* mMeshes;$/;"	m	struct:aiNode	access:public
mMetaData	lib/__assimp/scene.h	/^    C_STRUCT aiMetadata* mMetaData;$/;"	m	struct:aiNode	access:public
mMetaData	lib/assimp/scene.h	/^    C_STRUCT aiMetadata* mMetaData;$/;"	m	struct:aiNode	access:public
mMethod	lib/__assimp/mesh.h	/^    unsigned int mMethod;$/;"	m	struct:aiMesh	access:public
mMinMajor	lib/__assimp/importerdesc.h	/^    unsigned int mMinMajor;$/;"	m	struct:aiImporterDesc	access:public
mMinMajor	lib/assimp/importerdesc.h	/^    unsigned int mMinMajor;$/;"	m	struct:aiImporterDesc	access:public
mMinMinor	lib/__assimp/importerdesc.h	/^    unsigned int mMinMinor;$/;"	m	struct:aiImporterDesc	access:public
mMinMinor	lib/assimp/importerdesc.h	/^    unsigned int mMinMinor;$/;"	m	struct:aiImporterDesc	access:public
mModelFlags	inc/shape/skinned.h	/^	ModelFlags mModelFlags;$/;"	m	class:Skinned	access:protected
mModelSpaceTransform	inc/shape/skinned.h	/^    aiMatrix4x4 mModelSpaceTransform;$/;"	m	class:Skinned	access:protected
mModelsDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mMorphMeshChannels	lib/__assimp/anim.h	/^    C_STRUCT aiMeshMorphAnim **mMorphMeshChannels;$/;"	m	struct:aiAnimation	access:public
mMouseSensitivityScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiAnimation	access:public
mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshAnim	access:public
mName	lib/__assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshMorphAnim	access:public
mName	lib/__assimp/camera.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiCamera	access:public
mName	lib/__assimp/importerdesc.h	/^    const char* mName;$/;"	m	struct:aiImporterDesc	access:public
mName	lib/__assimp/light.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiLight	access:public
mName	lib/__assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiBone	access:public
mName	lib/__assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMesh	access:public
mName	lib/__assimp/scene.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiNode	access:public
mName	lib/assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiAnimation	access:public
mName	lib/assimp/anim.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMeshAnim	access:public
mName	lib/assimp/camera.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiCamera	access:public
mName	lib/assimp/importerdesc.h	/^    const char* mName;$/;"	m	struct:aiImporterDesc	access:public
mName	lib/assimp/light.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiLight	access:public
mName	lib/assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiBone	access:public
mName	lib/assimp/mesh.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiMesh	access:public
mName	lib/assimp/scene.h	/^    C_STRUCT aiString mName;$/;"	m	struct:aiNode	access:public
mNear	inc/camera.h	/^	float mNear, mFar, mFOV, mAspect;$/;"	m	class:Camera	access:private
mNodeName	lib/__assimp/anim.h	/^    C_STRUCT aiString mNodeName;$/;"	m	struct:aiNodeAnim	access:public
mNodeName	lib/assimp/anim.h	/^    C_STRUCT aiString mNodeName;$/;"	m	struct:aiNodeAnim	access:public
mNodeToBoneIndexMap	inc/shape/skinned.h	/^	std::unordered_map<aiNode*, uint32_t> mNodeToBoneIndexMap;$/;"	m	class:Skinned	access:protected
mNormals	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiAnimMesh	access:public
mNormals	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiMesh	access:public
mNormals	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiAnimMesh	access:public
mNormals	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mNormals;$/;"	m	struct:aiMesh	access:public
mNumAllocated	lib/__assimp/material.h	/^    unsigned int mNumAllocated;$/;"	m	struct:aiMaterial	access:public
mNumAllocated	lib/assimp/material.h	/^    unsigned int mNumAllocated;$/;"	m	struct:aiMaterial	access:public
mNumAnimMeshes	lib/__assimp/mesh.h	/^    unsigned int mNumAnimMeshes;$/;"	m	struct:aiMesh	access:public
mNumAnimMeshes	lib/assimp/mesh.h	/^    unsigned int mNumAnimMeshes;$/;"	m	struct:aiMesh	access:public
mNumAnimations	lib/__assimp/scene.h	/^    unsigned int mNumAnimations;$/;"	m	struct:aiScene	access:public
mNumAnimations	lib/assimp/scene.h	/^    unsigned int mNumAnimations;$/;"	m	struct:aiScene	access:public
mNumBones	lib/__assimp/mesh.h	/^    unsigned int mNumBones;$/;"	m	struct:aiMesh	access:public
mNumBones	lib/assimp/mesh.h	/^    unsigned int mNumBones;$/;"	m	struct:aiMesh	access:public
mNumCameras	lib/__assimp/scene.h	/^    unsigned int mNumCameras;$/;"	m	struct:aiScene	access:public
mNumCameras	lib/assimp/scene.h	/^    unsigned int mNumCameras;$/;"	m	struct:aiScene	access:public
mNumChannels	lib/__assimp/anim.h	/^    unsigned int mNumChannels;$/;"	m	struct:aiAnimation	access:public
mNumChannels	lib/assimp/anim.h	/^    unsigned int mNumChannels;$/;"	m	struct:aiAnimation	access:public
mNumChildren	lib/__assimp/scene.h	/^    unsigned int mNumChildren;$/;"	m	struct:aiNode	access:public
mNumChildren	lib/assimp/scene.h	/^    unsigned int mNumChildren;$/;"	m	struct:aiNode	access:public
mNumFaces	lib/__assimp/mesh.h	/^    unsigned int mNumFaces;$/;"	m	struct:aiMesh	access:public
mNumFaces	lib/assimp/mesh.h	/^    unsigned int mNumFaces;$/;"	m	struct:aiMesh	access:public
mNumFrames	inc/timer.h	/^	uint32_t mNumFrames;$/;"	m	class:Timer	access:private
mNumIndices	lib/__assimp/mesh.h	/^    unsigned int mNumIndices;$/;"	m	struct:aiFace	access:public
mNumIndices	lib/assimp/mesh.h	/^    unsigned int mNumIndices;$/;"	m	struct:aiFace	access:public
mNumKeys	lib/__assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshAnim	access:public
mNumKeys	lib/__assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshMorphAnim	access:public
mNumKeys	lib/assimp/anim.h	/^    unsigned int mNumKeys;$/;"	m	struct:aiMeshAnim	access:public
mNumLights	lib/__assimp/scene.h	/^    unsigned int mNumLights;$/;"	m	struct:aiScene	access:public
mNumLights	lib/assimp/scene.h	/^    unsigned int mNumLights;$/;"	m	struct:aiScene	access:public
mNumMaterials	lib/__assimp/scene.h	/^    unsigned int mNumMaterials;$/;"	m	struct:aiScene	access:public
mNumMaterials	lib/assimp/scene.h	/^    unsigned int mNumMaterials;$/;"	m	struct:aiScene	access:public
mNumMeshChannels	lib/__assimp/anim.h	/^    unsigned int mNumMeshChannels;$/;"	m	struct:aiAnimation	access:public
mNumMeshChannels	lib/assimp/anim.h	/^    unsigned int mNumMeshChannels;$/;"	m	struct:aiAnimation	access:public
mNumMeshes	lib/__assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiNode	access:public
mNumMeshes	lib/__assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiScene	access:public
mNumMeshes	lib/assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiNode	access:public
mNumMeshes	lib/assimp/scene.h	/^    unsigned int mNumMeshes;$/;"	m	struct:aiScene	access:public
mNumMorphMeshChannels	lib/__assimp/anim.h	/^    unsigned int mNumMorphMeshChannels;$/;"	m	struct:aiAnimation	access:public
mNumPositionKeys	lib/__assimp/anim.h	/^    unsigned int mNumPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumPositionKeys	lib/assimp/anim.h	/^    unsigned int mNumPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumProperties	lib/__assimp/material.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMaterial	access:public
mNumProperties	lib/__assimp/metadata.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMetadata	access:public
mNumProperties	lib/assimp/material.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMaterial	access:public
mNumProperties	lib/assimp/metadata.h	/^    unsigned int mNumProperties;$/;"	m	struct:aiMetadata	access:public
mNumRotationKeys	lib/__assimp/anim.h	/^    unsigned int mNumRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumRotationKeys	lib/assimp/anim.h	/^    unsigned int mNumRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumSamplerDescriptors	inc/shape/model.h	/^	uint32_t mNumSamplerDescriptors;$/;"	m	class:Model	access:protected
mNumSamplerDescriptors	inc/shape/skinned.h	/^	uint32_t mNumSamplerDescriptors;$/;"	m	class:Skinned	access:protected
mNumScalingKeys	lib/__assimp/anim.h	/^    unsigned int mNumScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumScalingKeys	lib/assimp/anim.h	/^    unsigned int mNumScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
mNumTextures	lib/__assimp/scene.h	/^    unsigned int mNumTextures;$/;"	m	struct:aiScene	access:public
mNumTextures	lib/assimp/scene.h	/^    unsigned int mNumTextures;$/;"	m	struct:aiScene	access:public
mNumThreads	inc/task_manager.h	/^	size_t mNumThreads;$/;"	m	class:TaskManager	access:private
mNumUVComponents	lib/__assimp/mesh.h	/^    unsigned int mNumUVComponents[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
mNumUVComponents	lib/assimp/mesh.h	/^    unsigned int mNumUVComponents[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
mNumValuesAndWeights	lib/__assimp/anim.h	/^    unsigned int mNumValuesAndWeights;$/;"	m	struct:aiMeshMorphKey	access:public
mNumVertices	lib/__assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiAnimMesh	access:public
mNumVertices	lib/__assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiMesh	access:public
mNumVertices	lib/assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiAnimMesh	access:public
mNumVertices	lib/assimp/mesh.h	/^    unsigned int mNumVertices;$/;"	m	struct:aiMesh	access:public
mNumWeights	lib/__assimp/mesh.h	/^    unsigned int mNumWeights;$/;"	m	struct:aiBone	access:public
mNumWeights	lib/assimp/mesh.h	/^    unsigned int mNumWeights;$/;"	m	struct:aiBone	access:public
mOffsetMatrix	lib/__assimp/mesh.h	/^    C_STRUCT aiMatrix4x4 mOffsetMatrix;$/;"	m	struct:aiBone	access:public
mOffsetMatrix	lib/assimp/mesh.h	/^    C_STRUCT aiMatrix4x4 mOffsetMatrix;$/;"	m	struct:aiBone	access:public
mParent	lib/__assimp/scene.h	/^    C_STRUCT aiNode* mParent;$/;"	m	struct:aiNode	access:public
mParent	lib/assimp/scene.h	/^    C_STRUCT aiNode* mParent;$/;"	m	struct:aiNode	access:public
mPath	inc/shape/model.h	/^	std::string mPath, mFolder;$/;"	m	class:Model	access:protected
mPath	inc/shape/skinned.h	/^	std::string mPath, mFolder;$/;"	m	class:Skinned	access:protected
mPitch	inc/camera.h	/^    float mPitch, mYaw;$/;"	m	class:Camera	access:private
mPool	inc/task_manager.h	/^	std::vector<std::thread> mPool;$/;"	m	class:TaskManager	access:private
mPool	inc/texture_manager.h	/^	std::unordered_map<TextureDesc, ImageInfo*> mPool; $/;"	m	class:TextureManager	access:private
mPosition	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiCamera	access:public
mPosition	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiLight	access:public
mPosition	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiCamera	access:public
mPosition	lib/assimp/light.h	/^    C_STRUCT aiVector3D mPosition;$/;"	m	struct:aiLight	access:public
mPositionKeys	lib/__assimp/anim.h	/^    C_STRUCT aiVectorKey* mPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
mPositionKeys	lib/assimp/anim.h	/^    C_STRUCT aiVectorKey* mPositionKeys;$/;"	m	struct:aiNodeAnim	access:public
mPostState	lib/__assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPostState;$/;"	m	struct:aiNodeAnim	access:public
mPostState	lib/assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPostState;$/;"	m	struct:aiNodeAnim	access:public
mPreState	lib/__assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPreState;$/;"	m	struct:aiNodeAnim	access:public
mPreState	lib/assimp/anim.h	/^    C_ENUM aiAnimBehaviour mPreState;$/;"	m	struct:aiNodeAnim	access:public
mPrevMouseX	inc/camera.h	/^    double mPrevMouseX, mPrevMouseY;$/;"	m	class:Camera	access:public
mPrevMouseY	inc/camera.h	/^    double mPrevMouseX, mPrevMouseY;$/;"	m	class:Camera	access:public
mPrevTime	inc/timer.h	/^	std::chrono::high_resolution_clock::time_point mPrevTime;$/;"	m	class:Timer	access:private
mPrimitiveTypes	lib/__assimp/mesh.h	/^    unsigned int mPrimitiveTypes;$/;"	m	struct:aiMesh	access:public
mPrimitiveTypes	lib/assimp/mesh.h	/^    unsigned int mPrimitiveTypes;$/;"	m	struct:aiMesh	access:public
mPrivate	lib/__assimp/scene.h	/^    char* mPrivate;$/;"	m	struct:aiScene	access:public
mPrivate	lib/__assimp/scene.h	/^    void* mPrivate;$/;"	m	struct:aiScene	access:public
mPrivate	lib/assimp/scene.h	/^    char* mPrivate;$/;"	m	struct:aiScene	access:public
mPrivate	lib/assimp/scene.h	/^    void* mPrivate;$/;"	m	struct:aiScene	access:public
mProj	inc/camera.h	/^    glm::mat4 mProj, mView;$/;"	m	class:Camera	access:private
mProperties	lib/__assimp/material.h	/^    C_STRUCT aiMaterialProperty** mProperties;$/;"	m	struct:aiMaterial	access:public
mProperties	lib/assimp/material.h	/^    C_STRUCT aiMaterialProperty** mProperties;$/;"	m	struct:aiMaterial	access:public
mRadius	inc/shape/sphere.h	/^	float mRadius;$/;"	m	class:Sphere	access:private
mRenderer	inc/engine.h	/^	Renderer mRenderer;$/;"	m	class:Engine	access:private
mResourceDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mRootNode	lib/__assimp/scene.h	/^    C_STRUCT aiNode* mRootNode;$/;"	m	struct:aiScene	access:public
mRootNode	lib/assimp/scene.h	/^    C_STRUCT aiNode* mRootNode;$/;"	m	struct:aiScene	access:public
mRotation	lib/__assimp/material.h	/^    ai_real mRotation;$/;"	m	struct:aiUVTransform	access:public
mRotation	lib/assimp/material.h	/^    float mRotation;$/;"	m	struct:aiUVTransform	access:public
mRotationKeys	lib/__assimp/anim.h	/^    C_STRUCT aiQuatKey* mRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
mRotationKeys	lib/assimp/anim.h	/^    C_STRUCT aiQuatKey* mRotationKeys;$/;"	m	struct:aiNodeAnim	access:public
mSamplersDescriptorSet	inc/shape/skinned.h	/^	VkDescriptorSet mSamplersDescriptorSet;$/;"	m	class:Skinned	access:protected
mScaling	lib/__assimp/material.h	/^    C_STRUCT aiVector2D mScaling;$/;"	m	struct:aiUVTransform	access:public
mScaling	lib/assimp/material.h	/^    C_STRUCT aiVector2D mScaling;$/;"	m	struct:aiUVTransform	access:public
mScalingKeys	lib/__assimp/anim.h	/^    C_STRUCT aiVectorKey* mScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
mScalingKeys	lib/assimp/anim.h	/^    C_STRUCT aiVectorKey* mScalingKeys;$/;"	m	struct:aiNodeAnim	access:public
mScene	inc/shape/skinned.h	/^    const aiScene* mScene;$/;"	m	class:Skinned	access:protected
mScrollSensitivityScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
mSemantic	lib/__assimp/material.h	/^    unsigned int mSemantic;$/;"	m	struct:aiMaterialProperty	access:public
mSemantic	lib/assimp/material.h	/^    unsigned int mSemantic;$/;"	m	struct:aiMaterialProperty	access:public
mShaderDir	inc/file_manager.h	/^	std::string mBinPath, mEngineRoot, mShaderDir, mResourceDir, mModelsDir, mCacheDir;$/;"	m	class:FileManager	access:private
mSidewaysMovementScalar	inc/camera.h	/^    float mForwardMovementScalar, mSidewaysMovementScalar, mMouseSensitivityScalar, mScrollSensitivityScalar;$/;"	m	class:Camera	access:private
mSize	lib/__assimp/light.h	/^    C_STRUCT aiVector2D mSize;$/;"	m	struct:aiLight	access:public
mSphere	inc/scene_lights.h	/^	Sphere mSphere;$/;"	m	class:SceneLights	access:private
mStartTime	inc/timer.h	/^	std::chrono::high_resolution_clock::time_point mStartTime;$/;"	m	class:Timer	access:private
mState	inc/device_manager.h	/^	State& mState;$/;"	m	class:DeviceManager	access:private
mState	inc/g_buffer.h	/^	State* mState;$/;"	m	class:GBuffer	access:private
mState	inc/renderer.h	/^	State mState;$/;"	m	class:Renderer	access:private
mState	inc/scene_lights.h	/^	State* mState;$/;"	m	class:SceneLights	access:private
mState	inc/shape/fullscreen_quad.h	/^	State& mState;$/;"	m	class:FullscreenQuad	access:private
mState	inc/shape/model.h	/^	State& mState;$/;"	m	class:Model	access:protected
mState	inc/shape/point_light.h	/^	State* mState;$/;"	m	class:PointLight	access:private
mState	inc/shape/skinned.h	/^	State& mState;$/;"	m	class:Skinned	access:protected
mState	inc/shape/sphere.h	/^	State& mState;$/;"	m	class:Sphere	access:private
mState	inc/shape/tquad.h	/^	State& mState;$/;"	m	class:TQuad	access:public
mState	inc/swapchain_manager.h	/^	State& mState;$/;"	m	class:SwapchainManager	access:private
mStringProperties	lib/__assimp/Exporter.hpp	/^    StringPropertyMap mStringProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mStringProperties	lib/assimp/Exporter.hpp	/^    StringPropertyMap mStringProperties;$/;"	m	class:Assimp::ExportProperties	access:protected
mSwapChainImageViews	inc/swapchain_manager.h	/^	std::vector<VkImageView> mSwapChainImageViews;$/;"	m	class:SwapchainManager	access:private
mSwapChainImages	inc/swapchain_manager.h	/^	std::vector<VkImage> mSwapChainImages;$/;"	m	class:SwapchainManager	access:private
mSwapChainManager	inc/renderer.h	/^	SwapchainManager mSwapChainManager;$/;"	m	class:Renderer	access:private
mTangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiAnimMesh	access:public
mTangents	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiMesh	access:public
mTangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiAnimMesh	access:public
mTangents	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTangents;$/;"	m	struct:aiMesh	access:public
mTaskManager	inc/engine.h	/^	TaskManager mTaskManager;$/;"	m	class:Engine	access:private
mTasks	inc/task_manager.h	/^	std::queue<Task*> mTasks;$/;"	m	class:TaskManager	access:private
mTasksMutex	inc/task_manager.h	/^	std::mutex mTasksMutex;$/;"	m	class:TaskManager	access:private
mTextureCoords	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiAnimMesh	access:public
mTextureCoords	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
mTextureCoords	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiAnimMesh	access:public
mTextureCoords	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mTextureCoords[AI_MAX_NUMBER_OF_TEXTURECOORDS];$/;"	m	struct:aiMesh	access:public
mTextureDesc	inc/shape/tquad.h	/^	ImageInfo *mTextureDesc;$/;"	m	class:TQuad	access:public
mTextures	lib/__assimp/scene.h	/^    C_STRUCT aiTexture** mTextures;$/;"	m	struct:aiScene	access:public
mTextures	lib/assimp/scene.h	/^    C_STRUCT aiTexture** mTextures;$/;"	m	struct:aiScene	access:public
mTicksPerSecond	lib/__assimp/anim.h	/^    double mTicksPerSecond;$/;"	m	struct:aiAnimation	access:public
mTicksPerSecond	lib/assimp/anim.h	/^    double mTicksPerSecond;$/;"	m	struct:aiAnimation	access:public
mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshKey	access:public
mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshMorphKey	access:public
mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiQuatKey	access:public
mTime	lib/__assimp/anim.h	/^    double mTime;$/;"	m	struct:aiVectorKey	access:public
mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiMeshKey	access:public
mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiQuatKey	access:public
mTime	lib/assimp/anim.h	/^    double mTime;$/;"	m	struct:aiVectorKey	access:public
mTimer	inc/engine.h	/^	Timer mTimer;$/;"	m	class:Engine	access:private
mTotalTime	inc/timer.h	/^	double mTotalTime;$/;"	m	class:Timer	access:private
mTransformation	lib/__assimp/scene.h	/^    C_STRUCT aiMatrix4x4 mTransformation;$/;"	m	struct:aiNode	access:public
mTransformation	lib/assimp/scene.h	/^    C_STRUCT aiMatrix4x4 mTransformation;$/;"	m	struct:aiNode	access:public
mTranslation	lib/__assimp/material.h	/^    C_STRUCT aiVector2D mTranslation;$/;"	m	struct:aiUVTransform	access:public
mTranslation	lib/assimp/material.h	/^    C_STRUCT aiVector2D mTranslation;$/;"	m	struct:aiUVTransform	access:public
mType	lib/__assimp/light.h	/^    C_ENUM aiLightSourceType mType;$/;"	m	struct:aiLight	access:public
mType	lib/__assimp/material.h	/^    C_ENUM aiPropertyTypeInfo mType;$/;"	m	struct:aiMaterialProperty	access:public
mType	lib/__assimp/metadata.h	/^    aiMetadataType mType;$/;"	m	struct:aiMetadataEntry	access:public
mType	lib/assimp/light.h	/^    C_ENUM aiLightSourceType mType;$/;"	m	struct:aiLight	access:public
mType	lib/assimp/material.h	/^    C_ENUM aiPropertyTypeInfo mType;$/;"	m	struct:aiMaterialProperty	access:public
mType	lib/assimp/metadata.h	/^    aiMetadataType mType;$/;"	m	struct:aiMetadataEntry	access:public
mUniformBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
mUniformBufferInfo	inc/g_buffer.h	/^	BufferInfo mUniformBufferInfo;$/;"	m	class:GBuffer	access:private
mUniformBufferInfo	inc/scene_lights.h	/^	BufferInfo mUniformBufferInfo;$/;"	m	class:SceneLights	access:private
mUniformBufferOffset	inc/shape/tquad.h	/^				 mUniformBufferOffset;$/;"	m	class:TQuad	access:public
mUniformDescriptorSet	inc/shape/model.h	/^	VkDescriptorSet mUniformDescriptorSet;$/;"	m	class:Model	access:protected
mUniformDescriptorSet	inc/shape/skinned.h	/^	VkDescriptorSet mUniformDescriptorSet;$/;"	m	class:Skinned	access:protected
mUniformStagingBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
mUp	lib/__assimp/camera.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiCamera	access:public
mUp	lib/__assimp/light.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiLight	access:public
mUp	lib/assimp/camera.h	/^    C_STRUCT aiVector3D mUp;$/;"	m	struct:aiCamera	access:public
mValue	lib/__assimp/anim.h	/^    C_STRUCT aiQuaternion mValue;$/;"	m	struct:aiQuatKey	access:public
mValue	lib/__assimp/anim.h	/^    C_STRUCT aiVector3D mValue;$/;"	m	struct:aiVectorKey	access:public
mValue	lib/__assimp/anim.h	/^    unsigned int mValue;$/;"	m	struct:aiMeshKey	access:public
mValue	lib/assimp/anim.h	/^    C_STRUCT aiQuaternion mValue;$/;"	m	struct:aiQuatKey	access:public
mValue	lib/assimp/anim.h	/^    C_STRUCT aiVector3D mValue;$/;"	m	struct:aiVectorKey	access:public
mValue	lib/assimp/anim.h	/^    unsigned int mValue;$/;"	m	struct:aiMeshKey	access:public
mValues	lib/__assimp/anim.h	/^    unsigned int *mValues;$/;"	m	struct:aiMeshMorphKey	access:public
mValues	lib/__assimp/metadata.h	/^    C_STRUCT aiMetadataEntry* mValues;$/;"	m	struct:aiMetadata	access:public
mValues	lib/assimp/metadata.h	/^    C_STRUCT aiMetadataEntry* mValues;$/;"	m	struct:aiMetadata	access:public
mVertexBufferDesc	inc/shape/tquad.h	/^	BufferInfo mVertexBufferDesc, mIndexBufferDesc, mUniformBufferDesc, mUniformStagingBufferDesc;$/;"	m	class:TQuad	access:public
mVertexBufferOffset	inc/shape/tquad.h	/^	VkDeviceSize mVertexBufferOffset, $/;"	m	class:TQuad	access:public
mVertexId	lib/__assimp/mesh.h	/^    unsigned int mVertexId;$/;"	m	struct:aiVertexWeight	access:public
mVertexId	lib/assimp/mesh.h	/^    unsigned int mVertexId;$/;"	m	struct:aiVertexWeight	access:public
mVertices	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiAnimMesh	access:public
mVertices	lib/__assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiMesh	access:public
mVertices	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiAnimMesh	access:public
mVertices	lib/assimp/mesh.h	/^    C_STRUCT aiVector3D* mVertices;$/;"	m	struct:aiMesh	access:public
mView	inc/camera.h	/^    glm::mat4 mProj, mView;$/;"	m	class:Camera	access:private
mVkCommandPool	inc/cmd_pass.h	/^	const VkCommandPool& mVkCommandPool;$/;"	m	class:CmdPass	access:private
mVkDescriptorSet	inc/shape/tquad.h	/^	VkDescriptorSet mVkDescriptorSet;$/;"	m	class:TQuad	access:public
mVkDevice	inc/buffer_info.h	/^	const VkDevice& mVkDevice;$/;"	m	class:BufferInfo	access:private
mVkDevice	inc/cmd_pass.h	/^	const VkDevice& mVkDevice;$/;"	m	class:CmdPass	access:private
mVkDevice	inc/image_info.h	/^	VkDevice* mVkDevice;$/;"	m	class:ImageInfo	access:public
mVkQueue	inc/cmd_pass.h	/^	const VkQueue& mVkQueue;$/;"	m	class:CmdPass	access:private
mWeight	lib/__assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiAnimMesh	access:public
mWeight	lib/__assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiVertexWeight	access:public
mWeight	lib/assimp/mesh.h	/^    float mWeight;$/;"	m	struct:aiVertexWeight	access:public
mWeights	lib/__assimp/anim.h	/^    double *mWeights;$/;"	m	struct:aiMeshMorphKey	access:public
mWeights	lib/__assimp/mesh.h	/^    C_STRUCT aiVertexWeight* mWeights;$/;"	m	struct:aiBone	access:public
mWeights	lib/assimp/mesh.h	/^    C_STRUCT aiVertexWeight* mWeights;$/;"	m	struct:aiBone	access:public
mWidth	inc/window.h	/^	unsigned mWidth, mHeight;$/;"	m	class:Window	access:private
mWidth	lib/__assimp/texture.h	/^    unsigned int mWidth;$/;"	m	struct:aiTexture	access:public
mWidth	lib/assimp/texture.h	/^    unsigned int mWidth;$/;"	m	struct:aiTexture	access:public
mWindow	inc/engine.h	/^	Window mWindow;$/;"	m	class:Engine	access:private
mWindow	inc/renderer.h	/^	Window& mWindow;$/;"	m	class:Renderer	access:private
mWindow	inc/swapchain_manager.h	/^	Window& mWindow;$/;"	m	class:SwapchainManager	access:private
mYaw	inc/camera.h	/^    float mPitch, mYaw;$/;"	m	class:Camera	access:private
m_Severity	lib/__assimp/Logger.hpp	/^    LogSeverity m_Severity;$/;"	m	class:Assimp::Logger	access:protected
m_Severity	lib/assimp/Logger.hpp	/^    LogSeverity m_Severity;$/;"	m	class:Assimp::Logger	access:protected
m_StreamArray	lib/__assimp/DefaultLogger.hpp	/^    StreamArray m_StreamArray;$/;"	m	class:Assimp::DefaultLogger	access:private
m_StreamArray	lib/assimp/DefaultLogger.hpp	/^    StreamArray m_StreamArray;$/;"	m	class:Assimp::DefaultLogger	access:private
m_pLogger	lib/__assimp/DefaultLogger.hpp	/^    static Logger *m_pLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
m_pLogger	lib/assimp/DefaultLogger.hpp	/^    static Logger *m_pLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
m_pathStack	lib/__assimp/IOSystem.hpp	/^    std::vector<std::string> m_pathStack;$/;"	m	class:Assimp::IOSystem	access:private
m_pathStack	lib/assimp/IOSystem.hpp	/^    std::vector<std::string> m_pathStack;$/;"	m	class:Assimp::IOSystem	access:private
ma	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
magFilter	lib/vulkan/vulkan.h	/^    VkFilter                magFilter;$/;"	m	struct:VkSamplerCreateInfo	access:public
main	lib/__assimp/Compiler/pstdint.h	/^int main () {$/;"	f	signature:()
main	lib/assimp/Compiler/pstdint.h	/^int main () {$/;"	f	signature:()
main	lib/glm/detail/dummy.cpp	/^int main()$/;"	f	signature:()
main	src/main.cpp	/^int main() {$/;"	f	signature:()
mapEntryCount	lib/vulkan/vulkan.h	/^    uint32_t                           mapEntryCount;$/;"	m	struct:VkSpecializationInfo	access:public
mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory($/;"	f	namespace:BufferHelper	signature:( const State& state, VkDeviceMemory& memory, VkDeviceSize offset, VkDeviceSize size, const void* src)
mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory($/;"	f	namespace:BufferHelper	signature:( const VkDevice& device, VkDeviceMemory& memory, VkDeviceSize offset, VkDeviceSize size, const void* src)
mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory(const State& state, BufferInfo& bufferInfo, const void* src)$/;"	f	namespace:BufferHelper	signature:(const State& state, BufferInfo& bufferInfo, const void* src)
mapMemory	inc/creator/buffer_helper.h	/^inline void mapMemory(const State& state, VkDeviceMemory& memory, VkDeviceSize size, const void* src)$/;"	f	namespace:BufferHelper	signature:(const State& state, VkDeviceMemory& memory, VkDeviceSize size, const void* src)
marker	lib/stb/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon63	access:public
mat	lib/glm/detail/type_mat2x2.hpp	/^	struct mat<2, 2, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat2x3.hpp	/^	struct mat<2, 3, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat2x4.hpp	/^	struct mat<2, 4, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat3x2.hpp	/^	struct mat<3, 2, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat3x3.hpp	/^	struct mat<3, 3, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat3x4.hpp	/^	struct mat<3, 4, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat4x2.hpp	/^	struct mat<4, 2, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat4x3.hpp	/^	struct mat<4, 3, T, P>$/;"	s	namespace:glm
mat	lib/glm/detail/type_mat4x4.hpp	/^	struct mat<4, 4, T, P>$/;"	s	namespace:glm
mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat2x2					mat2;$/;"	t	namespace:glm
mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x2			mat2x2;$/;"	t	namespace:glm
mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x2			mat2x2;$/;"	t	namespace:glm
mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x2		mat2x2;$/;"	t	namespace:glm
mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x3			mat2x3;$/;"	t	namespace:glm
mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x3			mat2x3;$/;"	t	namespace:glm
mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x3		mat2x3;$/;"	t	namespace:glm
mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat2x4			mat2x4;$/;"	t	namespace:glm
mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat2x4			mat2x4;$/;"	t	namespace:glm
mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat2x4		mat2x4;$/;"	t	namespace:glm
mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat3x3					mat3;$/;"	t	namespace:glm
mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x2			mat3x2;$/;"	t	namespace:glm
mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x2			mat3x2;$/;"	t	namespace:glm
mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x2		mat3x2;$/;"	t	namespace:glm
mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x3			mat3x3;$/;"	t	namespace:glm
mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x3			mat3x3;$/;"	t	namespace:glm
mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x3		mat3x3;$/;"	t	namespace:glm
mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat3x4			mat3x4;$/;"	t	namespace:glm
mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat3x4			mat3x4;$/;"	t	namespace:glm
mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat3x4		mat3x4;$/;"	t	namespace:glm
mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat4x4					mat4;$/;"	t	namespace:glm
mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x2			mat4x2;$/;"	t	namespace:glm
mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x2			mat4x2;$/;"	t	namespace:glm
mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x2		mat4x2;$/;"	t	namespace:glm
mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x3			mat4x3;$/;"	t	namespace:glm
mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x3			mat4x3;$/;"	t	namespace:glm
mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x3		mat4x3;$/;"	t	namespace:glm
mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef highp_mat4x4			mat4x4;$/;"	t	namespace:glm
mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef lowp_mat4x4			mat4x4;$/;"	t	namespace:glm
mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mediump_mat4x4		mat4x4;$/;"	t	namespace:glm
materialIndex	inc/shape/model.h	/^		uint32_t materialIndex;$/;"	m	struct:Model::Mesh	access:public
materialIndex	inc/shape/skinned.h	/^		uint32_t materialIndex;$/;"	m	struct:Skinned::Mesh	access:public
materials	lib/__assimp/types.h	/^    unsigned int materials;$/;"	m	struct:aiMemoryInfo	access:public
materials	lib/assimp/types.h	/^    unsigned int materials;$/;"	m	struct:aiMemoryInfo	access:public
max	lib/glm/detail/_fixes.hpp	8;"	d
maxAnisotropy	lib/vulkan/vulkan.h	/^    float                   maxAnisotropy;$/;"	m	struct:VkSamplerCreateInfo	access:public
maxArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxArrayLayers;$/;"	m	struct:VkImageFormatProperties	access:public
maxBoundDescriptorSets	lib/vulkan/vulkan.h	/^    uint32_t              maxBoundDescriptorSets;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxClipDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxClipDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxColorAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxColorAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxCombinedClipAndCullDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxCombinedClipAndCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxComputeSharedMemorySize	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeSharedMemorySize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxComputeWorkGroupCount	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupCount[3];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxComputeWorkGroupInvocations	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupInvocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxComputeWorkGroupSize	lib/vulkan/vulkan.h	/^    uint32_t              maxComputeWorkGroupSize[3];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxCullDistances	lib/vulkan/vulkan.h	/^    uint32_t              maxCullDistances;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDepth	lib/vulkan/vulkan.h	/^    float    maxDepth;$/;"	m	struct:VkViewport	access:public
maxDepthBounds	lib/vulkan/vulkan.h	/^    float                                     maxDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
maxDescriptorSetInputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetSampledImages	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetSamplers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetSamplers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetStorageBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetStorageBuffersDynamic	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetStorageImages	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetUniformBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDescriptorSetUniformBuffersDynamic	/home/al/amvk/inc/state.h	/^	uint32_t maxDescriptorSetUniformBuffersDynamic;$/;"	m	struct:DeviceInfo	access:public
maxDescriptorSetUniformBuffersDynamic	lib/vulkan/vulkan.h	/^    uint32_t              maxDescriptorSetUniformBuffersDynamic;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDrawIndexedIndexValue	lib/vulkan/vulkan.h	/^    uint32_t              maxDrawIndexedIndexValue;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDrawIndirectCount	lib/vulkan/vulkan.h	/^    uint32_t              maxDrawIndirectCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxDstExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     maxDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
maxDstPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     maxDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
maxExtent	lib/vulkan/vulkan.h	/^    VkExtent3D            maxExtent;$/;"	m	struct:VkImageFormatProperties	access:public
maxFragmentCombinedOutputResources	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentCombinedOutputResources;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFragmentDualSrcAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentDualSrcAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFragmentInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFragmentOutputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxFragmentOutputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFramebufferHeight	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferHeight;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFramebufferLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferLayers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxFramebufferWidth	lib/vulkan/vulkan.h	/^    uint32_t              maxFramebufferWidth;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxGeometryInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxGeometryOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxGeometryOutputVertices	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryOutputVertices;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxGeometryShaderInvocations	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryShaderInvocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxGeometryTotalOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxGeometryTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t                         maxImageArrayLayers;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
maxImageArrayLayers	lib/vulkan/vulkan.h	/^    uint32_t              maxImageArrayLayers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         maxImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
maxImageDimension1D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension1D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageDimension2D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension2D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageDimension3D	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimension3D;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageDimensionCube	lib/vulkan/vulkan.h	/^    uint32_t              maxImageDimensionCube;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxImageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       maxImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
maxImages	inc/shape/model.h	/^		uint32_t minImages, maxImages;$/;"	m	struct:Model::Material	access:public
maxInterpolationOffset	lib/vulkan/vulkan.h	/^    float                 maxInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxLod	lib/vulkan/vulkan.h	/^    float                   maxLod;$/;"	m	struct:VkSamplerCreateInfo	access:public
maxMemoryAllocationCount	lib/vulkan/vulkan.h	/^    uint32_t              maxMemoryAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxMipLevels	lib/vulkan/vulkan.h	/^    uint32_t              maxMipLevels;$/;"	m	struct:VkImageFormatProperties	access:public
maxPerStageDescriptorInputAttachments	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorInputAttachments;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageDescriptorSampledImages	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSampledImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageDescriptorSamplers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorSamplers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageDescriptorStorageBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageDescriptorStorageImages	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorStorageImages;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageDescriptorUniformBuffers	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageDescriptorUniformBuffers;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPerStageResources	lib/vulkan/vulkan.h	/^    uint32_t              maxPerStageResources;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxPushConstantsSize	/home/al/amvk/inc/state.h	/^	uint32_t maxPushConstantsSize;$/;"	m	struct:DeviceInfo	access:public
maxPushConstantsSize	lib/vulkan/vulkan.h	/^    uint32_t              maxPushConstantsSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxResourceSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          maxResourceSize;$/;"	m	struct:VkImageFormatProperties	access:public
maxSampleMaskWords	lib/vulkan/vulkan.h	/^    uint32_t              maxSampleMaskWords;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxSamplerAllocationCount	lib/vulkan/vulkan.h	/^    uint32_t              maxSamplerAllocationCount;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxSamplerAnisotropy	lib/vulkan/vulkan.h	/^    float                 maxSamplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxSamplerLodBias	lib/vulkan/vulkan.h	/^    float                 maxSamplerLodBias;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxSets	lib/vulkan/vulkan.h	/^    uint32_t                       maxSets;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
maxSrcExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     maxSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
maxSrcPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     maxSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
maxStorageBufferRange	lib/vulkan/vulkan.h	/^    uint32_t              maxStorageBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationControlPerPatchOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerPatchOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationControlPerVertexInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationControlPerVertexOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlPerVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationControlTotalOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationControlTotalOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationEvaluationInputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationInputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationEvaluationOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationEvaluationOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationGenerationLevel	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationGenerationLevel;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTessellationPatchSize	lib/vulkan/vulkan.h	/^    uint32_t              maxTessellationPatchSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTexelBufferElements	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelBufferElements;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTexelGatherOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxTexelOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxUniformBufferRange	lib/vulkan/vulkan.h	/^    uint32_t              maxUniformBufferRange;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxVectorSize	inc/util.h	/^int maxVectorSize(std::initializer_list<std::vector<T>& > vectors)$/;"	f	signature:(std::initializer_list<std::vector<T>& > vectors)
maxVertexInputAttributeOffset	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributeOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxVertexInputAttributes	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputAttributes;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxVertexInputBindingStride	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindingStride;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxVertexInputBindings	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexInputBindings;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxVertexOutputComponents	lib/vulkan/vulkan.h	/^    uint32_t              maxVertexOutputComponents;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxViewportDimensions	lib/vulkan/vulkan.h	/^    uint32_t              maxViewportDimensions[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
maxViewports	lib/vulkan/vulkan.h	/^    uint32_t              maxViewports;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
max_x	lib/stb/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon74	access:public
max_y	lib/stb/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon74	access:public
maxcode	lib/stb/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon66	access:public
maxcode	lib/stb/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon62	access:public
mb	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
mediump	lib/glm/detail/precision.hpp	/^		mediump = packed_mediump,$/;"	e	enum:glm::precision
mediump_bvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_bvec1_t			mediump_bvec1;$/;"	t	namespace:glm
mediump_bvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, bool, mediump>	mediump_bvec1_t;$/;"	t	namespace:glm
mediump_bvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm
mediump_bvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm
mediump_bvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm
mediump_ddualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm
mediump_dmat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2;$/;"	t	namespace:glm
mediump_dmat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm
mediump_dmat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm
mediump_dmat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm
mediump_dmat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3;$/;"	t	namespace:glm
mediump_dmat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm
mediump_dmat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm
mediump_dmat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm
mediump_dmat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4;$/;"	t	namespace:glm
mediump_dmat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm
mediump_dmat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm
mediump_dmat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm
mediump_dquat	lib/glm/fwd.hpp	/^	typedef tquat<double, mediump>	mediump_dquat;$/;"	t	namespace:glm
mediump_dualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm
mediump_dvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_dvec1_t			mediump_dvec1;$/;"	t	namespace:glm
mediump_dvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, double, mediump>	mediump_dvec1_t;$/;"	t	namespace:glm
mediump_dvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, double, mediump>	mediump_dvec2;$/;"	t	namespace:glm
mediump_dvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, double, mediump>	mediump_dvec3;$/;"	t	namespace:glm
mediump_dvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, double, mediump>	mediump_dvec4;$/;"	t	namespace:glm
mediump_f32	lib/glm/fwd.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm
mediump_f32mat2	lib/glm/fwd.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm
mediump_f32mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm
mediump_f32mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm
mediump_f32mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm
mediump_f32mat3	lib/glm/fwd.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm
mediump_f32mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm
mediump_f32mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm
mediump_f32mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm
mediump_f32mat4	lib/glm/fwd.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm
mediump_f32mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm
mediump_f32mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm
mediump_f32mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm
mediump_f32quat	lib/glm/fwd.hpp	/^	typedef tquat<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm
mediump_f32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm
mediump_f32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm
mediump_f32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm
mediump_f32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm
mediump_f64	lib/glm/fwd.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm
mediump_f64mat2	lib/glm/fwd.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm
mediump_f64mat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm
mediump_f64mat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm
mediump_f64mat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm
mediump_f64mat3	lib/glm/fwd.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm
mediump_f64mat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm
mediump_f64mat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm
mediump_f64mat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm
mediump_f64mat4	lib/glm/fwd.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm
mediump_f64mat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm
mediump_f64mat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm
mediump_f64mat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm
mediump_f64quat	lib/glm/fwd.hpp	/^	typedef tquat<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm
mediump_f64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm
mediump_f64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm
mediump_f64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm
mediump_f64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm
mediump_fdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm
mediump_float	lib/glm/detail/type_float.hpp	/^	typedef mediump_float_t		mediump_float;$/;"	t	namespace:glm
mediump_float32	lib/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32;$/;"	t	namespace:glm
mediump_float32_t	lib/glm/fwd.hpp	/^	typedef detail::float32 mediump_float32_t;$/;"	t	namespace:glm
mediump_float64	lib/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64;$/;"	t	namespace:glm
mediump_float64_t	lib/glm/fwd.hpp	/^	typedef detail::float64 mediump_float64_t;$/;"	t	namespace:glm
mediump_float_t	lib/glm/detail/type_float.hpp	/^	typedef float				mediump_float_t;$/;"	t	namespace:glm
mediump_fmat2	lib/glm/fwd.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm
mediump_fmat2x2	lib/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm
mediump_fmat2x3	lib/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm
mediump_fmat2x4	lib/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm
mediump_fmat3	lib/glm/fwd.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm
mediump_fmat3x2	lib/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm
mediump_fmat3x3	lib/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm
mediump_fmat3x4	lib/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm
mediump_fmat4	lib/glm/fwd.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm
mediump_fmat4x2	lib/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm
mediump_fmat4x3	lib/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm
mediump_fmat4x4	lib/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm
mediump_fquat	lib/glm/fwd.hpp	/^	typedef mediump_quat		mediump_fquat;$/;"	t	namespace:glm
mediump_fvec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, mediump> mediump_fvec1;$/;"	t	namespace:glm
mediump_fvec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, mediump> mediump_fvec2;$/;"	t	namespace:glm
mediump_fvec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, mediump> mediump_fvec3;$/;"	t	namespace:glm
mediump_fvec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, mediump> mediump_fvec4;$/;"	t	namespace:glm
mediump_i16	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
mediump_i16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm
mediump_i16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm
mediump_i16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm
mediump_i16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm
mediump_i16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm
mediump_i32	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
mediump_i32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm
mediump_i32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm
mediump_i32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm
mediump_i32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm
mediump_i32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm
mediump_i64	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
mediump_i64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm
mediump_i64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm
mediump_i64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm
mediump_i64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm
mediump_i64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm
mediump_i8	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
mediump_i8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm
mediump_i8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm
mediump_i8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm
mediump_i8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm
mediump_i8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm
mediump_imat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2;$/;"	t	namespace:glm
mediump_imat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm
mediump_imat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm
mediump_imat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm
mediump_imat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3;$/;"	t	namespace:glm
mediump_imat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm
mediump_imat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm
mediump_imat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm
mediump_imat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4;$/;"	t	namespace:glm
mediump_imat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm
mediump_imat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm
mediump_imat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm
mediump_int	lib/glm/detail/type_int.hpp	/^	typedef detail::mediump_int_t			mediump_int;$/;"	t	namespace:glm
mediump_int16	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
mediump_int16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm
mediump_int16_t	lib/glm/fwd.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
mediump_int16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm
mediump_int32	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
mediump_int32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm
mediump_int32_t	lib/glm/fwd.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
mediump_int32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm
mediump_int64	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
mediump_int64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm
mediump_int64_t	lib/glm/fwd.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
mediump_int64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm
mediump_int8	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
mediump_int8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm
mediump_int8_t	lib/glm/fwd.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
mediump_int8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm
mediump_int_t	lib/glm/detail/type_int.hpp	/^	typedef signed int						mediump_int_t;$/;"	t	namespace:glm::detail
mediump_ivec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_ivec1_t			mediump_ivec1;$/;"	t	namespace:glm
mediump_ivec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, int, mediump>	mediump_ivec1_t;$/;"	t	namespace:glm
mediump_ivec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, int, mediump>		mediump_ivec2;$/;"	t	namespace:glm
mediump_ivec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, int, mediump>		mediump_ivec3;$/;"	t	namespace:glm
mediump_ivec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, int, mediump>		mediump_ivec4;$/;"	t	namespace:glm
mediump_mat2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2;$/;"	t	namespace:glm
mediump_mat2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, mediump>		mediump_mat2;$/;"	t	namespace:glm
mediump_mat2x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2x2;$/;"	t	namespace:glm
mediump_mat2x2	lib/glm/mat2x2.hpp	/^	typedef mat<2, 2, float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm
mediump_mat2x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 3, float, mediump>	mediump_mat2x3;$/;"	t	namespace:glm
mediump_mat2x3	lib/glm/mat2x3.hpp	/^	typedef mat<2, 3, float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm
mediump_mat2x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<2, 4, float, mediump>	mediump_mat2x4;$/;"	t	namespace:glm
mediump_mat2x4	lib/glm/mat2x4.hpp	/^	typedef mat<2, 4, float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm
mediump_mat3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3;$/;"	t	namespace:glm
mediump_mat3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, mediump>		mediump_mat3;$/;"	t	namespace:glm
mediump_mat3x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 2, float, mediump>	mediump_mat3x2;$/;"	t	namespace:glm
mediump_mat3x2	lib/glm/mat3x2.hpp	/^	typedef mat<3, 2, float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm
mediump_mat3x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3x3;$/;"	t	namespace:glm
mediump_mat3x3	lib/glm/mat3x3.hpp	/^	typedef mat<3, 3, float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm
mediump_mat3x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<3, 4, float, mediump>	mediump_mat3x4;$/;"	t	namespace:glm
mediump_mat3x4	lib/glm/mat3x4.hpp	/^	typedef mat<3, 4, float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm
mediump_mat4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4;$/;"	t	namespace:glm
mediump_mat4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, mediump>		mediump_mat4;$/;"	t	namespace:glm
mediump_mat4x2	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 2, float, mediump>	mediump_mat4x2;$/;"	t	namespace:glm
mediump_mat4x2	lib/glm/mat4x2.hpp	/^	typedef mat<4, 2, float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm
mediump_mat4x3	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 3, float, mediump>	mediump_mat4x3;$/;"	t	namespace:glm
mediump_mat4x3	lib/glm/mat4x3.hpp	/^	typedef mat<4, 3, float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm
mediump_mat4x4	lib/glm/detail/type_mat.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4x4;$/;"	t	namespace:glm
mediump_mat4x4	lib/glm/mat4x4.hpp	/^	typedef mat<4, 4, float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm
mediump_quat	lib/glm/fwd.hpp	/^	typedef tquat<float, mediump>	mediump_quat;$/;"	t	namespace:glm
mediump_u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
mediump_u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm
mediump_u16vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm
mediump_u16vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm
mediump_u16vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm
mediump_u16vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm
mediump_u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
mediump_u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm
mediump_u32vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm
mediump_u32vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm
mediump_u32vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm
mediump_u32vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm
mediump_u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
mediump_u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm
mediump_u64vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm
mediump_u64vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm
mediump_u64vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm
mediump_u64vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm
mediump_u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
mediump_u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm
mediump_u8vec1	lib/glm/fwd.hpp	/^	typedef vec<1, u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm
mediump_u8vec2	lib/glm/fwd.hpp	/^	typedef vec<2, u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm
mediump_u8vec3	lib/glm/fwd.hpp	/^	typedef vec<3, u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm
mediump_u8vec4	lib/glm/fwd.hpp	/^	typedef vec<4, u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm
mediump_uint	lib/glm/detail/type_int.hpp	/^	typedef detail::mediump_uint_t			mediump_uint;$/;"	t	namespace:glm
mediump_uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
mediump_uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm
mediump_uint16_t	lib/glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
mediump_uint16_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm
mediump_uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
mediump_uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm
mediump_uint32_t	lib/glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
mediump_uint32_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm
mediump_uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
mediump_uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm
mediump_uint64_t	lib/glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
mediump_uint64_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm
mediump_uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
mediump_uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm
mediump_uint8_t	lib/glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
mediump_uint8_t	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm
mediump_uint_t	lib/glm/detail/type_int.hpp	/^	typedef unsigned int					mediump_uint_t;$/;"	t	namespace:glm::detail
mediump_umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2;$/;"	t	namespace:glm
mediump_umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm
mediump_umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm
mediump_umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm
mediump_umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3;$/;"	t	namespace:glm
mediump_umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm
mediump_umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm
mediump_umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm
mediump_umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4;$/;"	t	namespace:glm
mediump_umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm
mediump_umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm
mediump_umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm
mediump_uvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1_t			mediump_uvec1;$/;"	t	namespace:glm
mediump_uvec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, uint, mediump>	mediump_uvec1_t;$/;"	t	namespace:glm
mediump_uvec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm
mediump_uvec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm
mediump_uvec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm
mediump_vec1	lib/glm/fwd.hpp	/^	typedef vec<1, float, mediump> mediump_vec1;$/;"	t	namespace:glm
mediump_vec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_vec1_t			mediump_vec1;$/;"	t	namespace:glm
mediump_vec1_t	lib/glm/detail/type_vec.hpp	/^	typedef vec<1, float, mediump>	mediump_vec1_t;$/;"	t	namespace:glm
mediump_vec2	lib/glm/detail/type_vec.hpp	/^	typedef vec<2, float, mediump>	mediump_vec2;$/;"	t	namespace:glm
mediump_vec2	lib/glm/fwd.hpp	/^	typedef vec<2, float, mediump> mediump_vec2;$/;"	t	namespace:glm
mediump_vec3	lib/glm/detail/type_vec.hpp	/^	typedef vec<3, float, mediump>	mediump_vec3;$/;"	t	namespace:glm
mediump_vec3	lib/glm/fwd.hpp	/^	typedef vec<3, float, mediump> mediump_vec3;$/;"	t	namespace:glm
mediump_vec4	lib/glm/detail/type_vec.hpp	/^	typedef vec<4, float, mediump>	mediump_vec4;$/;"	t	namespace:glm
mediump_vec4	lib/glm/fwd.hpp	/^	typedef vec<4, float, mediump> mediump_vec4;$/;"	t	namespace:glm
memory	inc/buffer_info.h	/^	VkDeviceMemory memory;$/;"	m	class:BufferInfo	access:public
memory	inc/g_buffer.h	/^	VkDeviceMemory memory;$/;"	m	struct:FramebufferAttachment	access:public
memory	inc/image_info.h	/^	VkDeviceMemory memory;$/;"	m	class:ImageInfo	access:public
memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseImageMemoryBind	access:public
memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory             memory;$/;"	m	struct:VkSparseMemoryBind	access:public
memory	lib/vulkan/vulkan.h	/^    VkDeviceMemory     memory;$/;"	m	struct:VkMappedMemoryRange	access:public
memoryHeapCount	lib/vulkan/vulkan.h	/^    uint32_t        memoryHeapCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
memoryHeaps	lib/vulkan/vulkan.h	/^    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
memoryOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseImageMemoryBind	access:public
memoryOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               memoryOffset;$/;"	m	struct:VkSparseMemoryBind	access:public
memoryTypeBits	lib/vulkan/vulkan.h	/^    uint32_t        memoryTypeBits;$/;"	m	struct:VkMemoryRequirements	access:public
memoryTypeCount	lib/vulkan/vulkan.h	/^    uint32_t        memoryTypeCount;$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
memoryTypeIndex	lib/vulkan/vulkan.h	/^    uint32_t           memoryTypeIndex;$/;"	m	struct:VkMemoryAllocateInfo	access:public
memoryTypes	lib/vulkan/vulkan.h	/^    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];$/;"	m	struct:VkPhysicalDeviceMemoryProperties	access:public
meshes	lib/__assimp/types.h	/^    unsigned int meshes;$/;"	m	struct:aiMemoryInfo	access:public
meshes	lib/assimp/types.h	/^    unsigned int meshes;$/;"	m	struct:aiMemoryInfo	access:public
mg	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
min	lib/glm/detail/_fixes.hpp	13;"	d
minDepth	lib/vulkan/vulkan.h	/^    float    minDepth;$/;"	m	struct:VkViewport	access:public
minDepthBounds	lib/vulkan/vulkan.h	/^    float                                     minDepthBounds;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
minDstExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     minDstExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
minDstPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     minDstPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
minFilter	lib/vulkan/vulkan.h	/^    VkFilter                minFilter;$/;"	m	struct:VkSamplerCreateInfo	access:public
minImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
minImageCount	lib/vulkan/vulkan.h	/^    uint32_t                         minImageCount;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
minImageExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                       minImageExtent;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
minImageTransferGranularity	lib/vulkan/vulkan.h	/^    VkExtent3D      minImageTransferGranularity;$/;"	m	struct:VkQueueFamilyProperties	access:public
minImages	inc/shape/model.h	/^		uint32_t minImages, maxImages;$/;"	m	struct:Model::Material	access:public
minInterpolationOffset	lib/vulkan/vulkan.h	/^    float                 minInterpolationOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minLod	lib/vulkan/vulkan.h	/^    float                   minLod;$/;"	m	struct:VkSamplerCreateInfo	access:public
minMemoryMapAlignment	lib/vulkan/vulkan.h	/^    size_t                minMemoryMapAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minSampleShading	lib/vulkan/vulkan.h	/^    float                                    minSampleShading;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
minSrcExtent	lib/vulkan/vulkan.h	/^    VkExtent2D                     minSrcExtent;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
minSrcPosition	lib/vulkan/vulkan.h	/^    VkOffset2D                     minSrcPosition;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
minStorageBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minStorageBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minTexelBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minTexelBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minTexelGatherOffset	lib/vulkan/vulkan.h	/^    int32_t               minTexelGatherOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minTexelOffset	lib/vulkan/vulkan.h	/^    int32_t               minTexelOffset;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minUniformBufferOffsetAlignment	/home/al/amvk/inc/state.h	/^	VkDeviceSize minUniformBufferOffsetAlignment;$/;"	m	struct:DeviceInfo	access:public
minUniformBufferOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          minUniformBufferOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
minVectorSize	inc/util.h	/^int minVectorSize(std::initializer_list<std::vector<T>& > vectors)$/;"	f	signature:(std::initializer_list<std::vector<T>& > vectors)
mipLevel	lib/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresource	access:public
mipLevel	lib/vulkan/vulkan.h	/^    uint32_t              mipLevel;$/;"	m	struct:VkImageSubresourceLayers	access:public
mipLevels	lib/vulkan/vulkan.h	/^    uint32_t                 mipLevels;$/;"	m	struct:VkImageCreateInfo	access:public
mipLodBias	lib/vulkan/vulkan.h	/^    float                   mipLodBias;$/;"	m	struct:VkSamplerCreateInfo	access:public
mipmapMode	lib/vulkan/vulkan.h	/^    VkSamplerMipmapMode     mipmapMode;$/;"	m	struct:VkSamplerCreateInfo	access:public
mipmapPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              mipmapPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
mirSurface	lib/vulkan/vk_icd.h	/^    MirSurface *mirSurface;$/;"	m	struct:__anon78	access:public
mirSurface	lib/vulkan/vulkan.h	/^    MirSurface*                   mirSurface;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
mod289	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const & x)$/;"	f	namespace:glm::detail	signature:(T const & x)
model	/home/al/amvk/inc/state.h	/^	PipelineInfo model;$/;"	m	struct:Pipelines	access:public
model	/home/al/amvk/inc/state.h	/^	ShaderInfo model;$/;"	m	struct:Shaders	access:public
model	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout model;$/;"	m	struct:DescriptorSetLayouts	access:public
model	inc/shape/model.h	/^	    glm::mat4 model;$/;"	m	struct:Model::UBO	access:public
model	inc/shape/point_light.h	/^	    glm::mat4 model;$/;"	m	struct:PointLight::UBO	access:public
model	inc/shape/skinned.h	/^	    glm::mat4 model;$/;"	m	struct:Skinned::UBO	access:public
model	inc/shape/tquad.h	/^	    glm::mat4 model;$/;"	m	struct:TQuad::PushConstants	access:public
model	inc/shape/tquad.h	/^	    glm::mat4 model;$/;"	m	struct:TQuad::UBO	access:public
modelSet	inc/scene_lights.h	/^	VkDescriptorSet modelSet;$/;"	m	class:SceneLights	access:private
module	lib/vulkan/vulkan.h	/^    VkShaderModule                      module;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
mouseButtonCallback	src/engine.cpp	/^void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	signature:(GLFWwindow* window, int button, int action, int mods)
moveSideways	src/camera.cpp	/^void Camera::moveSideways(float direction, float dt)$/;"	f	class:Camera	signature:(float direction, float dt)
moveStraight	src/camera.cpp	/^void Camera::moveStraight(float direction, float dt)$/;"	f	class:Camera	signature:(float direction, float dt)
movingForward	inc/input_manager.h	/^    bool movingForward;$/;"	m	class:InputManager	access:public
movingSideways	inc/input_manager.h	/^    bool movingSideways;$/;"	m	class:InputManager	access:public
mr	lib/stb/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon71	access:public
multiDrawIndirect	lib/vulkan/vulkan.h	/^    VkBool32    multiDrawIndirect;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
multiViewport	lib/vulkan/vulkan.h	/^    VkBool32    multiViewport;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
multisampleStateNoMultisampleNoSampleShading	inc/creator/pipeline_builder.h	/^inline VkPipelineMultisampleStateCreateInfo multisampleStateNoMultisampleNoSampleShading()$/;"	f	namespace:PipelineBuilder	signature:()
name	lib/__assimp/cexport.h	/^    C_STRUCT aiString name;$/;"	m	struct:aiExportDataBlob	access:public
name	lib/assimp/cexport.h	/^    C_STRUCT aiString name;$/;"	m	struct:aiExportDataBlob	access:public
newAssimpIOSystem	src/file_manager.cpp	/^Assimp::AndroidJNIIOSystem* FileManager::newAssimpIOSystem() {$/;"	f	class:FileManager	signature:()
newLayout	lib/vulkan/vulkan.h	/^    VkImageLayout              newLayout;$/;"	m	struct:VkImageMemoryBarrier	access:public
newline	lib/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	access:public
next	lib/__assimp/cexport.h	/^    C_STRUCT aiExportDataBlob * next;$/;"	m	struct:aiExportDataBlob	access:public
next	lib/assimp/cexport.h	/^    C_STRUCT aiExportDataBlob * next;$/;"	m	struct:aiExportDataBlob	access:public
nice	lib/glm/detail/type_gentype.hpp	/^		nice,$/;"	e	enum:glm::profile
noRepeatMsg	lib/__assimp/DefaultLogger.hpp	/^    bool noRepeatMsg;$/;"	m	class:Assimp::DefaultLogger	access:private
noRepeatMsg	lib/assimp/DefaultLogger.hpp	/^    bool noRepeatMsg;$/;"	m	class:Assimp::DefaultLogger	access:private
nodes	lib/__assimp/types.h	/^    unsigned int nodes;$/;"	m	struct:aiMemoryInfo	access:public
nodes	lib/assimp/types.h	/^    unsigned int nodes;$/;"	m	struct:aiMemoryInfo	access:public
nomore	lib/stb/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon63	access:public
nonCoherentAtomSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          nonCoherentAtomSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
normal	inc/g_buffer.h	/^	inline FramebufferAttachment& normal() { return attachments[INDEX_NORMAL]; }$/;"	f	class:GBuffer	access:public	signature:()
normal	inc/shape/model.h	/^		glm::vec3 normal;$/;"	m	struct:Model::Vertex	access:public
normal	inc/shape/skinned.h	/^		glm::vec3 normal;$/;"	m	struct:Skinned::Vertex	access:public
null	lib/glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::genType::ctor
numBones	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
numImages	inc/shape/model.h	/^		uint32_t numImages;$/;"	m	struct:Model::Material	access:public
numIndices	inc/shape/model.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Model::Mesh	access:public
numIndices	inc/shape/model.h	/^	uint32_t numVertices, numIndices;$/;"	m	class:Model	access:public
numIndices	inc/shape/skinned.h	/^		uint32_t baseIndex, numIndices;$/;"	m	struct:Skinned::Mesh	access:public
numIndices	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
numIndices	inc/shape/sphere.h	/^	uint32_t numIndices;$/;"	m	class:Sphere	access:public
numIndices	inc/shape/tquad.h	/^	uint32_t numIndices;$/;"	m	class:TQuad	access:public
numSamplers	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
numVertices	inc/shape/model.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Model::Mesh	access:public
numVertices	inc/shape/model.h	/^	uint32_t numVertices, numIndices;$/;"	m	class:Model	access:public
numVertices	inc/shape/skinned.h	/^		uint32_t baseVertex, numVertices;$/;"	m	struct:Skinned::Mesh	access:public
numVertices	inc/shape/skinned.h	/^	uint32_t numVertices, numIndices, numBones, numSamplers;$/;"	m	class:Skinned	access:public
num_bits	lib/stb/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon67	access:public
num_operands	lib/vulkan/libspirv.h	/^  uint16_t num_operands;$/;"	m	struct:spv_parsed_instruction_t	access:public
num_words	lib/vulkan/libspirv.h	/^  uint16_t num_words;$/;"	m	struct:spv_parsed_instruction_t	access:public
num_words	lib/vulkan/libspirv.h	/^  uint16_t num_words;$/;"	m	struct:spv_parsed_operand_t	access:public
number_bit_width	lib/vulkan/libspirv.h	/^  uint32_t number_bit_width;$/;"	m	struct:spv_parsed_operand_t	access:public
number_kind	lib/vulkan/libspirv.h	/^  spv_number_kind_t number_kind;$/;"	m	struct:spv_parsed_operand_t	access:public
object	lib/vulkan/vulkan.h	/^    uint64_t                      object;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
object	lib/vulkan/vulkan.h	/^    uint64_t                      object;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
objectType	lib/vulkan/vulkan.h	/^    VkDebugReportObjectTypeEXT    objectType;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
objectType	lib/vulkan/vulkan.h	/^    VkDebugReportObjectTypeEXT    objectType;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
occlusionQueryEnable	lib/vulkan/vulkan.h	/^    VkBool32                         occlusionQueryEnable;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
occlusionQueryPrecise	lib/vulkan/vulkan.h	/^    VkBool32    occlusionQueryPrecise;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
offscreenSemaphore	inc/renderer.h	/^	VkSemaphore offscreenSemaphore;$/;"	m	class:Renderer	access:private
offset	lib/stb/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon71	access:public
offset	lib/vulkan/libspirv.h	/^  uint16_t offset;$/;"	m	struct:spv_parsed_operand_t	access:public
offset	lib/vulkan/vulkan.h	/^    VkDeviceSize               offset;$/;"	m	struct:VkBufferViewCreateInfo	access:public
offset	lib/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkBufferMemoryBarrier	access:public
offset	lib/vulkan/vulkan.h	/^    VkDeviceSize       offset;$/;"	m	struct:VkMappedMemoryRange	access:public
offset	lib/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkDescriptorBufferInfo	access:public
offset	lib/vulkan/vulkan.h	/^    VkDeviceSize    offset;$/;"	m	struct:VkSubresourceLayout	access:public
offset	lib/vulkan/vulkan.h	/^    VkOffset2D    offset;$/;"	m	struct:VkRect2D	access:public
offset	lib/vulkan/vulkan.h	/^    VkOffset3D                 offset;$/;"	m	struct:VkSparseImageMemoryBind	access:public
offset	lib/vulkan/vulkan.h	/^    uint32_t              offset;$/;"	m	struct:VkPushConstantRange	access:public
offset	lib/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkSpecializationMapEntry	access:public
offset	lib/vulkan/vulkan.h	/^    uint32_t    offset;$/;"	m	struct:VkVertexInputAttributeDescription	access:public
offsetLightUbos	inc/scene_lights.h	/^	VkDeviceSize offsetLightUbos;$/;"	m	class:SceneLights	access:private
offsetUbos	inc/scene_lights.h	/^	VkDeviceSize offsetUbos;$/;"	m	class:SceneLights	access:private
oldLayout	lib/vulkan/vulkan.h	/^    VkImageLayout              oldLayout;$/;"	m	struct:VkImageMemoryBarrier	access:public
oldSwapchain	lib/vulkan/vulkan.h	/^    VkSwapchainKHR                   oldSwapchain;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
old_out	lib/stb/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon74	access:public
onWindowResized	src/engine.cpp	/^void onWindowResized(GLFWwindow* window, int width, int height) {$/;"	f	signature:(GLFWwindow* window, int width, int height)
onWindowSizeChanged	src/renderer.cpp	/^void Renderer::onWindowSizeChanged(uint32_t width, uint32_t height)$/;"	f	class:Renderer	signature:(uint32_t width, uint32_t height)
opcode	lib/vulkan/libspirv.h	/^  uint16_t opcode;$/;"	m	struct:spv_parsed_instruction_t	access:public
operands	lib/vulkan/libspirv.h	/^  const spv_parsed_operand_t* operands;$/;"	m	struct:spv_parsed_instruction_t	access:public
operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator !=	lib/__assimp/anim.h	/^    bool operator != (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator !=	lib/__assimp/mesh.h	/^    bool operator != (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
operator !=	lib/__assimp/texture.h	/^    bool operator!= (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
operator !=	lib/__assimp/types.h	/^    bool operator != (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator !=	lib/__assimp/types.h	/^    bool operator!=(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
operator !=	lib/assimp/anim.h	/^    bool operator != (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator !=	lib/assimp/anim.h	/^    bool operator != (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator !=	lib/assimp/anim.h	/^    bool operator != (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator !=	lib/assimp/mesh.h	/^    bool operator != (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
operator !=	lib/assimp/texture.h	/^    bool operator!= (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
operator !=	lib/assimp/types.h	/^    bool operator != (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator !=	lib/assimp/types.h	/^    bool operator!=(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
operator ()	inc/texture_data.h	/^        size_t operator()(const TextureDesc& k) const$/;"	f	struct:std::hash	access:public	signature:(const TextureDesc& k) const
operator ()	lib/__assimp/anim.h	/^    void operator () (T& out,const T& a, const T& b, ai_real d) const {$/;"	f	struct:Assimp::Interpolator	access:public	signature:(T& out,const T& a, const T& b, ai_real d) const
operator ()	lib/__assimp/anim.h	/^    void operator () (aiQuaternion& out, const aiQuatKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out, const aiQuatKey& a, const aiQuatKey& b, ai_real d) const
operator ()	lib/__assimp/anim.h	/^    void operator () (aiQuaternion& out,const aiQuaternion& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out,const aiQuaternion& a, const aiQuaternion& b, ai_real d) const
operator ()	lib/__assimp/anim.h	/^    void operator () (aiVector3D& out,const aiVectorKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiVector3D& out,const aiVectorKey& a, const aiVectorKey& b, ai_real d) const
operator ()	lib/__assimp/anim.h	/^    void operator () (unsigned int& out, const aiMeshKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out, const aiMeshKey& a, const aiMeshKey& b, ai_real d) const
operator ()	lib/__assimp/anim.h	/^    void operator () (unsigned int& out,unsigned int a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out,unsigned int a, unsigned int b, ai_real d) const
operator ()	lib/assimp/anim.h	/^    void operator () (T& out,const T& a, const T& b, float d) const {$/;"	f	struct:Assimp::Interpolator	access:public	signature:(T& out,const T& a, const T& b, float d) const
operator ()	lib/assimp/anim.h	/^    void operator () (aiQuaternion& out, const aiQuatKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out, const aiQuatKey& a, const aiQuatKey& b, float d) const
operator ()	lib/assimp/anim.h	/^    void operator () (aiQuaternion& out,const aiQuaternion& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiQuaternion& out,const aiQuaternion& a, const aiQuaternion& b, float d) const
operator ()	lib/assimp/anim.h	/^    void operator () (aiVector3D& out,const aiVectorKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(aiVector3D& out,const aiVectorKey& a, const aiVectorKey& b, float d) const
operator ()	lib/assimp/anim.h	/^    void operator () (unsigned int& out, const aiMeshKey& a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out, const aiMeshKey& a, const aiMeshKey& b, float d) const
operator ()	lib/assimp/anim.h	/^    void operator () (unsigned int& out,unsigned int a,$/;"	f	struct:Assimp::Interpolator	access:public	signature:(unsigned int& out,unsigned int a, unsigned int b, float d) const
operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<2, T, P> operator ()()  const { return vec<2, T, P>(this->elem(E0), this->elem(E1)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<3, T, P> operator ()()  const { return vec<3, T, P>(this->elem(E0), this->elem(E1), this->elem(E2)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
operator ()	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<4, T, P> operator ()()  const { return vec<4, T, P>(this->elem(E0), this->elem(E1), this->elem(E2), this->elem(E3)); }$/;"	f	struct:glm::detail::_swizzle_base1	access:public	signature:() const
operator *	lib/__assimp/types.h	/^    aiColor3D operator*(ai_real f) const {$/;"	f	struct:aiColor3D	access:public	signature:(ai_real f) const
operator *	lib/__assimp/types.h	/^    aiColor3D operator*(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator *	lib/assimp/types.h	/^    aiColor3D operator*(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator *	lib/assimp/types.h	/^    aiColor3D operator*(float f) const {$/;"	f	struct:aiColor3D	access:public	signature:(float f) const
operator *=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
operator +	lib/__assimp/types.h	/^    aiColor3D operator+(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator +	lib/assimp/types.h	/^    aiColor3D operator+(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator +=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
operator -	lib/__assimp/types.h	/^    aiColor3D operator-(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator -	lib/assimp/types.h	/^    aiColor3D operator-(const aiColor3D& c) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& c) const
operator -=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
operator /=	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
operator <	lib/__assimp/anim.h	/^    bool operator < (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator <	lib/__assimp/anim.h	/^    bool operator < (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator <	lib/__assimp/anim.h	/^    bool operator < (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator <	lib/__assimp/types.h	/^    bool operator < (const aiColor3D& other) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator <	lib/assimp/anim.h	/^    bool operator < (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator <	lib/assimp/anim.h	/^    bool operator < (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator <	lib/assimp/anim.h	/^    bool operator < (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator <	lib/assimp/types.h	/^    bool operator < (const aiColor3D& other) const {$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator =	lib/__assimp/mesh.h	/^    aiFace& operator = ( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
operator =	lib/__assimp/types.h	/^    aiString& operator = ( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
operator =	lib/__assimp/types.h	/^    aiString& operator = (const char* sz) {$/;"	f	struct:aiString	access:public	signature:(const char* sz)
operator =	lib/assimp/mesh.h	/^    aiFace& operator = ( const aiFace& o)$/;"	f	struct:aiFace	access:public	signature:( const aiFace& o)
operator =	lib/assimp/types.h	/^    aiString& operator = ( const std::string& pString) {$/;"	f	struct:aiString	access:public	signature:( const std::string& pString)
operator =	lib/assimp/types.h	/^    aiString& operator = (const char* sz) {$/;"	f	struct:aiString	access:public	signature:(const char* sz)
operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const &) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(Stub const &)
operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const T& t)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(const T& t)
operator =	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (vec<N, T, P> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(vec<N, T, P> const& that)
operator =	src/image_info.cpp	/^ImageInfo& ImageInfo::operator=(ImageInfo other) $/;"	f	class:ImageInfo	signature:(ImageInfo other)
operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator ==	lib/__assimp/anim.h	/^    bool operator == (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator ==	lib/__assimp/mesh.h	/^    bool operator== (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
operator ==	lib/__assimp/texture.h	/^    bool operator== (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
operator ==	lib/__assimp/types.h	/^    bool operator == (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator ==	lib/__assimp/types.h	/^    bool operator==(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
operator ==	lib/assimp/anim.h	/^    bool operator == (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator ==	lib/assimp/anim.h	/^    bool operator == (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator ==	lib/assimp/anim.h	/^    bool operator == (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator ==	lib/assimp/mesh.h	/^    bool operator== (const aiFace& o) const$/;"	f	struct:aiFace	access:public	signature:(const aiFace& o) const
operator ==	lib/assimp/texture.h	/^    bool operator== (const aiTexel& other) const$/;"	f	struct:aiTexel	access:public	signature:(const aiTexel& other) const
operator ==	lib/assimp/types.h	/^    bool operator == (const aiColor3D& other) const$/;"	f	struct:aiColor3D	access:public	signature:(const aiColor3D& other) const
operator ==	lib/assimp/types.h	/^    bool operator==(const aiString& other) const {$/;"	f	struct:aiString	access:public	signature:(const aiString& other) const
operator ==	src/texture_data.cpp	/^bool TextureDesc::operator==(const TextureDesc &other) const$/;"	f	class:TextureDesc	signature:(const TextureDesc &other) const
operator >	lib/__assimp/anim.h	/^    bool operator > (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator >	lib/__assimp/anim.h	/^    bool operator > (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator >	lib/__assimp/anim.h	/^    bool operator > (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator >	lib/assimp/anim.h	/^    bool operator > (const aiMeshKey& o) const {$/;"	f	struct:aiMeshKey	access:public	signature:(const aiMeshKey& o) const
operator >	lib/assimp/anim.h	/^    bool operator > (const aiQuatKey& o) const {$/;"	f	struct:aiQuatKey	access:public	signature:(const aiQuatKey& o) const
operator >	lib/assimp/anim.h	/^    bool operator > (const aiVectorKey& o) const {$/;"	f	struct:aiVectorKey	access:public	signature:(const aiVectorKey& o) const
operator []	lib/__assimp/types.h	/^    ai_real operator[](unsigned int i) const {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i) const
operator []	lib/__assimp/types.h	/^    ai_real& operator[](unsigned int i) {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i)
operator []	lib/assimp/types.h	/^    float operator[](unsigned int i) const {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i) const
operator []	lib/assimp/types.h	/^    float& operator[](unsigned int i) {$/;"	f	struct:aiColor3D	access:public	signature:(unsigned int i)
operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i) const
operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[](size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i) const
operator []	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& operator[](size_t i)$/;"	f	struct:glm::detail::_swizzle_base2	access:public	signature:(size_t i)
operator aiColor4D	lib/__assimp/texture.h	/^    operator aiColor4D() const$/;"	f	struct:aiTexel	access:public	signature:() const
operator aiColor4D	lib/assimp/texture.h	/^    operator aiColor4D() const$/;"	f	struct:aiTexel	access:public	signature:() const
operator vec<N, T, P>	lib/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator vec<N, T, P> () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle	access:public	signature:() const
operator |	lib/vulkan/spirv.hpp	/^inline FPFastMathModeMask operator|(FPFastMathModeMask a, FPFastMathModeMask b) { return FPFastMathModeMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(FPFastMathModeMask a, FPFastMathModeMask b)
operator |	lib/vulkan/spirv.hpp	/^inline FunctionControlMask operator|(FunctionControlMask a, FunctionControlMask b) { return FunctionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(FunctionControlMask a, FunctionControlMask b)
operator |	lib/vulkan/spirv.hpp	/^inline ImageOperandsMask operator|(ImageOperandsMask a, ImageOperandsMask b) { return ImageOperandsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(ImageOperandsMask a, ImageOperandsMask b)
operator |	lib/vulkan/spirv.hpp	/^inline KernelProfilingInfoMask operator|(KernelProfilingInfoMask a, KernelProfilingInfoMask b) { return KernelProfilingInfoMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(KernelProfilingInfoMask a, KernelProfilingInfoMask b)
operator |	lib/vulkan/spirv.hpp	/^inline LoopControlMask operator|(LoopControlMask a, LoopControlMask b) { return LoopControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(LoopControlMask a, LoopControlMask b)
operator |	lib/vulkan/spirv.hpp	/^inline MemoryAccessMask operator|(MemoryAccessMask a, MemoryAccessMask b) { return MemoryAccessMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(MemoryAccessMask a, MemoryAccessMask b)
operator |	lib/vulkan/spirv.hpp	/^inline MemorySemanticsMask operator|(MemorySemanticsMask a, MemorySemanticsMask b) { return MemorySemanticsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(MemorySemanticsMask a, MemorySemanticsMask b)
operator |	lib/vulkan/spirv.hpp	/^inline SelectionControlMask operator|(SelectionControlMask a, SelectionControlMask b) { return SelectionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(SelectionControlMask a, SelectionControlMask b)
optimalBufferCopyOffsetAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyOffsetAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
optimalBufferCopyRowPitchAlignment	lib/vulkan/vulkan.h	/^    VkDeviceSize          optimalBufferCopyRowPitchAlignment;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
optimalTilingFeatures	lib/vulkan/vulkan.h	/^    VkFormatFeatureFlags    optimalTilingFeatures;$/;"	m	struct:VkFormatProperties	access:public
order	lib/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	access:public
order	lib/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order	lib/stb/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon63	access:public
order_type	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
out	lib/stb/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon69	access:public
out	lib/stb/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon74	access:public
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<2, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<3, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 2, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 3, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<4, 4, T, P, vec, vec>$/;"	s	namespace:glm::detail
outerProduct_trait	lib/glm/detail/type_mat.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
p	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
p	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
p	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
p	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
pApplicationInfo	lib/vulkan/vulkan.h	/^    const VkApplicationInfo*    pApplicationInfo;$/;"	m	struct:VkInstanceCreateInfo	access:public
pApplicationName	lib/vulkan/vulkan.h	/^    const char*        pApplicationName;$/;"	m	struct:VkApplicationInfo	access:public
pAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentDescription*    pAttachments;$/;"	m	struct:VkRenderPassCreateInfo	access:public
pAttachments	lib/vulkan/vulkan.h	/^    const VkImageView*          pAttachments;$/;"	m	struct:VkFramebufferCreateInfo	access:public
pAttachments	lib/vulkan/vulkan.h	/^    const VkPipelineColorBlendAttachmentState*    pAttachments;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
pBindings	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayoutBinding*    pBindings;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
pBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageMemoryBindInfo	access:public
pBinds	lib/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseBufferMemoryBindInfo	access:public
pBinds	lib/vulkan/vulkan.h	/^    const VkSparseMemoryBind*    pBinds;$/;"	m	struct:VkSparseImageOpaqueMemoryBindInfo	access:public
pBufferBinds	lib/vulkan/vulkan.h	/^    const VkSparseBufferMemoryBindInfo*         pBufferBinds;$/;"	m	struct:VkBindSparseInfo	access:public
pBufferInfo	lib/vulkan/vulkan.h	/^    const VkDescriptorBufferInfo*    pBufferInfo;$/;"	m	struct:VkWriteDescriptorSet	access:public
pClearValues	lib/vulkan/vulkan.h	/^    const VkClearValue*    pClearValues;$/;"	m	struct:VkRenderPassBeginInfo	access:public
pCode	lib/vulkan/vulkan.h	/^    const uint32_t*              pCode;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
pColorAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pColorAttachments;$/;"	m	struct:VkSubpassDescription	access:public
pColorBlendState	lib/vulkan/vulkan.h	/^    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pCommandBuffers	lib/vulkan/vulkan.h	/^    const VkCommandBuffer*         pCommandBuffers;$/;"	m	struct:VkSubmitInfo	access:public
pData	lib/vulkan/vulkan.h	/^    const void*                        pData;$/;"	m	struct:VkSpecializationInfo	access:public
pDependencies	lib/vulkan/vulkan.h	/^    const VkSubpassDependency*        pDependencies;$/;"	m	struct:VkRenderPassCreateInfo	access:public
pDepthStencilAttachment	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pDepthStencilAttachment;$/;"	m	struct:VkSubpassDescription	access:public
pDepthStencilState	lib/vulkan/vulkan.h	/^    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pDynamicState	lib/vulkan/vulkan.h	/^    const VkPipelineDynamicStateCreateInfo*          pDynamicState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pDynamicStates	lib/vulkan/vulkan.h	/^    const VkDynamicState*                pDynamicStates;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
pEnabledFeatures	lib/vulkan/vulkan.h	/^    const VkPhysicalDeviceFeatures*    pEnabledFeatures;$/;"	m	struct:VkDeviceCreateInfo	access:public
pEngineName	lib/vulkan/vulkan.h	/^    const char*        pEngineName;$/;"	m	struct:VkApplicationInfo	access:public
pImageBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageMemoryBindInfo*          pImageBinds;$/;"	m	struct:VkBindSparseInfo	access:public
pImageIndices	lib/vulkan/vulkan.h	/^    const uint32_t*          pImageIndices;$/;"	m	struct:VkPresentInfoKHR	access:public
pImageInfo	lib/vulkan/vulkan.h	/^    const VkDescriptorImageInfo*     pImageInfo;$/;"	m	struct:VkWriteDescriptorSet	access:public
pImageOpaqueBinds	lib/vulkan/vulkan.h	/^    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;$/;"	m	struct:VkBindSparseInfo	access:public
pImmutableSamplers	lib/vulkan/vulkan.h	/^    const VkSampler*      pImmutableSamplers;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
pInheritanceInfo	lib/vulkan/vulkan.h	/^    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
pInitialData	lib/vulkan/vulkan.h	/^    const void*                   pInitialData;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
pInputAssemblyState	lib/vulkan/vulkan.h	/^    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pInputAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pInputAttachments;$/;"	m	struct:VkSubpassDescription	access:public
pLayerInfo	lib/vulkan/vk_layer.h	/^        VkLayerDeviceLink *pLayerInfo;$/;"	m	union:__anon87::__anon88	access:public
pLayerInfo	lib/vulkan/vk_layer.h	/^        VkLayerInstanceLink *pLayerInfo;$/;"	m	union:__anon85::__anon86	access:public
pMapEntries	lib/vulkan/vulkan.h	/^    const VkSpecializationMapEntry*    pMapEntries;$/;"	m	struct:VkSpecializationInfo	access:public
pMarkerName	lib/vulkan/vulkan.h	/^    const char*        pMarkerName;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
pMultisampleState	lib/vulkan/vulkan.h	/^    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pName	lib/vulkan/vulkan.h	/^    const char*                         pName;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
pNext	lib/vulkan/vk_layer.h	/^    const void *pNext;$/;"	m	struct:__anon85	access:public
pNext	lib/vulkan/vk_layer.h	/^    const void *pNext;$/;"	m	struct:__anon87	access:public
pNext	lib/vulkan/vk_layer.h	/^    struct VkLayerDeviceLink_ *pNext;$/;"	m	struct:VkLayerDeviceLink_	typeref:struct:VkLayerDeviceLink_::VkLayerDeviceLink_	access:public
pNext	lib/vulkan/vk_layer.h	/^    struct VkLayerInstanceLink_ *pNext;$/;"	m	struct:VkLayerInstanceLink_	typeref:struct:VkLayerInstanceLink_::VkLayerInstanceLink_	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                      pNext;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                   pNext;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkBindSparseInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                 pNext;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                                pNext;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                               pNext;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                              pNext;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                            pNext;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                           pNext;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                          pNext;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                         pNext;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                        pNext;$/;"	m	struct:VkDeviceCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkRenderPassCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                       pNext;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                      pNext;$/;"	m	struct:VkWriteDescriptorSet	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                     pNext;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkSubmitInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                    pNext;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                   pNext;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                  pNext;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkFramebufferCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                 pNext;$/;"	m	struct:VkInstanceCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkBufferViewCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageMemoryBarrier	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkImageViewCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*                pNext;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*               pNext;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkImageCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*              pNext;$/;"	m	struct:VkPresentInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*             pNext;$/;"	m	struct:VkSamplerCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkBufferCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*            pNext;$/;"	m	struct:VkRenderPassBeginInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkEventCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*           pNext;$/;"	m	struct:VkFenceCreateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkApplicationInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkBufferMemoryBarrier	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkCopyDescriptorSet	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMappedMemoryRange	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryAllocateInfo	access:public
pNext	lib/vulkan/vulkan.h	/^    const void*        pNext;$/;"	m	struct:VkMemoryBarrier	access:public
pObjectName	lib/vulkan/vulkan.h	/^    const char*                   pObjectName;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
pPoolSizes	lib/vulkan/vulkan.h	/^    const VkDescriptorPoolSize*    pPoolSizes;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
pPreserveAttachments	lib/vulkan/vulkan.h	/^    const uint32_t*                 pPreserveAttachments;$/;"	m	struct:VkSubpassDescription	access:public
pPushConstantRanges	lib/vulkan/vulkan.h	/^    const VkPushConstantRange*      pPushConstantRanges;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
pQueueCreateInfos	lib/vulkan/vulkan.h	/^    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;$/;"	m	struct:VkDeviceCreateInfo	access:public
pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*                  pQueueFamilyIndices;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*          pQueueFamilyIndices;$/;"	m	struct:VkImageCreateInfo	access:public
pQueueFamilyIndices	lib/vulkan/vulkan.h	/^    const uint32_t*        pQueueFamilyIndices;$/;"	m	struct:VkBufferCreateInfo	access:public
pQueuePriorities	lib/vulkan/vulkan.h	/^    const float*                pQueuePriorities;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
pRasterizationState	lib/vulkan/vulkan.h	/^    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pResolveAttachments	lib/vulkan/vulkan.h	/^    const VkAttachmentReference*    pResolveAttachments;$/;"	m	struct:VkSubpassDescription	access:public
pResults	lib/vulkan/vulkan.h	/^    VkResult*                pResults;$/;"	m	struct:VkPresentInfoKHR	access:public
pSampleMask	lib/vulkan/vulkan.h	/^    const VkSampleMask*                      pSampleMask;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
pScissors	lib/vulkan/vulkan.h	/^    const VkRect2D*                       pScissors;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
pSetLayouts	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
pSetLayouts	lib/vulkan/vulkan.h	/^    const VkDescriptorSetLayout*    pSetLayouts;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
pSignalSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*                          pSignalSemaphores;$/;"	m	struct:VkBindSparseInfo	access:public
pSignalSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*             pSignalSemaphores;$/;"	m	struct:VkSubmitInfo	access:public
pSpecializationInfo	lib/vulkan/vulkan.h	/^    const VkSpecializationInfo*         pSpecializationInfo;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
pStages	lib/vulkan/vulkan.h	/^    const VkPipelineShaderStageCreateInfo*           pStages;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pSubpasses	lib/vulkan/vulkan.h	/^    const VkSubpassDescription*       pSubpasses;$/;"	m	struct:VkRenderPassCreateInfo	access:public
pSwapchains	lib/vulkan/vulkan.h	/^    const VkSwapchainKHR*    pSwapchains;$/;"	m	struct:VkPresentInfoKHR	access:public
pTag	lib/vulkan/vulkan.h	/^    const void*                   pTag;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
pTessellationState	lib/vulkan/vulkan.h	/^    const VkPipelineTessellationStateCreateInfo*     pTessellationState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pTexelBufferView	lib/vulkan/vulkan.h	/^    const VkBufferView*              pTexelBufferView;$/;"	m	struct:VkWriteDescriptorSet	access:public
pUserData	lib/vulkan/vulkan.h	/^    void*                                   pUserData;$/;"	m	struct:VkAllocationCallbacks	access:public
pUserData	lib/vulkan/vulkan.h	/^    void*                           pUserData;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
pVertexAttributeDescriptions	lib/vulkan/vulkan.h	/^    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
pVertexBindingDescriptions	lib/vulkan/vulkan.h	/^    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
pVertexInputState	lib/vulkan/vulkan.h	/^    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pViewportState	lib/vulkan/vulkan.h	/^    const VkPipelineViewportStateCreateInfo*         pViewportState;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
pViewports	lib/vulkan/vulkan.h	/^    const VkViewport*                     pViewports;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
pWaitDstStageMask	lib/vulkan/vulkan.h	/^    const VkPipelineStageFlags*    pWaitDstStageMask;$/;"	m	struct:VkSubmitInfo	access:public
pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*                          pWaitSemaphores;$/;"	m	struct:VkBindSparseInfo	access:public
pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*             pWaitSemaphores;$/;"	m	struct:VkSubmitInfo	access:public
pWaitSemaphores	lib/vulkan/vulkan.h	/^    const VkSemaphore*       pWaitSemaphores;$/;"	m	struct:VkPresentInfoKHR	access:public
packed	lib/glm/detail/precision.hpp	/^		packed = packed_highp,$/;"	e	enum:glm::precision
packed_highp	lib/glm/detail/precision.hpp	/^		packed_highp,$/;"	e	enum:glm::precision
packed_highp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_highp>		packed_highp_bvec1;$/;"	t	namespace:glm
packed_highp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_highp>		packed_highp_dvec1;$/;"	t	namespace:glm
packed_highp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_highp>		packed_highp_ivec1;$/;"	t	namespace:glm
packed_highp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_highp>		packed_highp_uvec1;$/;"	t	namespace:glm
packed_highp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_highp>		packed_highp_vec1;$/;"	t	namespace:glm
packed_lowp	lib/glm/detail/precision.hpp	/^		packed_lowp,$/;"	e	enum:glm::precision
packed_lowp_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_lowp>		packed_lowp_bvec1;$/;"	t	namespace:glm
packed_lowp_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_lowp>		packed_lowp_dvec1;$/;"	t	namespace:glm
packed_lowp_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_lowp>			packed_lowp_ivec1;$/;"	t	namespace:glm
packed_lowp_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_lowp>		packed_lowp_uvec1;$/;"	t	namespace:glm
packed_lowp_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_lowp>		packed_lowp_vec1;$/;"	t	namespace:glm
packed_mediump	lib/glm/detail/precision.hpp	/^		packed_mediump,$/;"	e	enum:glm::precision
packed_mediump_bvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_mediump>		packed_mediump_bvec1;$/;"	t	namespace:glm
packed_mediump_dvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_mediump>	packed_mediump_dvec1;$/;"	t	namespace:glm
packed_mediump_ivec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_mediump>		packed_mediump_ivec1;$/;"	t	namespace:glm
packed_mediump_uvec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_mediump>		packed_mediump_uvec1;$/;"	t	namespace:glm
packed_mediump_vec1	lib/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_mediump>	packed_mediump_vec1;$/;"	t	namespace:glm
pal	lib/stb/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon74	access:public
param_type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & param_type;$/;"	t	struct:glm::detail::genType	access:public
parameters	lib/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR     parameters;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
parameters	lib/vulkan/vulkan.h	/^    VkDisplayModeParametersKHR    parameters;$/;"	m	struct:VkDisplayModePropertiesKHR	access:public
parse	lib/stb/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon74	access:public
part_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef glm::tquat<T, P> part_type;$/;"	t	struct:glm::tdualquat	access:public
passOp	lib/vulkan/vulkan.h	/^    VkStencilOp    passOp;$/;"	m	struct:VkStencilOpState	access:public
patchControlPoints	lib/vulkan/vulkan.h	/^    uint32_t                                  patchControlPoints;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
pcData	lib/__assimp/texture.h	/^    C_STRUCT aiTexel* pcData;$/;"	m	struct:aiTexture	access:public
pcData	lib/assimp/texture.h	/^    C_STRUCT aiTexel* pcData;$/;"	m	struct:aiTexture	access:public
permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const & x)$/;"	f	namespace:glm::detail	signature:(T const & x)
permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> permute(vec<2, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & x)
permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> permute(vec<3, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & x)
permute	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> permute(vec<4, T, P> const & x)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & x)
persistent	lib/vulkan/vulkan.h	/^    VkBool32           persistent;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
persistentContent	lib/vulkan/vulkan.h	/^    VkBool32                      persistentContent;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
pfnAllocation	lib/vulkan/vulkan.h	/^    PFN_vkAllocationFunction                pfnAllocation;$/;"	m	struct:VkAllocationCallbacks	access:public
pfnCallback	lib/vulkan/vulkan.h	/^    PFN_vkDebugReportCallbackEXT    pfnCallback;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
pfnFree	lib/vulkan/vulkan.h	/^    PFN_vkFreeFunction                      pfnFree;$/;"	m	struct:VkAllocationCallbacks	access:public
pfnInternalAllocation	lib/vulkan/vulkan.h	/^    PFN_vkInternalAllocationNotification    pfnInternalAllocation;$/;"	m	struct:VkAllocationCallbacks	access:public
pfnInternalFree	lib/vulkan/vulkan.h	/^    PFN_vkInternalFreeNotification          pfnInternalFree;$/;"	m	struct:VkAllocationCallbacks	access:public
pfnNextGetDeviceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetDeviceProcAddr pfnNextGetDeviceProcAddr;$/;"	m	struct:VkLayerDeviceLink_	access:public
pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerDeviceInfo_	access:public
pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerDeviceLink_	access:public
pfnNextGetInstanceProcAddr	lib/vulkan/vk_layer.h	/^    PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;$/;"	m	struct:VkLayerInstanceLink_	access:public
pfnReallocation	lib/vulkan/vulkan.h	/^    PFN_vkReallocationFunction              pfnReallocation;$/;"	m	struct:VkAllocationCallbacks	access:public
pfnSetDeviceLoaderData	lib/vulkan/vk_layer.h	/^        PFN_vkSetDeviceLoaderData pfnSetDeviceLoaderData;$/;"	m	union:__anon87::__anon88	access:public
pfnSetInstanceLoaderData	lib/vulkan/vk_layer.h	/^        PFN_vkSetInstanceLoaderData pfnSetInstanceLoaderData;$/;"	m	union:__anon85::__anon86	access:public
physicalDevice	/home/al/amvk/inc/state.h	/^	VkPhysicalDevice physicalDevice;$/;"	m	struct:State	access:public
physicalDimensions	lib/vulkan/vulkan.h	/^    VkExtent2D                    physicalDimensions;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
physicalResolution	lib/vulkan/vulkan.h	/^    VkExtent2D                    physicalResolution;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
pimpl	lib/__assimp/Exporter.hpp	/^    ExporterPimpl* pimpl;$/;"	m	class:Assimp::Exporter	access:protected
pimpl	lib/__assimp/Importer.hpp	/^    ImporterPimpl* pimpl;$/;"	m	class:Assimp::Importer	access:protected
pimpl	lib/assimp/Exporter.hpp	/^    ExporterPimpl* pimpl;$/;"	m	class:Assimp::Exporter	access:protected
pimpl	lib/assimp/Importer.hpp	/^    ImporterPimpl* pimpl;$/;"	m	class:Assimp::Importer	access:protected
pipeline	/home/al/amvk/inc/state.h	/^	VkPipeline pipeline;$/;"	m	struct:PipelineInfo	access:public
pipelineBindPoint	lib/vulkan/vulkan.h	/^    VkPipelineBindPoint             pipelineBindPoint;$/;"	m	struct:VkSubpassDescription	access:public
pipelineCache	inc/creator/pipeline_builder.h	/^inline void pipelineCache(const VkDevice& device, const std::vector<char>& cache, VkPipelineCacheCreateInfo& out)$/;"	f	namespace:PipelineBuilder	signature:(const VkDevice& device, const std::vector<char>& cache, VkPipelineCacheCreateInfo& out)
pipelineCache	inc/pipeline_cache.h	/^    VkPipelineCache& pipelineCache;$/;"	m	struct:PipelineCacheInfo	access:public
pipelineCacheUUID	lib/vulkan/vulkan.h	/^    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];$/;"	m	struct:VkPhysicalDeviceProperties	access:public
pipelineStatistics	lib/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
pipelineStatistics	lib/vulkan/vulkan.h	/^    VkQueryPipelineStatisticFlags    pipelineStatistics;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
pipelineStatisticsQuery	lib/vulkan/vulkan.h	/^    VkBool32    pipelineStatisticsQuery;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
pipelines	/home/al/amvk/inc/state.h	/^	Pipelines pipelines;$/;"	m	struct:State	access:public
pixels	inc/texture_data.h	/^	stbi_uc* pixels; $/;"	m	class:TextureData	access:public
planeIndex	lib/vulkan/vk_icd.h	/^    uint32_t planeIndex;$/;"	m	struct:__anon83	access:public
planeIndex	lib/vulkan/vulkan.h	/^    uint32_t                          planeIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
planeReorderPossible	lib/vulkan/vulkan.h	/^    VkBool32                      planeReorderPossible;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
planeStackIndex	lib/vulkan/vk_icd.h	/^    uint32_t planeStackIndex;$/;"	m	struct:__anon83	access:public
planeStackIndex	lib/vulkan/vulkan.h	/^    uint32_t                          planeStackIndex;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
platform	lib/vulkan/vk_icd.h	/^    VkIcdWsiPlatform platform;$/;"	m	struct:__anon77	access:public
pointLight	/home/al/amvk/inc/state.h	/^	PipelineInfo pointLight;$/;"	m	struct:Pipelines	access:public
pointLight	/home/al/amvk/inc/state.h	/^	ShaderInfo pointLight;$/;"	m	struct:Shaders	access:public
pointLight	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout pointLight;$/;"	m	struct:DescriptorSetLayouts	access:public
pointLightInfos	inc/scene_lights.h	/^	std::vector<PointLightInfo> pointLightInfos;$/;"	m	class:SceneLights	access:private
pointLightLightAlignment	inc/scene_lights.h	/^	VkDeviceSize pointLightLightAlignment;$/;"	m	class:SceneLights	access:private
pointLightLightUbos	inc/scene_lights.h	/^	std::vector<PointLight::LightUBO> pointLightLightUbos;$/;"	m	class:SceneLights	access:private
pointLightUboAlignment	inc/scene_lights.h	/^	VkDeviceSize pointLightUboAlignment;$/;"	m	class:SceneLights	access:private
pointLightUbos	inc/scene_lights.h	/^	std::vector<PointLight::UBO> pointLightUbos;$/;"	m	class:SceneLights	access:private
pointLights	inc/scene_lights.h	/^	std::vector<PointLight> pointLights;$/;"	m	class:SceneLights	access:private
pointSizeGranularity	lib/vulkan/vulkan.h	/^    float                 pointSizeGranularity;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
pointSizeRange	lib/vulkan/vulkan.h	/^    float                 pointSizeRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
pointer	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * pointer;$/;"	t	struct:glm::detail::genType	access:public
pointer_const	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * const pointer_const;$/;"	t	struct:glm::detail::genType	access:public
pollEvents	src/input_manager.cpp	/^void InputManager::pollEvents()$/;"	f	class:InputManager	signature:()
polygonMode	lib/vulkan/vulkan.h	/^    VkPolygonMode                              polygonMode;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
poolSizeCount	lib/vulkan/vulkan.h	/^    uint32_t                       poolSizeCount;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
pos	inc/shape/model.h	/^		glm::vec3 pos;$/;"	m	struct:Model::Vertex	access:public
pos	inc/shape/skinned.h	/^		glm::vec3 pos;$/;"	m	struct:Skinned::Vertex	access:public
pos	inc/shape/tquad.h	/^		glm::vec3 pos;$/;"	m	struct:TQuad::Vertex	access:public
pos	lib/__assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
pos	lib/assimp/types.h	/^    C_STRUCT aiVector3D pos, dir;$/;"	m	struct:aiRay	access:public
position	inc/g_buffer.h	/^	inline FramebufferAttachment& position() { return attachments[INDEX_POSITION]; }$/;"	f	class:GBuffer	access:public	signature:()
position	inc/shape/point_light.h	/^		glm::vec3 position;$/;"	m	struct:PointLight::LightUBO	access:public
position	inc/shape/sphere.h	/^		glm::vec3 position;$/;"	m	struct:Sphere::Vertex	access:public
position	lib/vulkan/libspirv.h	/^  spv_position_t position;$/;"	m	struct:spv_diagnostic_t	access:public
ppEnabledExtensionNames	lib/vulkan/vulkan.h	/^    const char* const*                 ppEnabledExtensionNames;$/;"	m	struct:VkDeviceCreateInfo	access:public
ppEnabledExtensionNames	lib/vulkan/vulkan.h	/^    const char* const*          ppEnabledExtensionNames;$/;"	m	struct:VkInstanceCreateInfo	access:public
ppEnabledLayerNames	lib/vulkan/vulkan.h	/^    const char* const*                 ppEnabledLayerNames;$/;"	m	struct:VkDeviceCreateInfo	access:public
ppEnabledLayerNames	lib/vulkan/vulkan.h	/^    const char* const*          ppEnabledLayerNames;$/;"	m	struct:VkInstanceCreateInfo	access:public
preTransform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR    preTransform;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
precision	lib/glm/detail/precision.hpp	/^	enum precision$/;"	g	namespace:glm
precision	lib/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	access:public
precision	lib/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision_	lib/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	access:private
prefix	lib/stb/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon73	access:public
present	inc/device_manager.h	/^		uint32_t present = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
presentMode	lib/vulkan/vulkan.h	/^    VkPresentModeKHR                 presentMode;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
presentModes	/home/al/amvk/inc/state.h	/^	std::vector<VkPresentModeKHR> presentModes;$/;"	m	struct:DeviceInfo	access:public
presentQueue	/home/al/amvk/inc/state.h	/^	VkQueue presentQueue;$/;"	m	struct:State	access:public
presentQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t presentQueueIndex;$/;"	m	struct:State	access:public
preserveAttachmentCount	lib/vulkan/vulkan.h	/^    uint32_t                        preserveAttachmentCount;$/;"	m	struct:VkSubpassDescription	access:public
primitiveRestartEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   primitiveRestartEnable;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
processAnimNode	src/shape/skinned.cpp	/^void Skinned::processAnimNode(float progress, aiMatrix4x4& parentTransform, AnimNode* animNode, uint32_t animationIndex)$/;"	f	class:Skinned	signature:(float progress, aiMatrix4x4& parentTransform, AnimNode* animNode, uint32_t animationIndex)
processMeshBones	src/shape/skinned.cpp	/^void Skinned::processMeshBones($/;"	f	class:Skinned	signature:( aiNode* node, std::unordered_map<std::string, uint32_t>& boneNameToIndexMap, std::vector<Vertex>& vertices, std::vector<uint32_t>& vertexWeightIndices, aiMesh& mesh, Mesh& meshInfo)
processMeshIndices	src/shape/skinned.cpp	/^void Skinned::processMeshIndices(std::vector<uint32_t>& indices, aiMesh& mesh, Mesh& meshInfo)$/;"	f	class:Skinned	signature:(std::vector<uint32_t>& indices, aiMesh& mesh, Mesh& meshInfo)
processMeshMaterials	src/shape/skinned.cpp	/^void Skinned::processMeshMaterials(aiMesh& mesh, Mesh& meshInfo) $/;"	f	class:Skinned	signature:(aiMesh& mesh, Mesh& meshInfo)
processMeshVertices	src/shape/skinned.cpp	/^void Skinned::processMeshVertices(std::vector<Vertex>& vertices, aiMesh& mesh, Mesh& meshInfo)$/;"	f	class:Skinned	signature:(std::vector<Vertex>& vertices, aiMesh& mesh, Mesh& meshInfo)
processModel	src/shape/model.cpp	/^void Model::processModel(const aiScene& scene) $/;"	f	class:Model	signature:(const aiScene& scene)
processModel	src/shape/skinned.cpp	/^void Skinned::processModel(const aiScene& scene) $/;"	f	class:Skinned	signature:(const aiScene& scene)
profile	lib/glm/detail/type_gentype.hpp	/^	enum profile$/;"	g	namespace:glm
progressive	lib/stb/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon63	access:public
proj	/home/al/amvk/inc/state.h	/^		glm::mat4 proj;$/;"	m	struct:State::UBO	access:public
proj	inc/shape/model.h	/^		glm::mat4 proj;$/;"	m	struct:Model::UBO	access:public
proj	inc/shape/skinned.h	/^		glm::mat4 proj;$/;"	m	struct:Skinned::UBO	access:public
proj	inc/shape/tquad.h	/^		glm::mat4 proj;$/;"	m	struct:TQuad::UBO	access:public
proj	src/camera.cpp	/^glm::mat4& Camera::proj()$/;"	f	class:Camera	signature:()
propertyFlags	lib/vulkan/vulkan.h	/^    VkMemoryPropertyFlags    propertyFlags;$/;"	m	struct:VkMemoryType	access:public
pushConstantRange	inc/creator/pipeline_builder.h	/^inline VkPushConstantRange pushConstantRange(const State& state, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size)$/;"	f	namespace:PipelineBuilder	signature:(const State& state, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size)
pushConstantRangeCount	lib/vulkan/vulkan.h	/^    uint32_t                        pushConstantRangeCount;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
q	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
q	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
quad	/home/al/amvk/inc/state.h	/^	PipelineInfo quad;$/;"	m	struct:Pipelines	access:public
quad	/home/al/amvk/inc/state.h	/^	ShaderInfo quad;$/;"	m	struct:Shaders	access:public
quad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout quad;$/;"	m	struct:DescriptorSetLayouts	access:public
quadratic	inc/shape/point_light.h	/^		float quadratic, linear, constant; $/;"	m	struct:PointLight::LightUBO	access:public
quat	lib/glm/fwd.hpp	/^	typedef highp_quat			quat;$/;"	t	namespace:glm
quat	lib/glm/fwd.hpp	/^	typedef lowp_quat			quat;$/;"	t	namespace:glm
quat	lib/glm/fwd.hpp	/^	typedef mediump_quat		quat;$/;"	t	namespace:glm
queryCount	lib/vulkan/vulkan.h	/^    uint32_t                         queryCount;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
queryFlags	lib/vulkan/vulkan.h	/^    VkQueryControlFlags              queryFlags;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
queryType	lib/vulkan/vulkan.h	/^    VkQueryType                      queryType;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
queueCount	lib/vulkan/vulkan.h	/^    uint32_t                    queueCount;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
queueCount	lib/vulkan/vulkan.h	/^    uint32_t        queueCount;$/;"	m	struct:VkQueueFamilyProperties	access:public
queueCreateInfoCount	lib/vulkan/vulkan.h	/^    uint32_t                           queueCreateInfoCount;$/;"	m	struct:VkDeviceCreateInfo	access:public
queueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
queueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                    queueFamilyIndex;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t                         queueFamilyIndexCount;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t                 queueFamilyIndexCount;$/;"	m	struct:VkImageCreateInfo	access:public
queueFamilyIndexCount	lib/vulkan/vulkan.h	/^    uint32_t               queueFamilyIndexCount;$/;"	m	struct:VkBufferCreateInfo	access:public
queueFlags	lib/vulkan/vulkan.h	/^    VkQueueFlags    queueFlags;$/;"	m	struct:VkQueueFamilyProperties	access:public
qword	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm
r	lib/__assimp/color4.h	/^    TReal r, g, b, a;$/;"	m	class:aiColor4t	access:public
r	lib/__assimp/color4.h	/^    ai_real r, g, b, a;$/;"	m	struct:aiColor4D	access:public
r	lib/__assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
r	lib/__assimp/types.h	/^    ai_real r, g, b;$/;"	m	struct:aiColor3D	access:public
r	lib/assimp/color4.h	/^            TReal r, g, b, a;$/;"	m	struct:aiColor4t::__anon5::__anon6	access:public
r	lib/assimp/color4.h	/^            float r, g, b, a;$/;"	m	struct:aiColor4D::__anon7::__anon8	access:public
r	lib/assimp/texture.h	/^    unsigned char b,g,r,a;$/;"	m	struct:aiTexel	access:public
r	lib/assimp/types.h	/^    float r, g, b;$/;"	m	struct:aiColor3D	access:public
r	lib/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::vec::__anon33	access:public
r	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
r	lib/glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::vec::__anon50::__anon52	access:public
r	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
r	lib/glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::vec::__anon43::__anon45	access:public
r	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
r	lib/glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::vec::__anon35::__anon37	access:public
r	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
r	lib/vulkan/vulkan.h	/^    VkComponentSwizzle    r;$/;"	m	struct:VkComponentMapping	access:public
range	lib/vulkan/vulkan.h	/^    VkDeviceSize               range;$/;"	m	struct:VkBufferViewCreateInfo	access:public
range	lib/vulkan/vulkan.h	/^    VkDeviceSize    range;$/;"	m	struct:VkDescriptorBufferInfo	access:public
rasterizationOrder	lib/vulkan/vulkan.h	/^    VkRasterizationOrderAMD    rasterizationOrder;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
rasterizationSamples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits                    rasterizationSamples;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
rasterizationState	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationState($/;"	f	namespace:PipelineBuilder	signature:( VkCullModeFlags cullMode, VkFrontFace frontFace, VkPolygonMode polygonMode = VK_POLYGON_MODE_FILL, VkBool32 rasterizationDiscardEnable = VK_FALSE)
rasterizationStateCullBackCCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullBackCCW() $/;"	f	namespace:PipelineBuilder	signature:()
rasterizationStateCullBackCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullBackCW() $/;"	f	namespace:PipelineBuilder	signature:()
rasterizationStateCullNone	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullNone() $/;"	f	namespace:PipelineBuilder	signature:()
rasterizationStateCullNoneCCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateCullNoneCCW() $/;"	f	namespace:PipelineBuilder	signature:()
rasterizationStateWireframeCullNoneCW	inc/creator/pipeline_builder.h	/^inline VkPipelineRasterizationStateCreateInfo rasterizationStateWireframeCullNoneCW() $/;"	f	namespace:PipelineBuilder	signature:()
rasterizerDiscardEnable	lib/vulkan/vulkan.h	/^    VkBool32                                   rasterizerDiscardEnable;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
ratio	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
raw_coeff	lib/stb/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon63::__anon64	access:public
raw_data	lib/stb/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon63::__anon64	access:public
read	lib/stb/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon59	access:public
readCache	src/file_manager.cpp	/^void FileManager::readCache(std::vector<char>& out, const std::string& cacheName)$/;"	f	class:FileManager	signature:(std::vector<char>& out, const std::string& cacheName)
readFile	src/file_manager.cpp	/^std::vector<char> FileManager::readFile(const std::string& filename) $/;"	f	class:FileManager	signature:(const std::string& filename)
readShader	src/file_manager.cpp	/^std::vector<char> FileManager::readShader(const std::string& shaderName)$/;"	f	class:FileManager	signature:(const std::string& shaderName)
read_from_callbacks	lib/stb/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon60	access:public
real	lib/glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	access:public
rebuildPerspective	src/camera.cpp	/^void Camera::rebuildPerspective()$/;"	f	class:Camera	signature:()
rebuildView	src/camera.cpp	/^void Camera::rebuildView()$/;"	f	class:Camera	signature:()
recreateSwapChain	src/renderer.cpp	/^void Renderer::recreateSwapChain()$/;"	f	class:Renderer	signature:()
rect	lib/vulkan/vulkan.h	/^    VkRect2D    rect;$/;"	m	struct:VkClearRect	access:public
reference	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> & reference;$/;"	t	struct:glm::detail::genType	access:public
reference	lib/vulkan/vulkan.h	/^    uint32_t       reference;$/;"	m	struct:VkStencilOpState	access:public
refreshRate	lib/vulkan/vulkan.h	/^    uint32_t      refreshRate;$/;"	m	struct:VkDisplayModeParametersKHR	access:public
renderArea	lib/vulkan/vulkan.h	/^    VkRect2D               renderArea;$/;"	m	struct:VkRenderPassBeginInfo	access:public
renderFinishedSemaphore	inc/renderer.h	/^	VkSemaphore renderFinishedSemaphore;$/;"	m	class:Renderer	access:private
renderPass	/home/al/amvk/inc/state.h	/^	VkRenderPass renderPass;$/;"	m	struct:State	access:public
renderPass	inc/g_buffer.h	/^	VkRenderPass renderPass;$/;"	m	class:GBuffer	access:public
renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                                     renderPass;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                     renderPass;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass                renderPass;$/;"	m	struct:VkFramebufferCreateInfo	access:public
renderPass	lib/vulkan/vulkan.h	/^    VkRenderPass           renderPass;$/;"	m	struct:VkRenderPassBeginInfo	access:public
reqComp	inc/texture_data.h	/^	int reqComp;$/;"	m	struct:TextureDesc	access:public
resample	lib/stb/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon65	access:public
resample_row_1	lib/stb/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
resample_row_func	lib/stb/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	lib/stb/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon63	access:public
residencyAlignedMipSize	lib/vulkan/vulkan.h	/^    VkBool32    residencyAlignedMipSize;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
residencyNonResidentStrict	lib/vulkan/vulkan.h	/^    VkBool32    residencyNonResidentStrict;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
residencyStandard2DBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
residencyStandard2DMultisampleBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard2DMultisampleBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
residencyStandard3DBlockShape	lib/vulkan/vulkan.h	/^    VkBool32    residencyStandard3DBlockShape;$/;"	m	struct:VkPhysicalDeviceSparseProperties	access:public
resourceOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize               resourceOffset;$/;"	m	struct:VkSparseMemoryBind	access:public
restart_interval	lib/stb/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon63	access:public
result_id	lib/vulkan/libspirv.h	/^  uint32_t result_id;$/;"	m	struct:spv_parsed_instruction_t	access:public
rgb	lib/stb/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon63	access:public
robustBufferAccess	lib/vulkan/vulkan.h	/^    VkBool32    robustBufferAccess;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
rowPitch	lib/vulkan/vulkan.h	/^    VkDeviceSize    rowPitch;$/;"	m	struct:VkSubresourceLayout	access:public
row_major	lib/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef vec<2, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef vec<3, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
row_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, P> row_type;$/;"	t	struct:glm::mat	access:public
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon22
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon25
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 2$/;"	e	enum:glm::type::__anon28
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon23
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon26
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 3$/;"	e	enum:glm::type::__anon29
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon24
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon27
rows	lib/glm/gtx/type_trait.hpp	/^			rows = 4$/;"	e	enum:glm::type::__anon30
rows	lib/glm/gtx/type_trait.hpp	/^		static length_t const rows = 0;$/;"	m	struct:glm::type	access:public
s	lib/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::vec::__anon33	access:public
s	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
s	lib/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon50::__anon53	access:public
s	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
s	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
s	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
s	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
s	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
s	lib/stb/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon63	access:public
s	lib/stb/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon69	access:public
sDeviceExtensions	inc/device_manager.h	/^	static const std::vector<const char*> sDeviceExtensions;$/;"	m	class:DeviceManager	access:public
sDeviceExtensions	src/device_manager.cpp	/^const std::vector<const char*> DeviceManager::sDeviceExtensions = {$/;"	m	class:DeviceManager	file:
sType	lib/vulkan/vk_layer.h	/^    VkStructureType sType; \/\/ VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO$/;"	m	struct:__anon87	access:public
sType	lib/vulkan/vk_layer.h	/^    VkStructureType sType; \/\/ VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO$/;"	m	struct:__anon85	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                                  sType;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                               sType;$/;"	m	struct:VkPipelineColorBlendStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkBindSparseInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                             sType;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                            sType;$/;"	m	struct:VkPipelineRasterizationStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                           sType;$/;"	m	struct:VkPipelineTessellationStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkCommandBufferBeginInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                          sType;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                        sType;$/;"	m	struct:VkDescriptorSetLayoutCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                       sType;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                      sType;$/;"	m	struct:VkPipelineDynamicStateCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                     sType;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                    sType;$/;"	m	struct:VkDeviceCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkRenderPassCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                   sType;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkQueryPoolCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                  sType;$/;"	m	struct:VkWriteDescriptorSet	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDebugReportCallbackCreateInfoEXT	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkDescriptorSetAllocateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                 sType;$/;"	m	struct:VkWin32SurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDescriptorPoolCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkDisplayModeCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkSubmitInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType                sType;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkDebugMarkerObjectNameInfoEXT	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkMirSurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkPipelineCacheCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType               sType;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType              sType;$/;"	m	struct:VkShaderModuleCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkCommandPoolCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkDeviceQueueCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkFramebufferCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType             sType;$/;"	m	struct:VkInstanceCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkBufferViewCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageMemoryBarrier	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkImageViewCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType            sType;$/;"	m	struct:VkPipelineRasterizationStateRasterizationOrderAMD	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType           sType;$/;"	m	struct:VkSemaphoreCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkImageCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType          sType;$/;"	m	struct:VkPresentInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkCommandBufferAllocateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType         sType;$/;"	m	struct:VkSamplerCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkBufferCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType        sType;$/;"	m	struct:VkRenderPassBeginInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkEventCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType       sType;$/;"	m	struct:VkFenceCreateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkApplicationInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkBufferMemoryBarrier	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkCopyDescriptorSet	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDebugMarkerMarkerInfoEXT	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationBufferCreateInfoNV	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationImageCreateInfoNV	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDedicatedAllocationMemoryAllocateInfoNV	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMappedMemoryRange	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryAllocateInfo	access:public
sType	lib/vulkan/vulkan.h	/^    VkStructureType    sType;$/;"	m	struct:VkMemoryBarrier	access:public
sValidationLayers	inc/device_manager.h	/^	static const std::vector<const char*> sValidationLayers;$/;"	m	class:DeviceManager	access:public
sValidationLayers	src/device_manager.cpp	/^const std::vector<const char*> DeviceManager::sValidationLayers = {$/;"	m	class:DeviceManager	file:
s_pNullLogger	lib/__assimp/DefaultLogger.hpp	/^    static NullLogger s_pNullLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
s_pNullLogger	lib/assimp/DefaultLogger.hpp	/^    static NullLogger s_pNullLogger;$/;"	m	class:Assimp::DefaultLogger	access:private
sampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampleCounts;$/;"	m	struct:VkImageFormatProperties	access:public
sampleRateShading	lib/vulkan/vulkan.h	/^    VkBool32    sampleRateShading;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sampleShadingEnable	lib/vulkan/vulkan.h	/^    VkBool32                                 sampleShadingEnable;$/;"	m	struct:VkPipelineMultisampleStateCreateInfo	access:public
sampledImageColorSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageColorSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
sampledImageDepthSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageDepthSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
sampledImageIntegerSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageIntegerSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
sampledImageStencilSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    sampledImageStencilSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
sampler	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout sampler;$/;"	m	struct:DescriptorSetLayouts	access:public
sampler	inc/g_buffer.h	/^	VkSampler sampler;$/;"	m	class:GBuffer	access:public
sampler	inc/image_info.h	/^	VkSampler sampler;$/;"	m	class:ImageInfo	access:public
sampler	lib/vulkan/vulkan.h	/^    VkSampler        sampler;$/;"	m	struct:VkDescriptorImageInfo	access:public
samplerAnisotropy	/home/al/amvk/inc/state.h	/^	VkBool32 samplerAnisotropy;$/;"	m	struct:DeviceInfo	access:public
samplerAnisotropy	lib/vulkan/vulkan.h	/^    VkBool32    samplerAnisotropy;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
samplerIndices	inc/shape/skinned.h	/^		glm::uvec4 samplerIndices;$/;"	m	struct:Skinned::Vertex	access:public
samplerList	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout samplerList;$/;"	m	struct:DescriptorSetLayouts	access:public
samples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits           samples;$/;"	m	struct:VkAttachmentDescription	access:public
samples	lib/vulkan/vulkan.h	/^    VkSampleCountFlagBits    samples;$/;"	m	struct:VkImageCreateInfo	access:public
saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1));}														\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(T x)
saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<2, T, P> saturate(const vec<2, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<2, T, P>& x)
saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<3, T, P> saturate(const vec<3, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<3, T, P>& x)
saturate	lib/glm/gtx/compatibility.hpp	/^	template<typename T, precision P> GLM_FUNC_QUALIFIER vec<4, T, P> saturate(const vec<4, T, P>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm	signature:(const vec<4, T, P>& x)
saveCache	src/pipeline_cache.cpp	/^void PipelineCacheInfo::saveCache(const VkDevice& device)$/;"	f	class:PipelineCacheInfo	signature:(const VkDevice& device)
scan_n	lib/stb/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon63	access:public
sceneAlignment	inc/scene_lights.h	/^	VkDeviceSize sceneAlignment;$/;"	m	class:SceneLights	access:private
sceneLights	inc/renderer.h	/^	SceneLights sceneLights;$/;"	m	class:Renderer	access:private
sceneSet	inc/scene_lights.h	/^	VkDescriptorSet sceneSet;$/;"	m	class:SceneLights	access:private
scissorCount	lib/vulkan/vulkan.h	/^    uint32_t                              scissorCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
scrollCallback	src/engine.cpp	/^void scrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	signature:(GLFWwindow* window, double xoffset, double yoffset)
sentinel	lib/__assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	m	struct:aiPropertyStore	access:public
sentinel	lib/assimp/cimport.h	/^struct aiPropertyStore { char sentinel; };$/;"	m	struct:aiPropertyStore	access:public
separator	lib/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	access:public
setAspect	src/camera.cpp	/^void Camera::setAspect(float aspect)$/;"	f	class:Camera	signature:(float aspect)
setCursorPosCallback	src/input_manager.cpp	/^void InputManager::setCursorPosCallback(GLFWcursorposfun cbfun)$/;"	f	class:InputManager	signature:(GLFWcursorposfun cbfun)
setDimens	src/window.cpp	/^void Window::setDimens(uint32_t w, uint32_t h) $/;"	f	class:Window	signature:(uint32_t w, uint32_t h)
setFramebufferSizeCallback	src/input_manager.cpp	/^void InputManager::setFramebufferSizeCallback(GLFWframebuffersizefun cbfun)$/;"	f	class:InputManager	signature:(GLFWframebuffersizefun cbfun)
setGlfwWindow	src/input_manager.cpp	/^void InputManager::setGlfwWindow(GLFWwindow& glfwWindow)$/;"	f	class:InputManager	signature:(GLFWwindow& glfwWindow)
setHeight	src/window.cpp	/^void Window::setHeight(uint32_t h) $/;"	f	class:Window	signature:(uint32_t h)
setKeyCallback	src/input_manager.cpp	/^void InputManager::setKeyCallback(GLFWkeyfun cbfun)$/;"	f	class:InputManager	signature:(GLFWkeyfun cbfun)
setLayoutCount	lib/vulkan/vulkan.h	/^    uint32_t                        setLayoutCount;$/;"	m	struct:VkPipelineLayoutCreateInfo	access:public
setLogSeverity	lib/__assimp/Logger.hpp	/^inline void Logger::setLogSeverity(LogSeverity log_severity){$/;"	f	class:Assimp::Logger	signature:(LogSeverity log_severity)
setLogSeverity	lib/assimp/Logger.hpp	/^inline void Logger::setLogSeverity(LogSeverity log_severity){$/;"	f	class:Assimp::Logger	signature:(LogSeverity log_severity)
setMouseButtonCallback	src/input_manager.cpp	/^void InputManager::setMouseButtonCallback(GLFWmousebuttonfun cbfun)$/;"	f	class:InputManager	signature:(GLFWmousebuttonfun cbfun)
setPosition	src/shape/point_light.cpp	/^void PointLight::setPosition(const glm::vec3& position) $/;"	f	class:PointLight	signature:(const glm::vec3& position)
setRadius	src/shape/point_light.cpp	/^void PointLight::setRadius(float radius) $/;"	f	class:PointLight	signature:(float radius)
setScrollCallback	src/input_manager.cpp	/^void InputManager::setScrollCallback(GLFWscrollfun cbfun)$/;"	f	class:InputManager	signature:(GLFWscrollfun cbfun)
setWidth	src/window.cpp	/^void Window::setWidth(uint32_t w) $/;"	f	class:Window	signature:(uint32_t w)
setWindowSizeCallback	src/window.cpp	/^void Window::setWindowSizeCallback(GLFWwindowsizefun f) $/;"	f	class:Window	signature:(GLFWwindowsizefun f)
set_loader_magic_value	lib/vulkan/vk_icd.h	/^static inline void set_loader_magic_value(void *pNewObject) {$/;"	f	signature:(void *pNewObject)
shaderClipDistance	lib/vulkan/vulkan.h	/^    VkBool32    shaderClipDistance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderCullDistance	lib/vulkan/vulkan.h	/^    VkBool32    shaderCullDistance;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderFloat64	lib/vulkan/vulkan.h	/^    VkBool32    shaderFloat64;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderImageGatherExtended	lib/vulkan/vulkan.h	/^    VkBool32    shaderImageGatherExtended;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderInt16	lib/vulkan/vulkan.h	/^    VkBool32    shaderInt16;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderInt64	lib/vulkan/vulkan.h	/^    VkBool32    shaderInt64;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderResourceMinLod	lib/vulkan/vulkan.h	/^    VkBool32    shaderResourceMinLod;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderResourceResidency	lib/vulkan/vulkan.h	/^    VkBool32    shaderResourceResidency;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderSampledImageArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderSampledImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStage	inc/creator/pipeline_builder.h	/^inline VkPipelineShaderStageCreateInfo shaderStage(VkShaderModule& shaderModule, VkShaderStageFlagBits stage)$/;"	f	namespace:PipelineBuilder	signature:(VkShaderModule& shaderModule, VkShaderStageFlagBits stage)
shaderStage	inc/creator/pipeline_builder.h	/^inline VkPipelineShaderStageCreateInfo shaderStage(const VkDevice& device, const char* path, VkShaderStageFlagBits stage)$/;"	f	namespace:PipelineBuilder	signature:(const VkDevice& device, const char* path, VkShaderStageFlagBits stage)
shaderStorageBufferArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStorageImageArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStorageImageExtendedFormats	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageExtendedFormats;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStorageImageMultisample	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageMultisample;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStorageImageReadWithoutFormat	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageReadWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderStorageImageWriteWithoutFormat	lib/vulkan/vulkan.h	/^    VkBool32    shaderStorageImageWriteWithoutFormat;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderTessellationAndGeometryPointSize	lib/vulkan/vulkan.h	/^    VkBool32    shaderTessellationAndGeometryPointSize;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaderUniformBufferArrayDynamicIndexing	lib/vulkan/vulkan.h	/^    VkBool32    shaderUniformBufferArrayDynamicIndexing;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
shaders	/home/al/amvk/inc/state.h	/^	Shaders shaders;$/;"	m	struct:State	access:public
sharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode            sharingMode;$/;"	m	struct:VkImageCreateInfo	access:public
sharingMode	lib/vulkan/vulkan.h	/^    VkSharingMode          sharingMode;$/;"	m	struct:VkBufferCreateInfo	access:public
signalSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                                    signalSemaphoreCount;$/;"	m	struct:VkBindSparseInfo	access:public
signalSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                       signalSemaphoreCount;$/;"	m	struct:VkSubmitInfo	access:public
simd	lib/glm/detail/type_gentype.hpp	/^		simd$/;"	e	enum:glm::profile
sint	lib/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm
size	inc/buffer_info.h	/^	VkDeviceSize size;$/;"	m	class:BufferInfo	access:public
size	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
size	lib/__assimp/cexport.h	/^    size_t size;$/;"	m	struct:aiExportDataBlob	access:public
size	lib/assimp/cexport.h	/^    size_t size;$/;"	m	struct:aiExportDataBlob	access:public
size	lib/stb/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon62	access:public
size	lib/stb/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon66	access:public
size	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize               size;$/;"	m	struct:VkSparseMemoryBind	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize           size;$/;"	m	struct:VkBufferCreateInfo	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize         size;$/;"	m	struct:VkMemoryHeap	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkBufferMemoryBarrier	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize       size;$/;"	m	struct:VkMappedMemoryRange	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkBufferCopy	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkMemoryRequirements	access:public
size	lib/vulkan/vulkan.h	/^    VkDeviceSize    size;$/;"	m	struct:VkSubresourceLayout	access:public
size	lib/vulkan/vulkan.h	/^    size_t      size;$/;"	m	struct:VkSpecializationMapEntry	access:public
size	lib/vulkan/vulkan.h	/^    uint32_t              size;$/;"	m	struct:VkPushConstantRange	access:public
size1	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1;$/;"	t	namespace:glm
size1_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm
size2	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2;$/;"	t	namespace:glm
size2_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm
size3	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3;$/;"	t	namespace:glm
size3_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm
size4	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4;$/;"	t	namespace:glm
size4_t	lib/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm
sizeType	lib/glm/detail/type_gentype.hpp	/^	typedef std::size_t sizeType;$/;"	t	namespace:glm
size_type	lib/glm/detail/type_gentype.hpp	/^		typedef sizeType size_type;$/;"	t	struct:glm::detail::genType	access:public
skinned	/home/al/amvk/inc/state.h	/^	PipelineInfo skinned;$/;"	m	struct:Pipelines	access:public
skinned	/home/al/amvk/inc/state.h	/^	ShaderInfo skinned;$/;"	m	struct:Shaders	access:public
skip	lib/stb/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon59	access:public
snprintf	lib/vulkan/vk_sdk_platform.h	39;"	d
space	lib/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	access:public
sparseAddressSpaceSize	lib/vulkan/vulkan.h	/^    VkDeviceSize          sparseAddressSpaceSize;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
sparseBinding	lib/vulkan/vulkan.h	/^    VkBool32    sparseBinding;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseProperties	lib/vulkan/vulkan.h	/^    VkPhysicalDeviceSparseProperties    sparseProperties;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
sparseResidency16Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency16Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidency2Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency2Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidency4Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency4Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidency8Samples	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidency8Samples;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidencyAliased	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyAliased;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidencyBuffer	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyBuffer;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidencyImage2D	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage2D;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
sparseResidencyImage3D	lib/vulkan/vulkan.h	/^    VkBool32    sparseResidencyImage3D;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
specPower	inc/shape/point_light.h	/^		float specPower;$/;"	m	struct:PointLight::LightUBO	access:public
specVersion	lib/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkExtensionProperties	access:public
specVersion	lib/vulkan/vulkan.h	/^    uint32_t    specVersion;$/;"	m	struct:VkLayerProperties	access:public
spec_end	lib/stb/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon63	access:public
spec_start	lib/stb/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon63	access:public
specularImages	inc/shape/model.h	/^			specularImages, $/;"	m	struct:Model::Material	access:public
specularIndices	inc/shape/skinned.h	/^		std::vector<uint32_t> diffuseIndices, specularIndices, heightIndices, ambientIndices;$/;"	m	struct:Skinned::Material	access:public
spirv_H	lib/vulkan/spirv.h	49;"	d
spirv_HPP	lib/vulkan/spirv.hpp	43;"	d
spv	lib/vulkan/spirv.hpp	/^namespace spv {$/;"	n
spv	lib/vulkan/spirv.py	/^spv = {$/;"	v
spv::AccessQualifier	lib/vulkan/spirv.hpp	/^enum AccessQualifier {$/;"	g	namespace:spv
spv::AccessQualifierMax	lib/vulkan/spirv.hpp	/^    AccessQualifierMax = 0x7fffffff,$/;"	e	enum:spv::AccessQualifier
spv::AccessQualifierReadOnly	lib/vulkan/spirv.hpp	/^    AccessQualifierReadOnly = 0,$/;"	e	enum:spv::AccessQualifier
spv::AccessQualifierReadWrite	lib/vulkan/spirv.hpp	/^    AccessQualifierReadWrite = 2,$/;"	e	enum:spv::AccessQualifier
spv::AccessQualifierWriteOnly	lib/vulkan/spirv.hpp	/^    AccessQualifierWriteOnly = 1,$/;"	e	enum:spv::AccessQualifier
spv::AddressingModel	lib/vulkan/spirv.hpp	/^enum AddressingModel {$/;"	g	namespace:spv
spv::AddressingModelLogical	lib/vulkan/spirv.hpp	/^    AddressingModelLogical = 0,$/;"	e	enum:spv::AddressingModel
spv::AddressingModelMax	lib/vulkan/spirv.hpp	/^    AddressingModelMax = 0x7fffffff,$/;"	e	enum:spv::AddressingModel
spv::AddressingModelPhysical32	lib/vulkan/spirv.hpp	/^    AddressingModelPhysical32 = 1,$/;"	e	enum:spv::AddressingModel
spv::AddressingModelPhysical64	lib/vulkan/spirv.hpp	/^    AddressingModelPhysical64 = 2,$/;"	e	enum:spv::AddressingModel
spv::BuiltIn	lib/vulkan/spirv.hpp	/^enum BuiltIn {$/;"	g	namespace:spv
spv::BuiltInClipDistance	lib/vulkan/spirv.hpp	/^    BuiltInClipDistance = 3,$/;"	e	enum:spv::BuiltIn
spv::BuiltInCullDistance	lib/vulkan/spirv.hpp	/^    BuiltInCullDistance = 4,$/;"	e	enum:spv::BuiltIn
spv::BuiltInEnqueuedWorkgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInEnqueuedWorkgroupSize = 32,$/;"	e	enum:spv::BuiltIn
spv::BuiltInFragCoord	lib/vulkan/spirv.hpp	/^    BuiltInFragCoord = 15,$/;"	e	enum:spv::BuiltIn
spv::BuiltInFragDepth	lib/vulkan/spirv.hpp	/^    BuiltInFragDepth = 22,$/;"	e	enum:spv::BuiltIn
spv::BuiltInFrontFacing	lib/vulkan/spirv.hpp	/^    BuiltInFrontFacing = 17,$/;"	e	enum:spv::BuiltIn
spv::BuiltInGlobalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInGlobalInvocationId = 28,$/;"	e	enum:spv::BuiltIn
spv::BuiltInGlobalLinearId	lib/vulkan/spirv.hpp	/^    BuiltInGlobalLinearId = 34,$/;"	e	enum:spv::BuiltIn
spv::BuiltInGlobalOffset	lib/vulkan/spirv.hpp	/^    BuiltInGlobalOffset = 33,$/;"	e	enum:spv::BuiltIn
spv::BuiltInGlobalSize	lib/vulkan/spirv.hpp	/^    BuiltInGlobalSize = 31,$/;"	e	enum:spv::BuiltIn
spv::BuiltInHelperInvocation	lib/vulkan/spirv.hpp	/^    BuiltInHelperInvocation = 23,$/;"	e	enum:spv::BuiltIn
spv::BuiltInInstanceId	lib/vulkan/spirv.hpp	/^    BuiltInInstanceId = 6,$/;"	e	enum:spv::BuiltIn
spv::BuiltInInstanceIndex	lib/vulkan/spirv.hpp	/^    BuiltInInstanceIndex = 43,$/;"	e	enum:spv::BuiltIn
spv::BuiltInInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInInvocationId = 8,$/;"	e	enum:spv::BuiltIn
spv::BuiltInLayer	lib/vulkan/spirv.hpp	/^    BuiltInLayer = 9,$/;"	e	enum:spv::BuiltIn
spv::BuiltInLocalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInLocalInvocationId = 27,$/;"	e	enum:spv::BuiltIn
spv::BuiltInLocalInvocationIndex	lib/vulkan/spirv.hpp	/^    BuiltInLocalInvocationIndex = 29,$/;"	e	enum:spv::BuiltIn
spv::BuiltInMax	lib/vulkan/spirv.hpp	/^    BuiltInMax = 0x7fffffff,$/;"	e	enum:spv::BuiltIn
spv::BuiltInNumEnqueuedSubgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumEnqueuedSubgroups = 39,$/;"	e	enum:spv::BuiltIn
spv::BuiltInNumSubgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumSubgroups = 38,$/;"	e	enum:spv::BuiltIn
spv::BuiltInNumWorkgroups	lib/vulkan/spirv.hpp	/^    BuiltInNumWorkgroups = 24,$/;"	e	enum:spv::BuiltIn
spv::BuiltInPatchVertices	lib/vulkan/spirv.hpp	/^    BuiltInPatchVertices = 14,$/;"	e	enum:spv::BuiltIn
spv::BuiltInPointCoord	lib/vulkan/spirv.hpp	/^    BuiltInPointCoord = 16,$/;"	e	enum:spv::BuiltIn
spv::BuiltInPointSize	lib/vulkan/spirv.hpp	/^    BuiltInPointSize = 1,$/;"	e	enum:spv::BuiltIn
spv::BuiltInPosition	lib/vulkan/spirv.hpp	/^    BuiltInPosition = 0,$/;"	e	enum:spv::BuiltIn
spv::BuiltInPrimitiveId	lib/vulkan/spirv.hpp	/^    BuiltInPrimitiveId = 7,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSampleId	lib/vulkan/spirv.hpp	/^    BuiltInSampleId = 18,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSampleMask	lib/vulkan/spirv.hpp	/^    BuiltInSampleMask = 20,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSamplePosition	lib/vulkan/spirv.hpp	/^    BuiltInSamplePosition = 19,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSubgroupId	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupId = 40,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSubgroupLocalInvocationId	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupLocalInvocationId = 41,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSubgroupMaxSize	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupMaxSize = 37,$/;"	e	enum:spv::BuiltIn
spv::BuiltInSubgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInSubgroupSize = 36,$/;"	e	enum:spv::BuiltIn
spv::BuiltInTessCoord	lib/vulkan/spirv.hpp	/^    BuiltInTessCoord = 13,$/;"	e	enum:spv::BuiltIn
spv::BuiltInTessLevelInner	lib/vulkan/spirv.hpp	/^    BuiltInTessLevelInner = 12,$/;"	e	enum:spv::BuiltIn
spv::BuiltInTessLevelOuter	lib/vulkan/spirv.hpp	/^    BuiltInTessLevelOuter = 11,$/;"	e	enum:spv::BuiltIn
spv::BuiltInVertexId	lib/vulkan/spirv.hpp	/^    BuiltInVertexId = 5,$/;"	e	enum:spv::BuiltIn
spv::BuiltInVertexIndex	lib/vulkan/spirv.hpp	/^    BuiltInVertexIndex = 42,$/;"	e	enum:spv::BuiltIn
spv::BuiltInViewportIndex	lib/vulkan/spirv.hpp	/^    BuiltInViewportIndex = 10,$/;"	e	enum:spv::BuiltIn
spv::BuiltInWorkDim	lib/vulkan/spirv.hpp	/^    BuiltInWorkDim = 30,$/;"	e	enum:spv::BuiltIn
spv::BuiltInWorkgroupId	lib/vulkan/spirv.hpp	/^    BuiltInWorkgroupId = 26,$/;"	e	enum:spv::BuiltIn
spv::BuiltInWorkgroupSize	lib/vulkan/spirv.hpp	/^    BuiltInWorkgroupSize = 25,$/;"	e	enum:spv::BuiltIn
spv::Capability	lib/vulkan/spirv.hpp	/^enum Capability {$/;"	g	namespace:spv
spv::CapabilityAddresses	lib/vulkan/spirv.hpp	/^    CapabilityAddresses = 4,$/;"	e	enum:spv::Capability
spv::CapabilityAtomicStorage	lib/vulkan/spirv.hpp	/^    CapabilityAtomicStorage = 21,$/;"	e	enum:spv::Capability
spv::CapabilityClipDistance	lib/vulkan/spirv.hpp	/^    CapabilityClipDistance = 32,$/;"	e	enum:spv::Capability
spv::CapabilityCullDistance	lib/vulkan/spirv.hpp	/^    CapabilityCullDistance = 33,$/;"	e	enum:spv::Capability
spv::CapabilityDerivativeControl	lib/vulkan/spirv.hpp	/^    CapabilityDerivativeControl = 51,$/;"	e	enum:spv::Capability
spv::CapabilityDeviceEnqueue	lib/vulkan/spirv.hpp	/^    CapabilityDeviceEnqueue = 19,$/;"	e	enum:spv::Capability
spv::CapabilityFloat16	lib/vulkan/spirv.hpp	/^    CapabilityFloat16 = 9,$/;"	e	enum:spv::Capability
spv::CapabilityFloat16Buffer	lib/vulkan/spirv.hpp	/^    CapabilityFloat16Buffer = 8,$/;"	e	enum:spv::Capability
spv::CapabilityFloat64	lib/vulkan/spirv.hpp	/^    CapabilityFloat64 = 10,$/;"	e	enum:spv::Capability
spv::CapabilityGenericPointer	lib/vulkan/spirv.hpp	/^    CapabilityGenericPointer = 38,$/;"	e	enum:spv::Capability
spv::CapabilityGeometry	lib/vulkan/spirv.hpp	/^    CapabilityGeometry = 2,$/;"	e	enum:spv::Capability
spv::CapabilityGeometryPointSize	lib/vulkan/spirv.hpp	/^    CapabilityGeometryPointSize = 24,$/;"	e	enum:spv::Capability
spv::CapabilityGeometryStreams	lib/vulkan/spirv.hpp	/^    CapabilityGeometryStreams = 54,$/;"	e	enum:spv::Capability
spv::CapabilityGroups	lib/vulkan/spirv.hpp	/^    CapabilityGroups = 18,$/;"	e	enum:spv::Capability
spv::CapabilityImage1D	lib/vulkan/spirv.hpp	/^    CapabilityImage1D = 44,$/;"	e	enum:spv::Capability
spv::CapabilityImageBasic	lib/vulkan/spirv.hpp	/^    CapabilityImageBasic = 13,$/;"	e	enum:spv::Capability
spv::CapabilityImageBuffer	lib/vulkan/spirv.hpp	/^    CapabilityImageBuffer = 47,$/;"	e	enum:spv::Capability
spv::CapabilityImageCubeArray	lib/vulkan/spirv.hpp	/^    CapabilityImageCubeArray = 34,$/;"	e	enum:spv::Capability
spv::CapabilityImageGatherExtended	lib/vulkan/spirv.hpp	/^    CapabilityImageGatherExtended = 25,$/;"	e	enum:spv::Capability
spv::CapabilityImageMSArray	lib/vulkan/spirv.hpp	/^    CapabilityImageMSArray = 48,$/;"	e	enum:spv::Capability
spv::CapabilityImageMipmap	lib/vulkan/spirv.hpp	/^    CapabilityImageMipmap = 15,$/;"	e	enum:spv::Capability
spv::CapabilityImageQuery	lib/vulkan/spirv.hpp	/^    CapabilityImageQuery = 50,$/;"	e	enum:spv::Capability
spv::CapabilityImageReadWrite	lib/vulkan/spirv.hpp	/^    CapabilityImageReadWrite = 14,$/;"	e	enum:spv::Capability
spv::CapabilityImageRect	lib/vulkan/spirv.hpp	/^    CapabilityImageRect = 36,$/;"	e	enum:spv::Capability
spv::CapabilityInputAttachment	lib/vulkan/spirv.hpp	/^    CapabilityInputAttachment = 40,$/;"	e	enum:spv::Capability
spv::CapabilityInt16	lib/vulkan/spirv.hpp	/^    CapabilityInt16 = 22,$/;"	e	enum:spv::Capability
spv::CapabilityInt64	lib/vulkan/spirv.hpp	/^    CapabilityInt64 = 11,$/;"	e	enum:spv::Capability
spv::CapabilityInt64Atomics	lib/vulkan/spirv.hpp	/^    CapabilityInt64Atomics = 12,$/;"	e	enum:spv::Capability
spv::CapabilityInt8	lib/vulkan/spirv.hpp	/^    CapabilityInt8 = 39,$/;"	e	enum:spv::Capability
spv::CapabilityInterpolationFunction	lib/vulkan/spirv.hpp	/^    CapabilityInterpolationFunction = 52,$/;"	e	enum:spv::Capability
spv::CapabilityKernel	lib/vulkan/spirv.hpp	/^    CapabilityKernel = 6,$/;"	e	enum:spv::Capability
spv::CapabilityLinkage	lib/vulkan/spirv.hpp	/^    CapabilityLinkage = 5,$/;"	e	enum:spv::Capability
spv::CapabilityLiteralSampler	lib/vulkan/spirv.hpp	/^    CapabilityLiteralSampler = 20,$/;"	e	enum:spv::Capability
spv::CapabilityMatrix	lib/vulkan/spirv.hpp	/^    CapabilityMatrix = 0,$/;"	e	enum:spv::Capability
spv::CapabilityMax	lib/vulkan/spirv.hpp	/^    CapabilityMax = 0x7fffffff,$/;"	e	enum:spv::Capability
spv::CapabilityMinLod	lib/vulkan/spirv.hpp	/^    CapabilityMinLod = 42,$/;"	e	enum:spv::Capability
spv::CapabilityMultiViewport	lib/vulkan/spirv.hpp	/^    CapabilityMultiViewport = 57,$/;"	e	enum:spv::Capability
spv::CapabilityNamedBarrier	lib/vulkan/spirv.hpp	/^    CapabilityNamedBarrier = 59,$/;"	e	enum:spv::Capability
spv::CapabilityPipeStorage	lib/vulkan/spirv.hpp	/^    CapabilityPipeStorage = 60,$/;"	e	enum:spv::Capability
spv::CapabilityPipes	lib/vulkan/spirv.hpp	/^    CapabilityPipes = 17,$/;"	e	enum:spv::Capability
spv::CapabilitySampleRateShading	lib/vulkan/spirv.hpp	/^    CapabilitySampleRateShading = 35,$/;"	e	enum:spv::Capability
spv::CapabilitySampled1D	lib/vulkan/spirv.hpp	/^    CapabilitySampled1D = 43,$/;"	e	enum:spv::Capability
spv::CapabilitySampledBuffer	lib/vulkan/spirv.hpp	/^    CapabilitySampledBuffer = 46,$/;"	e	enum:spv::Capability
spv::CapabilitySampledCubeArray	lib/vulkan/spirv.hpp	/^    CapabilitySampledCubeArray = 45,$/;"	e	enum:spv::Capability
spv::CapabilitySampledImageArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilitySampledImageArrayDynamicIndexing = 29,$/;"	e	enum:spv::Capability
spv::CapabilitySampledRect	lib/vulkan/spirv.hpp	/^    CapabilitySampledRect = 37,$/;"	e	enum:spv::Capability
spv::CapabilityShader	lib/vulkan/spirv.hpp	/^    CapabilityShader = 1,$/;"	e	enum:spv::Capability
spv::CapabilitySparseResidency	lib/vulkan/spirv.hpp	/^    CapabilitySparseResidency = 41,$/;"	e	enum:spv::Capability
spv::CapabilityStorageBufferArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityStorageBufferArrayDynamicIndexing = 30,$/;"	e	enum:spv::Capability
spv::CapabilityStorageImageArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageArrayDynamicIndexing = 31,$/;"	e	enum:spv::Capability
spv::CapabilityStorageImageExtendedFormats	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageExtendedFormats = 49,$/;"	e	enum:spv::Capability
spv::CapabilityStorageImageMultisample	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageMultisample = 27,$/;"	e	enum:spv::Capability
spv::CapabilityStorageImageReadWithoutFormat	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageReadWithoutFormat = 55,$/;"	e	enum:spv::Capability
spv::CapabilityStorageImageWriteWithoutFormat	lib/vulkan/spirv.hpp	/^    CapabilityStorageImageWriteWithoutFormat = 56,$/;"	e	enum:spv::Capability
spv::CapabilitySubgroupDispatch	lib/vulkan/spirv.hpp	/^    CapabilitySubgroupDispatch = 58,$/;"	e	enum:spv::Capability
spv::CapabilityTessellation	lib/vulkan/spirv.hpp	/^    CapabilityTessellation = 3,$/;"	e	enum:spv::Capability
spv::CapabilityTessellationPointSize	lib/vulkan/spirv.hpp	/^    CapabilityTessellationPointSize = 23,$/;"	e	enum:spv::Capability
spv::CapabilityTransformFeedback	lib/vulkan/spirv.hpp	/^    CapabilityTransformFeedback = 53,$/;"	e	enum:spv::Capability
spv::CapabilityUniformBufferArrayDynamicIndexing	lib/vulkan/spirv.hpp	/^    CapabilityUniformBufferArrayDynamicIndexing = 28,$/;"	e	enum:spv::Capability
spv::CapabilityVector16	lib/vulkan/spirv.hpp	/^    CapabilityVector16 = 7,$/;"	e	enum:spv::Capability
spv::Decoration	lib/vulkan/spirv.hpp	/^enum Decoration {$/;"	g	namespace:spv
spv::DecorationAliased	lib/vulkan/spirv.hpp	/^    DecorationAliased = 20,$/;"	e	enum:spv::Decoration
spv::DecorationAlignment	lib/vulkan/spirv.hpp	/^    DecorationAlignment = 44,$/;"	e	enum:spv::Decoration
spv::DecorationArrayStride	lib/vulkan/spirv.hpp	/^    DecorationArrayStride = 6,$/;"	e	enum:spv::Decoration
spv::DecorationBinding	lib/vulkan/spirv.hpp	/^    DecorationBinding = 33,$/;"	e	enum:spv::Decoration
spv::DecorationBlock	lib/vulkan/spirv.hpp	/^    DecorationBlock = 2,$/;"	e	enum:spv::Decoration
spv::DecorationBufferBlock	lib/vulkan/spirv.hpp	/^    DecorationBufferBlock = 3,$/;"	e	enum:spv::Decoration
spv::DecorationBuiltIn	lib/vulkan/spirv.hpp	/^    DecorationBuiltIn = 11,$/;"	e	enum:spv::Decoration
spv::DecorationCPacked	lib/vulkan/spirv.hpp	/^    DecorationCPacked = 10,$/;"	e	enum:spv::Decoration
spv::DecorationCentroid	lib/vulkan/spirv.hpp	/^    DecorationCentroid = 16,$/;"	e	enum:spv::Decoration
spv::DecorationCoherent	lib/vulkan/spirv.hpp	/^    DecorationCoherent = 23,$/;"	e	enum:spv::Decoration
spv::DecorationColMajor	lib/vulkan/spirv.hpp	/^    DecorationColMajor = 5,$/;"	e	enum:spv::Decoration
spv::DecorationComponent	lib/vulkan/spirv.hpp	/^    DecorationComponent = 31,$/;"	e	enum:spv::Decoration
spv::DecorationConstant	lib/vulkan/spirv.hpp	/^    DecorationConstant = 22,$/;"	e	enum:spv::Decoration
spv::DecorationDescriptorSet	lib/vulkan/spirv.hpp	/^    DecorationDescriptorSet = 34,$/;"	e	enum:spv::Decoration
spv::DecorationFPFastMathMode	lib/vulkan/spirv.hpp	/^    DecorationFPFastMathMode = 40,$/;"	e	enum:spv::Decoration
spv::DecorationFPRoundingMode	lib/vulkan/spirv.hpp	/^    DecorationFPRoundingMode = 39,$/;"	e	enum:spv::Decoration
spv::DecorationFlat	lib/vulkan/spirv.hpp	/^    DecorationFlat = 14,$/;"	e	enum:spv::Decoration
spv::DecorationFuncParamAttr	lib/vulkan/spirv.hpp	/^    DecorationFuncParamAttr = 38,$/;"	e	enum:spv::Decoration
spv::DecorationGLSLPacked	lib/vulkan/spirv.hpp	/^    DecorationGLSLPacked = 9,$/;"	e	enum:spv::Decoration
spv::DecorationGLSLShared	lib/vulkan/spirv.hpp	/^    DecorationGLSLShared = 8,$/;"	e	enum:spv::Decoration
spv::DecorationIndex	lib/vulkan/spirv.hpp	/^    DecorationIndex = 32,$/;"	e	enum:spv::Decoration
spv::DecorationInputAttachmentIndex	lib/vulkan/spirv.hpp	/^    DecorationInputAttachmentIndex = 43,$/;"	e	enum:spv::Decoration
spv::DecorationInvariant	lib/vulkan/spirv.hpp	/^    DecorationInvariant = 18,$/;"	e	enum:spv::Decoration
spv::DecorationLinkageAttributes	lib/vulkan/spirv.hpp	/^    DecorationLinkageAttributes = 41,$/;"	e	enum:spv::Decoration
spv::DecorationLocation	lib/vulkan/spirv.hpp	/^    DecorationLocation = 30,$/;"	e	enum:spv::Decoration
spv::DecorationMatrixStride	lib/vulkan/spirv.hpp	/^    DecorationMatrixStride = 7,$/;"	e	enum:spv::Decoration
spv::DecorationMax	lib/vulkan/spirv.hpp	/^    DecorationMax = 0x7fffffff,$/;"	e	enum:spv::Decoration
spv::DecorationMaxByteOffset	lib/vulkan/spirv.hpp	/^    DecorationMaxByteOffset = 45,$/;"	e	enum:spv::Decoration
spv::DecorationNoContraction	lib/vulkan/spirv.hpp	/^    DecorationNoContraction = 42,$/;"	e	enum:spv::Decoration
spv::DecorationNoPerspective	lib/vulkan/spirv.hpp	/^    DecorationNoPerspective = 13,$/;"	e	enum:spv::Decoration
spv::DecorationNonReadable	lib/vulkan/spirv.hpp	/^    DecorationNonReadable = 25,$/;"	e	enum:spv::Decoration
spv::DecorationNonWritable	lib/vulkan/spirv.hpp	/^    DecorationNonWritable = 24,$/;"	e	enum:spv::Decoration
spv::DecorationOffset	lib/vulkan/spirv.hpp	/^    DecorationOffset = 35,$/;"	e	enum:spv::Decoration
spv::DecorationPatch	lib/vulkan/spirv.hpp	/^    DecorationPatch = 15,$/;"	e	enum:spv::Decoration
spv::DecorationRelaxedPrecision	lib/vulkan/spirv.hpp	/^    DecorationRelaxedPrecision = 0,$/;"	e	enum:spv::Decoration
spv::DecorationRestrict	lib/vulkan/spirv.hpp	/^    DecorationRestrict = 19,$/;"	e	enum:spv::Decoration
spv::DecorationRowMajor	lib/vulkan/spirv.hpp	/^    DecorationRowMajor = 4,$/;"	e	enum:spv::Decoration
spv::DecorationSample	lib/vulkan/spirv.hpp	/^    DecorationSample = 17,$/;"	e	enum:spv::Decoration
spv::DecorationSaturatedConversion	lib/vulkan/spirv.hpp	/^    DecorationSaturatedConversion = 28,$/;"	e	enum:spv::Decoration
spv::DecorationSpecId	lib/vulkan/spirv.hpp	/^    DecorationSpecId = 1,$/;"	e	enum:spv::Decoration
spv::DecorationStream	lib/vulkan/spirv.hpp	/^    DecorationStream = 29,$/;"	e	enum:spv::Decoration
spv::DecorationUniform	lib/vulkan/spirv.hpp	/^    DecorationUniform = 26,$/;"	e	enum:spv::Decoration
spv::DecorationVolatile	lib/vulkan/spirv.hpp	/^    DecorationVolatile = 21,$/;"	e	enum:spv::Decoration
spv::DecorationXfbBuffer	lib/vulkan/spirv.hpp	/^    DecorationXfbBuffer = 36,$/;"	e	enum:spv::Decoration
spv::DecorationXfbStride	lib/vulkan/spirv.hpp	/^    DecorationXfbStride = 37,$/;"	e	enum:spv::Decoration
spv::Dim	lib/vulkan/spirv.hpp	/^enum Dim {$/;"	g	namespace:spv
spv::Dim1D	lib/vulkan/spirv.hpp	/^    Dim1D = 0,$/;"	e	enum:spv::Dim
spv::Dim2D	lib/vulkan/spirv.hpp	/^    Dim2D = 1,$/;"	e	enum:spv::Dim
spv::Dim3D	lib/vulkan/spirv.hpp	/^    Dim3D = 2,$/;"	e	enum:spv::Dim
spv::DimBuffer	lib/vulkan/spirv.hpp	/^    DimBuffer = 5,$/;"	e	enum:spv::Dim
spv::DimCube	lib/vulkan/spirv.hpp	/^    DimCube = 3,$/;"	e	enum:spv::Dim
spv::DimMax	lib/vulkan/spirv.hpp	/^    DimMax = 0x7fffffff,$/;"	e	enum:spv::Dim
spv::DimRect	lib/vulkan/spirv.hpp	/^    DimRect = 4,$/;"	e	enum:spv::Dim
spv::DimSubpassData	lib/vulkan/spirv.hpp	/^    DimSubpassData = 6,$/;"	e	enum:spv::Dim
spv::ExecutionMode	lib/vulkan/spirv.hpp	/^enum ExecutionMode {$/;"	g	namespace:spv
spv::ExecutionModeContractionOff	lib/vulkan/spirv.hpp	/^    ExecutionModeContractionOff = 31,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeDepthGreater	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthGreater = 14,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeDepthLess	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthLess = 15,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeDepthReplacing	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthReplacing = 12,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeDepthUnchanged	lib/vulkan/spirv.hpp	/^    ExecutionModeDepthUnchanged = 16,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeEarlyFragmentTests	lib/vulkan/spirv.hpp	/^    ExecutionModeEarlyFragmentTests = 9,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeFinalizer	lib/vulkan/spirv.hpp	/^    ExecutionModeFinalizer = 34,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInitializer	lib/vulkan/spirv.hpp	/^    ExecutionModeInitializer = 33,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInputLines	lib/vulkan/spirv.hpp	/^    ExecutionModeInputLines = 20,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInputLinesAdjacency	lib/vulkan/spirv.hpp	/^    ExecutionModeInputLinesAdjacency = 21,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInputPoints	lib/vulkan/spirv.hpp	/^    ExecutionModeInputPoints = 19,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInputTrianglesAdjacency	lib/vulkan/spirv.hpp	/^    ExecutionModeInputTrianglesAdjacency = 23,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeInvocations	lib/vulkan/spirv.hpp	/^    ExecutionModeInvocations = 0,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeIsolines	lib/vulkan/spirv.hpp	/^    ExecutionModeIsolines = 25,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeLocalSize	lib/vulkan/spirv.hpp	/^    ExecutionModeLocalSize = 17,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeLocalSizeHint	lib/vulkan/spirv.hpp	/^    ExecutionModeLocalSizeHint = 18,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeMax	lib/vulkan/spirv.hpp	/^    ExecutionModeMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOriginLowerLeft	lib/vulkan/spirv.hpp	/^    ExecutionModeOriginLowerLeft = 8,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOriginUpperLeft	lib/vulkan/spirv.hpp	/^    ExecutionModeOriginUpperLeft = 7,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOutputLineStrip	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputLineStrip = 28,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOutputPoints	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputPoints = 27,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOutputTriangleStrip	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputTriangleStrip = 29,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeOutputVertices	lib/vulkan/spirv.hpp	/^    ExecutionModeOutputVertices = 26,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModePixelCenterInteger	lib/vulkan/spirv.hpp	/^    ExecutionModePixelCenterInteger = 6,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModePointMode	lib/vulkan/spirv.hpp	/^    ExecutionModePointMode = 10,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeQuads	lib/vulkan/spirv.hpp	/^    ExecutionModeQuads = 24,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeSpacingEqual	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingEqual = 1,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeSpacingFractionalEven	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingFractionalEven = 2,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeSpacingFractionalOdd	lib/vulkan/spirv.hpp	/^    ExecutionModeSpacingFractionalOdd = 3,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeSubgroupSize	lib/vulkan/spirv.hpp	/^    ExecutionModeSubgroupSize = 35,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeSubgroupsPerWorkgroup	lib/vulkan/spirv.hpp	/^    ExecutionModeSubgroupsPerWorkgroup = 36,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeTriangles	lib/vulkan/spirv.hpp	/^    ExecutionModeTriangles = 22,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeVecTypeHint	lib/vulkan/spirv.hpp	/^    ExecutionModeVecTypeHint = 30,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeVertexOrderCcw	lib/vulkan/spirv.hpp	/^    ExecutionModeVertexOrderCcw = 5,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeVertexOrderCw	lib/vulkan/spirv.hpp	/^    ExecutionModeVertexOrderCw = 4,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModeXfb	lib/vulkan/spirv.hpp	/^    ExecutionModeXfb = 11,$/;"	e	enum:spv::ExecutionMode
spv::ExecutionModel	lib/vulkan/spirv.hpp	/^enum ExecutionModel {$/;"	g	namespace:spv
spv::ExecutionModelFragment	lib/vulkan/spirv.hpp	/^    ExecutionModelFragment = 4,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelGLCompute	lib/vulkan/spirv.hpp	/^    ExecutionModelGLCompute = 5,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelGeometry	lib/vulkan/spirv.hpp	/^    ExecutionModelGeometry = 3,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelKernel	lib/vulkan/spirv.hpp	/^    ExecutionModelKernel = 6,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelMax	lib/vulkan/spirv.hpp	/^    ExecutionModelMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelTessellationControl	lib/vulkan/spirv.hpp	/^    ExecutionModelTessellationControl = 1,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelTessellationEvaluation	lib/vulkan/spirv.hpp	/^    ExecutionModelTessellationEvaluation = 2,$/;"	e	enum:spv::ExecutionModel
spv::ExecutionModelVertex	lib/vulkan/spirv.hpp	/^    ExecutionModelVertex = 0,$/;"	e	enum:spv::ExecutionModel
spv::FPFastMathModeAllowRecipMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeAllowRecipMask = 0x00000008,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeAllowRecipShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeAllowRecipShift = 3,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeFastMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeFastMask = 0x00000010,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeFastShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeFastShift = 4,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeMask	lib/vulkan/spirv.hpp	/^enum FPFastMathModeMask {$/;"	g	namespace:spv
spv::FPFastMathModeMaskNone	lib/vulkan/spirv.hpp	/^    FPFastMathModeMaskNone = 0,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeMax	lib/vulkan/spirv.hpp	/^    FPFastMathModeMax = 0x7fffffff,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeNSZMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNSZMask = 0x00000004,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeNSZShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNSZShift = 2,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeNotInfMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotInfMask = 0x00000002,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeNotInfShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotInfShift = 1,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeNotNaNMask	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotNaNMask = 0x00000001,$/;"	e	enum:spv::FPFastMathModeMask
spv::FPFastMathModeNotNaNShift	lib/vulkan/spirv.hpp	/^    FPFastMathModeNotNaNShift = 0,$/;"	e	enum:spv::FPFastMathModeShift
spv::FPFastMathModeShift	lib/vulkan/spirv.hpp	/^enum FPFastMathModeShift {$/;"	g	namespace:spv
spv::FPRoundingMode	lib/vulkan/spirv.hpp	/^enum FPRoundingMode {$/;"	g	namespace:spv
spv::FPRoundingModeMax	lib/vulkan/spirv.hpp	/^    FPRoundingModeMax = 0x7fffffff,$/;"	e	enum:spv::FPRoundingMode
spv::FPRoundingModeRTE	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTE = 0,$/;"	e	enum:spv::FPRoundingMode
spv::FPRoundingModeRTN	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTN = 3,$/;"	e	enum:spv::FPRoundingMode
spv::FPRoundingModeRTP	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTP = 2,$/;"	e	enum:spv::FPRoundingMode
spv::FPRoundingModeRTZ	lib/vulkan/spirv.hpp	/^    FPRoundingModeRTZ = 1,$/;"	e	enum:spv::FPRoundingMode
spv::FunctionControlConstMask	lib/vulkan/spirv.hpp	/^    FunctionControlConstMask = 0x00000008,$/;"	e	enum:spv::FunctionControlMask
spv::FunctionControlConstShift	lib/vulkan/spirv.hpp	/^    FunctionControlConstShift = 3,$/;"	e	enum:spv::FunctionControlShift
spv::FunctionControlDontInlineMask	lib/vulkan/spirv.hpp	/^    FunctionControlDontInlineMask = 0x00000002,$/;"	e	enum:spv::FunctionControlMask
spv::FunctionControlDontInlineShift	lib/vulkan/spirv.hpp	/^    FunctionControlDontInlineShift = 1,$/;"	e	enum:spv::FunctionControlShift
spv::FunctionControlInlineMask	lib/vulkan/spirv.hpp	/^    FunctionControlInlineMask = 0x00000001,$/;"	e	enum:spv::FunctionControlMask
spv::FunctionControlInlineShift	lib/vulkan/spirv.hpp	/^    FunctionControlInlineShift = 0,$/;"	e	enum:spv::FunctionControlShift
spv::FunctionControlMask	lib/vulkan/spirv.hpp	/^enum FunctionControlMask {$/;"	g	namespace:spv
spv::FunctionControlMaskNone	lib/vulkan/spirv.hpp	/^    FunctionControlMaskNone = 0,$/;"	e	enum:spv::FunctionControlMask
spv::FunctionControlMax	lib/vulkan/spirv.hpp	/^    FunctionControlMax = 0x7fffffff,$/;"	e	enum:spv::FunctionControlShift
spv::FunctionControlPureMask	lib/vulkan/spirv.hpp	/^    FunctionControlPureMask = 0x00000004,$/;"	e	enum:spv::FunctionControlMask
spv::FunctionControlPureShift	lib/vulkan/spirv.hpp	/^    FunctionControlPureShift = 2,$/;"	e	enum:spv::FunctionControlShift
spv::FunctionControlShift	lib/vulkan/spirv.hpp	/^enum FunctionControlShift {$/;"	g	namespace:spv
spv::FunctionParameterAttribute	lib/vulkan/spirv.hpp	/^enum FunctionParameterAttribute {$/;"	g	namespace:spv
spv::FunctionParameterAttributeByVal	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeByVal = 2,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeMax	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeMax = 0x7fffffff,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeNoAlias	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoAlias = 4,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeNoCapture	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoCapture = 5,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeNoReadWrite	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoReadWrite = 7,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeNoWrite	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeNoWrite = 6,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeSext	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeSext = 1,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeSret	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeSret = 3,$/;"	e	enum:spv::FunctionParameterAttribute
spv::FunctionParameterAttributeZext	lib/vulkan/spirv.hpp	/^    FunctionParameterAttributeZext = 0,$/;"	e	enum:spv::FunctionParameterAttribute
spv::GroupOperation	lib/vulkan/spirv.hpp	/^enum GroupOperation {$/;"	g	namespace:spv
spv::GroupOperationExclusiveScan	lib/vulkan/spirv.hpp	/^    GroupOperationExclusiveScan = 2,$/;"	e	enum:spv::GroupOperation
spv::GroupOperationInclusiveScan	lib/vulkan/spirv.hpp	/^    GroupOperationInclusiveScan = 1,$/;"	e	enum:spv::GroupOperation
spv::GroupOperationMax	lib/vulkan/spirv.hpp	/^    GroupOperationMax = 0x7fffffff,$/;"	e	enum:spv::GroupOperation
spv::GroupOperationReduce	lib/vulkan/spirv.hpp	/^    GroupOperationReduce = 0,$/;"	e	enum:spv::GroupOperation
spv::Id	lib/vulkan/spirv.hpp	/^typedef unsigned int Id;$/;"	t	namespace:spv
spv::ImageChannelDataType	lib/vulkan/spirv.hpp	/^enum ImageChannelDataType {$/;"	g	namespace:spv
spv::ImageChannelDataTypeFloat	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeFloat = 14,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeHalfFloat	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeHalfFloat = 13,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeMax	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeSignedInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt16 = 8,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeSignedInt32	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt32 = 9,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeSignedInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSignedInt8 = 7,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeSnormInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSnormInt16 = 1,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeSnormInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeSnormInt8 = 0,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormInt101010	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt101010 = 6,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormInt101010_2	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt101010_2 = 16,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt16 = 3,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormInt24	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt24 = 15,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormInt8 = 2,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormShort555	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormShort555 = 5,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnormShort565	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnormShort565 = 4,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnsignedInt16	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt16 = 11,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnsignedInt32	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt32 = 12,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelDataTypeUnsignedInt8	lib/vulkan/spirv.hpp	/^    ImageChannelDataTypeUnsignedInt8 = 10,$/;"	e	enum:spv::ImageChannelDataType
spv::ImageChannelOrder	lib/vulkan/spirv.hpp	/^enum ImageChannelOrder {$/;"	g	namespace:spv
spv::ImageChannelOrderA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderA = 1,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderABGR	lib/vulkan/spirv.hpp	/^    ImageChannelOrderABGR = 19,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderARGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrderARGB = 7,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderBGRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderBGRA = 6,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderDepth	lib/vulkan/spirv.hpp	/^    ImageChannelOrderDepth = 13,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderDepthStencil	lib/vulkan/spirv.hpp	/^    ImageChannelOrderDepthStencil = 14,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderIntensity	lib/vulkan/spirv.hpp	/^    ImageChannelOrderIntensity = 8,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderLuminance	lib/vulkan/spirv.hpp	/^    ImageChannelOrderLuminance = 9,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderMax	lib/vulkan/spirv.hpp	/^    ImageChannelOrderMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderR	lib/vulkan/spirv.hpp	/^    ImageChannelOrderR = 0,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRA = 3,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRG	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRG = 2,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGB = 4,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRGBA	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGBA = 5,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRGBx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGBx = 12,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRGx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRGx = 11,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrderRx	lib/vulkan/spirv.hpp	/^    ImageChannelOrderRx = 10,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrdersBGRA	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersBGRA = 18,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrdersRGB	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGB = 15,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrdersRGBA	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGBA = 17,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageChannelOrdersRGBx	lib/vulkan/spirv.hpp	/^    ImageChannelOrdersRGBx = 16,$/;"	e	enum:spv::ImageChannelOrder
spv::ImageFormat	lib/vulkan/spirv.hpp	/^enum ImageFormat {$/;"	g	namespace:spv
spv::ImageFormatMax	lib/vulkan/spirv.hpp	/^    ImageFormatMax = 0x7fffffff,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR11fG11fB10f	lib/vulkan/spirv.hpp	/^    ImageFormatR11fG11fB10f = 8,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR16	lib/vulkan/spirv.hpp	/^    ImageFormatR16 = 14,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatR16Snorm = 19,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR16f	lib/vulkan/spirv.hpp	/^    ImageFormatR16f = 9,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR16i	lib/vulkan/spirv.hpp	/^    ImageFormatR16i = 28,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR16ui	lib/vulkan/spirv.hpp	/^    ImageFormatR16ui = 38,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR32f	lib/vulkan/spirv.hpp	/^    ImageFormatR32f = 3,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR32i	lib/vulkan/spirv.hpp	/^    ImageFormatR32i = 24,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR32ui	lib/vulkan/spirv.hpp	/^    ImageFormatR32ui = 33,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR8	lib/vulkan/spirv.hpp	/^    ImageFormatR8 = 15,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatR8Snorm = 20,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR8i	lib/vulkan/spirv.hpp	/^    ImageFormatR8i = 29,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatR8ui	lib/vulkan/spirv.hpp	/^    ImageFormatR8ui = 39,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg16	lib/vulkan/spirv.hpp	/^    ImageFormatRg16 = 12,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRg16Snorm = 17,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg16f	lib/vulkan/spirv.hpp	/^    ImageFormatRg16f = 7,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg16i	lib/vulkan/spirv.hpp	/^    ImageFormatRg16i = 26,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg16ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg16ui = 36,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg32f	lib/vulkan/spirv.hpp	/^    ImageFormatRg32f = 6,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg32i	lib/vulkan/spirv.hpp	/^    ImageFormatRg32i = 25,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg32ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg32ui = 35,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg8	lib/vulkan/spirv.hpp	/^    ImageFormatRg8 = 13,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRg8Snorm = 18,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg8i	lib/vulkan/spirv.hpp	/^    ImageFormatRg8i = 27,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRg8ui	lib/vulkan/spirv.hpp	/^    ImageFormatRg8ui = 37,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgb10A2	lib/vulkan/spirv.hpp	/^    ImageFormatRgb10A2 = 11,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgb10a2ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgb10a2ui = 34,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba16	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16 = 10,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba16Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16Snorm = 16,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba16f	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16f = 2,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba16i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16i = 22,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba16ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba16ui = 31,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba32f	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32f = 1,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba32i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32i = 21,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba32ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba32ui = 30,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba8	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8 = 4,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba8Snorm	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8Snorm = 5,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba8i	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8i = 23,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatRgba8ui	lib/vulkan/spirv.hpp	/^    ImageFormatRgba8ui = 32,$/;"	e	enum:spv::ImageFormat
spv::ImageFormatUnknown	lib/vulkan/spirv.hpp	/^    ImageFormatUnknown = 0,$/;"	e	enum:spv::ImageFormat
spv::ImageOperandsBiasMask	lib/vulkan/spirv.hpp	/^    ImageOperandsBiasMask = 0x00000001,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsBiasShift	lib/vulkan/spirv.hpp	/^    ImageOperandsBiasShift = 0,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsConstOffsetMask	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetMask = 0x00000008,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsConstOffsetShift	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetShift = 3,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsConstOffsetsMask	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetsMask = 0x00000020,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsConstOffsetsShift	lib/vulkan/spirv.hpp	/^    ImageOperandsConstOffsetsShift = 5,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsGradMask	lib/vulkan/spirv.hpp	/^    ImageOperandsGradMask = 0x00000004,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsGradShift	lib/vulkan/spirv.hpp	/^    ImageOperandsGradShift = 2,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsLodMask	lib/vulkan/spirv.hpp	/^    ImageOperandsLodMask = 0x00000002,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsLodShift	lib/vulkan/spirv.hpp	/^    ImageOperandsLodShift = 1,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsMask	lib/vulkan/spirv.hpp	/^enum ImageOperandsMask {$/;"	g	namespace:spv
spv::ImageOperandsMaskNone	lib/vulkan/spirv.hpp	/^    ImageOperandsMaskNone = 0,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsMax	lib/vulkan/spirv.hpp	/^    ImageOperandsMax = 0x7fffffff,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsMinLodMask	lib/vulkan/spirv.hpp	/^    ImageOperandsMinLodMask = 0x00000080,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsMinLodShift	lib/vulkan/spirv.hpp	/^    ImageOperandsMinLodShift = 7,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsOffsetMask	lib/vulkan/spirv.hpp	/^    ImageOperandsOffsetMask = 0x00000010,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsOffsetShift	lib/vulkan/spirv.hpp	/^    ImageOperandsOffsetShift = 4,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsSampleMask	lib/vulkan/spirv.hpp	/^    ImageOperandsSampleMask = 0x00000040,$/;"	e	enum:spv::ImageOperandsMask
spv::ImageOperandsSampleShift	lib/vulkan/spirv.hpp	/^    ImageOperandsSampleShift = 6,$/;"	e	enum:spv::ImageOperandsShift
spv::ImageOperandsShift	lib/vulkan/spirv.hpp	/^enum ImageOperandsShift {$/;"	g	namespace:spv
spv::KernelEnqueueFlags	lib/vulkan/spirv.hpp	/^enum KernelEnqueueFlags {$/;"	g	namespace:spv
spv::KernelEnqueueFlagsMax	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsMax = 0x7fffffff,$/;"	e	enum:spv::KernelEnqueueFlags
spv::KernelEnqueueFlagsNoWait	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsNoWait = 0,$/;"	e	enum:spv::KernelEnqueueFlags
spv::KernelEnqueueFlagsWaitKernel	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsWaitKernel = 1,$/;"	e	enum:spv::KernelEnqueueFlags
spv::KernelEnqueueFlagsWaitWorkGroup	lib/vulkan/spirv.hpp	/^    KernelEnqueueFlagsWaitWorkGroup = 2,$/;"	e	enum:spv::KernelEnqueueFlags
spv::KernelProfilingInfoCmdExecTimeMask	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoCmdExecTimeMask = 0x00000001,$/;"	e	enum:spv::KernelProfilingInfoMask
spv::KernelProfilingInfoCmdExecTimeShift	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoCmdExecTimeShift = 0,$/;"	e	enum:spv::KernelProfilingInfoShift
spv::KernelProfilingInfoMask	lib/vulkan/spirv.hpp	/^enum KernelProfilingInfoMask {$/;"	g	namespace:spv
spv::KernelProfilingInfoMaskNone	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoMaskNone = 0,$/;"	e	enum:spv::KernelProfilingInfoMask
spv::KernelProfilingInfoMax	lib/vulkan/spirv.hpp	/^    KernelProfilingInfoMax = 0x7fffffff,$/;"	e	enum:spv::KernelProfilingInfoShift
spv::KernelProfilingInfoShift	lib/vulkan/spirv.hpp	/^enum KernelProfilingInfoShift {$/;"	g	namespace:spv
spv::LinkageType	lib/vulkan/spirv.hpp	/^enum LinkageType {$/;"	g	namespace:spv
spv::LinkageTypeExport	lib/vulkan/spirv.hpp	/^    LinkageTypeExport = 0,$/;"	e	enum:spv::LinkageType
spv::LinkageTypeImport	lib/vulkan/spirv.hpp	/^    LinkageTypeImport = 1,$/;"	e	enum:spv::LinkageType
spv::LinkageTypeMax	lib/vulkan/spirv.hpp	/^    LinkageTypeMax = 0x7fffffff,$/;"	e	enum:spv::LinkageType
spv::LoopControlDependencyInfiniteMask	lib/vulkan/spirv.hpp	/^    LoopControlDependencyInfiniteMask = 0x00000004,$/;"	e	enum:spv::LoopControlMask
spv::LoopControlDependencyInfiniteShift	lib/vulkan/spirv.hpp	/^    LoopControlDependencyInfiniteShift = 2,$/;"	e	enum:spv::LoopControlShift
spv::LoopControlDependencyLengthMask	lib/vulkan/spirv.hpp	/^    LoopControlDependencyLengthMask = 0x00000008,$/;"	e	enum:spv::LoopControlMask
spv::LoopControlDependencyLengthShift	lib/vulkan/spirv.hpp	/^    LoopControlDependencyLengthShift = 3,$/;"	e	enum:spv::LoopControlShift
spv::LoopControlDontUnrollMask	lib/vulkan/spirv.hpp	/^    LoopControlDontUnrollMask = 0x00000002,$/;"	e	enum:spv::LoopControlMask
spv::LoopControlDontUnrollShift	lib/vulkan/spirv.hpp	/^    LoopControlDontUnrollShift = 1,$/;"	e	enum:spv::LoopControlShift
spv::LoopControlMask	lib/vulkan/spirv.hpp	/^enum LoopControlMask {$/;"	g	namespace:spv
spv::LoopControlMaskNone	lib/vulkan/spirv.hpp	/^    LoopControlMaskNone = 0,$/;"	e	enum:spv::LoopControlMask
spv::LoopControlMax	lib/vulkan/spirv.hpp	/^    LoopControlMax = 0x7fffffff,$/;"	e	enum:spv::LoopControlShift
spv::LoopControlShift	lib/vulkan/spirv.hpp	/^enum LoopControlShift {$/;"	g	namespace:spv
spv::LoopControlUnrollMask	lib/vulkan/spirv.hpp	/^    LoopControlUnrollMask = 0x00000001,$/;"	e	enum:spv::LoopControlMask
spv::LoopControlUnrollShift	lib/vulkan/spirv.hpp	/^    LoopControlUnrollShift = 0,$/;"	e	enum:spv::LoopControlShift
spv::MagicNumber	lib/vulkan/spirv.hpp	/^static const unsigned int MagicNumber = 0x07230203;$/;"	m	namespace:spv
spv::MemoryAccessAlignedMask	lib/vulkan/spirv.hpp	/^    MemoryAccessAlignedMask = 0x00000002,$/;"	e	enum:spv::MemoryAccessMask
spv::MemoryAccessAlignedShift	lib/vulkan/spirv.hpp	/^    MemoryAccessAlignedShift = 1,$/;"	e	enum:spv::MemoryAccessShift
spv::MemoryAccessMask	lib/vulkan/spirv.hpp	/^enum MemoryAccessMask {$/;"	g	namespace:spv
spv::MemoryAccessMaskNone	lib/vulkan/spirv.hpp	/^    MemoryAccessMaskNone = 0,$/;"	e	enum:spv::MemoryAccessMask
spv::MemoryAccessMax	lib/vulkan/spirv.hpp	/^    MemoryAccessMax = 0x7fffffff,$/;"	e	enum:spv::MemoryAccessShift
spv::MemoryAccessNontemporalMask	lib/vulkan/spirv.hpp	/^    MemoryAccessNontemporalMask = 0x00000004,$/;"	e	enum:spv::MemoryAccessMask
spv::MemoryAccessNontemporalShift	lib/vulkan/spirv.hpp	/^    MemoryAccessNontemporalShift = 2,$/;"	e	enum:spv::MemoryAccessShift
spv::MemoryAccessShift	lib/vulkan/spirv.hpp	/^enum MemoryAccessShift {$/;"	g	namespace:spv
spv::MemoryAccessVolatileMask	lib/vulkan/spirv.hpp	/^    MemoryAccessVolatileMask = 0x00000001,$/;"	e	enum:spv::MemoryAccessMask
spv::MemoryAccessVolatileShift	lib/vulkan/spirv.hpp	/^    MemoryAccessVolatileShift = 0,$/;"	e	enum:spv::MemoryAccessShift
spv::MemoryModel	lib/vulkan/spirv.hpp	/^enum MemoryModel {$/;"	g	namespace:spv
spv::MemoryModelGLSL450	lib/vulkan/spirv.hpp	/^    MemoryModelGLSL450 = 1,$/;"	e	enum:spv::MemoryModel
spv::MemoryModelMax	lib/vulkan/spirv.hpp	/^    MemoryModelMax = 0x7fffffff,$/;"	e	enum:spv::MemoryModel
spv::MemoryModelOpenCL	lib/vulkan/spirv.hpp	/^    MemoryModelOpenCL = 2,$/;"	e	enum:spv::MemoryModel
spv::MemoryModelSimple	lib/vulkan/spirv.hpp	/^    MemoryModelSimple = 0,$/;"	e	enum:spv::MemoryModel
spv::MemorySemanticsAcquireMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireMask = 0x00000002,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsAcquireReleaseMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireReleaseMask = 0x00000008,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsAcquireReleaseShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireReleaseShift = 3,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsAcquireShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAcquireShift = 1,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsAtomicCounterMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryMask = 0x00000400,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsAtomicCounterMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryShift = 10,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsCrossWorkgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsCrossWorkgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryShift = 9,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsImageMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsImageMemoryMask = 0x00000800,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsImageMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsImageMemoryShift = 11,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsMask	lib/vulkan/spirv.hpp	/^enum MemorySemanticsMask {$/;"	g	namespace:spv
spv::MemorySemanticsMaskNone	lib/vulkan/spirv.hpp	/^    MemorySemanticsMaskNone = 0,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsMax	lib/vulkan/spirv.hpp	/^    MemorySemanticsMax = 0x7fffffff,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsReleaseMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsReleaseMask = 0x00000004,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsReleaseShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsReleaseShift = 2,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsSequentiallyConsistentMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsSequentiallyConsistentMask = 0x00000010,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsSequentiallyConsistentShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsSequentiallyConsistentShift = 4,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsShift	lib/vulkan/spirv.hpp	/^enum MemorySemanticsShift {$/;"	g	namespace:spv
spv::MemorySemanticsSubgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsSubgroupMemoryMask = 0x00000080,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsSubgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsSubgroupMemoryShift = 7,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsUniformMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsUniformMemoryMask = 0x00000040,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsUniformMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsUniformMemoryShift = 6,$/;"	e	enum:spv::MemorySemanticsShift
spv::MemorySemanticsWorkgroupMemoryMask	lib/vulkan/spirv.hpp	/^    MemorySemanticsWorkgroupMemoryMask = 0x00000100,$/;"	e	enum:spv::MemorySemanticsMask
spv::MemorySemanticsWorkgroupMemoryShift	lib/vulkan/spirv.hpp	/^    MemorySemanticsWorkgroupMemoryShift = 8,$/;"	e	enum:spv::MemorySemanticsShift
spv::Op	lib/vulkan/spirv.hpp	/^enum Op {$/;"	g	namespace:spv
spv::OpAccessChain	lib/vulkan/spirv.hpp	/^    OpAccessChain = 65,$/;"	e	enum:spv::Op
spv::OpAll	lib/vulkan/spirv.hpp	/^    OpAll = 155,$/;"	e	enum:spv::Op
spv::OpAny	lib/vulkan/spirv.hpp	/^    OpAny = 154,$/;"	e	enum:spv::Op
spv::OpArrayLength	lib/vulkan/spirv.hpp	/^    OpArrayLength = 68,$/;"	e	enum:spv::Op
spv::OpAtomicAnd	lib/vulkan/spirv.hpp	/^    OpAtomicAnd = 240,$/;"	e	enum:spv::Op
spv::OpAtomicCompareExchange	lib/vulkan/spirv.hpp	/^    OpAtomicCompareExchange = 230,$/;"	e	enum:spv::Op
spv::OpAtomicCompareExchangeWeak	lib/vulkan/spirv.hpp	/^    OpAtomicCompareExchangeWeak = 231,$/;"	e	enum:spv::Op
spv::OpAtomicExchange	lib/vulkan/spirv.hpp	/^    OpAtomicExchange = 229,$/;"	e	enum:spv::Op
spv::OpAtomicFlagClear	lib/vulkan/spirv.hpp	/^    OpAtomicFlagClear = 319,$/;"	e	enum:spv::Op
spv::OpAtomicFlagTestAndSet	lib/vulkan/spirv.hpp	/^    OpAtomicFlagTestAndSet = 318,$/;"	e	enum:spv::Op
spv::OpAtomicIAdd	lib/vulkan/spirv.hpp	/^    OpAtomicIAdd = 234,$/;"	e	enum:spv::Op
spv::OpAtomicIDecrement	lib/vulkan/spirv.hpp	/^    OpAtomicIDecrement = 233,$/;"	e	enum:spv::Op
spv::OpAtomicIIncrement	lib/vulkan/spirv.hpp	/^    OpAtomicIIncrement = 232,$/;"	e	enum:spv::Op
spv::OpAtomicISub	lib/vulkan/spirv.hpp	/^    OpAtomicISub = 235,$/;"	e	enum:spv::Op
spv::OpAtomicLoad	lib/vulkan/spirv.hpp	/^    OpAtomicLoad = 227,$/;"	e	enum:spv::Op
spv::OpAtomicOr	lib/vulkan/spirv.hpp	/^    OpAtomicOr = 241,$/;"	e	enum:spv::Op
spv::OpAtomicSMax	lib/vulkan/spirv.hpp	/^    OpAtomicSMax = 238,$/;"	e	enum:spv::Op
spv::OpAtomicSMin	lib/vulkan/spirv.hpp	/^    OpAtomicSMin = 236,$/;"	e	enum:spv::Op
spv::OpAtomicStore	lib/vulkan/spirv.hpp	/^    OpAtomicStore = 228,$/;"	e	enum:spv::Op
spv::OpAtomicUMax	lib/vulkan/spirv.hpp	/^    OpAtomicUMax = 239,$/;"	e	enum:spv::Op
spv::OpAtomicUMin	lib/vulkan/spirv.hpp	/^    OpAtomicUMin = 237,$/;"	e	enum:spv::Op
spv::OpAtomicXor	lib/vulkan/spirv.hpp	/^    OpAtomicXor = 242,$/;"	e	enum:spv::Op
spv::OpBitCount	lib/vulkan/spirv.hpp	/^    OpBitCount = 205,$/;"	e	enum:spv::Op
spv::OpBitFieldInsert	lib/vulkan/spirv.hpp	/^    OpBitFieldInsert = 201,$/;"	e	enum:spv::Op
spv::OpBitFieldSExtract	lib/vulkan/spirv.hpp	/^    OpBitFieldSExtract = 202,$/;"	e	enum:spv::Op
spv::OpBitFieldUExtract	lib/vulkan/spirv.hpp	/^    OpBitFieldUExtract = 203,$/;"	e	enum:spv::Op
spv::OpBitReverse	lib/vulkan/spirv.hpp	/^    OpBitReverse = 204,$/;"	e	enum:spv::Op
spv::OpBitcast	lib/vulkan/spirv.hpp	/^    OpBitcast = 124,$/;"	e	enum:spv::Op
spv::OpBitwiseAnd	lib/vulkan/spirv.hpp	/^    OpBitwiseAnd = 199,$/;"	e	enum:spv::Op
spv::OpBitwiseOr	lib/vulkan/spirv.hpp	/^    OpBitwiseOr = 197,$/;"	e	enum:spv::Op
spv::OpBitwiseXor	lib/vulkan/spirv.hpp	/^    OpBitwiseXor = 198,$/;"	e	enum:spv::Op
spv::OpBranch	lib/vulkan/spirv.hpp	/^    OpBranch = 249,$/;"	e	enum:spv::Op
spv::OpBranchConditional	lib/vulkan/spirv.hpp	/^    OpBranchConditional = 250,$/;"	e	enum:spv::Op
spv::OpBuildNDRange	lib/vulkan/spirv.hpp	/^    OpBuildNDRange = 304,$/;"	e	enum:spv::Op
spv::OpCapability	lib/vulkan/spirv.hpp	/^    OpCapability = 17,$/;"	e	enum:spv::Op
spv::OpCaptureEventProfilingInfo	lib/vulkan/spirv.hpp	/^    OpCaptureEventProfilingInfo = 302,$/;"	e	enum:spv::Op
spv::OpCodeMask	lib/vulkan/spirv.hpp	/^static const unsigned int OpCodeMask = 0xffff;$/;"	m	namespace:spv
spv::OpCommitReadPipe	lib/vulkan/spirv.hpp	/^    OpCommitReadPipe = 280,$/;"	e	enum:spv::Op
spv::OpCommitWritePipe	lib/vulkan/spirv.hpp	/^    OpCommitWritePipe = 281,$/;"	e	enum:spv::Op
spv::OpCompositeConstruct	lib/vulkan/spirv.hpp	/^    OpCompositeConstruct = 80,$/;"	e	enum:spv::Op
spv::OpCompositeExtract	lib/vulkan/spirv.hpp	/^    OpCompositeExtract = 81,$/;"	e	enum:spv::Op
spv::OpCompositeInsert	lib/vulkan/spirv.hpp	/^    OpCompositeInsert = 82,$/;"	e	enum:spv::Op
spv::OpConstant	lib/vulkan/spirv.hpp	/^    OpConstant = 43,$/;"	e	enum:spv::Op
spv::OpConstantComposite	lib/vulkan/spirv.hpp	/^    OpConstantComposite = 44,$/;"	e	enum:spv::Op
spv::OpConstantFalse	lib/vulkan/spirv.hpp	/^    OpConstantFalse = 42,$/;"	e	enum:spv::Op
spv::OpConstantNull	lib/vulkan/spirv.hpp	/^    OpConstantNull = 46,$/;"	e	enum:spv::Op
spv::OpConstantPipeStorage	lib/vulkan/spirv.hpp	/^    OpConstantPipeStorage = 323,$/;"	e	enum:spv::Op
spv::OpConstantSampler	lib/vulkan/spirv.hpp	/^    OpConstantSampler = 45,$/;"	e	enum:spv::Op
spv::OpConstantTrue	lib/vulkan/spirv.hpp	/^    OpConstantTrue = 41,$/;"	e	enum:spv::Op
spv::OpControlBarrier	lib/vulkan/spirv.hpp	/^    OpControlBarrier = 224,$/;"	e	enum:spv::Op
spv::OpConvertFToS	lib/vulkan/spirv.hpp	/^    OpConvertFToS = 110,$/;"	e	enum:spv::Op
spv::OpConvertFToU	lib/vulkan/spirv.hpp	/^    OpConvertFToU = 109,$/;"	e	enum:spv::Op
spv::OpConvertPtrToU	lib/vulkan/spirv.hpp	/^    OpConvertPtrToU = 117,$/;"	e	enum:spv::Op
spv::OpConvertSToF	lib/vulkan/spirv.hpp	/^    OpConvertSToF = 111,$/;"	e	enum:spv::Op
spv::OpConvertUToF	lib/vulkan/spirv.hpp	/^    OpConvertUToF = 112,$/;"	e	enum:spv::Op
spv::OpConvertUToPtr	lib/vulkan/spirv.hpp	/^    OpConvertUToPtr = 120,$/;"	e	enum:spv::Op
spv::OpCopyMemory	lib/vulkan/spirv.hpp	/^    OpCopyMemory = 63,$/;"	e	enum:spv::Op
spv::OpCopyMemorySized	lib/vulkan/spirv.hpp	/^    OpCopyMemorySized = 64,$/;"	e	enum:spv::Op
spv::OpCopyObject	lib/vulkan/spirv.hpp	/^    OpCopyObject = 83,$/;"	e	enum:spv::Op
spv::OpCreatePipeFromPipeStorage	lib/vulkan/spirv.hpp	/^    OpCreatePipeFromPipeStorage = 324,$/;"	e	enum:spv::Op
spv::OpCreateUserEvent	lib/vulkan/spirv.hpp	/^    OpCreateUserEvent = 299,$/;"	e	enum:spv::Op
spv::OpDPdx	lib/vulkan/spirv.hpp	/^    OpDPdx = 207,$/;"	e	enum:spv::Op
spv::OpDPdxCoarse	lib/vulkan/spirv.hpp	/^    OpDPdxCoarse = 213,$/;"	e	enum:spv::Op
spv::OpDPdxFine	lib/vulkan/spirv.hpp	/^    OpDPdxFine = 210,$/;"	e	enum:spv::Op
spv::OpDPdy	lib/vulkan/spirv.hpp	/^    OpDPdy = 208,$/;"	e	enum:spv::Op
spv::OpDPdyCoarse	lib/vulkan/spirv.hpp	/^    OpDPdyCoarse = 214,$/;"	e	enum:spv::Op
spv::OpDPdyFine	lib/vulkan/spirv.hpp	/^    OpDPdyFine = 211,$/;"	e	enum:spv::Op
spv::OpDecorate	lib/vulkan/spirv.hpp	/^    OpDecorate = 71,$/;"	e	enum:spv::Op
spv::OpDecorationGroup	lib/vulkan/spirv.hpp	/^    OpDecorationGroup = 73,$/;"	e	enum:spv::Op
spv::OpDot	lib/vulkan/spirv.hpp	/^    OpDot = 148,$/;"	e	enum:spv::Op
spv::OpEmitStreamVertex	lib/vulkan/spirv.hpp	/^    OpEmitStreamVertex = 220,$/;"	e	enum:spv::Op
spv::OpEmitVertex	lib/vulkan/spirv.hpp	/^    OpEmitVertex = 218,$/;"	e	enum:spv::Op
spv::OpEndPrimitive	lib/vulkan/spirv.hpp	/^    OpEndPrimitive = 219,$/;"	e	enum:spv::Op
spv::OpEndStreamPrimitive	lib/vulkan/spirv.hpp	/^    OpEndStreamPrimitive = 221,$/;"	e	enum:spv::Op
spv::OpEnqueueKernel	lib/vulkan/spirv.hpp	/^    OpEnqueueKernel = 292,$/;"	e	enum:spv::Op
spv::OpEnqueueMarker	lib/vulkan/spirv.hpp	/^    OpEnqueueMarker = 291,$/;"	e	enum:spv::Op
spv::OpEntryPoint	lib/vulkan/spirv.hpp	/^    OpEntryPoint = 15,$/;"	e	enum:spv::Op
spv::OpExecutionMode	lib/vulkan/spirv.hpp	/^    OpExecutionMode = 16,$/;"	e	enum:spv::Op
spv::OpExtInst	lib/vulkan/spirv.hpp	/^    OpExtInst = 12,$/;"	e	enum:spv::Op
spv::OpExtInstImport	lib/vulkan/spirv.hpp	/^    OpExtInstImport = 11,$/;"	e	enum:spv::Op
spv::OpExtension	lib/vulkan/spirv.hpp	/^    OpExtension = 10,$/;"	e	enum:spv::Op
spv::OpFAdd	lib/vulkan/spirv.hpp	/^    OpFAdd = 129,$/;"	e	enum:spv::Op
spv::OpFConvert	lib/vulkan/spirv.hpp	/^    OpFConvert = 115,$/;"	e	enum:spv::Op
spv::OpFDiv	lib/vulkan/spirv.hpp	/^    OpFDiv = 136,$/;"	e	enum:spv::Op
spv::OpFMod	lib/vulkan/spirv.hpp	/^    OpFMod = 141,$/;"	e	enum:spv::Op
spv::OpFMul	lib/vulkan/spirv.hpp	/^    OpFMul = 133,$/;"	e	enum:spv::Op
spv::OpFNegate	lib/vulkan/spirv.hpp	/^    OpFNegate = 127,$/;"	e	enum:spv::Op
spv::OpFOrdEqual	lib/vulkan/spirv.hpp	/^    OpFOrdEqual = 180,$/;"	e	enum:spv::Op
spv::OpFOrdGreaterThan	lib/vulkan/spirv.hpp	/^    OpFOrdGreaterThan = 186,$/;"	e	enum:spv::Op
spv::OpFOrdGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpFOrdGreaterThanEqual = 190,$/;"	e	enum:spv::Op
spv::OpFOrdLessThan	lib/vulkan/spirv.hpp	/^    OpFOrdLessThan = 184,$/;"	e	enum:spv::Op
spv::OpFOrdLessThanEqual	lib/vulkan/spirv.hpp	/^    OpFOrdLessThanEqual = 188,$/;"	e	enum:spv::Op
spv::OpFOrdNotEqual	lib/vulkan/spirv.hpp	/^    OpFOrdNotEqual = 182,$/;"	e	enum:spv::Op
spv::OpFRem	lib/vulkan/spirv.hpp	/^    OpFRem = 140,$/;"	e	enum:spv::Op
spv::OpFSub	lib/vulkan/spirv.hpp	/^    OpFSub = 131,$/;"	e	enum:spv::Op
spv::OpFUnordEqual	lib/vulkan/spirv.hpp	/^    OpFUnordEqual = 181,$/;"	e	enum:spv::Op
spv::OpFUnordGreaterThan	lib/vulkan/spirv.hpp	/^    OpFUnordGreaterThan = 187,$/;"	e	enum:spv::Op
spv::OpFUnordGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpFUnordGreaterThanEqual = 191,$/;"	e	enum:spv::Op
spv::OpFUnordLessThan	lib/vulkan/spirv.hpp	/^    OpFUnordLessThan = 185,$/;"	e	enum:spv::Op
spv::OpFUnordLessThanEqual	lib/vulkan/spirv.hpp	/^    OpFUnordLessThanEqual = 189,$/;"	e	enum:spv::Op
spv::OpFUnordNotEqual	lib/vulkan/spirv.hpp	/^    OpFUnordNotEqual = 183,$/;"	e	enum:spv::Op
spv::OpFunction	lib/vulkan/spirv.hpp	/^    OpFunction = 54,$/;"	e	enum:spv::Op
spv::OpFunctionCall	lib/vulkan/spirv.hpp	/^    OpFunctionCall = 57,$/;"	e	enum:spv::Op
spv::OpFunctionEnd	lib/vulkan/spirv.hpp	/^    OpFunctionEnd = 56,$/;"	e	enum:spv::Op
spv::OpFunctionParameter	lib/vulkan/spirv.hpp	/^    OpFunctionParameter = 55,$/;"	e	enum:spv::Op
spv::OpFwidth	lib/vulkan/spirv.hpp	/^    OpFwidth = 209,$/;"	e	enum:spv::Op
spv::OpFwidthCoarse	lib/vulkan/spirv.hpp	/^    OpFwidthCoarse = 215,$/;"	e	enum:spv::Op
spv::OpFwidthFine	lib/vulkan/spirv.hpp	/^    OpFwidthFine = 212,$/;"	e	enum:spv::Op
spv::OpGenericCastToPtr	lib/vulkan/spirv.hpp	/^    OpGenericCastToPtr = 122,$/;"	e	enum:spv::Op
spv::OpGenericCastToPtrExplicit	lib/vulkan/spirv.hpp	/^    OpGenericCastToPtrExplicit = 123,$/;"	e	enum:spv::Op
spv::OpGenericPtrMemSemantics	lib/vulkan/spirv.hpp	/^    OpGenericPtrMemSemantics = 69,$/;"	e	enum:spv::Op
spv::OpGetDefaultQueue	lib/vulkan/spirv.hpp	/^    OpGetDefaultQueue = 303,$/;"	e	enum:spv::Op
spv::OpGetKernelLocalSizeForSubgroupCount	lib/vulkan/spirv.hpp	/^    OpGetKernelLocalSizeForSubgroupCount = 325,$/;"	e	enum:spv::Op
spv::OpGetKernelMaxNumSubgroups	lib/vulkan/spirv.hpp	/^    OpGetKernelMaxNumSubgroups = 326,$/;"	e	enum:spv::Op
spv::OpGetKernelNDrangeMaxSubGroupSize	lib/vulkan/spirv.hpp	/^    OpGetKernelNDrangeMaxSubGroupSize = 294,$/;"	e	enum:spv::Op
spv::OpGetKernelNDrangeSubGroupCount	lib/vulkan/spirv.hpp	/^    OpGetKernelNDrangeSubGroupCount = 293,$/;"	e	enum:spv::Op
spv::OpGetKernelPreferredWorkGroupSizeMultiple	lib/vulkan/spirv.hpp	/^    OpGetKernelPreferredWorkGroupSizeMultiple = 296,$/;"	e	enum:spv::Op
spv::OpGetKernelWorkGroupSize	lib/vulkan/spirv.hpp	/^    OpGetKernelWorkGroupSize = 295,$/;"	e	enum:spv::Op
spv::OpGetMaxPipePackets	lib/vulkan/spirv.hpp	/^    OpGetMaxPipePackets = 284,$/;"	e	enum:spv::Op
spv::OpGetNumPipePackets	lib/vulkan/spirv.hpp	/^    OpGetNumPipePackets = 283,$/;"	e	enum:spv::Op
spv::OpGroupAll	lib/vulkan/spirv.hpp	/^    OpGroupAll = 261,$/;"	e	enum:spv::Op
spv::OpGroupAny	lib/vulkan/spirv.hpp	/^    OpGroupAny = 262,$/;"	e	enum:spv::Op
spv::OpGroupAsyncCopy	lib/vulkan/spirv.hpp	/^    OpGroupAsyncCopy = 259,$/;"	e	enum:spv::Op
spv::OpGroupBroadcast	lib/vulkan/spirv.hpp	/^    OpGroupBroadcast = 263,$/;"	e	enum:spv::Op
spv::OpGroupCommitReadPipe	lib/vulkan/spirv.hpp	/^    OpGroupCommitReadPipe = 287,$/;"	e	enum:spv::Op
spv::OpGroupCommitWritePipe	lib/vulkan/spirv.hpp	/^    OpGroupCommitWritePipe = 288,$/;"	e	enum:spv::Op
spv::OpGroupDecorate	lib/vulkan/spirv.hpp	/^    OpGroupDecorate = 74,$/;"	e	enum:spv::Op
spv::OpGroupFAdd	lib/vulkan/spirv.hpp	/^    OpGroupFAdd = 265,$/;"	e	enum:spv::Op
spv::OpGroupFMax	lib/vulkan/spirv.hpp	/^    OpGroupFMax = 269,$/;"	e	enum:spv::Op
spv::OpGroupFMin	lib/vulkan/spirv.hpp	/^    OpGroupFMin = 266,$/;"	e	enum:spv::Op
spv::OpGroupIAdd	lib/vulkan/spirv.hpp	/^    OpGroupIAdd = 264,$/;"	e	enum:spv::Op
spv::OpGroupMemberDecorate	lib/vulkan/spirv.hpp	/^    OpGroupMemberDecorate = 75,$/;"	e	enum:spv::Op
spv::OpGroupReserveReadPipePackets	lib/vulkan/spirv.hpp	/^    OpGroupReserveReadPipePackets = 285,$/;"	e	enum:spv::Op
spv::OpGroupReserveWritePipePackets	lib/vulkan/spirv.hpp	/^    OpGroupReserveWritePipePackets = 286,$/;"	e	enum:spv::Op
spv::OpGroupSMax	lib/vulkan/spirv.hpp	/^    OpGroupSMax = 271,$/;"	e	enum:spv::Op
spv::OpGroupSMin	lib/vulkan/spirv.hpp	/^    OpGroupSMin = 268,$/;"	e	enum:spv::Op
spv::OpGroupUMax	lib/vulkan/spirv.hpp	/^    OpGroupUMax = 270,$/;"	e	enum:spv::Op
spv::OpGroupUMin	lib/vulkan/spirv.hpp	/^    OpGroupUMin = 267,$/;"	e	enum:spv::Op
spv::OpGroupWaitEvents	lib/vulkan/spirv.hpp	/^    OpGroupWaitEvents = 260,$/;"	e	enum:spv::Op
spv::OpIAdd	lib/vulkan/spirv.hpp	/^    OpIAdd = 128,$/;"	e	enum:spv::Op
spv::OpIAddCarry	lib/vulkan/spirv.hpp	/^    OpIAddCarry = 149,$/;"	e	enum:spv::Op
spv::OpIEqual	lib/vulkan/spirv.hpp	/^    OpIEqual = 170,$/;"	e	enum:spv::Op
spv::OpIMul	lib/vulkan/spirv.hpp	/^    OpIMul = 132,$/;"	e	enum:spv::Op
spv::OpINotEqual	lib/vulkan/spirv.hpp	/^    OpINotEqual = 171,$/;"	e	enum:spv::Op
spv::OpISub	lib/vulkan/spirv.hpp	/^    OpISub = 130,$/;"	e	enum:spv::Op
spv::OpISubBorrow	lib/vulkan/spirv.hpp	/^    OpISubBorrow = 150,$/;"	e	enum:spv::Op
spv::OpImage	lib/vulkan/spirv.hpp	/^    OpImage = 100,$/;"	e	enum:spv::Op
spv::OpImageDrefGather	lib/vulkan/spirv.hpp	/^    OpImageDrefGather = 97,$/;"	e	enum:spv::Op
spv::OpImageFetch	lib/vulkan/spirv.hpp	/^    OpImageFetch = 95,$/;"	e	enum:spv::Op
spv::OpImageGather	lib/vulkan/spirv.hpp	/^    OpImageGather = 96,$/;"	e	enum:spv::Op
spv::OpImageQueryFormat	lib/vulkan/spirv.hpp	/^    OpImageQueryFormat = 101,$/;"	e	enum:spv::Op
spv::OpImageQueryLevels	lib/vulkan/spirv.hpp	/^    OpImageQueryLevels = 106,$/;"	e	enum:spv::Op
spv::OpImageQueryLod	lib/vulkan/spirv.hpp	/^    OpImageQueryLod = 105,$/;"	e	enum:spv::Op
spv::OpImageQueryOrder	lib/vulkan/spirv.hpp	/^    OpImageQueryOrder = 102,$/;"	e	enum:spv::Op
spv::OpImageQuerySamples	lib/vulkan/spirv.hpp	/^    OpImageQuerySamples = 107,$/;"	e	enum:spv::Op
spv::OpImageQuerySize	lib/vulkan/spirv.hpp	/^    OpImageQuerySize = 104,$/;"	e	enum:spv::Op
spv::OpImageQuerySizeLod	lib/vulkan/spirv.hpp	/^    OpImageQuerySizeLod = 103,$/;"	e	enum:spv::Op
spv::OpImageRead	lib/vulkan/spirv.hpp	/^    OpImageRead = 98,$/;"	e	enum:spv::Op
spv::OpImageSampleDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleDrefExplicitLod = 90,$/;"	e	enum:spv::Op
spv::OpImageSampleDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleDrefImplicitLod = 89,$/;"	e	enum:spv::Op
spv::OpImageSampleExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleExplicitLod = 88,$/;"	e	enum:spv::Op
spv::OpImageSampleImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleImplicitLod = 87,$/;"	e	enum:spv::Op
spv::OpImageSampleProjDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjDrefExplicitLod = 94,$/;"	e	enum:spv::Op
spv::OpImageSampleProjDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjDrefImplicitLod = 93,$/;"	e	enum:spv::Op
spv::OpImageSampleProjExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjExplicitLod = 92,$/;"	e	enum:spv::Op
spv::OpImageSampleProjImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSampleProjImplicitLod = 91,$/;"	e	enum:spv::Op
spv::OpImageSparseDrefGather	lib/vulkan/spirv.hpp	/^    OpImageSparseDrefGather = 315,$/;"	e	enum:spv::Op
spv::OpImageSparseFetch	lib/vulkan/spirv.hpp	/^    OpImageSparseFetch = 313,$/;"	e	enum:spv::Op
spv::OpImageSparseGather	lib/vulkan/spirv.hpp	/^    OpImageSparseGather = 314,$/;"	e	enum:spv::Op
spv::OpImageSparseRead	lib/vulkan/spirv.hpp	/^    OpImageSparseRead = 320,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleDrefExplicitLod = 308,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleDrefImplicitLod = 307,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleExplicitLod = 306,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleImplicitLod = 305,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleProjDrefExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjDrefExplicitLod = 312,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleProjDrefImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjDrefImplicitLod = 311,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleProjExplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjExplicitLod = 310,$/;"	e	enum:spv::Op
spv::OpImageSparseSampleProjImplicitLod	lib/vulkan/spirv.hpp	/^    OpImageSparseSampleProjImplicitLod = 309,$/;"	e	enum:spv::Op
spv::OpImageSparseTexelsResident	lib/vulkan/spirv.hpp	/^    OpImageSparseTexelsResident = 316,$/;"	e	enum:spv::Op
spv::OpImageTexelPointer	lib/vulkan/spirv.hpp	/^    OpImageTexelPointer = 60,$/;"	e	enum:spv::Op
spv::OpImageWrite	lib/vulkan/spirv.hpp	/^    OpImageWrite = 99,$/;"	e	enum:spv::Op
spv::OpInBoundsAccessChain	lib/vulkan/spirv.hpp	/^    OpInBoundsAccessChain = 66,$/;"	e	enum:spv::Op
spv::OpInBoundsPtrAccessChain	lib/vulkan/spirv.hpp	/^    OpInBoundsPtrAccessChain = 70,$/;"	e	enum:spv::Op
spv::OpIsFinite	lib/vulkan/spirv.hpp	/^    OpIsFinite = 158,$/;"	e	enum:spv::Op
spv::OpIsInf	lib/vulkan/spirv.hpp	/^    OpIsInf = 157,$/;"	e	enum:spv::Op
spv::OpIsNan	lib/vulkan/spirv.hpp	/^    OpIsNan = 156,$/;"	e	enum:spv::Op
spv::OpIsNormal	lib/vulkan/spirv.hpp	/^    OpIsNormal = 159,$/;"	e	enum:spv::Op
spv::OpIsValidEvent	lib/vulkan/spirv.hpp	/^    OpIsValidEvent = 300,$/;"	e	enum:spv::Op
spv::OpIsValidReserveId	lib/vulkan/spirv.hpp	/^    OpIsValidReserveId = 282,$/;"	e	enum:spv::Op
spv::OpKill	lib/vulkan/spirv.hpp	/^    OpKill = 252,$/;"	e	enum:spv::Op
spv::OpLabel	lib/vulkan/spirv.hpp	/^    OpLabel = 248,$/;"	e	enum:spv::Op
spv::OpLessOrGreater	lib/vulkan/spirv.hpp	/^    OpLessOrGreater = 161,$/;"	e	enum:spv::Op
spv::OpLifetimeStart	lib/vulkan/spirv.hpp	/^    OpLifetimeStart = 256,$/;"	e	enum:spv::Op
spv::OpLifetimeStop	lib/vulkan/spirv.hpp	/^    OpLifetimeStop = 257,$/;"	e	enum:spv::Op
spv::OpLine	lib/vulkan/spirv.hpp	/^    OpLine = 8,$/;"	e	enum:spv::Op
spv::OpLoad	lib/vulkan/spirv.hpp	/^    OpLoad = 61,$/;"	e	enum:spv::Op
spv::OpLogicalAnd	lib/vulkan/spirv.hpp	/^    OpLogicalAnd = 167,$/;"	e	enum:spv::Op
spv::OpLogicalEqual	lib/vulkan/spirv.hpp	/^    OpLogicalEqual = 164,$/;"	e	enum:spv::Op
spv::OpLogicalNot	lib/vulkan/spirv.hpp	/^    OpLogicalNot = 168,$/;"	e	enum:spv::Op
spv::OpLogicalNotEqual	lib/vulkan/spirv.hpp	/^    OpLogicalNotEqual = 165,$/;"	e	enum:spv::Op
spv::OpLogicalOr	lib/vulkan/spirv.hpp	/^    OpLogicalOr = 166,$/;"	e	enum:spv::Op
spv::OpLoopMerge	lib/vulkan/spirv.hpp	/^    OpLoopMerge = 246,$/;"	e	enum:spv::Op
spv::OpMatrixTimesMatrix	lib/vulkan/spirv.hpp	/^    OpMatrixTimesMatrix = 146,$/;"	e	enum:spv::Op
spv::OpMatrixTimesScalar	lib/vulkan/spirv.hpp	/^    OpMatrixTimesScalar = 143,$/;"	e	enum:spv::Op
spv::OpMatrixTimesVector	lib/vulkan/spirv.hpp	/^    OpMatrixTimesVector = 145,$/;"	e	enum:spv::Op
spv::OpMax	lib/vulkan/spirv.hpp	/^    OpMax = 0x7fffffff,$/;"	e	enum:spv::Op
spv::OpMemberDecorate	lib/vulkan/spirv.hpp	/^    OpMemberDecorate = 72,$/;"	e	enum:spv::Op
spv::OpMemberName	lib/vulkan/spirv.hpp	/^    OpMemberName = 6,$/;"	e	enum:spv::Op
spv::OpMemoryBarrier	lib/vulkan/spirv.hpp	/^    OpMemoryBarrier = 225,$/;"	e	enum:spv::Op
spv::OpMemoryModel	lib/vulkan/spirv.hpp	/^    OpMemoryModel = 14,$/;"	e	enum:spv::Op
spv::OpMemoryNamedBarrier	lib/vulkan/spirv.hpp	/^    OpMemoryNamedBarrier = 329,$/;"	e	enum:spv::Op
spv::OpModuleProcessed	lib/vulkan/spirv.hpp	/^    OpModuleProcessed = 330,$/;"	e	enum:spv::Op
spv::OpName	lib/vulkan/spirv.hpp	/^    OpName = 5,$/;"	e	enum:spv::Op
spv::OpNamedBarrierInitialize	lib/vulkan/spirv.hpp	/^    OpNamedBarrierInitialize = 328,$/;"	e	enum:spv::Op
spv::OpNoLine	lib/vulkan/spirv.hpp	/^    OpNoLine = 317,$/;"	e	enum:spv::Op
spv::OpNop	lib/vulkan/spirv.hpp	/^    OpNop = 0,$/;"	e	enum:spv::Op
spv::OpNot	lib/vulkan/spirv.hpp	/^    OpNot = 200,$/;"	e	enum:spv::Op
spv::OpOrdered	lib/vulkan/spirv.hpp	/^    OpOrdered = 162,$/;"	e	enum:spv::Op
spv::OpOuterProduct	lib/vulkan/spirv.hpp	/^    OpOuterProduct = 147,$/;"	e	enum:spv::Op
spv::OpPhi	lib/vulkan/spirv.hpp	/^    OpPhi = 245,$/;"	e	enum:spv::Op
spv::OpPtrAccessChain	lib/vulkan/spirv.hpp	/^    OpPtrAccessChain = 67,$/;"	e	enum:spv::Op
spv::OpPtrCastToGeneric	lib/vulkan/spirv.hpp	/^    OpPtrCastToGeneric = 121,$/;"	e	enum:spv::Op
spv::OpQuantizeToF16	lib/vulkan/spirv.hpp	/^    OpQuantizeToF16 = 116,$/;"	e	enum:spv::Op
spv::OpReadPipe	lib/vulkan/spirv.hpp	/^    OpReadPipe = 274,$/;"	e	enum:spv::Op
spv::OpReleaseEvent	lib/vulkan/spirv.hpp	/^    OpReleaseEvent = 298,$/;"	e	enum:spv::Op
spv::OpReserveReadPipePackets	lib/vulkan/spirv.hpp	/^    OpReserveReadPipePackets = 278,$/;"	e	enum:spv::Op
spv::OpReserveWritePipePackets	lib/vulkan/spirv.hpp	/^    OpReserveWritePipePackets = 279,$/;"	e	enum:spv::Op
spv::OpReservedReadPipe	lib/vulkan/spirv.hpp	/^    OpReservedReadPipe = 276,$/;"	e	enum:spv::Op
spv::OpReservedWritePipe	lib/vulkan/spirv.hpp	/^    OpReservedWritePipe = 277,$/;"	e	enum:spv::Op
spv::OpRetainEvent	lib/vulkan/spirv.hpp	/^    OpRetainEvent = 297,$/;"	e	enum:spv::Op
spv::OpReturn	lib/vulkan/spirv.hpp	/^    OpReturn = 253,$/;"	e	enum:spv::Op
spv::OpReturnValue	lib/vulkan/spirv.hpp	/^    OpReturnValue = 254,$/;"	e	enum:spv::Op
spv::OpSConvert	lib/vulkan/spirv.hpp	/^    OpSConvert = 114,$/;"	e	enum:spv::Op
spv::OpSDiv	lib/vulkan/spirv.hpp	/^    OpSDiv = 135,$/;"	e	enum:spv::Op
spv::OpSGreaterThan	lib/vulkan/spirv.hpp	/^    OpSGreaterThan = 173,$/;"	e	enum:spv::Op
spv::OpSGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpSGreaterThanEqual = 175,$/;"	e	enum:spv::Op
spv::OpSLessThan	lib/vulkan/spirv.hpp	/^    OpSLessThan = 177,$/;"	e	enum:spv::Op
spv::OpSLessThanEqual	lib/vulkan/spirv.hpp	/^    OpSLessThanEqual = 179,$/;"	e	enum:spv::Op
spv::OpSMod	lib/vulkan/spirv.hpp	/^    OpSMod = 139,$/;"	e	enum:spv::Op
spv::OpSMulExtended	lib/vulkan/spirv.hpp	/^    OpSMulExtended = 152,$/;"	e	enum:spv::Op
spv::OpSNegate	lib/vulkan/spirv.hpp	/^    OpSNegate = 126,$/;"	e	enum:spv::Op
spv::OpSRem	lib/vulkan/spirv.hpp	/^    OpSRem = 138,$/;"	e	enum:spv::Op
spv::OpSampledImage	lib/vulkan/spirv.hpp	/^    OpSampledImage = 86,$/;"	e	enum:spv::Op
spv::OpSatConvertSToU	lib/vulkan/spirv.hpp	/^    OpSatConvertSToU = 118,$/;"	e	enum:spv::Op
spv::OpSatConvertUToS	lib/vulkan/spirv.hpp	/^    OpSatConvertUToS = 119,$/;"	e	enum:spv::Op
spv::OpSelect	lib/vulkan/spirv.hpp	/^    OpSelect = 169,$/;"	e	enum:spv::Op
spv::OpSelectionMerge	lib/vulkan/spirv.hpp	/^    OpSelectionMerge = 247,$/;"	e	enum:spv::Op
spv::OpSetUserEventStatus	lib/vulkan/spirv.hpp	/^    OpSetUserEventStatus = 301,$/;"	e	enum:spv::Op
spv::OpShiftLeftLogical	lib/vulkan/spirv.hpp	/^    OpShiftLeftLogical = 196,$/;"	e	enum:spv::Op
spv::OpShiftRightArithmetic	lib/vulkan/spirv.hpp	/^    OpShiftRightArithmetic = 195,$/;"	e	enum:spv::Op
spv::OpShiftRightLogical	lib/vulkan/spirv.hpp	/^    OpShiftRightLogical = 194,$/;"	e	enum:spv::Op
spv::OpSignBitSet	lib/vulkan/spirv.hpp	/^    OpSignBitSet = 160,$/;"	e	enum:spv::Op
spv::OpSizeOf	lib/vulkan/spirv.hpp	/^    OpSizeOf = 321,$/;"	e	enum:spv::Op
spv::OpSource	lib/vulkan/spirv.hpp	/^    OpSource = 3,$/;"	e	enum:spv::Op
spv::OpSourceContinued	lib/vulkan/spirv.hpp	/^    OpSourceContinued = 2,$/;"	e	enum:spv::Op
spv::OpSourceExtension	lib/vulkan/spirv.hpp	/^    OpSourceExtension = 4,$/;"	e	enum:spv::Op
spv::OpSpecConstant	lib/vulkan/spirv.hpp	/^    OpSpecConstant = 50,$/;"	e	enum:spv::Op
spv::OpSpecConstantComposite	lib/vulkan/spirv.hpp	/^    OpSpecConstantComposite = 51,$/;"	e	enum:spv::Op
spv::OpSpecConstantFalse	lib/vulkan/spirv.hpp	/^    OpSpecConstantFalse = 49,$/;"	e	enum:spv::Op
spv::OpSpecConstantOp	lib/vulkan/spirv.hpp	/^    OpSpecConstantOp = 52,$/;"	e	enum:spv::Op
spv::OpSpecConstantTrue	lib/vulkan/spirv.hpp	/^    OpSpecConstantTrue = 48,$/;"	e	enum:spv::Op
spv::OpStore	lib/vulkan/spirv.hpp	/^    OpStore = 62,$/;"	e	enum:spv::Op
spv::OpString	lib/vulkan/spirv.hpp	/^    OpString = 7,$/;"	e	enum:spv::Op
spv::OpSwitch	lib/vulkan/spirv.hpp	/^    OpSwitch = 251,$/;"	e	enum:spv::Op
spv::OpTranspose	lib/vulkan/spirv.hpp	/^    OpTranspose = 84,$/;"	e	enum:spv::Op
spv::OpTypeArray	lib/vulkan/spirv.hpp	/^    OpTypeArray = 28,$/;"	e	enum:spv::Op
spv::OpTypeBool	lib/vulkan/spirv.hpp	/^    OpTypeBool = 20,$/;"	e	enum:spv::Op
spv::OpTypeDeviceEvent	lib/vulkan/spirv.hpp	/^    OpTypeDeviceEvent = 35,$/;"	e	enum:spv::Op
spv::OpTypeEvent	lib/vulkan/spirv.hpp	/^    OpTypeEvent = 34,$/;"	e	enum:spv::Op
spv::OpTypeFloat	lib/vulkan/spirv.hpp	/^    OpTypeFloat = 22,$/;"	e	enum:spv::Op
spv::OpTypeForwardPointer	lib/vulkan/spirv.hpp	/^    OpTypeForwardPointer = 39,$/;"	e	enum:spv::Op
spv::OpTypeFunction	lib/vulkan/spirv.hpp	/^    OpTypeFunction = 33,$/;"	e	enum:spv::Op
spv::OpTypeImage	lib/vulkan/spirv.hpp	/^    OpTypeImage = 25,$/;"	e	enum:spv::Op
spv::OpTypeInt	lib/vulkan/spirv.hpp	/^    OpTypeInt = 21,$/;"	e	enum:spv::Op
spv::OpTypeMatrix	lib/vulkan/spirv.hpp	/^    OpTypeMatrix = 24,$/;"	e	enum:spv::Op
spv::OpTypeNamedBarrier	lib/vulkan/spirv.hpp	/^    OpTypeNamedBarrier = 327,$/;"	e	enum:spv::Op
spv::OpTypeOpaque	lib/vulkan/spirv.hpp	/^    OpTypeOpaque = 31,$/;"	e	enum:spv::Op
spv::OpTypePipe	lib/vulkan/spirv.hpp	/^    OpTypePipe = 38,$/;"	e	enum:spv::Op
spv::OpTypePipeStorage	lib/vulkan/spirv.hpp	/^    OpTypePipeStorage = 322,$/;"	e	enum:spv::Op
spv::OpTypePointer	lib/vulkan/spirv.hpp	/^    OpTypePointer = 32,$/;"	e	enum:spv::Op
spv::OpTypeQueue	lib/vulkan/spirv.hpp	/^    OpTypeQueue = 37,$/;"	e	enum:spv::Op
spv::OpTypeReserveId	lib/vulkan/spirv.hpp	/^    OpTypeReserveId = 36,$/;"	e	enum:spv::Op
spv::OpTypeRuntimeArray	lib/vulkan/spirv.hpp	/^    OpTypeRuntimeArray = 29,$/;"	e	enum:spv::Op
spv::OpTypeSampledImage	lib/vulkan/spirv.hpp	/^    OpTypeSampledImage = 27,$/;"	e	enum:spv::Op
spv::OpTypeSampler	lib/vulkan/spirv.hpp	/^    OpTypeSampler = 26,$/;"	e	enum:spv::Op
spv::OpTypeStruct	lib/vulkan/spirv.hpp	/^    OpTypeStruct = 30,$/;"	e	enum:spv::Op
spv::OpTypeVector	lib/vulkan/spirv.hpp	/^    OpTypeVector = 23,$/;"	e	enum:spv::Op
spv::OpTypeVoid	lib/vulkan/spirv.hpp	/^    OpTypeVoid = 19,$/;"	e	enum:spv::Op
spv::OpUConvert	lib/vulkan/spirv.hpp	/^    OpUConvert = 113,$/;"	e	enum:spv::Op
spv::OpUDiv	lib/vulkan/spirv.hpp	/^    OpUDiv = 134,$/;"	e	enum:spv::Op
spv::OpUGreaterThan	lib/vulkan/spirv.hpp	/^    OpUGreaterThan = 172,$/;"	e	enum:spv::Op
spv::OpUGreaterThanEqual	lib/vulkan/spirv.hpp	/^    OpUGreaterThanEqual = 174,$/;"	e	enum:spv::Op
spv::OpULessThan	lib/vulkan/spirv.hpp	/^    OpULessThan = 176,$/;"	e	enum:spv::Op
spv::OpULessThanEqual	lib/vulkan/spirv.hpp	/^    OpULessThanEqual = 178,$/;"	e	enum:spv::Op
spv::OpUMod	lib/vulkan/spirv.hpp	/^    OpUMod = 137,$/;"	e	enum:spv::Op
spv::OpUMulExtended	lib/vulkan/spirv.hpp	/^    OpUMulExtended = 151,$/;"	e	enum:spv::Op
spv::OpUndef	lib/vulkan/spirv.hpp	/^    OpUndef = 1,$/;"	e	enum:spv::Op
spv::OpUnordered	lib/vulkan/spirv.hpp	/^    OpUnordered = 163,$/;"	e	enum:spv::Op
spv::OpUnreachable	lib/vulkan/spirv.hpp	/^    OpUnreachable = 255,$/;"	e	enum:spv::Op
spv::OpVariable	lib/vulkan/spirv.hpp	/^    OpVariable = 59,$/;"	e	enum:spv::Op
spv::OpVectorExtractDynamic	lib/vulkan/spirv.hpp	/^    OpVectorExtractDynamic = 77,$/;"	e	enum:spv::Op
spv::OpVectorInsertDynamic	lib/vulkan/spirv.hpp	/^    OpVectorInsertDynamic = 78,$/;"	e	enum:spv::Op
spv::OpVectorShuffle	lib/vulkan/spirv.hpp	/^    OpVectorShuffle = 79,$/;"	e	enum:spv::Op
spv::OpVectorTimesMatrix	lib/vulkan/spirv.hpp	/^    OpVectorTimesMatrix = 144,$/;"	e	enum:spv::Op
spv::OpVectorTimesScalar	lib/vulkan/spirv.hpp	/^    OpVectorTimesScalar = 142,$/;"	e	enum:spv::Op
spv::OpWritePipe	lib/vulkan/spirv.hpp	/^    OpWritePipe = 275,$/;"	e	enum:spv::Op
spv::Revision	lib/vulkan/spirv.hpp	/^static const unsigned int Revision = 2;$/;"	m	namespace:spv
spv::SamplerAddressingMode	lib/vulkan/spirv.hpp	/^enum SamplerAddressingMode {$/;"	g	namespace:spv
spv::SamplerAddressingModeClamp	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeClamp = 2,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerAddressingModeClampToEdge	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeClampToEdge = 1,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerAddressingModeMax	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerAddressingModeNone	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeNone = 0,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerAddressingModeRepeat	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeRepeat = 3,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerAddressingModeRepeatMirrored	lib/vulkan/spirv.hpp	/^    SamplerAddressingModeRepeatMirrored = 4,$/;"	e	enum:spv::SamplerAddressingMode
spv::SamplerFilterMode	lib/vulkan/spirv.hpp	/^enum SamplerFilterMode {$/;"	g	namespace:spv
spv::SamplerFilterModeLinear	lib/vulkan/spirv.hpp	/^    SamplerFilterModeLinear = 1,$/;"	e	enum:spv::SamplerFilterMode
spv::SamplerFilterModeMax	lib/vulkan/spirv.hpp	/^    SamplerFilterModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerFilterMode
spv::SamplerFilterModeNearest	lib/vulkan/spirv.hpp	/^    SamplerFilterModeNearest = 0,$/;"	e	enum:spv::SamplerFilterMode
spv::Scope	lib/vulkan/spirv.hpp	/^enum Scope {$/;"	g	namespace:spv
spv::ScopeCrossDevice	lib/vulkan/spirv.hpp	/^    ScopeCrossDevice = 0,$/;"	e	enum:spv::Scope
spv::ScopeDevice	lib/vulkan/spirv.hpp	/^    ScopeDevice = 1,$/;"	e	enum:spv::Scope
spv::ScopeInvocation	lib/vulkan/spirv.hpp	/^    ScopeInvocation = 4,$/;"	e	enum:spv::Scope
spv::ScopeMax	lib/vulkan/spirv.hpp	/^    ScopeMax = 0x7fffffff,$/;"	e	enum:spv::Scope
spv::ScopeSubgroup	lib/vulkan/spirv.hpp	/^    ScopeSubgroup = 3,$/;"	e	enum:spv::Scope
spv::ScopeWorkgroup	lib/vulkan/spirv.hpp	/^    ScopeWorkgroup = 2,$/;"	e	enum:spv::Scope
spv::SelectionControlDontFlattenMask	lib/vulkan/spirv.hpp	/^    SelectionControlDontFlattenMask = 0x00000002,$/;"	e	enum:spv::SelectionControlMask
spv::SelectionControlDontFlattenShift	lib/vulkan/spirv.hpp	/^    SelectionControlDontFlattenShift = 1,$/;"	e	enum:spv::SelectionControlShift
spv::SelectionControlFlattenMask	lib/vulkan/spirv.hpp	/^    SelectionControlFlattenMask = 0x00000001,$/;"	e	enum:spv::SelectionControlMask
spv::SelectionControlFlattenShift	lib/vulkan/spirv.hpp	/^    SelectionControlFlattenShift = 0,$/;"	e	enum:spv::SelectionControlShift
spv::SelectionControlMask	lib/vulkan/spirv.hpp	/^enum SelectionControlMask {$/;"	g	namespace:spv
spv::SelectionControlMaskNone	lib/vulkan/spirv.hpp	/^    SelectionControlMaskNone = 0,$/;"	e	enum:spv::SelectionControlMask
spv::SelectionControlMax	lib/vulkan/spirv.hpp	/^    SelectionControlMax = 0x7fffffff,$/;"	e	enum:spv::SelectionControlShift
spv::SelectionControlShift	lib/vulkan/spirv.hpp	/^enum SelectionControlShift {$/;"	g	namespace:spv
spv::SourceLanguage	lib/vulkan/spirv.hpp	/^enum SourceLanguage {$/;"	g	namespace:spv
spv::SourceLanguageESSL	lib/vulkan/spirv.hpp	/^    SourceLanguageESSL = 1,$/;"	e	enum:spv::SourceLanguage
spv::SourceLanguageGLSL	lib/vulkan/spirv.hpp	/^    SourceLanguageGLSL = 2,$/;"	e	enum:spv::SourceLanguage
spv::SourceLanguageMax	lib/vulkan/spirv.hpp	/^    SourceLanguageMax = 0x7fffffff,$/;"	e	enum:spv::SourceLanguage
spv::SourceLanguageOpenCL_C	lib/vulkan/spirv.hpp	/^    SourceLanguageOpenCL_C = 3,$/;"	e	enum:spv::SourceLanguage
spv::SourceLanguageOpenCL_CPP	lib/vulkan/spirv.hpp	/^    SourceLanguageOpenCL_CPP = 4,$/;"	e	enum:spv::SourceLanguage
spv::SourceLanguageUnknown	lib/vulkan/spirv.hpp	/^    SourceLanguageUnknown = 0,$/;"	e	enum:spv::SourceLanguage
spv::StorageClass	lib/vulkan/spirv.hpp	/^enum StorageClass {$/;"	g	namespace:spv
spv::StorageClassAtomicCounter	lib/vulkan/spirv.hpp	/^    StorageClassAtomicCounter = 10,$/;"	e	enum:spv::StorageClass
spv::StorageClassCrossWorkgroup	lib/vulkan/spirv.hpp	/^    StorageClassCrossWorkgroup = 5,$/;"	e	enum:spv::StorageClass
spv::StorageClassFunction	lib/vulkan/spirv.hpp	/^    StorageClassFunction = 7,$/;"	e	enum:spv::StorageClass
spv::StorageClassGeneric	lib/vulkan/spirv.hpp	/^    StorageClassGeneric = 8,$/;"	e	enum:spv::StorageClass
spv::StorageClassImage	lib/vulkan/spirv.hpp	/^    StorageClassImage = 11,$/;"	e	enum:spv::StorageClass
spv::StorageClassInput	lib/vulkan/spirv.hpp	/^    StorageClassInput = 1,$/;"	e	enum:spv::StorageClass
spv::StorageClassMax	lib/vulkan/spirv.hpp	/^    StorageClassMax = 0x7fffffff,$/;"	e	enum:spv::StorageClass
spv::StorageClassOutput	lib/vulkan/spirv.hpp	/^    StorageClassOutput = 3,$/;"	e	enum:spv::StorageClass
spv::StorageClassPrivate	lib/vulkan/spirv.hpp	/^    StorageClassPrivate = 6,$/;"	e	enum:spv::StorageClass
spv::StorageClassPushConstant	lib/vulkan/spirv.hpp	/^    StorageClassPushConstant = 9,$/;"	e	enum:spv::StorageClass
spv::StorageClassUniform	lib/vulkan/spirv.hpp	/^    StorageClassUniform = 2,$/;"	e	enum:spv::StorageClass
spv::StorageClassUniformConstant	lib/vulkan/spirv.hpp	/^    StorageClassUniformConstant = 0,$/;"	e	enum:spv::StorageClass
spv::StorageClassWorkgroup	lib/vulkan/spirv.hpp	/^    StorageClassWorkgroup = 4,$/;"	e	enum:spv::StorageClass
spv::Version	lib/vulkan/spirv.hpp	/^static const unsigned int Version = 0x00010100;$/;"	m	namespace:spv
spv::WordCountShift	lib/vulkan/spirv.hpp	/^static const unsigned int WordCountShift = 16;$/;"	m	namespace:spv
spv::operator |	lib/vulkan/spirv.hpp	/^inline FPFastMathModeMask operator|(FPFastMathModeMask a, FPFastMathModeMask b) { return FPFastMathModeMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(FPFastMathModeMask a, FPFastMathModeMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline FunctionControlMask operator|(FunctionControlMask a, FunctionControlMask b) { return FunctionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(FunctionControlMask a, FunctionControlMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline ImageOperandsMask operator|(ImageOperandsMask a, ImageOperandsMask b) { return ImageOperandsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(ImageOperandsMask a, ImageOperandsMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline KernelProfilingInfoMask operator|(KernelProfilingInfoMask a, KernelProfilingInfoMask b) { return KernelProfilingInfoMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(KernelProfilingInfoMask a, KernelProfilingInfoMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline LoopControlMask operator|(LoopControlMask a, LoopControlMask b) { return LoopControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(LoopControlMask a, LoopControlMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline MemoryAccessMask operator|(MemoryAccessMask a, MemoryAccessMask b) { return MemoryAccessMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(MemoryAccessMask a, MemoryAccessMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline MemorySemanticsMask operator|(MemorySemanticsMask a, MemorySemanticsMask b) { return MemorySemanticsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(MemorySemanticsMask a, MemorySemanticsMask b)
spv::operator |	lib/vulkan/spirv.hpp	/^inline SelectionControlMask operator|(SelectionControlMask a, SelectionControlMask b) { return SelectionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv	signature:(SelectionControlMask a, SelectionControlMask b)
spv_binary	lib/vulkan/libspirv.h	/^typedef spv_binary_t* spv_binary;$/;"	t
spv_binary_t	lib/vulkan/libspirv.h	/^typedef struct spv_binary_t {$/;"	s
spv_binary_t	lib/vulkan/libspirv.h	/^} spv_binary_t;$/;"	t	typeref:struct:spv_binary_t
spv_binary_t::code	lib/vulkan/libspirv.h	/^  uint32_t* code;$/;"	m	struct:spv_binary_t	access:public
spv_binary_t::wordCount	lib/vulkan/libspirv.h	/^  size_t wordCount;$/;"	m	struct:spv_binary_t	access:public
spv_binary_to_text_options_t	lib/vulkan/libspirv.h	/^typedef enum spv_binary_to_text_options_t {$/;"	g
spv_binary_to_text_options_t	lib/vulkan/libspirv.h	/^} spv_binary_to_text_options_t;$/;"	t	typeref:enum:spv_binary_to_text_options_t
spv_const_binary	lib/vulkan/libspirv.h	/^typedef spv_const_binary_t* spv_const_binary;$/;"	t
spv_const_binary_t	lib/vulkan/libspirv.h	/^typedef struct spv_const_binary_t {$/;"	s
spv_const_binary_t	lib/vulkan/libspirv.h	/^} spv_const_binary_t;$/;"	t	typeref:struct:spv_const_binary_t
spv_const_binary_t::code	lib/vulkan/libspirv.h	/^  const uint32_t* code;$/;"	m	struct:spv_const_binary_t	access:public
spv_const_binary_t::wordCount	lib/vulkan/libspirv.h	/^  const size_t wordCount;$/;"	m	struct:spv_const_binary_t	access:public
spv_const_context	lib/vulkan/libspirv.h	/^typedef const spv_context_t* spv_const_context;$/;"	t
spv_context	lib/vulkan/libspirv.h	/^typedef spv_context_t* spv_context;$/;"	t
spv_context_t	lib/vulkan/libspirv.h	/^typedef struct spv_context_t spv_context_t;$/;"	t	typeref:struct:spv_context_t
spv_diagnostic	lib/vulkan/libspirv.h	/^typedef spv_diagnostic_t* spv_diagnostic;$/;"	t
spv_diagnostic_t	lib/vulkan/libspirv.h	/^typedef struct spv_diagnostic_t {$/;"	s
spv_diagnostic_t	lib/vulkan/libspirv.h	/^} spv_diagnostic_t;$/;"	t	typeref:struct:spv_diagnostic_t
spv_diagnostic_t::error	lib/vulkan/libspirv.h	/^  char* error;$/;"	m	struct:spv_diagnostic_t	access:public
spv_diagnostic_t::isTextSource	lib/vulkan/libspirv.h	/^  bool isTextSource;$/;"	m	struct:spv_diagnostic_t	access:public
spv_diagnostic_t::position	lib/vulkan/libspirv.h	/^  spv_position_t position;$/;"	m	struct:spv_diagnostic_t	access:public
spv_endianness_t	lib/vulkan/libspirv.h	/^typedef enum spv_endianness_t {$/;"	g
spv_endianness_t	lib/vulkan/libspirv.h	/^} spv_endianness_t;$/;"	t	typeref:enum:spv_endianness_t
spv_ext_inst_type_t	lib/vulkan/libspirv.h	/^typedef enum spv_ext_inst_type_t {$/;"	g
spv_ext_inst_type_t	lib/vulkan/libspirv.h	/^} spv_ext_inst_type_t;$/;"	t	typeref:enum:spv_ext_inst_type_t
spv_number_kind_t	lib/vulkan/libspirv.h	/^typedef enum spv_number_kind_t {$/;"	g
spv_number_kind_t	lib/vulkan/libspirv.h	/^} spv_number_kind_t;$/;"	t	typeref:enum:spv_number_kind_t
spv_operand_type_t	lib/vulkan/libspirv.h	/^typedef enum spv_operand_type_t {$/;"	g
spv_operand_type_t	lib/vulkan/libspirv.h	/^} spv_operand_type_t;$/;"	t	typeref:enum:spv_operand_type_t
spv_parsed_header_fn_t	lib/vulkan/libspirv.h	/^typedef spv_result_t (*spv_parsed_header_fn_t)($/;"	t
spv_parsed_instruction_fn_t	lib/vulkan/libspirv.h	/^typedef spv_result_t (*spv_parsed_instruction_fn_t)($/;"	t
spv_parsed_instruction_t	lib/vulkan/libspirv.h	/^typedef struct spv_parsed_instruction_t {$/;"	s
spv_parsed_instruction_t	lib/vulkan/libspirv.h	/^} spv_parsed_instruction_t;$/;"	t	typeref:struct:spv_parsed_instruction_t
spv_parsed_instruction_t::ext_inst_type	lib/vulkan/libspirv.h	/^  spv_ext_inst_type_t ext_inst_type;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::num_operands	lib/vulkan/libspirv.h	/^  uint16_t num_operands;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::num_words	lib/vulkan/libspirv.h	/^  uint16_t num_words;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::opcode	lib/vulkan/libspirv.h	/^  uint16_t opcode;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::operands	lib/vulkan/libspirv.h	/^  const spv_parsed_operand_t* operands;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::result_id	lib/vulkan/libspirv.h	/^  uint32_t result_id;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::type_id	lib/vulkan/libspirv.h	/^  uint32_t type_id;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_instruction_t::words	lib/vulkan/libspirv.h	/^  const uint32_t* words;$/;"	m	struct:spv_parsed_instruction_t	access:public
spv_parsed_operand_t	lib/vulkan/libspirv.h	/^typedef struct spv_parsed_operand_t {$/;"	s
spv_parsed_operand_t	lib/vulkan/libspirv.h	/^} spv_parsed_operand_t;$/;"	t	typeref:struct:spv_parsed_operand_t
spv_parsed_operand_t::num_words	lib/vulkan/libspirv.h	/^  uint16_t num_words;$/;"	m	struct:spv_parsed_operand_t	access:public
spv_parsed_operand_t::number_bit_width	lib/vulkan/libspirv.h	/^  uint32_t number_bit_width;$/;"	m	struct:spv_parsed_operand_t	access:public
spv_parsed_operand_t::number_kind	lib/vulkan/libspirv.h	/^  spv_number_kind_t number_kind;$/;"	m	struct:spv_parsed_operand_t	access:public
spv_parsed_operand_t::offset	lib/vulkan/libspirv.h	/^  uint16_t offset;$/;"	m	struct:spv_parsed_operand_t	access:public
spv_parsed_operand_t::type	lib/vulkan/libspirv.h	/^  spv_operand_type_t type;$/;"	m	struct:spv_parsed_operand_t	access:public
spv_position	lib/vulkan/libspirv.h	/^typedef spv_position_t* spv_position;$/;"	t
spv_position_t	lib/vulkan/libspirv.h	/^typedef struct spv_position_t {$/;"	s
spv_position_t	lib/vulkan/libspirv.h	/^} spv_position_t;$/;"	t	typeref:struct:spv_position_t
spv_position_t::column	lib/vulkan/libspirv.h	/^  size_t column;$/;"	m	struct:spv_position_t	access:public
spv_position_t::index	lib/vulkan/libspirv.h	/^  size_t index;$/;"	m	struct:spv_position_t	access:public
spv_position_t::line	lib/vulkan/libspirv.h	/^  size_t line;$/;"	m	struct:spv_position_t	access:public
spv_result_t	lib/vulkan/libspirv.h	/^typedef enum spv_result_t {$/;"	g
spv_result_t	lib/vulkan/libspirv.h	/^} spv_result_t;$/;"	t	typeref:enum:spv_result_t
spv_target_env	lib/vulkan/libspirv.h	/^} spv_target_env;$/;"	t	typeref:enum:__anon84
spv_text	lib/vulkan/libspirv.h	/^typedef spv_text_t* spv_text;$/;"	t
spv_text_t	lib/vulkan/libspirv.h	/^typedef struct spv_text_t {$/;"	s
spv_text_t	lib/vulkan/libspirv.h	/^} spv_text_t;$/;"	t	typeref:struct:spv_text_t
spv_text_t::length	lib/vulkan/libspirv.h	/^  size_t length;$/;"	m	struct:spv_text_t	access:public
spv_text_t::str	lib/vulkan/libspirv.h	/^  const char* str;$/;"	m	struct:spv_text_t	access:public
srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags              srcAccessMask;$/;"	m	struct:VkImageMemoryBarrier	access:public
srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags           srcAccessMask;$/;"	m	struct:VkSubpassDependency	access:public
srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkBufferMemoryBarrier	access:public
srcAccessMask	lib/vulkan/vulkan.h	/^    VkAccessFlags      srcAccessMask;$/;"	m	struct:VkMemoryBarrier	access:public
srcAlphaBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            srcAlphaBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
srcArrayElement	lib/vulkan/vulkan.h	/^    uint32_t           srcArrayElement;$/;"	m	struct:VkCopyDescriptorSet	access:public
srcBinding	lib/vulkan/vulkan.h	/^    uint32_t           srcBinding;$/;"	m	struct:VkCopyDescriptorSet	access:public
srcColorBlendFactor	lib/vulkan/vulkan.h	/^    VkBlendFactor            srcColorBlendFactor;$/;"	m	struct:VkPipelineColorBlendAttachmentState	access:public
srcOffset	lib/vulkan/vulkan.h	/^    VkDeviceSize    srcOffset;$/;"	m	struct:VkBufferCopy	access:public
srcOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageCopy	access:public
srcOffset	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffset;$/;"	m	struct:VkImageResolve	access:public
srcOffsets	lib/vulkan/vulkan.h	/^    VkOffset3D                  srcOffsets[2];$/;"	m	struct:VkImageBlit	access:public
srcQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t                   srcQueueFamilyIndex;$/;"	m	struct:VkImageMemoryBarrier	access:public
srcQueueFamilyIndex	lib/vulkan/vulkan.h	/^    uint32_t           srcQueueFamilyIndex;$/;"	m	struct:VkBufferMemoryBarrier	access:public
srcRect	lib/vulkan/vulkan.h	/^    VkRect2D           srcRect;$/;"	m	struct:VkDisplayPresentInfoKHR	access:public
srcSet	lib/vulkan/vulkan.h	/^    VkDescriptorSet    srcSet;$/;"	m	struct:VkCopyDescriptorSet	access:public
srcStageMask	lib/vulkan/vulkan.h	/^    VkPipelineStageFlags    srcStageMask;$/;"	m	struct:VkSubpassDependency	access:public
srcSubpass	lib/vulkan/vulkan.h	/^    uint32_t                srcSubpass;$/;"	m	struct:VkSubpassDependency	access:public
srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageBlit	access:public
srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageCopy	access:public
srcSubresource	lib/vulkan/vulkan.h	/^    VkImageSubresourceLayers    srcSubresource;$/;"	m	struct:VkImageResolve	access:public
stage	lib/vulkan/vulkan.h	/^    VkPipelineShaderStageCreateInfo    stage;$/;"	m	struct:VkComputePipelineCreateInfo	access:public
stage	lib/vulkan/vulkan.h	/^    VkShaderStageFlagBits               stage;$/;"	m	struct:VkPipelineShaderStageCreateInfo	access:public
stageCount	lib/vulkan/vulkan.h	/^    uint32_t                                         stageCount;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
stageFlags	lib/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkDescriptorSetLayoutBinding	access:public
stageFlags	lib/vulkan/vulkan.h	/^    VkShaderStageFlags    stageFlags;$/;"	m	struct:VkPushConstantRange	access:public
standardSampleLocations	lib/vulkan/vulkan.h	/^    VkBool32              standardSampleLocations;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
start_x	lib/stb/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon74	access:public
start_y	lib/stb/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon74	access:public
state	inc/engine.h	/^    android_app* state;$/;"	m	class:Engine	access:public
state_	lib/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	access:private
state_saver	lib/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io
state_type	lib/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	access:private
stbi__DNL	lib/stb/stb_image.h	2793;"	d
stbi__EOI	lib/stb/stb_image.h	2795;"	d
stbi__SOF	lib/stb/stb_image.h	2796;"	d
stbi__SOF_progressive	lib/stb/stb_image.h	2799;"	d
stbi__SOI	lib/stb/stb_image.h	2794;"	d
stbi__SOS	lib/stb/stb_image.h	2797;"	d
stbi__YCbCr_to_RGB_row	lib/stb/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)
stbi__YCbCr_to_RGB_simd	lib/stb/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)
stbi__at_eof	lib/stb/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bit_reverse	lib/stb/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	signature:(int v, int bits)
stbi__bitcount	lib/stb/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	signature:(unsigned int a)
stbi__bitreverse16	lib/stb/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	signature:(int n)
stbi__bmask	lib/stb/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	lib/stb/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon71
stbi__bmp_info	lib/stb/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__bmp_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_parse_header	lib/stb/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f	signature:(stbi__context *s, stbi__bmp_data *info)
stbi__bmp_test	lib/stb/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bmp_test_raw	lib/stb/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__build_fast_ac	lib/stb/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f	signature:(stbi__int16 *fast_ac, stbi__huffman *h)
stbi__build_huffman	lib/stb/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	signature:(stbi__huffman *h, int *count)
stbi__check_png_header	lib/stb/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__clamp	lib/stb/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	signature:(int x)
stbi__cleanup_jpeg	lib/stb/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__compute_huffman_codes	lib/stb/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__compute_transparency	lib/stb/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	signature:(stbi__png *z, stbi_uc tc[3], int out_n)
stbi__compute_transparency16	lib/stb/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f	signature:(stbi__png *z, stbi__uint16 tc[3], int out_n)
stbi__compute_y	lib/stb/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
stbi__context	lib/stb/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon60
stbi__convert_format	lib/stb/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f	signature:(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
stbi__copyval	lib/stb/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
stbi__cpuid3	lib/stb/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f	signature:(void)
stbi__create_png_image	lib/stb/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f	signature:(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)
stbi__create_png_image_raw	lib/stb/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)
stbi__de_iphone	lib/stb/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	signature:(stbi__png *z)
stbi__de_iphone_flag	lib/stb/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	lib/stb/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__decode_jpeg_image	lib/stb/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__depth_scale_table	lib/stb/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	lib/stb/stb_image.h	2915;"	d
stbi__div4	lib/stb/stb_image.h	2866;"	d
stbi__do_png	lib/stb/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *n, int req_comp)
stbi__do_zlib	lib/stb/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	signature:(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
stbi__err	lib/stb/stb_image.h	/^static int stbi__err(const char *str)$/;"	f	signature:(const char *str)
stbi__err	lib/stb/stb_image.h	908;"	d
stbi__err	lib/stb/stb_image.h	910;"	d
stbi__err	lib/stb/stb_image.h	912;"	d
stbi__errpf	lib/stb/stb_image.h	915;"	d
stbi__errpuc	lib/stb/stb_image.h	916;"	d
stbi__expand_png_palette	lib/stb/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	signature:(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
stbi__extend_receive	lib/stb/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__f2f	lib/stb/stb_image.h	1928;"	d
stbi__fill_bits	lib/stb/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__fill_gif_background	lib/stb/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f	signature:(stbi__gif *g, int x0, int y0, int x1, int y1)
stbi__float2int	lib/stb/stb_image.h	1405;"	d
stbi__float_postprocess	lib/stb/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(float *result, int *x, int *y, int *comp, int req_comp)
stbi__fopen	lib/stb/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	signature:(char const *filename, char const *mode)
stbi__fsh	lib/stb/stb_image.h	1929;"	d
stbi__g_failure_reason	lib/stb/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	lib/stb/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get16le	lib/stb/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32be	lib/stb/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32le	lib/stb/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get8	lib/stb/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_chunk_header	lib/stb/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_marker	lib/stb/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__getn	lib/stb/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	signature:(stbi__context *s, stbi_uc *buffer, int n)
stbi__gif	lib/stb/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon74
stbi__gif_header	lib/stb/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int is_info)
stbi__gif_info	lib/stb/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info_raw	lib/stb/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load_next	lib/stb/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int req_comp)
stbi__gif_lzw	lib/stb/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon73
stbi__gif_parse_colortable	lib/stb/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f	signature:(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
stbi__gif_test	lib/stb/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__gif_test_raw	lib/stb/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__grow_buffer_unsafe	lib/stb/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__h2l_gamma_i	lib/stb/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	lib/stb/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	lib/stb/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	signature:(float *output, stbi_uc *input, int req_comp)
stbi__hdr_gettoken	lib/stb/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	signature:(stbi__context *z, char *buffer)
stbi__hdr_info	lib/stb/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__hdr_load	lib/stb/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_test	lib/stb/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	signature:(stbi__context* s)
stbi__hdr_test_core	lib/stb/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__hdr_to_ldr	lib/stb/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	signature:(float *data, int x, int y, int comp)
stbi__high_bit	lib/stb/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	signature:(unsigned int z)
stbi__huffman	lib/stb/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon62
stbi__idct_block	lib/stb/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64])
stbi__idct_simd	lib/stb/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64])
stbi__info_main	lib/stb/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__init_zdefaults	lib/stb/stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	signature:(void)
stbi__int16	lib/stb/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	lib/stb/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	lib/stb/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	lib/stb/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	lib/stb/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	lib/stb/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon63
stbi__jpeg_decode_block	lib/stb/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)
stbi__jpeg_decode_block_prog_ac	lib/stb/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)
stbi__jpeg_decode_block_prog_dc	lib/stb/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)
stbi__jpeg_dequantize	lib/stb/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f	signature:(short *data, stbi_uc *dequant)
stbi__jpeg_dezigzag	lib/stb/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	lib/stb/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__jpeg_get_bit	lib/stb/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_get_bits	lib/stb/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__jpeg_huff_decode	lib/stb/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	signature:(stbi__jpeg *j, stbi__huffman *h)
stbi__jpeg_info	lib/stb/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info_raw	lib/stb/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	signature:(stbi__jpeg *j, int *x, int *y, int *comp)
stbi__jpeg_load	lib/stb/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_reset	lib/stb/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_test	lib/stb/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__l2h_gamma	lib/stb/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	lib/stb/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	lib/stb/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	signature:(stbi_uc *data, int x, int y, int comp)
stbi__load_flip	lib/stb/stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__load_main	lib/stb/stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__loadf_main	lib/stb/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__malloc	lib/stb/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	signature:(size_t size)
stbi__out_gif_code	lib/stb/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	signature:(stbi__gif *g, stbi__uint16 code)
stbi__paeth	lib/stb/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	signature:(int a, int b, int c)
stbi__parse_entropy_coded_data	lib/stb/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__parse_huffman_block	lib/stb/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_png_file	lib/stb/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	signature:(stbi__png *z, int scan, int req_comp)
stbi__parse_uncompressed_block	lib/stb/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_zlib	lib/stb/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	signature:(stbi__zbuf *a, int parse_header)
stbi__parse_zlib_header	lib/stb/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__pic_info	lib/stb/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pic_is4	lib/stb/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	signature:(stbi__context *s,const char *str)
stbi__pic_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	signature:(stbi__context *s,int *px,int *py,int *comp,int req_comp)
stbi__pic_load_core	lib/stb/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	signature:(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
stbi__pic_packet	lib/stb/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon72
stbi__pic_test	lib/stb/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pic_test_core	lib/stb/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__png	lib/stb/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon69
stbi__png_info	lib/stb/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info_raw	lib/stb/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *comp)
stbi__png_load	lib/stb/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_test	lib/stb/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pngchunk	lib/stb/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon68
stbi__pnm_getinteger	lib/stb/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f	signature:(stbi__context *s, char *c)
stbi__pnm_info	lib/stb/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pnm_isdigit	lib/stb/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f	signature:(char c)
stbi__pnm_isspace	lib/stb/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f	signature:(char c)
stbi__pnm_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__pnm_skip_whitespace	lib/stb/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f	signature:(stbi__context *s, char *c)
stbi__pnm_test	lib/stb/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__process_frame_header	lib/stb/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__process_gif_raster	lib/stb/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	signature:(stbi__context *s, stbi__gif *g)
stbi__process_marker	lib/stb/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	signature:(stbi__jpeg *z, int m)
stbi__process_scan_header	lib/stb/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__psd_info	lib/stb/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__psd_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_test	lib/stb/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__readval	lib/stb/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	signature:(stbi__context *s, int channel, stbi_uc *dest)
stbi__reduce_png	lib/stb/stb_image.h	/^static int stbi__reduce_png(stbi__png *p)$/;"	f	signature:(stbi__png *p)
stbi__refill_buffer	lib/stb/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__resample	lib/stb/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon65
stbi__resample_row_generic	lib/stb/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_h_2	lib/stb/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2	lib/stb/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2_simd	lib/stb/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_v_2	lib/stb/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__rewind	lib/stb/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__setup_jpeg	lib/stb/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__shiftsigned	lib/stb/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	signature:(int v, int shift, int bits)
stbi__skip	lib/stb/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	signature:(stbi__context *s, int n)
stbi__sse2_available	lib/stb/stb_image.h	/^static int stbi__sse2_available()$/;"	f	signature:()
stbi__start_callbacks	lib/stb/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	signature:(stbi__context *s, stbi_io_callbacks *c, void *user)
stbi__start_file	lib/stb/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	signature:(stbi__context *s, FILE *f)
stbi__start_mem	lib/stb/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	signature:(stbi__context *s, stbi_uc const *buffer, int len)
stbi__stdio_callbacks	lib/stb/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	lib/stb/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	signature:(void *user)
stbi__stdio_read	lib/stb/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	signature:(void *user, char *data, int size)
stbi__stdio_skip	lib/stb/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	signature:(void *user, int n)
stbi__tga_get_comp	lib/stb/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f	signature:(int bits_per_pixel, int is_grey, int* is_rgb16)
stbi__tga_info	lib/stb/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_load	lib/stb/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_read_rgb16	lib/stb/stb_image.h	/^void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f	signature:(stbi__context *s, stbi_uc* out)
stbi__tga_test	lib/stb/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__uint16	lib/stb/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	lib/stb/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	lib/stb/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	lib/stb/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	lib/stb/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	lib/stb/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__zbuf	lib/stb/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon67
stbi__zbuild_huffman	lib/stb/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	signature:(stbi__zhuffman *z, stbi_uc *sizelist, int num)
stbi__zdefault_distance	lib/stb/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	lib/stb/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	lib/stb/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	lib/stb/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	lib/stb/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f	signature:(stbi__zbuf *z, char *zout, int n)
stbi__zget8	lib/stb/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__zhuffman	lib/stb/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon66
stbi__zhuffman_decode	lib/stb/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zhuffman_decode_slowpath	lib/stb/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zlength_base	lib/stb/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	lib/stb/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	lib/stb/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	signature:(stbi__zbuf *z, int n)
stbi_convert_iphone_png_to_rgb	lib/stb/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_failure_reason	lib/stb/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_hdr_to_ldr_gamma	lib/stb/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_scale	lib/stb/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_image_free	lib/stb/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_info	lib/stb/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	lib/stb/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_file	lib/stb/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	lib/stb/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_inline	lib/stb/stb_image.h	586;"	d
stbi_inline	lib/stb/stb_image.h	588;"	d
stbi_inline	lib/stb/stb_image.h	591;"	d
stbi_io_callbacks	lib/stb/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon59
stbi_is_hdr	lib/stb/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr_from_callbacks	lib/stb/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	lib/stb/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_memory	lib/stb/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_ldr_to_hdr_gamma	lib/stb/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_scale	lib/stb/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_load	lib/stb/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	lib/stb/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	lib/stb/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	lib/stb/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf	lib/stb/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	lib/stb/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	lib/stb/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	lib/stb/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_lrot	lib/stb/stb_image.h	622;"	d
stbi_lrot	lib/stb/stb_image.h	624;"	d
stbi_set_flip_vertically_on_load	lib/stb/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f	signature:(int flag_true_if_should_flip)
stbi_set_unpremultiply_on_load	lib/stb/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_uc	lib/stb/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	lib/stb/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_malloc	lib/stb/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	lib/stb/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	lib/stb/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	lib/stb/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	lib/stb/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
std	inc/texture_data.h	/^namespace std {$/;"	n
std	lib/glm/gtx/hash.hpp	/^namespace std$/;"	n
std::hash	inc/texture_data.h	/^    template<> struct hash<TextureDesc> {$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 2, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 3, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 4, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 2, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 3, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 4, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 2, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 3, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 4, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::tquat<T,P>>$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<1, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<2, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<3, T,P> >$/;"	s	namespace:std
std::hash	lib/glm/gtx/hash.hpp	/^	struct hash<glm::vec<4, T,P> >$/;"	s	namespace:std
std::hash::operator ()	inc/texture_data.h	/^        size_t operator()(const TextureDesc& k) const$/;"	f	struct:std::hash	access:public	signature:(const TextureDesc& k) const
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	503;"	d
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	506;"	d
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	519;"	d
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	528;"	d
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	537;"	d
stdint_int64_defined	lib/__assimp/Compiler/pstdint.h	717;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	387;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	390;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	396;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	401;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	404;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	478;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	481;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	495;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	505;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	513;"	d
stdint_int64_defined	lib/assimp/Compiler/pstdint.h	683;"	d
stdint_intptr_bits	lib/__assimp/Compiler/pstdint.h	745;"	d
stdint_intptr_bits	lib/__assimp/Compiler/pstdint.h	748;"	d
stdint_intptr_bits	lib/__assimp/Compiler/pstdint.h	750;"	d
stdint_intptr_bits	lib/__assimp/Compiler/pstdint.h	753;"	d
stdint_intptr_bits	lib/assimp/Compiler/pstdint.h	711;"	d
stdint_intptr_bits	lib/assimp/Compiler/pstdint.h	714;"	d
stdint_intptr_bits	lib/assimp/Compiler/pstdint.h	716;"	d
stdint_intptr_bits	lib/assimp/Compiler/pstdint.h	719;"	d
stdint_intptr_glue3	lib/__assimp/Compiler/pstdint.h	762;"	d
stdint_intptr_glue3	lib/assimp/Compiler/pstdint.h	726;"	d
stdint_intptr_glue3_i	lib/__assimp/Compiler/pstdint.h	761;"	d
stdint_intptr_glue3_i	lib/assimp/Compiler/pstdint.h	725;"	d
stdint_least_defined	lib/__assimp/Compiler/pstdint.h	681;"	d
stdint_least_defined	lib/assimp/Compiler/pstdint.h	645;"	d
stencil	lib/vulkan/vulkan.h	/^    uint32_t    stencil;$/;"	m	struct:VkClearDepthStencilValue	access:public
stencilLoadOp	lib/vulkan/vulkan.h	/^    VkAttachmentLoadOp              stencilLoadOp;$/;"	m	struct:VkAttachmentDescription	access:public
stencilStoreOp	lib/vulkan/vulkan.h	/^    VkAttachmentStoreOp             stencilStoreOp;$/;"	m	struct:VkAttachmentDescription	access:public
stencilTestEnable	lib/vulkan/vulkan.h	/^    VkBool32                                  stencilTestEnable;$/;"	m	struct:VkPipelineDepthStencilStateCreateInfo	access:public
step	lib/stb/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon74	access:public
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<double, 32, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<float, 16, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<int, 16, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<int64, 32, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<uint64, 32, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^		struct storage<unsigned int, 16, true>$/;"	s	namespace:glm::detail
storage	lib/glm/detail/type_vec.hpp	/^	struct storage$/;"	s	namespace:glm::detail
storageImageSampleCounts	lib/vulkan/vulkan.h	/^    VkSampleCountFlags    storageImageSampleCounts;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
storeOp	lib/vulkan/vulkan.h	/^    VkAttachmentStoreOp             storeOp;$/;"	m	struct:VkAttachmentDescription	access:public
str	lib/vulkan/libspirv.h	/^  const char* str;$/;"	m	struct:spv_text_t	access:public
strdup	lib/vulkan/vk_sdk_platform.h	42;"	d
streamsize_type	lib/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	access:private
strictLines	lib/vulkan/vulkan.h	/^    VkBool32              strictLines;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
stride	lib/vulkan/vulkan.h	/^    uint32_t             stride;$/;"	m	struct:VkVertexInputBindingDescription	access:public
stripPath	src/file_manager.cpp	/^std::string FileManager::stripPath(const std::string&& path)$/;"	f	class:FileManager	signature:(const std::string&& path)
subPixelInterpolationOffsetBits	lib/vulkan/vulkan.h	/^    uint32_t              subPixelInterpolationOffsetBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
subPixelPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              subPixelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
subTexelPrecisionBits	lib/vulkan/vulkan.h	/^    uint32_t              subTexelPrecisionBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
submit	src/task_manager.cpp	/^void TaskManager::submit(Task& task) {$/;"	f	class:TaskManager	signature:(Task& task)
submit	src/task_manager.cpp	/^void TaskManager::submit(Task* task) {$/;"	f	class:TaskManager	signature:(Task* task)
subpass	lib/vulkan/vulkan.h	/^    uint32_t                                         subpass;$/;"	m	struct:VkGraphicsPipelineCreateInfo	access:public
subpass	lib/vulkan/vulkan.h	/^    uint32_t                         subpass;$/;"	m	struct:VkCommandBufferInheritanceInfo	access:public
subpassCount	lib/vulkan/vulkan.h	/^    uint32_t                          subpassCount;$/;"	m	struct:VkRenderPassCreateInfo	access:public
subresource	lib/vulkan/vulkan.h	/^    VkImageSubresource         subresource;$/;"	m	struct:VkSparseImageMemoryBind	access:public
subresourceRange	lib/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageMemoryBarrier	access:public
subresourceRange	lib/vulkan/vulkan.h	/^    VkImageSubresourceRange    subresourceRange;$/;"	m	struct:VkImageViewCreateInfo	access:public
succ_high	lib/stb/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon63	access:public
succ_low	lib/stb/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon63	access:public
suffix	lib/stb/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon73	access:public
suit	inc/renderer.h	/^	Model suit;$/;"	m	class:Renderer	access:private
supportedAlpha	lib/vulkan/vulkan.h	/^    VkDisplayPlaneAlphaFlagsKHR    supportedAlpha;$/;"	m	struct:VkDisplayPlaneCapabilitiesKHR	access:public
supportedCompositeAlpha	lib/vulkan/vulkan.h	/^    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
supportedTransforms	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR       supportedTransforms;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
supportedTransforms	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagsKHR    supportedTransforms;$/;"	m	struct:VkDisplayPropertiesKHR	access:public
supportedUsageFlags	lib/vulkan/vulkan.h	/^    VkImageUsageFlags                supportedUsageFlags;$/;"	m	struct:VkSurfaceCapabilitiesKHR	access:public
surface	/home/al/amvk/inc/state.h	/^	VkSurfaceKHR surface;$/;"	m	struct:State	access:public
surface	lib/vulkan/vk_icd.h	/^    struct wl_surface *surface;$/;"	m	struct:__anon79	typeref:struct:__anon79::wl_surface	access:public
surface	lib/vulkan/vulkan.h	/^    VkSurfaceKHR                     surface;$/;"	m	struct:VkSwapchainCreateInfoKHR	access:public
surface	lib/vulkan/vulkan.h	/^    struct wl_surface*                surface;$/;"	m	struct:VkWaylandSurfaceCreateInfoKHR	typeref:struct:VkWaylandSurfaceCreateInfoKHR::wl_surface	access:public
surfaceCapabilities	/home/al/amvk/inc/state.h	/^	VkSurfaceCapabilitiesKHR surfaceCapabilities;$/;"	m	struct:DeviceInfo	access:public
surfaceFormats	/home/al/amvk/inc/state.h	/^	std::vector<VkSurfaceFormatKHR> surfaceFormats;$/;"	m	struct:DeviceInfo	access:public
swapChain	/home/al/amvk/inc/state.h	/^	VkSwapchainKHR swapChain;$/;"	m	struct:State	access:public
swapChainExtent	/home/al/amvk/inc/state.h	/^	VkExtent2D swapChainExtent;$/;"	m	struct:State	access:public
swapChainImageFormat	/home/al/amvk/inc/state.h	/^	VkFormat swapChainImageFormat;$/;"	m	struct:State	access:public
swapchainCount	lib/vulkan/vulkan.h	/^    uint32_t                 swapchainCount;$/;"	m	struct:VkPresentInfoKHR	access:public
t	lib/glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::vec::__anon50::__anon53	access:public
t	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
t	lib/glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::vec::__anon43::__anon46	access:public
t	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
t	lib/glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::vec::__anon35::__anon38	access:public
t	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
tag	script/vkrun.sh	/^function tag()$/;"	f
tagName	lib/vulkan/vulkan.h	/^    uint64_t                      tagName;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
tagSize	lib/vulkan/vulkan.h	/^    size_t                        tagSize;$/;"	m	struct:VkDebugMarkerObjectTagInfoEXT	access:public
tangent	inc/shape/model.h	/^		glm::vec3 tangent;$/;"	m	struct:Model::Vertex	access:public
tangent	inc/shape/skinned.h	/^		glm::vec3 tangent;$/;"	m	struct:Skinned::Vertex	access:public
taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const & r)$/;"	f	namespace:glm::detail	signature:(T const & r)
taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, P> taylorInvSqrt(vec<2, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<2, T, P> const & r)
taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, P> taylorInvSqrt(vec<3, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<3, T, P> const & r)
taylorInvSqrt	lib/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, P> taylorInvSqrt(vec<4, T, P> const & r)$/;"	f	namespace:glm::detail	signature:(vec<4, T, P> const & r)
tdualquat	lib/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
tessellationShader	lib/vulkan/vulkan.h	/^    VkBool32    tessellationShader;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
texCoord	inc/shape/model.h	/^		glm::vec2 texCoord;$/;"	m	struct:Model::Vertex	access:public
texCoord	inc/shape/skinned.h	/^		glm::vec2 texCoord;$/;"	m	struct:Skinned::Vertex	access:public
texCoord	inc/shape/tquad.h	/^		glm::vec2 texCoord;$/;"	m	struct:TQuad::Vertex	access:public
textureCompressionASTC_LDR	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionASTC_LDR;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
textureCompressionBC	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionBC;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
textureCompressionETC2	lib/vulkan/vulkan.h	/^    VkBool32    textureCompressionETC2;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
textureManager	inc/texture_manager.h	/^	TextureManager(const TextureManager& textureManager) = delete;$/;"	m	class:TextureManager	access:public
textureManager	inc/texture_manager.h	/^	void operator=(const TextureManager& textureManager) = delete;$/;"	m	class:TextureManager	access:public
textures	inc/shape/skinned.h	/^		std::vector<MaterialTexture> textures;$/;"	m	struct:Skinned::Material	access:public
textures	lib/__assimp/types.h	/^    unsigned int textures;$/;"	m	struct:aiMemoryInfo	access:public
textures	lib/assimp/types.h	/^    unsigned int textures;$/;"	m	struct:aiMemoryInfo	access:public
throwError	src/shape/model.cpp	/^void Model::throwError(const char* error) $/;"	f	class:Model	signature:(const char* error)
throwError	src/shape/model.cpp	/^void Model::throwError(std::string& error) $/;"	f	class:Model	signature:(std::string& error)
throwError	src/shape/skinned.cpp	/^void Skinned::throwError(const char* error) $/;"	f	class:Skinned	signature:(const char* error)
throwError	src/shape/skinned.cpp	/^void Skinned::throwError(std::string& error) $/;"	f	class:Skinned	signature:(std::string& error)
tick	src/timer.cpp	/^double Timer::tick()$/;"	f	class:Timer	signature:()
tiledRenderer	/home/al/amvk/inc/state.h	/^	PipelineInfo tiledRenderer;$/;"	m	struct:Pipelines	access:public
tiling	lib/vulkan/vulkan.h	/^    VkImageTiling            tiling;$/;"	m	struct:VkImageCreateInfo	access:public
timestampComputeAndGraphics	lib/vulkan/vulkan.h	/^    VkBool32              timestampComputeAndGraphics;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
timestampPeriod	lib/vulkan/vulkan.h	/^    float                 timestampPeriod;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
timestampValidBits	lib/vulkan/vulkan.h	/^    uint32_t        timestampValidBits;$/;"	m	struct:VkQueueFamilyProperties	access:public
toMat3	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<3, 3, T, P> toMat3($/;"	f	namespace:glm	signature:( tquat<T, P> const & x)
toMat4	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL mat<4, 4, T, P> toMat4($/;"	f	namespace:glm	signature:( tquat<T, P> const & x)
toQuat	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm	signature:( mat<3, 3, T, P> const& x)
toQuat	lib/glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm	signature:( mat<4, 4, T, P> const& x)
todo	lib/stb/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon63	access:public
topology	lib/vulkan/vulkan.h	/^    VkPrimitiveTopology                        topology;$/;"	m	struct:VkPipelineInputAssemblyStateCreateInfo	access:public
total	lib/__assimp/types.h	/^    unsigned int total;$/;"	m	struct:aiMemoryInfo	access:public
total	lib/assimp/types.h	/^    unsigned int total;$/;"	m	struct:aiMemoryInfo	access:public
total	src/timer.cpp	/^double Timer::total() const $/;"	f	class:Timer	signature:() const
touching	inc/input_manager.h	/^	bool touching;$/;"	m	class:InputManager	access:public
tq	lib/stb/stb_image.h	/^      int tq;$/;"	m	struct:__anon63::__anon64	access:public
tquad	/home/al/amvk/inc/state.h	/^	PipelineInfo tquad;$/;"	m	struct:Pipelines	access:public
tquad	/home/al/amvk/inc/state.h	/^	ShaderInfo tquad;$/;"	m	struct:Shaders	access:public
tquad	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout tquad;$/;"	m	struct:DescriptorSetLayouts	access:public
tquad	inc/renderer.h	/^	TQuad tquad;$/;"	m	class:Renderer	access:private
tquat	lib/glm/gtc/quaternion.hpp	/^	struct tquat$/;"	s	namespace:glm
transfer	inc/device_manager.h	/^		uint32_t transfer = UINT32_MAX;$/;"	m	struct:DeviceManager::QueueIndices	access:public
transferQueue	/home/al/amvk/inc/state.h	/^	VkQueue transferQueue;$/;"	m	struct:State	access:public
transferQueueIndex	/home/al/amvk/inc/state.h	/^	uint32_t transferQueueIndex;$/;"	m	struct:State	access:public
transform	lib/vulkan/vk_icd.h	/^    VkSurfaceTransformFlagBitsKHR transform;$/;"	m	struct:__anon83	access:public
transform	lib/vulkan/vulkan.h	/^    VkSurfaceTransformFlagBitsKHR     transform;$/;"	m	struct:VkDisplaySurfaceCreateInfoKHR	access:public
transitionLayout	inc/creator/image_helper.h	/^inline void transitionLayout($/;"	f	namespace:ImageHelper	signature:( State& state, VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout, VkImageAspectFlags barrierAspectMask, VkAccessFlags srcAccessMask, VkAccessFlags dstAccessMask)
transitionLayout	inc/creator/image_helper.h	/^inline void transitionLayout($/;"	f	namespace:ImageHelper	signature:( VkCommandBuffer& cmdBuffer, VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout, VkImageAspectFlags barrierAspectMask, VkAccessFlags srcAccessMask, VkAccessFlags dstAccessMask)
transparent	lib/stb/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon74	access:public
transpose_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef mat<3, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef mat<4, 2, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef mat<2, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef mat<4, 3, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef mat<2, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef mat<3, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
transpose_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, P> transpose_type;$/;"	t	struct:glm::mat	access:public
type	inc/shape/skinned.h	/^		aiTextureType type;$/;"	m	struct:Skinned::MaterialTexture	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<2, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<3, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 2, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 3, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/func_matrix.hpp	/^		typedef mat<4, 4, T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	access:public
type	lib/glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> type;$/;"	t	struct:glm::detail::genType	access:public
type	lib/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat2x3.hpp	/^		typedef mat<2, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat2x4.hpp	/^		typedef mat<2, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat3x2.hpp	/^		typedef mat<3, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat3x4.hpp	/^		typedef mat<3, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat4x2.hpp	/^		typedef mat<4, 2, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat4x3.hpp	/^		typedef mat<4, 3, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, P> type;$/;"	t	struct:glm::mat	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_dvec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_i64vec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_ivec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_u64vec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_uvec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^			typedef glm_vec4 type;$/;"	t	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^		typedef struct type {$/;"	s	struct:glm::detail::storage	access:public
type	lib/glm/detail/type_vec.hpp	/^		} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type	access:public
type	lib/glm/detail/type_vec1.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
type	lib/glm/detail/type_vec2.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
type	lib/glm/detail/type_vec3.hpp	/^		typedef vec type;$/;"	t	struct:glm::vec	access:public
type	lib/glm/detail/type_vec4.hpp	/^		typedef vec<4, T, P> type;$/;"	t	struct:glm::vec	access:public
type	lib/glm/gtc/quaternion.hpp	/^		typedef tquat<T, P> type;$/;"	t	struct:glm::tquat	access:public
type	lib/glm/gtx/type_trait.hpp	/^	struct type$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 2, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 3, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<2, 4, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 2, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 3, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<3, 4, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 2, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 3, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<mat<4, 4, T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<tdualquat<T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<tquat<T, P> >$/;"	s	namespace:glm
type	lib/glm/gtx/type_trait.hpp	/^	struct type<vec<L, T, P> >$/;"	s	namespace:glm
type	lib/stb/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon68	access:public
type	lib/stb/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon72	access:public
type	lib/vulkan/libspirv.h	/^  spv_operand_type_t type;$/;"	m	struct:spv_parsed_operand_t	access:public
type	lib/vulkan/vulkan.h	/^    VkDescriptorType    type;$/;"	m	struct:VkDescriptorPoolSize	access:public
type_id	lib/vulkan/libspirv.h	/^  uint32_t type_id;$/;"	m	struct:spv_parsed_instruction_t	access:public
u	lib/vulkan/vk_layer.h	/^    } u;$/;"	m	struct:__anon85	typeref:union:__anon85::__anon86	access:public
u	lib/vulkan/vk_layer.h	/^    } u;$/;"	m	struct:__anon87	typeref:union:__anon87::__anon88	access:public
u16	lib/glm/fwd.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
u16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
u16vec1	lib/glm/fwd.hpp	/^	typedef highp_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	lib/glm/fwd.hpp	/^	typedef lowp_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	lib/glm/fwd.hpp	/^	typedef mediump_u16vec1			u16vec1;$/;"	t	namespace:glm
u16vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, defaultp> u16vec1;$/;"	t	namespace:glm
u16vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u16vec2	lib/glm/fwd.hpp	/^	typedef highp_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	lib/glm/fwd.hpp	/^	typedef lowp_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	lib/glm/fwd.hpp	/^	typedef mediump_u16vec2			u16vec2;$/;"	t	namespace:glm
u16vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, defaultp> u16vec2;$/;"	t	namespace:glm
u16vec3	lib/glm/fwd.hpp	/^	typedef highp_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	lib/glm/fwd.hpp	/^	typedef lowp_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	lib/glm/fwd.hpp	/^	typedef mediump_u16vec3			u16vec3;$/;"	t	namespace:glm
u16vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, defaultp> u16vec3;$/;"	t	namespace:glm
u16vec4	lib/glm/fwd.hpp	/^	typedef highp_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	lib/glm/fwd.hpp	/^	typedef lowp_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	lib/glm/fwd.hpp	/^	typedef mediump_u16vec4			u16vec4;$/;"	t	namespace:glm
u16vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, defaultp> u16vec4;$/;"	t	namespace:glm
u32	lib/glm/fwd.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
u32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
u32vec1	lib/glm/fwd.hpp	/^	typedef highp_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	lib/glm/fwd.hpp	/^	typedef lowp_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	lib/glm/fwd.hpp	/^	typedef mediump_u32vec1			u32vec1;$/;"	t	namespace:glm
u32vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, defaultp> u32vec1;$/;"	t	namespace:glm
u32vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u32vec2	lib/glm/fwd.hpp	/^	typedef highp_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	lib/glm/fwd.hpp	/^	typedef lowp_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	lib/glm/fwd.hpp	/^	typedef mediump_u32vec2			u32vec2;$/;"	t	namespace:glm
u32vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, defaultp> u32vec2;$/;"	t	namespace:glm
u32vec3	lib/glm/fwd.hpp	/^	typedef highp_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	lib/glm/fwd.hpp	/^	typedef lowp_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	lib/glm/fwd.hpp	/^	typedef mediump_u32vec3			u32vec3;$/;"	t	namespace:glm
u32vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, defaultp> u32vec3;$/;"	t	namespace:glm
u32vec4	lib/glm/fwd.hpp	/^	typedef highp_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	lib/glm/fwd.hpp	/^	typedef lowp_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	lib/glm/fwd.hpp	/^	typedef mediump_u32vec4			u32vec4;$/;"	t	namespace:glm
u32vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, defaultp> u32vec4;$/;"	t	namespace:glm
u64	lib/glm/fwd.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
u64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
u64vec1	lib/glm/fwd.hpp	/^	typedef highp_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	lib/glm/fwd.hpp	/^	typedef lowp_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	lib/glm/fwd.hpp	/^	typedef mediump_u64vec1			u64vec1;$/;"	t	namespace:glm
u64vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, defaultp> u64vec1;$/;"	t	namespace:glm
u64vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u64vec2	lib/glm/fwd.hpp	/^	typedef highp_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	lib/glm/fwd.hpp	/^	typedef lowp_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	lib/glm/fwd.hpp	/^	typedef mediump_u64vec2			u64vec2;$/;"	t	namespace:glm
u64vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, defaultp> u64vec2;$/;"	t	namespace:glm
u64vec3	lib/glm/fwd.hpp	/^	typedef highp_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	lib/glm/fwd.hpp	/^	typedef lowp_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	lib/glm/fwd.hpp	/^	typedef mediump_u64vec3			u64vec3;$/;"	t	namespace:glm
u64vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, defaultp> u64vec3;$/;"	t	namespace:glm
u64vec4	lib/glm/fwd.hpp	/^	typedef highp_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	lib/glm/fwd.hpp	/^	typedef lowp_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	lib/glm/fwd.hpp	/^	typedef mediump_u64vec4			u64vec4;$/;"	t	namespace:glm
u64vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, defaultp> u64vec4;$/;"	t	namespace:glm
u8	lib/glm/fwd.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
u8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
u8vec1	lib/glm/fwd.hpp	/^	typedef highp_u8vec1			u8vec1;$/;"	t	namespace:glm
u8vec1	lib/glm/fwd.hpp	/^	typedef lowp_u8vec1				u8vec1;$/;"	t	namespace:glm
u8vec1	lib/glm/fwd.hpp	/^	typedef mediump_u8vec1			u8vec1;$/;"	t	namespace:glm
u8vec1	lib/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, defaultp> u8vec1;$/;"	t	namespace:glm
u8vec1	lib/glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u8vec2	lib/glm/fwd.hpp	/^	typedef highp_u8vec2			u8vec2;$/;"	t	namespace:glm
u8vec2	lib/glm/fwd.hpp	/^	typedef lowp_u8vec2				u8vec2;$/;"	t	namespace:glm
u8vec2	lib/glm/fwd.hpp	/^	typedef mediump_u8vec2			u8vec2;$/;"	t	namespace:glm
u8vec2	lib/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, defaultp> u8vec2;$/;"	t	namespace:glm
u8vec3	lib/glm/fwd.hpp	/^	typedef highp_u8vec3			u8vec3;$/;"	t	namespace:glm
u8vec3	lib/glm/fwd.hpp	/^	typedef lowp_u8vec3				u8vec3;$/;"	t	namespace:glm
u8vec3	lib/glm/fwd.hpp	/^	typedef mediump_u8vec3			u8vec3;$/;"	t	namespace:glm
u8vec3	lib/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, defaultp> u8vec3;$/;"	t	namespace:glm
u8vec4	lib/glm/fwd.hpp	/^	typedef highp_u8vec4			u8vec4;$/;"	t	namespace:glm
u8vec4	lib/glm/fwd.hpp	/^	typedef lowp_u8vec4				u8vec4;$/;"	t	namespace:glm
u8vec4	lib/glm/fwd.hpp	/^	typedef mediump_u8vec4			u8vec4;	$/;"	t	namespace:glm
u8vec4	lib/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, defaultp> u8vec4;$/;"	t	namespace:glm
ubo	/home/al/amvk/inc/state.h	/^	UBO ubo;$/;"	m	struct:State	access:public
ubo	inc/scene_lights.h	/^	char* ubo;$/;"	m	class:SceneLights	access:private
ubo	inc/shape/model.h	/^	UBO ubo;$/;"	m	class:Model	access:public
ubo	inc/shape/point_light.h	/^	UBO* ubo;$/;"	m	class:PointLight	access:public
ubo	inc/shape/skinned.h	/^	UBO ubo;$/;"	m	class:Skinned	access:public
uboOffset	inc/scene_lights.h	/^		VkDeviceSize uboOffset;$/;"	m	struct:SceneLights::PointLightInfo	access:public
uint	lib/glm/detail/type_int.hpp	/^	typedef unsigned int				uint;$/;"	t	namespace:glm
uint16	lib/glm/detail/type_int.hpp	/^		typedef std::uint16_t				uint16;$/;"	t	namespace:glm::detail
uint16	lib/glm/detail/type_int.hpp	/^	typedef detail::uint16					uint16;$/;"	t	namespace:glm
uint16	lib/glm/fwd.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
uint16	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
uint16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef unsigned int uint16_t;$/;"	t
uint16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef unsigned short uint16_t;$/;"	t
uint16_t	lib/assimp/Compiler/pstdint.h	/^  typedef unsigned int uint16_t;$/;"	t
uint16_t	lib/assimp/Compiler/pstdint.h	/^  typedef unsigned short uint16_t;$/;"	t
uint16_t	lib/vulkan/vk_platform.h	/^        typedef unsigned __int16 uint16_t;$/;"	t
uint32	lib/glm/detail/type_int.hpp	/^		typedef std::uint32_t				uint32;$/;"	t	namespace:glm::detail
uint32	lib/glm/detail/type_int.hpp	/^	typedef detail::uint32					uint32;$/;"	t	namespace:glm
uint32	lib/glm/fwd.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
uint32	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
uint32	lib/vulkan/vulkan.h	/^    uint32_t    uint32[4];$/;"	m	union:VkClearColorValue	access:public
uint32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef unsigned int uint32_t;$/;"	t
uint32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef unsigned long uint32_t;$/;"	t
uint32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef unsigned short uint32_t;$/;"	t
uint32_t	lib/assimp/Compiler/pstdint.h	/^  typedef unsigned int uint32_t;$/;"	t
uint32_t	lib/assimp/Compiler/pstdint.h	/^  typedef unsigned long uint32_t;$/;"	t
uint32_t	lib/assimp/Compiler/pstdint.h	/^  typedef unsigned short uint32_t;$/;"	t
uint32_t	lib/vulkan/vk_platform.h	/^        typedef unsigned __int32 uint32_t;$/;"	t
uint64	lib/glm/detail/type_int.hpp	/^		typedef std::uint64_t				uint64;$/;"	t	namespace:glm::detail
uint64	lib/glm/detail/type_int.hpp	/^	typedef detail::uint64					uint64;$/;"	t	namespace:glm
uint64	lib/glm/fwd.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
uint64	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
uint64_t	lib/__assimp/Compiler/pstdint.h	/^   __extension__ typedef unsigned long long uint64_t;$/;"	t
uint64_t	lib/__assimp/Compiler/pstdint.h	/^   typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	lib/__assimp/Compiler/pstdint.h	/^   typedef unsigned long long uint64_t;$/;"	t
uint64_t	lib/assimp/Compiler/pstdint.h	/^      __extension__ typedef unsigned long long uint64_t;$/;"	t
uint64_t	lib/assimp/Compiler/pstdint.h	/^      typedef unsigned long long uint64_t;$/;"	t
uint64_t	lib/assimp/Compiler/pstdint.h	/^   typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	lib/assimp/Compiler/pstdint.h	/^   typedef unsigned long long uint64_t;$/;"	t
uint64_t	lib/vulkan/vk_platform.h	/^        typedef unsigned __int64 uint64_t;$/;"	t
uint8	lib/glm/detail/type_int.hpp	/^		typedef std::uint8_t				uint8;$/;"	t	namespace:glm::detail
uint8	lib/glm/detail/type_int.hpp	/^	typedef detail::uint8					uint8;$/;"	t	namespace:glm
uint8	lib/glm/fwd.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
uint8	lib/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
uint8_t	lib/__assimp/Compiler/pstdint.h	/^    typedef unsigned char uint8_t;$/;"	t
uint8_t	lib/assimp/Compiler/pstdint.h	/^    typedef unsigned char uint8_t;$/;"	t
uint8_t	lib/vulkan/vk_platform.h	/^        typedef unsigned __int8  uint8_t;$/;"	t
uint_fast16_t	lib/__assimp/Compiler/pstdint.h	/^typedef uint_least16_t uint_fast16_t;$/;"	t
uint_fast16_t	lib/assimp/Compiler/pstdint.h	/^typedef uint_least16_t uint_fast16_t;$/;"	t
uint_fast32_t	lib/__assimp/Compiler/pstdint.h	/^typedef uint_least32_t uint_fast32_t;$/;"	t
uint_fast32_t	lib/assimp/Compiler/pstdint.h	/^typedef uint_least32_t uint_fast32_t;$/;"	t
uint_fast64_t	lib/__assimp/Compiler/pstdint.h	/^  typedef uint_least64_t uint_fast64_t;$/;"	t
uint_fast64_t	lib/assimp/Compiler/pstdint.h	/^  typedef uint_least64_t uint_fast64_t;$/;"	t
uint_fast8_t	lib/__assimp/Compiler/pstdint.h	/^typedef  uint_least8_t  uint_fast8_t;$/;"	t
uint_fast8_t	lib/assimp/Compiler/pstdint.h	/^typedef  uint_least8_t  uint_fast8_t;$/;"	t
uint_least16_t	lib/__assimp/Compiler/pstdint.h	/^  typedef uint16_t uint_least16_t;$/;"	t
uint_least16_t	lib/assimp/Compiler/pstdint.h	/^  typedef uint16_t uint_least16_t;$/;"	t
uint_least32_t	lib/__assimp/Compiler/pstdint.h	/^  typedef uint32_t uint_least32_t;$/;"	t
uint_least32_t	lib/assimp/Compiler/pstdint.h	/^  typedef uint32_t uint_least32_t;$/;"	t
uint_least64_t	lib/__assimp/Compiler/pstdint.h	/^    typedef uint64_t uint_least64_t;$/;"	t
uint_least64_t	lib/assimp/Compiler/pstdint.h	/^    typedef uint64_t uint_least64_t;$/;"	t
uint_least8_t	lib/__assimp/Compiler/pstdint.h	/^  typedef  uint8_t  uint_least8_t;$/;"	t
uint_least8_t	lib/assimp/Compiler/pstdint.h	/^  typedef  uint8_t  uint_least8_t;$/;"	t
uint_t	lib/glm/detail/type_int.hpp	/^	typedef highp_uint					uint_t;$/;"	t	namespace:glm
uint_t	lib/glm/detail/type_int.hpp	/^	typedef lowp_uint					uint_t;$/;"	t	namespace:glm
uint_t	lib/glm/detail/type_int.hpp	/^	typedef mediump_uint				uint_t;$/;"	t	namespace:glm
uintmax_t	lib/__assimp/Compiler/pstdint.h	/^  typedef uint32_t uintmax_t;$/;"	t
uintmax_t	lib/__assimp/Compiler/pstdint.h	/^  typedef uint64_t uintmax_t;$/;"	t
uintmax_t	lib/assimp/Compiler/pstdint.h	/^  typedef uint32_t uintmax_t;$/;"	t
uintmax_t	lib/assimp/Compiler/pstdint.h	/^  typedef uint64_t uintmax_t;$/;"	t
uintptr_t	lib/__assimp/Compiler/pstdint.h	/^  typedef stdint_intptr_glue3(uint,stdint_intptr_bits,_t) uintptr_t;$/;"	t
uintptr_t	lib/assimp/Compiler/pstdint.h	/^     typedef stdint_intptr_glue3(uint,stdint_intptr_bits,_t) uintptr_t;$/;"	t
umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm
umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm
umat2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm
umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm
umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm
umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm
umat3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm
umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm
umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm
umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm
umat4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm
umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	lib/glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm
uniformBufferOffset	inc/shape/model.h	/^	VkDeviceSize uniformBufferOffset,  $/;"	m	class:Model	access:public
uniformBufferOffset	inc/shape/skinned.h	/^	VkDeviceSize uniformBufferOffset,  $/;"	m	class:Skinned	access:public
uniformFragment	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout uniformFragment;$/;"	m	struct:DescriptorSetLayouts	access:public
uniformVertex	/home/al/amvk/inc/state.h	/^	VkDescriptorSetLayout uniformVertex;$/;"	m	struct:DescriptorSetLayouts	access:public
uninitialize	lib/glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	e	enum:glm::ctor
unnormalizedCoordinates	lib/vulkan/vulkan.h	/^    VkBool32                unnormalizedCoordinates;$/;"	m	struct:VkSamplerCreateInfo	access:public
update	src/g_buffer.cpp	/^void GBuffer::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:GBuffer	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
update	src/scene_lights.cpp	/^void SceneLights::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:SceneLights	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
update	src/shape/model.cpp	/^void Model::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)$/;"	f	class:Model	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera)
update	src/shape/skinned.cpp	/^void Skinned::update(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera, uint32_t animationIndex \/* = 0 *\/)$/;"	f	class:Skinned	signature:(VkCommandBuffer& cmdBuffer, const Timer& timer, Camera& camera, uint32_t animationIndex )
update	src/shape/tquad.cpp	/^void TQuad::update(VkCommandBuffer& commandBuffer, const Timer& timer, Camera& camera)$/;"	f	class:TQuad	signature:(VkCommandBuffer& commandBuffer, const Timer& timer, Camera& camera)
updateFOV	src/camera.cpp	/^void Camera::updateFOV(float scrollDirection)$/;"	f	class:Camera	signature:(float scrollDirection)
updateOrientation	src/camera.cpp	/^void Camera::updateOrientation(double mouseX, double mouseY)$/;"	f	class:Camera	signature:(double mouseX, double mouseY)
updateUniformBuffers	src/renderer.cpp	/^void Renderer::updateUniformBuffers(const Timer& timer, Camera& camera)$/;"	f	class:Renderer	signature:(const Timer& timer, Camera& camera)
updateViewAngles	src/camera.cpp	/^void Camera::updateViewAngles()$/;"	f	class:Camera	signature:()
usage	lib/vulkan/vulkan.h	/^    VkBufferUsageFlags     usage;$/;"	m	struct:VkBufferCreateInfo	access:public
usage	lib/vulkan/vulkan.h	/^    VkImageUsageFlags        usage;$/;"	m	struct:VkImageCreateInfo	access:public
user	lib/__assimp/cimport.h	/^    char* user;$/;"	m	struct:aiLogStream	access:public
user	lib/assimp/cimport.h	/^    char* user;$/;"	m	struct:aiLogStream	access:public
uvec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_uvec1		uvec1;$/;"	t	namespace:glm
uvec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec2		uvec2;$/;"	t	namespace:glm
uvec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec3		uvec3;$/;"	t	namespace:glm
uvec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_uvec4		uvec4;$/;"	t	namespace:glm
v	lib/assimp/vector2.h	/^        TReal v[ 2 ];$/;"	m	union:aiVector2t::__anon17	access:public
v	lib/assimp/vector2.h	/^        float v[ 2 ];$/;"	m	union:aiVector2D::__anon19	access:public
v	lib/assimp/vector3.h	/^        TReal v[ 3 ];$/;"	m	union:aiVector3t::__anon9	access:public
v	lib/assimp/vector3.h	/^        float v[ 3 ];$/;"	m	union:aiVector3D::__anon11	access:public
v	lib/stb/stb_image.h	/^      int h,v;$/;"	m	struct:__anon63::__anon64	access:public
valid_loader_magic_value	lib/vulkan/vk_icd.h	/^static inline bool valid_loader_magic_value(void *pNewObject) {$/;"	f	signature:(void *pNewObject)
validate_uint32	lib/stb/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	lib/glm/detail/precision.hpp	/^			static const bool value = true;$/;"	m	struct:glm::detail::is_aligned	access:public
value	lib/glm/detail/precision.hpp	/^		static const bool value = false;$/;"	m	struct:glm::detail::is_aligned	access:public
value	lib/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
value	lib/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	access:private
value	lib/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	access:public
value	lib/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	access:public
value	lib/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	access:public
value	lib/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	access:public
value	lib/stb/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon66	access:public
value_address	lib/glm/detail/type_gentype.hpp	/^		value_const_pointer value_address() const{return value_pointer(this);}$/;"	f	struct:glm::detail::genType	access:public	signature:() const
value_address	lib/glm/detail/type_gentype.hpp	/^		value_pointer value_address(){return value_pointer(this);}$/;"	f	struct:glm::detail::genType	access:public	signature:()
value_const_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE const * value_const_pointer;$/;"	t	struct:glm::detail::genType	access:public
value_pointer	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE * value_pointer;$/;"	t	struct:glm::detail::genType	access:public
value_reference	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE & value_reference;$/;"	t	struct:glm::detail::genType	access:public
value_type	lib/glm/detail/type_gentype.hpp	/^		typedef VALTYPE value_type;$/;"	t	struct:glm::detail::genType	access:public
value_type	lib/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	access:public
value_type	lib/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
value_type	lib/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
value_type	lib/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
value_type	lib/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	access:public
value_type	lib/glm/gtc/quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tquat	access:public
value_type	lib/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	access:public
values	lib/stb/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon62	access:public
variableMultisampleRate	lib/vulkan/vulkan.h	/^    VkBool32    variableMultisampleRate;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
vec	lib/glm/detail/type_vec1.hpp	/^	struct vec<1, T, P>$/;"	s	namespace:glm
vec	lib/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1,-1,-2> const& that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1,-1,-2> const& that)
vec	lib/glm/detail/type_vec2.hpp	/^	struct vec<2, T, P>$/;"	s	namespace:glm
vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(T const & scalar, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & scalar, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)
vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & scalar)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & scalar)
vec	lib/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & that)
vec	lib/glm/detail/type_vec3.hpp	/^	struct vec<3, T, P>$/;"	s	namespace:glm
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, T const & y, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, T const & y, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & w)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(T const & x, detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v)$/;"	f	struct:glm::vec	access:public	signature:(T const & x, detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & z, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, T const & z, T const & w)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, detail::_swizzle<2, T, P, F0, F1, -1, -2> const & u)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<2, T, P, E0, E1, -1, -2> const & v, detail::_swizzle<2, T, P, F0, F1, -1, -2> const & u)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v, T const & w)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<3, T, P, E0, E1, E2, -1> const & v, T const & w)
vec	lib/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL vec(detail::_swizzle<4, T, P, E0, E1, E2, E3> const & that)$/;"	f	struct:glm::vec	access:public	signature:(detail::_swizzle<4, T, P, E0, E1, E2, E3> const & that)
vec	lib/glm/detail/type_vec4.hpp	/^	struct vec<4, T, P>$/;"	s	namespace:glm
vec1	lib/glm/gtc/vec1.hpp	/^	typedef highp_vec1				vec1;$/;"	t	namespace:glm
vec1	lib/glm/gtc/vec1.hpp	/^	typedef lowp_vec1				vec1;$/;"	t	namespace:glm
vec1	lib/glm/gtc/vec1.hpp	/^	typedef mediump_vec1			vec1;$/;"	t	namespace:glm
vec2	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec2			vec2;$/;"	t	namespace:glm
vec2	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec2			vec2;$/;"	t	namespace:glm
vec2	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec2		vec2;$/;"	t	namespace:glm
vec3	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec3			vec3;$/;"	t	namespace:glm
vec3	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec3			vec3;$/;"	t	namespace:glm
vec3	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec3		vec3;$/;"	t	namespace:glm
vec4	lib/glm/detail/type_vec.hpp	/^	typedef highp_vec4			vec4;$/;"	t	namespace:glm
vec4	lib/glm/detail/type_vec.hpp	/^	typedef lowp_vec4			vec4;$/;"	t	namespace:glm
vec4	lib/glm/detail/type_vec.hpp	/^	typedef mediump_vec4		vec4;$/;"	t	namespace:glm
vendorID	lib/vulkan/vulkan.h	/^    uint32_t                            vendorID;$/;"	m	struct:VkPhysicalDeviceProperties	access:public
vertex	/home/al/amvk/inc/state.h	/^	VkPipelineShaderStageCreateInfo vertex;$/;"	m	struct:ShaderInfo	access:public
vertexAttributeDescriptionCount	lib/vulkan/vulkan.h	/^    uint32_t                                    vertexAttributeDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
vertexBindingDescriptionCount	lib/vulkan/vulkan.h	/^    uint32_t                                    vertexBindingDescriptionCount;$/;"	m	struct:VkPipelineVertexInputStateCreateInfo	access:public
vertexBufferOffset	inc/shape/model.h	/^				 vertexBufferOffset, $/;"	m	class:Model	access:public
vertexBufferOffset	inc/shape/skinned.h	/^				 vertexBufferOffset, $/;"	m	class:Skinned	access:public
vertexBufferOffset	inc/shape/sphere.h	/^	VkDeviceSize vertexBufferOffset, indexBufferOffset;$/;"	m	class:Sphere	access:public
vertexCount	lib/vulkan/vulkan.h	/^    uint32_t    vertexCount;$/;"	m	struct:VkDrawIndirectCommand	access:public
vertexInputState	inc/creator/pipeline_builder.h	/^inline VkPipelineVertexInputStateCreateInfo vertexInputState($/;"	f	namespace:PipelineBuilder	signature:( VkVertexInputBindingDescription* bindings, uint32_t bindingsCount, VkVertexInputAttributeDescription* attributes, uint32_t attributesCount)
vertexOffset	lib/vulkan/vulkan.h	/^    int32_t     vertexOffset;$/;"	m	struct:VkDrawIndexedIndirectCommand	access:public
vertexPipelineStoresAndAtomics	lib/vulkan/vulkan.h	/^    VkBool32    vertexPipelineStoresAndAtomics;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
view	/home/al/amvk/inc/state.h	/^		glm::mat4 view;$/;"	m	struct:State::UBO	access:public
view	inc/g_buffer.h	/^	VkImageView view;$/;"	m	struct:FramebufferAttachment	access:public
view	inc/shape/model.h	/^		glm::mat4 view;$/;"	m	struct:Model::UBO	access:public
view	inc/shape/skinned.h	/^		glm::mat4 view;$/;"	m	struct:Skinned::UBO	access:public
view	inc/shape/tquad.h	/^		glm::mat4 view;$/;"	m	struct:TQuad::UBO	access:public
view	src/camera.cpp	/^glm::mat4& Camera::view()$/;"	f	class:Camera	signature:()
viewType	lib/vulkan/vulkan.h	/^    VkImageViewType            viewType;$/;"	m	struct:VkImageViewCreateInfo	access:public
viewportBoundsRange	lib/vulkan/vulkan.h	/^    float                 viewportBoundsRange[2];$/;"	m	struct:VkPhysicalDeviceLimits	access:public
viewportCount	lib/vulkan/vulkan.h	/^    uint32_t                              viewportCount;$/;"	m	struct:VkPipelineViewportStateCreateInfo	access:public
viewportStateDefault	inc/creator/pipeline_builder.h	/^inline VkPipelineViewportStateCreateInfo viewportStateDefault(VkExtent2D& extent)$/;"	f	namespace:PipelineBuilder	signature:(VkExtent2D& extent)
viewportStateDynamic	inc/creator/pipeline_builder.h	/^inline VkPipelineViewportStateCreateInfo viewportStateDynamic() $/;"	f	namespace:PipelineBuilder	signature:()
viewportSubPixelBits	lib/vulkan/vulkan.h	/^    uint32_t              viewportSubPixelBits;$/;"	m	struct:VkPhysicalDeviceLimits	access:public
visibleRegion	lib/vulkan/vulkan.h	/^    VkExtent2D    visibleRegion;$/;"	m	struct:VkDisplayModeParametersKHR	access:public
vs	lib/stb/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon65	access:public
vulkanState	/home/al/amvk/inc/state.h	/^	State(State const& vulkanState) = delete;$/;"	m	struct:State	access:public
vulkanState	/home/al/amvk/inc/state.h	/^    State& operator=(State const& vulkanState) = delete;$/;"	m	struct:State	access:public
w	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
w	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
w	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
w	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
w	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
w	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
w	lib/glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::vec::__anon42	access:public
w	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
w	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
w	lib/stb/stb_image.h	/^   int w,h;$/;"	m	struct:__anon74	access:public
w2	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
w_lores	lib/stb/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon65	access:public
waitIdle	src/renderer.cpp	/^void Renderer::waitIdle()$/;"	f	class:Renderer	signature:()
waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                                    waitSemaphoreCount;$/;"	m	struct:VkBindSparseInfo	access:public
waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                       waitSemaphoreCount;$/;"	m	struct:VkSubmitInfo	access:public
waitSemaphoreCount	lib/vulkan/vulkan.h	/^    uint32_t                 waitSemaphoreCount;$/;"	m	struct:VkPresentInfoKHR	access:public
warn	lib/__assimp/Logger.hpp	/^inline void Logger::warn(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
warn	lib/assimp/Logger.hpp	/^inline void Logger::warn(const std::string &message)$/;"	f	class:Assimp::Logger	signature:(const std::string &message)
weights	inc/shape/skinned.h	/^		glm::vec4 weights;$/;"	m	struct:Skinned::Vertex	access:public
wformat_saver	lib/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io
wideLines	lib/vulkan/vulkan.h	/^    VkBool32    wideLines;$/;"	m	struct:VkPhysicalDeviceFeatures	access:public
width	inc/g_buffer.h	/^	int32_t width, height;$/;"	m	class:GBuffer	access:public
width	inc/image_info.h	/^	uint32_t width, height;$/;"	m	class:ImageInfo	access:public
width	inc/texture_data.h	/^	int width, height, channels, size;$/;"	m	class:TextureData	access:public
width	lib/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	access:public
width	lib/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width	lib/vulkan/vulkan.h	/^    float    width;$/;"	m	struct:VkViewport	access:public
width	lib/vulkan/vulkan.h	/^    uint32_t                    width;$/;"	m	struct:VkFramebufferCreateInfo	access:public
width	lib/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent2D	access:public
width	lib/vulkan/vulkan.h	/^    uint32_t    width;$/;"	m	struct:VkExtent3D	access:public
width_	lib/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	access:private
window	lib/vulkan/vk_icd.h	/^    Window window;$/;"	m	struct:__anon82	access:public
window	lib/vulkan/vk_icd.h	/^    xcb_window_t window;$/;"	m	struct:__anon81	access:public
window	lib/vulkan/vulkan.h	/^    ANativeWindow*                    window;$/;"	m	struct:VkAndroidSurfaceCreateInfoKHR	access:public
window	lib/vulkan/vulkan.h	/^    Window                         window;$/;"	m	struct:VkXlibSurfaceCreateInfoKHR	access:public
window	lib/vulkan/vulkan.h	/^    xcb_window_t                  window;$/;"	m	struct:VkXcbSurfaceCreateInfoKHR	access:public
word	lib/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm
wordCount	lib/vulkan/libspirv.h	/^  const size_t wordCount;$/;"	m	struct:spv_const_binary_t	access:public
wordCount	lib/vulkan/libspirv.h	/^  size_t wordCount;$/;"	m	struct:spv_binary_t	access:public
words	lib/vulkan/libspirv.h	/^  const uint32_t* words;$/;"	m	struct:spv_parsed_instruction_t	access:public
writeCache	src/file_manager.cpp	/^void FileManager::writeCache(const char* cacheName, void* data, size_t size)$/;"	f	class:FileManager	signature:(const char* cacheName, void* data, size_t size)
writeMask	lib/vulkan/vulkan.h	/^    uint32_t       writeMask;$/;"	m	struct:VkStencilOpState	access:public
wstate_saver	lib/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io
ww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> ww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
www	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> www(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> wz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> wzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
wzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> wzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
x	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
x	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
x	lib/__assimp/vector2.h	/^    TReal x, y;$/;"	m	class:aiVector2t	access:public
x	lib/__assimp/vector2.h	/^    ai_real x, y;$/;"	m	struct:aiVector2D	access:public
x	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
x	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
x	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
x	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
x	lib/assimp/vector2.h	/^            TReal x, y;$/;"	m	struct:aiVector2t::__anon17::__anon18	access:public
x	lib/assimp/vector2.h	/^            float x, y;$/;"	m	struct:aiVector2D::__anon19::__anon20	access:public
x	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
x	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
x	lib/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::vec::__anon33	access:public
x	lib/glm/detail/type_vec1.hpp	/^			T x;$/;"	m	struct:glm::vec	access:public
x	lib/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon34	access:public
x	lib/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon50::__anon51	access:public
x	lib/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	access:public
x	lib/glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon54	access:public
x	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
x	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
x	lib/glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon47	access:public
x	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
x	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
x	lib/glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::vec::__anon39	access:public
x	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
x	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
x	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
x	lib/vulkan/vulkan.h	/^    float    x;$/;"	m	struct:VkViewport	access:public
x	lib/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset2D	access:public
x	lib/vulkan/vulkan.h	/^    int32_t    x;$/;"	m	struct:VkOffset3D	access:public
x	lib/vulkan/vulkan.h	/^    uint32_t    x;$/;"	m	struct:VkDispatchIndirectCommand	access:public
xw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<1, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<1, T, P> &v)
xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> xz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> xzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
xzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
xzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> xzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
y	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
y	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
y	lib/__assimp/vector2.h	/^    TReal x, y;$/;"	m	class:aiVector2t	access:public
y	lib/__assimp/vector2.h	/^    ai_real x, y;$/;"	m	struct:aiVector2D	access:public
y	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
y	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
y	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
y	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
y	lib/assimp/vector2.h	/^            TReal x, y;$/;"	m	struct:aiVector2t::__anon17::__anon18	access:public
y	lib/assimp/vector2.h	/^            float x, y;$/;"	m	struct:aiVector2D::__anon19::__anon20	access:public
y	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
y	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
y	lib/glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::vec::__anon50::__anon51	access:public
y	lib/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	access:public
y	lib/glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::vec::__anon55	access:public
y	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
y	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
y	lib/glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon48	access:public
y	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
y	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
y	lib/glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::vec::__anon40	access:public
y	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
y	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
y	lib/stb/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon63::__anon64	access:public
y	lib/vulkan/vulkan.h	/^    float    y;$/;"	m	struct:VkViewport	access:public
y	lib/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset2D	access:public
y	lib/vulkan/vulkan.h	/^    int32_t    y;$/;"	m	struct:VkOffset3D	access:public
y	lib/vulkan/vulkan.h	/^    uint32_t    y;$/;"	m	struct:VkDispatchIndirectCommand	access:public
ypos	lib/stb/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon65	access:public
ystep	lib/stb/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon65	access:public
yw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> ywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
ywzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> ywzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<2, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<2, T, P> &v)
yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> yz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> yzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
yzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
yzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> yzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
z	lib/__assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
z	lib/__assimp/quaternion.h	/^    ai_real w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
z	lib/__assimp/vector3.h	/^    TReal x, y, z;$/;"	m	class:aiVector3t	access:public
z	lib/__assimp/vector3.h	/^    ai_real x, y, z;$/;"	m	struct:aiVector3D	access:public
z	lib/assimp/quaternion.h	/^    TReal w, x, y, z;$/;"	m	class:aiQuaterniont	access:public
z	lib/assimp/quaternion.h	/^    float w, x, y, z;$/;"	m	struct:aiQuaternion	access:public
z	lib/assimp/vector3.h	/^            TReal x, y, z;$/;"	m	struct:aiVector3t::__anon9::__anon10	access:public
z	lib/assimp/vector3.h	/^            float x, y, z;$/;"	m	struct:aiVector3D::__anon11::__anon12	access:public
z	lib/glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::vec::__anon43::__anon44	access:public
z	lib/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	access:public
z	lib/glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon49	access:public
z	lib/glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::vec::__anon35::__anon36	access:public
z	lib/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	access:public
z	lib/glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::vec::__anon41	access:public
z	lib/glm/gtc/quaternion.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tquat::__anon56::__anon57	access:public
z	lib/glm/gtc/quaternion.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::tquat	access:public
z	lib/vulkan/vulkan.h	/^    int32_t    z;$/;"	m	struct:VkOffset3D	access:public
z	lib/vulkan/vulkan.h	/^    uint32_t    z;$/;"	m	struct:VkDispatchIndirectCommand	access:public
z_distance	lib/stb/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon67	access:public
z_expandable	lib/stb/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon67	access:public
z_length	lib/stb/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon67	access:public
zbuffer	lib/stb/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon67	access:public
zbuffer_end	lib/stb/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon67	access:public
zout	lib/stb/stb_image.h	/^   char *zout;$/;"	m	struct:__anon67	access:public
zout_end	lib/stb/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon67	access:public
zout_start	lib/stb/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon67	access:public
zw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zwzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zwzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zxzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zxzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zywx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zywy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zywz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zywz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zyzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zyzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<2, T, P> zz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzww	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzww(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzwx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzwy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzwz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzwz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzxw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzxx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzxy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzxz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzxz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzyw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzyx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzyy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzyz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzyz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<3, T, P> zzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzzw	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzw(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzx(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzzx	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzx(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzy(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzzy	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzy(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
zzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzz(const glm::vec<3, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<3, T, P> &v)
zzzz	lib/glm/gtx/vec_swizzle.hpp	/^	GLM_INLINE glm::vec<4, T, P> zzzz(const glm::vec<4, T, P> &v) {$/;"	f	namespace:glm	signature:(const glm::vec<4, T, P> &v)
~AnimNode	src/shape/anim_node.cpp	/^AnimNode::~AnimNode()$/;"	f	class:AnimNode	signature:()
~BufferInfo	src/buffer_info.cpp	/^BufferInfo::~BufferInfo() $/;"	f	class:BufferInfo	signature:()
~CmdPass	src/cmd_pass.cpp	/^CmdPass::~CmdPass()$/;"	f	class:CmdPass	signature:()
~Engine	src/engine.cpp	/^Engine::~Engine() $/;"	f	class:Engine	signature:()
~GBuffer	src/g_buffer.cpp	/^GBuffer::~GBuffer() $/;"	f	class:GBuffer	signature:()
~IOStream	lib/__assimp/IOStream.hpp	/^inline IOStream::~IOStream()$/;"	f	class:Assimp::IOStream	signature:()
~IOStream	lib/assimp/IOStream.hpp	/^inline IOStream::~IOStream()$/;"	f	class:Assimp::IOStream	signature:()
~IOSystem	lib/__assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::~IOSystem()$/;"	f	class:Assimp::IOSystem	signature:()
~IOSystem	lib/assimp/IOSystem.hpp	/^AI_FORCE_INLINE IOSystem::~IOSystem()$/;"	f	class:Assimp::IOSystem	signature:()
~ImageInfo	src/image_info.cpp	/^ImageInfo::~ImageInfo() $/;"	f	class:ImageInfo	signature:()
~InputManager	src/input_manager.cpp	/^InputManager::~InputManager()$/;"	f	class:InputManager	signature:()
~LogStream	lib/__assimp/LogStream.hpp	/^    virtual ~LogStream() {$/;"	f	class:Assimp::LogStream	access:public	signature:()
~LogStream	lib/assimp/LogStream.hpp	/^    virtual ~LogStream() {$/;"	f	class:Assimp::LogStream	access:public	signature:()
~Logger	lib/__assimp/Logger.hpp	/^inline  Logger::~Logger()$/;"	f	class:Assimp::Logger	signature:()
~Logger	lib/assimp/Logger.hpp	/^inline  Logger::~Logger()$/;"	f	class:Assimp::Logger	signature:()
~Model	src/shape/model.cpp	/^Model::~Model() $/;"	f	class:Model	signature:()
~ProgressHandler	lib/__assimp/ProgressHandler.hpp	/^    virtual ~ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:()
~ProgressHandler	lib/assimp/ProgressHandler.hpp	/^    virtual ~ProgressHandler () {$/;"	f	class:Assimp::ProgressHandler	access:public	signature:()
~Renderer	src/renderer.cpp	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
~SceneLights	src/scene_lights.cpp	/^SceneLights::~SceneLights() $/;"	f	class:SceneLights	signature:()
~Skinned	src/shape/skinned.cpp	/^Skinned::~Skinned() $/;"	f	class:Skinned	signature:()
~SwapchainManager	src/swapchain_manager.cpp	/^SwapchainManager::~SwapchainManager() $/;"	f	class:SwapchainManager	signature:()
~TQuad	src/shape/tquad.cpp	/^TQuad::~TQuad()$/;"	f	class:TQuad	signature:()
~Task	inc/task_manager.h	/^	virtual ~Task() {}$/;"	f	class:Task	access:public	signature:()
~TaskManager	src/task_manager.cpp	/^TaskManager::~TaskManager() $/;"	f	class:TaskManager	signature:()
~TextureData	src/texture_data.cpp	/^TextureData::~TextureData()$/;"	f	class:TextureData	signature:()
~TextureManager	src/texture_manager.cpp	/^TextureManager::~TextureManager()$/;"	f	class:TextureManager	signature:()
~Window	src/window.cpp	/^Window::~Window() $/;"	f	class:Window	signature:()
~aiAnimMesh	lib/__assimp/mesh.h	/^    ~aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
~aiAnimMesh	lib/assimp/mesh.h	/^    ~aiAnimMesh()$/;"	f	struct:aiAnimMesh	access:public	signature:()
~aiAnimation	lib/__assimp/anim.h	/^    ~aiAnimation() {$/;"	f	struct:aiAnimation	access:public	signature:()
~aiAnimation	lib/assimp/anim.h	/^    ~aiAnimation()$/;"	f	struct:aiAnimation	access:public	signature:()
~aiBone	lib/__assimp/mesh.h	/^    ~aiBone()$/;"	f	struct:aiBone	access:public	signature:()
~aiBone	lib/assimp/mesh.h	/^    ~aiBone()$/;"	f	struct:aiBone	access:public	signature:()
~aiExportDataBlob	lib/__assimp/cexport.h	/^    ~aiExportDataBlob() { delete [] static_cast<unsigned char*>( data ); delete next; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
~aiExportDataBlob	lib/assimp/cexport.h	/^    ~aiExportDataBlob() { delete [] static_cast<unsigned char*>( data ); delete next; }$/;"	f	struct:aiExportDataBlob	access:public	signature:()
~aiFace	lib/__assimp/mesh.h	/^    ~aiFace()$/;"	f	struct:aiFace	access:public	signature:()
~aiFace	lib/assimp/mesh.h	/^    ~aiFace()$/;"	f	struct:aiFace	access:public	signature:()
~aiMaterialProperty	lib/__assimp/material.h	/^    ~aiMaterialProperty()   {$/;"	f	struct:aiMaterialProperty	access:public	signature:()
~aiMaterialProperty	lib/assimp/material.h	/^    ~aiMaterialProperty()   {$/;"	f	struct:aiMaterialProperty	access:public	signature:()
~aiMesh	lib/__assimp/mesh.h	/^    ~aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
~aiMesh	lib/assimp/mesh.h	/^    ~aiMesh()$/;"	f	struct:aiMesh	access:public	signature:()
~aiMeshAnim	lib/__assimp/anim.h	/^    ~aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
~aiMeshAnim	lib/assimp/anim.h	/^    ~aiMeshAnim()$/;"	f	struct:aiMeshAnim	access:public	signature:()
~aiMeshMorphAnim	lib/__assimp/anim.h	/^    ~aiMeshMorphAnim()$/;"	f	struct:aiMeshMorphAnim	access:public	signature:()
~aiMeshMorphKey	lib/__assimp/anim.h	/^    ~aiMeshMorphKey()$/;"	f	struct:aiMeshMorphKey	access:public	signature:()
~aiMetadata	lib/__assimp/metadata.h	/^    ~aiMetadata() {$/;"	f	struct:aiMetadata	access:public	signature:()
~aiMetadata	lib/assimp/metadata.h	/^    ~aiMetadata()$/;"	f	struct:aiMetadata	access:public	signature:()
~aiNode	lib/assimp/scene.h	/^    ~aiNode()$/;"	f	struct:aiNode	access:public	signature:()
~aiNodeAnim	lib/__assimp/anim.h	/^    ~aiNodeAnim() {$/;"	f	struct:aiNodeAnim	access:public	signature:()
~aiNodeAnim	lib/assimp/anim.h	/^    ~aiNodeAnim()$/;"	f	struct:aiNodeAnim	access:public	signature:()
~aiTexture	lib/__assimp/texture.h	/^    ~aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
~aiTexture	lib/assimp/texture.h	/^    ~aiTexture ()$/;"	f	struct:aiTexture	access:public	signature:()
